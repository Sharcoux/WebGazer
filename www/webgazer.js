/*! 
 WebGazer.js: Democratizing Webcam Eye Tracking on the Browser
 Copyright (c) 2016, Brown WebGazer Team
 Licensed under GPLv3. Companies with a valuation of less than $1M can use WebGazer.js under LGPLv3.
  */
var M$ = Object.defineProperty;
var B$ = (n, e, t) => e in n ? M$(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var Re = (n, e, t) => B$(n, typeof e != "symbol" ? e + "" : e, t);
function V$(n, e) {
  for (var t = 0; t < e.length; t++) {
    const s = e[t];
    if (typeof s != "string" && !Array.isArray(s)) {
      for (const r in s)
        if (r !== "default" && !(r in n)) {
          const o = Object.getOwnPropertyDescriptor(s, r);
          o && Object.defineProperty(n, r, o.get ? o : {
            enumerable: !0,
            get: () => s[r]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W$ = 1e-7, U$ = 1e-4;
class Hy {
  constructor(e, t) {
    this.backend = e, this.dataMover = t, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(e) {
    return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e);
  }
  set(e, t) {
    this.dataIdsCount++, this.data.set(e, t);
  }
  has(e) {
    return this.data.has(e);
  }
  delete(e) {
    return this.dataIdsCount--, this.data.delete(e);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class bp {
  refCount(e) {
    return Bn("refCount");
  }
  incRef(e) {
    return Bn("incRef");
  }
  timerAvailable() {
    return !0;
  }
  time(e) {
    return Bn("time");
  }
  read(e) {
    return Bn("read");
  }
  readSync(e) {
    return Bn("readSync");
  }
  readToGPU(e, t) {
    return Bn("readToGPU");
  }
  numDataIds() {
    return Bn("numDataIds");
  }
  disposeData(e, t) {
    return Bn("disposeData");
  }
  write(e, t, s) {
    return Bn("write");
  }
  move(e, t, s, r, o) {
    return Bn("move");
  }
  memory() {
    return Bn("memory");
  }
  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
  floatPrecision() {
    return Bn("floatPrecision");
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? W$ : U$;
  }
  dispose() {
    return Bn("dispose");
  }
}
function Bn(n) {
  throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G$(n) {
  let e = n.length, t = 0;
  for (; e > 0; )
    t = Math.random() * e | 0, e--, Ro(n, e, t);
}
function oo(n, e, t) {
  return Math.max(n, Math.min(e, t));
}
function xp(n) {
  return n % 2 === 0 ? n : n + 1;
}
function Ro(n, e, t) {
  const s = n[e];
  n[e] = n[t], n[t] = s;
}
function H$(n) {
  let e = 0;
  for (let t = 0; t < n.length; t++)
    e += n[t];
  return e;
}
function N(n, e) {
  if (!n)
    throw new Error(typeof e == "string" ? e : e());
}
function Pn(n, e, t = "") {
  N(He(n, e), () => t + ` Shapes ${n} and ${e} must match`);
}
function pa(n) {
  N(n != null, () => "The input to the tensor constructor must be a non-null value.");
}
function Ko(n, e = [], t = !1) {
  if (e == null && (e = []), Array.isArray(n) || Hs(n) && !t)
    for (let s = 0; s < n.length; ++s)
      Ko(n[s], e, t);
  else
    e.push(n);
  return e;
}
function Z(n) {
  if (n.length === 0)
    return 1;
  let e = n[0];
  for (let t = 1; t < n.length; t++)
    e *= n[t];
  return e;
}
function He(n, e) {
  if (n === e)
    return !0;
  if (n == null || e == null || n.length !== e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (n[t] !== e[t])
      return !1;
  return !0;
}
function Xo(n) {
  return n % 1 === 0;
}
function gd(n) {
  const e = Math.ceil(Math.sqrt(n));
  return [e, Math.ceil(n / e)];
}
function Bo(n, e) {
  return e <= n.length ? n : n + " ".repeat(e - n.length);
}
function Kg(n, e = (r) => 0, t, s = setTimeout) {
  return new Promise((r, o) => {
    let a = 0;
    const i = () => {
      if (n()) {
        r();
        return;
      }
      a++;
      const l = e(a);
      if (t != null && a >= t) {
        o();
        return;
      }
      s(i, l);
    };
    i();
  });
}
function jy(n, e) {
  let t = 1, s = -1;
  for (let o = 0; o < n.length; ++o)
    if (n[o] >= 0)
      t *= n[o];
    else if (n[o] === -1) {
      if (s !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);
      s = o;
    } else if (n[o] < 0)
      throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);
  if (s === -1) {
    if (e > 0 && e !== t)
      throw Error(`Size(${e}) must match the product of shape ${n}`);
    return n;
  }
  if (t === 0)
    throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);
  if (e % t !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t}`);
  const r = n.slice();
  return r[s] = e / t, r;
}
function ze(n, e) {
  const t = e.length;
  return n = n == null ? e.map((s, r) => r) : [].concat(n), N(n.every((s) => s >= -t && s < t), () => `All values in axis param must be in range [-${t}, ${t}) but got axis ${n}`), N(n.every((s) => Xo(s)), () => `All values in axis param must be integers but got axis ${n}`), n.map((s) => s < 0 ? t + s : s);
}
function Rr(n, e) {
  const t = [], s = [], r = e != null && Array.isArray(e) && e.length === 0, o = e == null || r ? null : ze(e, n).sort();
  let a = 0;
  for (let i = 0; i < n.length; ++i) {
    if (o != null) {
      if (o[a] === i && n[i] !== 1)
        throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);
      (o[a] == null || o[a] > i) && n[i] === 1 && (t.push(n[i]), s.push(i)), o[a] <= i && a++;
    }
    n[i] !== 1 && (t.push(n[i]), s.push(i));
  }
  return { newShape: t, keptDims: s };
}
function Ht(n, e) {
  let t = null;
  if (n == null || n === "float32")
    t = new Float32Array(e);
  else if (n === "int32")
    t = new Int32Array(e);
  else if (n === "bool")
    t = new Uint8Array(e);
  else
    throw new Error(`Unknown data type ${n}`);
  return t;
}
function Wt(n, e) {
  let t = null;
  if (n == null || n === "float32")
    t = new Float32Array(e);
  else if (n === "int32")
    t = new Int32Array(e);
  else if (n === "bool")
    t = new Uint8Array(e);
  else if (n === "string")
    t = new Array(e);
  else
    throw new Error(`Unknown data type ${n}`);
  return t;
}
function j$(n, e) {
  for (let t = 0; t < n.length; t++) {
    const s = n[t];
    if (isNaN(s) || !isFinite(s))
      throw Error(`A tensor of type ${e} being uploaded contains ${s}.`);
  }
}
function q$(n) {
  return n === "bool" || n === "complex64" || n === "float32" || n === "int32" || n === "string";
}
function qy(n, e) {
  return !(e === "complex64" || e === "float32" && n !== "complex64" || e === "int32" && n !== "float32" && n !== "complex64" || e === "bool" && n === "bool");
}
function Hs(n) {
  return n instanceof Float32Array || n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray;
}
function yd(n) {
  if (n === "float32" || n === "int32")
    return 4;
  if (n === "complex64")
    return 8;
  if (n === "bool")
    return 1;
  throw new Error(`Unknown dtype ${n}`);
}
function K$(n) {
  if (n == null)
    return 0;
  let e = 0;
  return n.forEach((t) => e += t.length), e;
}
function oi(n) {
  return typeof n == "string" || n instanceof String;
}
function X$(n) {
  return typeof n == "boolean";
}
function bd(n) {
  return typeof n == "number";
}
function ai(n) {
  return Array.isArray(n) ? ai(n[0]) : n instanceof Float32Array ? "float32" : n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray ? "int32" : bd(n) ? "float32" : oi(n) ? "string" : X$(n) ? "bool" : "float32";
}
function xd(n) {
  return !!(n && n.constructor && n.call && n.apply);
}
function wd(n, e) {
  for (let t = e; t < n; ++t)
    if (n % t === 0)
      return t;
  return n;
}
function ke(n) {
  const e = n.length;
  if (e < 2)
    return [];
  const t = new Array(e - 1);
  t[e - 2] = n[e - 1];
  for (let s = e - 3; s >= 0; --s)
    t[s] = t[s + 1] * n[s + 1];
  return t;
}
function Ky(n, e, t, s = !1) {
  const r = new Array();
  if (e.length === 1) {
    const o = e[0] * (s ? 2 : 1);
    for (let a = 0; a < o; a++)
      r[a] = t[n + a];
  } else {
    const o = e[0], a = e.slice(1), i = a.reduce((l, c) => l * c) * (s ? 2 : 1);
    for (let l = 0; l < o; l++)
      r[l] = Ky(n + l * i, a, t, s);
  }
  return r;
}
function us(n, e, t = !1) {
  if (n.length === 0)
    return e[0];
  const s = n.reduce((r, o) => r * o) * (t ? 2 : 1);
  if (s === 0)
    return [];
  if (s !== e.length)
    throw new Error(`[${n}] does not match the input size ${e.length}${t ? " for a complex tensor" : ""}.`);
  return Ky(0, n, e, t);
}
function wp(n, e) {
  const t = sn(n, e);
  for (let s = 0; s < t.length; s++)
    t[s] = 1;
  return t;
}
function sn(n, e) {
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(n);
  if (e === "int32")
    return new Int32Array(n);
  if (e === "bool")
    return new Uint8Array(n);
  throw new Error(`Unknown data type ${e}`);
}
function Xy(n, e) {
  const t = n.reduce((s, r) => s * r, 1);
  if (e == null || e === "float32")
    return us(n, new Float32Array(t));
  if (e === "int32")
    return us(n, new Int32Array(t));
  if (e === "bool")
    return us(n, new Uint8Array(t));
  throw new Error(`Unknown data type ${e}`);
}
function Yy(n) {
  n.forEach((e) => {
    N(Number.isInteger(e) && e >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${n}].`);
  });
}
function Vs(n, e, t) {
  if (e === 0)
    return 0;
  if (e === 1)
    return n[0];
  let s = n[n.length - 1];
  for (let r = 0; r < n.length - 1; ++r)
    s += t[r] * n[r];
  return s;
}
function fa(n, e, t) {
  if (e === 0)
    return [];
  if (e === 1)
    return [n];
  const s = new Array(e);
  for (let r = 0; r < s.length - 1; ++r)
    s[r] = Math.floor(n / t[r]), n -= s[r] * t[r];
  return s[s.length - 1] = n, s;
}
function Yo(n) {
  return n && n.then && typeof n.then == "function";
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xg = "tfjsflags";
class Y$ {
  // tslint:disable-next-line: no-any
  constructor(e) {
    this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = Z$, this.populateURLFlags();
  }
  setPlatform(e, t) {
    this.platform != null && (K().getBool("IS_TEST") || K().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)), this.platformName = e, this.platform = t;
  }
  registerFlag(e, t, s) {
    if (this.flagRegistry[e] = { evaluationFn: t, setHook: s }, this.urlFlags[e] != null) {
      const r = this.urlFlags[e];
      K().getBool("IS_TEST") || K().getBool("PROD") || console.warn(`Setting feature override from URL ${e}: ${r}.`), this.set(e, r);
    }
  }
  async getAsync(e) {
    return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]);
  }
  get(e) {
    if (e in this.flags)
      return this.flags[e];
    const t = this.evaluateFlag(e);
    if (Yo(t))
      throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[e] = t, this.flags[e];
  }
  getNumber(e) {
    return this.get(e);
  }
  getBool(e) {
    return this.get(e);
  }
  getFlags() {
    return this.flags;
  }
  // For backwards compatibility.
  get features() {
    return this.flags;
  }
  set(e, t) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot set flag ${e} as it has not been registered.`);
    this.flags[e] = t, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t);
  }
  evaluateFlag(e) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
    return this.flagRegistry[e].evaluationFn();
  }
  setFlags(e) {
    this.flags = Object.assign({}, e);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u")
      return;
    const e = this.getQueryParams(this.global.location.search);
    Xg in e && e[Xg].split(",").forEach((s) => {
      const [r, o] = s.split(":");
      this.urlFlags[r] = Q$(r, o);
    });
  }
}
function Z$(n) {
  const e = {};
  return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (t, ...s) => (J$(e, s[0], s[1]), s.join("="))), e;
}
function J$(n, e, t) {
  n[decodeURIComponent(e)] = decodeURIComponent(t || "");
}
function Q$(n, e) {
  if (e = e.toLowerCase(), e === "true" || e === "false")
    return e === "true";
  if (`${+e}` === e)
    return +e;
  throw new Error(`Could not parse value flag value ${e} for flag ${n}.`);
}
function K() {
  return Zy;
}
let Zy = null;
function eC(n) {
  Zy = n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Gh;
function Jy() {
  if (Gh == null) {
    let n;
    if (typeof window < "u")
      n = window;
    else if (typeof global < "u")
      n = global;
    else if (typeof process < "u")
      n = process;
    else if (typeof self < "u")
      n = self;
    else
      throw new Error("Could not find a global object");
    Gh = n;
  }
  return Gh;
}
function tC() {
  const n = Jy();
  return n._tfGlobals == null && (n._tfGlobals = /* @__PURE__ */ new Map()), n._tfGlobals;
}
function vp(n, e) {
  const t = tC();
  if (t.has(n))
    return t.get(n);
  {
    const s = e();
    return t.set(n, s), t.get(n);
  }
}
const Gc = "Abs", ii = "Acos", li = "Acosh", ma = "Add", Hc = "AddN", Ip = "All", $p = "Any", jc = "ArgMax", qc = "ArgMin", ci = "Asin", ui = "Asinh", hi = "Atan", di = "Atanh", pi = "Atan2", Kc = "AvgPool", Cp = "AvgPoolGrad", Xc = "AvgPool3D", Sp = "AvgPool3DGrad", Yc = "BatchMatMul", Zc = "BatchToSpaceND", Np = "Bincount", nC = "BroadcastTo", kp = "BroadcastArgs", fi = "Cast", mi = "Ceil", gi = "ClipByValue", Tp = "Complex", Jc = "ComplexAbs", Qc = "Concat", eu = "Conv2D", Ep = "Conv2DBackpropFilter", tu = "Conv2DBackpropInput", nu = "Conv3D", Dp = "Conv3DBackpropFilterV2", Ap = "Conv3DBackpropInputV2", yi = "Cos", bi = "Cosh", Rp = "Cumprod", su = "Cumsum", Fp = "CropAndResize", _p = "DenseBincount", Op = "DepthToSpace", ru = "DepthwiseConv2dNative", Lp = "DepthwiseConv2dNativeBackpropFilter", Pp = "DepthwiseConv2dNativeBackpropInput", zp = "Diag", ou = "Dilation2D", vd = "Dilation2DBackpropInput", Id = "Dilation2DBackpropFilter", xi = "RealDiv", Mp = "Einsum", wi = "Elu", Bp = "EluGrad", vi = "Erf", au = "Equal", Ii = "Exp", iu = "ExpandDims", $i = "Expm1", Vp = "FFT", Wp = "Fill", Up = "FlipLeftRight", Ci = "Floor", Si = "FloorDiv", lu = "FusedBatchNorm", cu = "GatherV2", Gp = "GatherNd", uu = "Greater", Ni = "GreaterEqual", ki = "Identity", Hp = "IFFT", jp = "Imag", Ti = "IsFinite", Ei = "IsInf", Di = "IsNan", hu = "LeakyRelu", du = "Less", pu = "LessEqual", qp = "LinSpace", Ai = "Log", Ri = "Log1p", fu = "LogicalAnd", mu = "LogicalNot", gu = "LogicalOr", sC = "LogSoftmax", yu = "LRN", Kp = "LRNGrad", bu = "Max", Fi = "Maximum", xu = "MaxPool", Xp = "MaxPoolGrad", wu = "MaxPool3D", Yp = "MaxPool3DGrad", Zp = "MaxPoolWithArgmax", vu = "Mean", Iu = "Min", _i = "Minimum", $u = "MirrorPad", Oi = "Mod", Jp = "Multinomial", Li = "Multiply", Cu = "Neg", Su = "NotEqual", Qp = "NonMaxSuppressionV3", ef = "NonMaxSuppressionV4", tf = "NonMaxSuppressionV5", Nu = "OnesLike", ku = "OneHot", Tu = "Pack", Eu = "PadV2", Pi = "Pow", Du = "Prelu", Au = "Prod", nf = "RaggedGather", sf = "RaggedTensorToTensor", rf = "Range", of = "Real", zi = "Reciprocal", Mi = "Relu", Ru = "Reshape", Fu = "ResizeNearestNeighbor", af = "ResizeNearestNeighborGrad", _u = "ResizeBilinear", lf = "ResizeBilinearGrad", Bi = "Relu6", Ou = "Reverse", Vi = "Round", Wi = "Rsqrt", cf = "ScatterNd", uf = "SearchSorted", Lu = "Select", Ui = "Selu", Pu = "Slice", Gi = "Sin", Hi = "Sinh", ji = "Sign", qi = "Sigmoid", Ki = "Softplus", Xi = "Sqrt", zu = "Sum", Mu = "SpaceToBatchND", Bu = "SplitV", Vu = "Softmax", hf = "SparseFillEmptyRows", df = "SparseReshape", pf = "SparseSegmentMean", ff = "SparseSegmentSum", mf = "SparseToDense", Yi = "SquaredDifference", gf = "Square", yf = "StridedSlice", bf = "StringNGrams", xf = "StringSplit", wf = "StringToHashBucketFast", Zi = "Sub", Ji = "Tan", Qi = "Tanh", el = "Tile", vf = "TopK", If = "Transform", Vo = "Transpose", $f = "Unique", Wu = "Unpack", Uu = "UnsortedSegmentSum", Gu = "ZerosLike", tl = "Step", $d = "FromPixels", Cf = "RotateWithOffset", ac = "_FusedMatMul", ic = "FusedConv2D", lc = "FusedDepthwiseConv2D";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vn(...n) {
  K().getBool("IS_TEST") || K().getBool("PROD") || console.warn(...n);
}
function rC(...n) {
  K().getBool("IS_TEST") || K().getBool("PROD") || console.log(...n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cc = vp("kernelRegistry", () => /* @__PURE__ */ new Map()), Cd = vp("gradRegistry", () => /* @__PURE__ */ new Map());
function Sd(n, e) {
  const t = e1(n, e);
  return cc.get(t);
}
function Yg(n) {
  return Cd.get(n);
}
function Zg(n) {
  const e = cc.entries(), t = [];
  for (; ; ) {
    const { done: s, value: r } = e.next();
    if (s)
      break;
    const [o, a] = r, [i] = o.split("_");
    i === n && t.push(a);
  }
  return t;
}
function Qy(n) {
  const { kernelName: e, backendName: t } = n, s = e1(e, t);
  cc.has(s) && Vn(`The kernel '${e}' for backend '${t}' is already registered`), cc.set(s, n);
}
function oC(n) {
  const { kernelName: e } = n;
  Cd.has(e) && K().getBool("DEBUG") && Vn(`Overriding the gradient for '${e}'`), Cd.set(e, n);
}
function e1(n, e) {
  return `${e}_${n}`;
}
var ss = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function t1(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
function aC(n) {
  if (n.__esModule) return n;
  var e = n.default;
  if (typeof e == "function") {
    var t = function s() {
      return this instanceof s ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(n).forEach(function(s) {
    var r = Object.getOwnPropertyDescriptor(n, s);
    Object.defineProperty(t, s, r.get ? r : {
      enumerable: !0,
      get: function() {
        return n[s];
      }
    });
  }), t;
}
var n1 = dt, rs = null;
try {
  rs = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    13,
    2,
    96,
    0,
    1,
    127,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    3,
    7,
    6,
    0,
    1,
    1,
    1,
    1,
    1,
    6,
    6,
    1,
    127,
    1,
    65,
    0,
    11,
    7,
    50,
    6,
    3,
    109,
    117,
    108,
    0,
    1,
    5,
    100,
    105,
    118,
    95,
    115,
    0,
    2,
    5,
    100,
    105,
    118,
    95,
    117,
    0,
    3,
    5,
    114,
    101,
    109,
    95,
    115,
    0,
    4,
    5,
    114,
    101,
    109,
    95,
    117,
    0,
    5,
    8,
    103,
    101,
    116,
    95,
    104,
    105,
    103,
    104,
    0,
    0,
    10,
    191,
    1,
    6,
    4,
    0,
    35,
    0,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    126,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    127,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    128,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    129,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    130,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11
  ])), {}).exports;
} catch {
}
function dt(n, e, t) {
  this.low = n | 0, this.high = e | 0, this.unsigned = !!t;
}
dt.prototype.__isLong__;
Object.defineProperty(dt.prototype, "__isLong__", { value: !0 });
function zn(n) {
  return (n && n.__isLong__) === !0;
}
dt.isLong = zn;
var Jg = {}, Qg = {};
function mo(n, e) {
  var t, s, r;
  return e ? (n >>>= 0, (r = 0 <= n && n < 256) && (s = Qg[n], s) ? s : (t = pt(n, (n | 0) < 0 ? -1 : 0, !0), r && (Qg[n] = t), t)) : (n |= 0, (r = -128 <= n && n < 128) && (s = Jg[n], s) ? s : (t = pt(n, n < 0 ? -1 : 0, !1), r && (Jg[n] = t), t));
}
dt.fromInt = mo;
function os(n, e) {
  if (isNaN(n))
    return e ? Qr : as;
  if (e) {
    if (n < 0)
      return Qr;
    if (n >= s1)
      return a1;
  } else {
    if (n <= -t0)
      return En;
    if (n + 1 >= t0)
      return o1;
  }
  return n < 0 ? os(-n, e).neg() : pt(n % Zo | 0, n / Zo | 0, e);
}
dt.fromNumber = os;
function pt(n, e, t) {
  return new dt(n, e, t);
}
dt.fromBits = pt;
var uc = Math.pow;
function Sf(n, e, t) {
  if (n.length === 0)
    throw Error("empty string");
  if (n === "NaN" || n === "Infinity" || n === "+Infinity" || n === "-Infinity")
    return as;
  if (typeof e == "number" ? (t = e, e = !1) : e = !!e, t = t || 10, t < 2 || 36 < t)
    throw RangeError("radix");
  var s;
  if ((s = n.indexOf("-")) > 0)
    throw Error("interior hyphen");
  if (s === 0)
    return Sf(n.substring(1), e, t).neg();
  for (var r = os(uc(t, 8)), o = as, a = 0; a < n.length; a += 8) {
    var i = Math.min(8, n.length - a), l = parseInt(n.substring(a, a + i), t);
    if (i < 8) {
      var c = os(uc(t, i));
      o = o.mul(c).add(os(l));
    } else
      o = o.mul(r), o = o.add(os(l));
  }
  return o.unsigned = e, o;
}
dt.fromString = Sf;
function Rs(n, e) {
  return typeof n == "number" ? os(n, e) : typeof n == "string" ? Sf(n, e) : pt(n.low, n.high, typeof e == "boolean" ? e : n.unsigned);
}
dt.fromValue = Rs;
var e0 = 65536, iC = 1 << 24, Zo = e0 * e0, s1 = Zo * Zo, t0 = s1 / 2, n0 = mo(iC), as = mo(0);
dt.ZERO = as;
var Qr = mo(0, !0);
dt.UZERO = Qr;
var zo = mo(1);
dt.ONE = zo;
var r1 = mo(1, !0);
dt.UONE = r1;
var Nd = mo(-1);
dt.NEG_ONE = Nd;
var o1 = pt(-1, 2147483647, !1);
dt.MAX_VALUE = o1;
var a1 = pt(-1, -1, !0);
dt.MAX_UNSIGNED_VALUE = a1;
var En = pt(0, -2147483648, !1);
dt.MIN_VALUE = En;
var pe = dt.prototype;
pe.toInt = function() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
pe.toNumber = function() {
  return this.unsigned ? (this.high >>> 0) * Zo + (this.low >>> 0) : this.high * Zo + (this.low >>> 0);
};
pe.toString = function(e) {
  if (e = e || 10, e < 2 || 36 < e)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative())
    if (this.eq(En)) {
      var t = os(e), s = this.div(t), r = s.mul(t).sub(this);
      return s.toString(e) + r.toInt().toString(e);
    } else
      return "-" + this.neg().toString(e);
  for (var o = os(uc(e, 6), this.unsigned), a = this, i = ""; ; ) {
    var l = a.div(o), c = a.sub(l.mul(o)).toInt() >>> 0, u = c.toString(e);
    if (a = l, a.isZero())
      return u + i;
    for (; u.length < 6; )
      u = "0" + u;
    i = "" + u + i;
  }
};
pe.getHighBits = function() {
  return this.high;
};
pe.getHighBitsUnsigned = function() {
  return this.high >>> 0;
};
pe.getLowBits = function() {
  return this.low;
};
pe.getLowBitsUnsigned = function() {
  return this.low >>> 0;
};
pe.getNumBitsAbs = function() {
  if (this.isNegative())
    return this.eq(En) ? 64 : this.neg().getNumBitsAbs();
  for (var e = this.high != 0 ? this.high : this.low, t = 31; t > 0 && !(e & 1 << t); t--)
    ;
  return this.high != 0 ? t + 33 : t + 1;
};
pe.isZero = function() {
  return this.high === 0 && this.low === 0;
};
pe.eqz = pe.isZero;
pe.isNegative = function() {
  return !this.unsigned && this.high < 0;
};
pe.isPositive = function() {
  return this.unsigned || this.high >= 0;
};
pe.isOdd = function() {
  return (this.low & 1) === 1;
};
pe.isEven = function() {
  return (this.low & 1) === 0;
};
pe.equals = function(e) {
  return zn(e) || (e = Rs(e)), this.unsigned !== e.unsigned && this.high >>> 31 === 1 && e.high >>> 31 === 1 ? !1 : this.high === e.high && this.low === e.low;
};
pe.eq = pe.equals;
pe.notEquals = function(e) {
  return !this.eq(
    /* validates */
    e
  );
};
pe.neq = pe.notEquals;
pe.ne = pe.notEquals;
pe.lessThan = function(e) {
  return this.comp(
    /* validates */
    e
  ) < 0;
};
pe.lt = pe.lessThan;
pe.lessThanOrEqual = function(e) {
  return this.comp(
    /* validates */
    e
  ) <= 0;
};
pe.lte = pe.lessThanOrEqual;
pe.le = pe.lessThanOrEqual;
pe.greaterThan = function(e) {
  return this.comp(
    /* validates */
    e
  ) > 0;
};
pe.gt = pe.greaterThan;
pe.greaterThanOrEqual = function(e) {
  return this.comp(
    /* validates */
    e
  ) >= 0;
};
pe.gte = pe.greaterThanOrEqual;
pe.ge = pe.greaterThanOrEqual;
pe.compare = function(e) {
  if (zn(e) || (e = Rs(e)), this.eq(e))
    return 0;
  var t = this.isNegative(), s = e.isNegative();
  return t && !s ? -1 : !t && s ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
};
pe.comp = pe.compare;
pe.negate = function() {
  return !this.unsigned && this.eq(En) ? En : this.not().add(zo);
};
pe.neg = pe.negate;
pe.add = function(e) {
  zn(e) || (e = Rs(e));
  var t = this.high >>> 16, s = this.high & 65535, r = this.low >>> 16, o = this.low & 65535, a = e.high >>> 16, i = e.high & 65535, l = e.low >>> 16, c = e.low & 65535, u = 0, h = 0, d = 0, p = 0;
  return p += o + c, d += p >>> 16, p &= 65535, d += r + l, h += d >>> 16, d &= 65535, h += s + i, u += h >>> 16, h &= 65535, u += t + a, u &= 65535, pt(d << 16 | p, u << 16 | h, this.unsigned);
};
pe.subtract = function(e) {
  return zn(e) || (e = Rs(e)), this.add(e.neg());
};
pe.sub = pe.subtract;
pe.multiply = function(e) {
  if (this.isZero())
    return as;
  if (zn(e) || (e = Rs(e)), rs) {
    var t = rs.mul(
      this.low,
      this.high,
      e.low,
      e.high
    );
    return pt(t, rs.get_high(), this.unsigned);
  }
  if (e.isZero())
    return as;
  if (this.eq(En))
    return e.isOdd() ? En : as;
  if (e.eq(En))
    return this.isOdd() ? En : as;
  if (this.isNegative())
    return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
  if (e.isNegative())
    return this.mul(e.neg()).neg();
  if (this.lt(n0) && e.lt(n0))
    return os(this.toNumber() * e.toNumber(), this.unsigned);
  var s = this.high >>> 16, r = this.high & 65535, o = this.low >>> 16, a = this.low & 65535, i = e.high >>> 16, l = e.high & 65535, c = e.low >>> 16, u = e.low & 65535, h = 0, d = 0, p = 0, f = 0;
  return f += a * u, p += f >>> 16, f &= 65535, p += o * u, d += p >>> 16, p &= 65535, p += a * c, d += p >>> 16, p &= 65535, d += r * u, h += d >>> 16, d &= 65535, d += o * c, h += d >>> 16, d &= 65535, d += a * l, h += d >>> 16, d &= 65535, h += s * u + r * c + o * l + a * i, h &= 65535, pt(p << 16 | f, h << 16 | d, this.unsigned);
};
pe.mul = pe.multiply;
pe.divide = function(e) {
  if (zn(e) || (e = Rs(e)), e.isZero())
    throw Error("division by zero");
  if (rs) {
    if (!this.unsigned && this.high === -2147483648 && e.low === -1 && e.high === -1)
      return this;
    var t = (this.unsigned ? rs.div_u : rs.div_s)(
      this.low,
      this.high,
      e.low,
      e.high
    );
    return pt(t, rs.get_high(), this.unsigned);
  }
  if (this.isZero())
    return this.unsigned ? Qr : as;
  var s, r, o;
  if (this.unsigned) {
    if (e.unsigned || (e = e.toUnsigned()), e.gt(this))
      return Qr;
    if (e.gt(this.shru(1)))
      return r1;
    o = Qr;
  } else {
    if (this.eq(En)) {
      if (e.eq(zo) || e.eq(Nd))
        return En;
      if (e.eq(En))
        return zo;
      var a = this.shr(1);
      return s = a.div(e).shl(1), s.eq(as) ? e.isNegative() ? zo : Nd : (r = this.sub(e.mul(s)), o = s.add(r.div(e)), o);
    } else if (e.eq(En))
      return this.unsigned ? Qr : as;
    if (this.isNegative())
      return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
    if (e.isNegative())
      return this.div(e.neg()).neg();
    o = as;
  }
  for (r = this; r.gte(e); ) {
    s = Math.max(1, Math.floor(r.toNumber() / e.toNumber()));
    for (var i = Math.ceil(Math.log(s) / Math.LN2), l = i <= 48 ? 1 : uc(2, i - 48), c = os(s), u = c.mul(e); u.isNegative() || u.gt(r); )
      s -= l, c = os(s, this.unsigned), u = c.mul(e);
    c.isZero() && (c = zo), o = o.add(c), r = r.sub(u);
  }
  return o;
};
pe.div = pe.divide;
pe.modulo = function(e) {
  if (zn(e) || (e = Rs(e)), rs) {
    var t = (this.unsigned ? rs.rem_u : rs.rem_s)(
      this.low,
      this.high,
      e.low,
      e.high
    );
    return pt(t, rs.get_high(), this.unsigned);
  }
  return this.sub(this.div(e).mul(e));
};
pe.mod = pe.modulo;
pe.rem = pe.modulo;
pe.not = function() {
  return pt(~this.low, ~this.high, this.unsigned);
};
pe.and = function(e) {
  return zn(e) || (e = Rs(e)), pt(this.low & e.low, this.high & e.high, this.unsigned);
};
pe.or = function(e) {
  return zn(e) || (e = Rs(e)), pt(this.low | e.low, this.high | e.high, this.unsigned);
};
pe.xor = function(e) {
  return zn(e) || (e = Rs(e)), pt(this.low ^ e.low, this.high ^ e.high, this.unsigned);
};
pe.shiftLeft = function(e) {
  return zn(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? pt(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : pt(0, this.low << e - 32, this.unsigned);
};
pe.shl = pe.shiftLeft;
pe.shiftRight = function(e) {
  return zn(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? pt(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : pt(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
pe.shr = pe.shiftRight;
pe.shiftRightUnsigned = function(e) {
  if (zn(e) && (e = e.toInt()), e &= 63, e === 0)
    return this;
  var t = this.high;
  if (e < 32) {
    var s = this.low;
    return pt(s >>> e | t << 32 - e, t >>> e, this.unsigned);
  } else return e === 32 ? pt(t, 0, this.unsigned) : pt(t >>> e - 32, 0, this.unsigned);
};
pe.shru = pe.shiftRightUnsigned;
pe.shr_u = pe.shiftRightUnsigned;
pe.toSigned = function() {
  return this.unsigned ? pt(this.low, this.high, !1) : this;
};
pe.toUnsigned = function() {
  return this.unsigned ? this : pt(this.low, this.high, !0);
};
pe.toBytes = function(e) {
  return e ? this.toBytesLE() : this.toBytesBE();
};
pe.toBytesLE = function() {
  var e = this.high, t = this.low;
  return [
    t & 255,
    t >>> 8 & 255,
    t >>> 16 & 255,
    t >>> 24,
    e & 255,
    e >>> 8 & 255,
    e >>> 16 & 255,
    e >>> 24
  ];
};
pe.toBytesBE = function() {
  var e = this.high, t = this.low;
  return [
    e >>> 24,
    e >>> 16 & 255,
    e >>> 8 & 255,
    e & 255,
    t >>> 24,
    t >>> 16 & 255,
    t >>> 8 & 255,
    t & 255
  ];
};
dt.fromBytes = function(e, t, s) {
  return s ? dt.fromBytesLE(e, t) : dt.fromBytesBE(e, t);
};
dt.fromBytesLE = function(e, t) {
  return new dt(
    e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24,
    e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24,
    t
  );
};
dt.fromBytesBE = function(e, t) {
  return new dt(
    e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7],
    e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3],
    t
  );
};
const i1 = /* @__PURE__ */ t1(n1), lC = /* @__PURE__ */ V$({
  __proto__: null,
  default: i1
}, [n1]);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Yr = (
  // tslint:disable-next-line
  i1 || lC
);
function Hu(n) {
  return Yr.fromString(n, !0, 16);
}
const l1 = Hu("c3a5c85c97cb3127"), Kr = Hu("b492b66fbe98f273"), cn = Hu("9ae16a3b2f90404f");
function kd(n) {
  return n.xor(n.shru(47));
}
function c1(n, e, t) {
  const s = n.slice(e, e + t);
  return Yr.fromBytes(Array.from(s), !0, !0);
}
function lt(n, e) {
  return c1(n, e, 8);
}
function s0(n, e) {
  return c1(n, e, 4);
}
function Vt(n, e) {
  return e === 0 ? n : n.shru(e).or(n.shl(64 - e));
}
function yr(n, e, t = Hu("9ddfea08eb382d69")) {
  let s = n.xor(e).mul(t);
  s = s.xor(s.shru(47));
  let r = e.xor(s).mul(t);
  return r = r.xor(r.shru(47)), r = r.mul(t), r;
}
function cC(n, e, t, s, r, o) {
  r = r.add(n), o = Vt(o.add(r).add(s), 21);
  const a = r;
  return r = r.add(e), r = r.add(t), o = o.add(Vt(r, 44)), [r.add(s), o.add(a)];
}
function Ol(n, e, t, s) {
  return cC(lt(n, e), lt(n, e + 8), lt(n, e + 16), lt(n, e + 24), t, s);
}
function uC(n, e = n.length) {
  if (e >= 8) {
    const t = cn.add(e * 2), s = lt(n, 0).add(cn), r = lt(n, e - 8), o = Vt(r, 37).mul(t).add(s), a = Vt(s, 25).add(r).mul(t);
    return yr(o, a, t);
  }
  if (e >= 4) {
    const t = cn.add(e * 2), s = s0(n, 0);
    return yr(s.shl(3).add(e), s0(n, e - 4), t);
  }
  if (e > 0) {
    const t = n[0], s = n[e >> 1], r = n[e - 1], o = t + (s << 8), a = e + (r << 2);
    return kd(cn.mul(o).xor(l1.mul(a))).mul(cn);
  }
  return cn;
}
function hC(n, e = n.length) {
  const t = cn.add(e * 2), s = lt(n, 0).mul(Kr), r = lt(n, 8), o = lt(n, e - 8).mul(t), a = lt(n, e - 16).mul(cn);
  return yr(Vt(s.add(r), 43).add(Vt(o, 30)).add(a), s.add(Vt(r.add(cn), 18)).add(o), t);
}
function dC(n, e = n.length) {
  const t = cn.add(e * 2), s = lt(n, 0).mul(cn), r = lt(n, 8), o = lt(n, e - 8).mul(t), a = lt(n, e - 16).mul(cn), i = Vt(s.add(r), 43).add(Vt(o, 30)).add(a), l = yr(i, s.add(Vt(r.add(cn), 18)).add(o), t), c = lt(n, 16).mul(t), u = lt(n, 24), h = i.add(lt(n, e - 32)).mul(t), d = l.add(lt(n, e - 24)).mul(t);
  return yr(Vt(c.add(u), 43).add(Vt(h, 30)).add(d), c.add(Vt(u.add(s), 18)).add(h), t);
}
function pC(n, e = n.length) {
  const t = Yr.fromNumber(81, !0);
  if (e <= 32)
    return e <= 16 ? uC(n, e) : hC(n, e);
  if (e <= 64)
    return dC(n, e);
  let s = t, r = t.mul(Kr).add(113), o = kd(r.mul(cn).add(113)).mul(cn), a = [Yr.UZERO, Yr.UZERO], i = [Yr.UZERO, Yr.UZERO];
  s = s.mul(cn).add(lt(n, 0));
  let l = 0;
  const c = (e - 1 >> 6) * 64, u = c + (e - 1 & 63) - 63;
  do
    s = Vt(s.add(r).add(a[0]).add(lt(n, l + 8)), 37).mul(Kr), r = Vt(r.add(a[1]).add(lt(n, l + 48)), 42).mul(Kr), s = s.xor(i[1]), r = r.add(a[0]).add(lt(n, l + 40)), o = Vt(o.add(i[0]), 33).mul(Kr), a = Ol(n, l, a[1].mul(Kr), s.add(i[0])), i = Ol(n, l + 32, o.add(i[1]), r.add(lt(n, l + 16))), [o, s] = [s, o], l += 64;
  while (l !== c);
  const h = Kr.add(o.and(255).shl(1));
  return l = u, i[0] = i[0].add(e - 1 & 63), a[0] = a[0].add(i[0]), i[0] = i[0].add(a[0]), s = Vt(s.add(r).add(a[0]).add(lt(n, l + 8)), 37).mul(h), r = Vt(r.add(a[1]).add(lt(n, l + 48)), 42).mul(h), s = s.xor(i[1].mul(9)), r = r.add(a[0].mul(9).add(lt(n, l + 40))), o = Vt(o.add(i[0]), 33).mul(h), a = Ol(n, l, a[1].mul(h), s.add(i[0])), i = Ol(n, l + 32, o.add(i[1]), r.add(lt(n, l + 16))), [o, s] = [s, o], yr(yr(a[0], i[0], h).add(kd(r).mul(l1)).add(o), yr(a[1], i[1], h).add(s), h);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fr(n, e) {
  return e === "string" ? br(n) : go([n], e);
}
function fC(n, e) {
  return n instanceof Float32Array && e === "float32" || n instanceof Int32Array && e === "int32" || n instanceof Uint8Array && e === "bool";
}
function go(n, e) {
  if (e === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(n) && (n = Ko(n)), K().getBool("DEBUG") && j$(n, e), fC(n, e))
    return n;
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(n);
  if (e === "int32")
    return new Int32Array(n);
  if (e === "bool") {
    const t = new Uint8Array(n.length);
    for (let s = 0; s < t.length; ++s)
      Math.round(n[s]) !== 0 && (t[s] = 1);
    return t;
  } else
    throw new Error(`Unknown data type ${e}`);
}
function bn() {
  return K().platform.now();
}
function br(n, e = "utf-8") {
  return e = e || "utf-8", K().platform.encode(n, e);
}
function vr(n, e = "utf-8") {
  return e = e || "utf-8", K().platform.decode(n, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class mC {
  constructor(e, t) {
    this.backendTimer = e, this.logger = t, t == null && (this.logger = new yC());
  }
  profileKernel(e, t, s) {
    let r;
    const o = () => {
      r = s();
    };
    let a;
    const i = bn();
    if (this.backendTimer.timerAvailable())
      a = this.backendTimer.time(o);
    else {
      o();
      for (const c of r)
        c.dataSync();
      a = Promise.resolve({ kernelMs: bn() - i });
    }
    if (K().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let c = 0; c < r.length; c++) {
        const u = r[c];
        u.data().then((h) => {
          gC(h, u.dtype, e);
        });
      }
    return {
      kernelName: e,
      outputs: r,
      inputs: t,
      timeMs: a.then((c) => c.kernelMs),
      extraInfo: a.then((c) => c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : "")
    };
  }
  logKernelProfile(e) {
    const { kernelName: t, outputs: s, timeMs: r, inputs: o, extraInfo: a } = e;
    s.forEach((i) => {
      Promise.all([i.data(), r, a]).then((l) => {
        this.logger.logKernelProfile(t, i, l[0], l[1], o, l[2]);
      });
    });
  }
}
function gC(n, e, t) {
  if (e !== "float32")
    return !1;
  for (let s = 0; s < n.length; s++) {
    const r = n[s];
    if (isNaN(r) || !isFinite(r))
      return console.warn(`Found ${r} in the result of '${t}'`), !0;
  }
  return !1;
}
class yC {
  logKernelProfile(e, t, s, r, o, a) {
    const i = typeof r == "number" ? Bo(`${r}ms`, 9) : r.error, l = Bo(e, 25), c = t.rank, u = t.size, h = Bo(t.shape.toString(), 14);
    let d = "";
    for (const p in o) {
      const f = o[p];
      if (f != null) {
        const m = f.shape || t.shape, g = m.length;
        d += `${p}: ${g}D ${g > 0 ? m : ""} `;
      }
    }
    console.log(`%c${l}	%c${i}	%c${c}D ${h}	%c${u}	%c${d}	%c${a}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bC(n, e, t) {
  const s = {}, r = {};
  for (let l = 0; l < e.length; l++)
    s[e[l].id] = !0;
  for (let l = 0; l < n.length; l++) {
    const c = n[l], u = c.inputs;
    for (const h in u) {
      const d = u[h];
      let p = !1;
      for (let f = 0; f < e.length; f++)
        if (s[d.id]) {
          c.outputs.forEach((m) => s[m.id] = !0), p = !0, r[c.id] = !0;
          break;
        }
      if (p)
        break;
    }
  }
  const o = {};
  o[t.id] = !0;
  const a = {};
  for (let l = n.length - 1; l >= 0; l--) {
    const c = n[l], u = c.inputs;
    for (let h = 0; h < c.outputs.length; h++)
      if (o[c.outputs[h].id]) {
        for (const d in u)
          o[u[d].id] = !0, a[c.id] = !0;
        break;
      }
  }
  const i = [];
  for (let l = 0; l < n.length; l++) {
    const c = n[l];
    if (r[c.id] && a[c.id]) {
      const u = {};
      for (const d in c.inputs) {
        const p = c.inputs[d];
        s[p.id] && (u[d] = p);
      }
      const h = Object.assign({}, c);
      h.inputs = u, h.outputs = c.outputs, i.push(h);
    }
  }
  return i;
}
function xC(n, e, t, s) {
  for (let r = e.length - 1; r >= 0; r--) {
    const o = e[r], a = [];
    if (o.outputs.forEach((l) => {
      const c = n[l.id];
      c != null ? a.push(c) : a.push(null);
    }), o.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);
    const i = o.gradient(a);
    for (const l in o.inputs) {
      if (!(l in i))
        throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);
      const c = t(() => i[l]());
      if (c.dtype !== "float32")
        throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`);
      const u = o.inputs[l];
      if (!He(c.shape, u.shape))
        throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`);
      if (n[u.id] == null)
        n[u.id] = c;
      else {
        const h = n[u.id];
        n[u.id] = s(h, c), h.dispose();
      }
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const r0 = 20, Fa = 3, Hh = 7;
function wC(n, e, t, s) {
  const r = ke(e), o = vC(n, e, t, r), a = e.length, i = ec(n, e, t, r, o), l = ["Tensor"];
  return s && (l.push(`  dtype: ${t}`), l.push(`  rank: ${a}`), l.push(`  shape: [${e}]`), l.push("  values:")), l.push(i.map((c) => "    " + c).join(`
`)), l.join(`
`);
}
function vC(n, e, t, s) {
  const r = Z(e), o = s[s.length - 1], a = new Array(o).fill(0), i = e.length, l = t === "complex64" ? za(n) : n;
  if (i > 1)
    for (let c = 0; c < r / o; c++) {
      const u = c * o;
      for (let h = 0; h < o; h++)
        a[h] = Math.max(a[h], Pa(l[u + h], 0, t).length);
    }
  return a;
}
function Pa(n, e, t) {
  let s;
  return Array.isArray(n) ? s = `${parseFloat(n[0].toFixed(Hh))} + ${parseFloat(n[1].toFixed(Hh))}j` : oi(n) ? s = `'${n}'` : t === "bool" ? s = u1(n) : s = parseFloat(n.toFixed(Hh)).toString(), Bo(s, e);
}
function u1(n) {
  return n === 0 ? "false" : "true";
}
function ec(n, e, t, s, r, o = !0) {
  const a = t === "complex64" ? 2 : 1, i = e[0], l = e.length;
  if (l === 0) {
    if (t === "complex64") {
      const m = za(n);
      return [Pa(m[0], 0, t)];
    }
    return t === "bool" ? [u1(n[0])] : [n[0].toString()];
  }
  if (l === 1) {
    if (i > r0) {
      const g = Fa * a;
      let y = Array.from(n.slice(0, g)), b = Array.from(n.slice((i - Fa) * a, i * a));
      return t === "complex64" && (y = za(y), b = za(b)), [
        "[" + y.map((w, x) => Pa(w, r[x], t)).join(", ") + ", ..., " + b.map((w, x) => Pa(w, r[i - Fa + x], t)).join(", ") + "]"
      ];
    }
    return [
      "[" + (t === "complex64" ? za(n) : Array.from(n)).map((g, y) => Pa(g, r[y], t)).join(", ") + "]"
    ];
  }
  const c = e.slice(1), u = s.slice(1), h = s[0] * a, d = [];
  if (i > r0) {
    for (let m = 0; m < Fa; m++) {
      const g = m * h, y = g + h;
      d.push(...ec(
        n.slice(g, y),
        c,
        t,
        u,
        r,
        !1
        /* isLast */
      ));
    }
    d.push("...");
    for (let m = i - Fa; m < i; m++) {
      const g = m * h, y = g + h;
      d.push(...ec(
        n.slice(g, y),
        c,
        t,
        u,
        r,
        m === i - 1
        /* isLast */
      ));
    }
  } else
    for (let m = 0; m < i; m++) {
      const g = m * h, y = g + h;
      d.push(...ec(
        n.slice(g, y),
        c,
        t,
        u,
        r,
        m === i - 1
        /* isLast */
      ));
    }
  const p = l === 2 ? "," : "";
  d[0] = "[" + d[0] + p;
  for (let m = 1; m < d.length - 1; m++)
    d[m] = " " + d[m] + p;
  let f = `,
`;
  for (let m = 2; m < l; m++)
    f += `
`;
  return d[d.length - 1] = " " + d[d.length - 1] + "]" + (o ? "" : f), d;
}
function za(n) {
  const e = [];
  for (let t = 0; t < n.length; t += 2)
    e.push([n[t], n[t + 1]]);
  return e;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Gt {
  constructor(e, t, s) {
    if (this.dtype = t, this.shape = e.slice(), this.size = Z(e), s != null) {
      const r = s.length;
      N(r === this.size, () => `Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (t === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = s || Wt(t, this.size), this.strides = ke(e);
  }
  /**
   * Sets a value in the buffer at a given location.
   *
   * @param value The value to set.
   * @param locs  The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  set(e, ...t) {
    t.length === 0 && (t = [0]), N(t.length === this.rank, () => `The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);
    const s = this.locToIndex(t);
    this.values[s] = e;
  }
  /**
   * Returns the value in the buffer at the provided location.
   *
   * @param locs The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  get(...e) {
    e.length === 0 && (e = [0]);
    let t = 0;
    for (const r of e) {
      if (r < 0 || r >= this.shape[t]) {
        const o = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
        throw new Error(o);
      }
      t++;
    }
    let s = e[e.length - 1];
    for (let r = 0; r < e.length - 1; ++r)
      s += this.strides[r] * e[r];
    return this.values[s];
  }
  locToIndex(e) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return e[0];
    let t = e[e.length - 1];
    for (let s = 0; s < e.length - 1; ++s)
      t += this.strides[s] * e[s];
    return t;
  }
  indexToLoc(e) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [e];
    const t = new Array(this.shape.length);
    for (let s = 0; s < t.length - 1; ++s)
      t[s] = Math.floor(e / this.strides[s]), e -= t[s] * this.strides[s];
    return t[t.length - 1] = e, t;
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Creates an immutable `tf.Tensor` object from the buffer.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  toTensor() {
    return ws().makeTensor(this.values, this.shape, this.dtype);
  }
}
let ws = null, Fo = null;
function IC(n) {
  ws = n;
}
function $C(n) {
  Fo = n;
}
class Je {
  constructor(e, t, s, r) {
    this.kept = !1, this.isDisposedInternal = !1, this.shape = e.slice(), this.dtype = t || "float32", this.size = Z(e), this.strides = ke(e), this.dataId = s, this.id = r, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async buffer() {
    const e = await this.data();
    return Fo.buffer(this.shape, this.dtype, e);
  }
  /**
   * Returns a `tf.TensorBuffer` that holds the underlying data.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  bufferSync() {
    return Fo.buffer(this.shape, this.dtype, this.dataSync());
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * asynchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async array() {
    const e = await this.data();
    return us(this.shape, e, this.dtype === "complex64");
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * synchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  arraySync() {
    return us(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  /**
   * Asynchronously downloads the values from the `tf.Tensor`. Returns a
   * promise of `TypedArray` that resolves when the computation has finished.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async data() {
    this.throwIfDisposed();
    const e = ws().read(this.dataId);
    if (this.dtype === "string") {
      const t = await e;
      try {
        return t.map((s) => vr(s));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return e;
  }
  /**
   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
   * and `data()`, this method prevents data from being downloaded to CPU.
   *
   * For WebGL backend, the data will be stored on a densely packed texture.
   * This means that the texture will use the RGBA channels to store value.
   *
   * For WebGPU backend, the data will be stored on a buffer. There is no
   * parameter, so can not use a user-defined size to create the buffer.
   *
   * @param options:
   *     For WebGL,
   *         - customTexShape: Optional. If set, will use the user defined
   *     texture shape to create the texture.
   *
   * @returns For WebGL backend, a GPUData contains the new texture and
   *     its information.
   *     {
   *        tensorRef: The tensor that is associated with this texture,
   *        texture: WebGLTexture,
   *        texShape: [number, number] // [height, width]
   *     }
   *
   *     For WebGPU backend, a GPUData contains the new buffer and
   *     its information.
   *     {
   *        tensorRef: The tensor that is associated with this buffer,
   *        buffer: GPUBuffer,
   *        bufSize: number
   *     }
   *
   *     Remember to dispose the GPUData after it is used by
   *     `res.tensorRef.dispose()`.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataToGPU(e) {
    return this.throwIfDisposed(), ws().readToGPU(this.dataId, e);
  }
  /**
   * Synchronously downloads the values from the `tf.Tensor`. This blocks the
   * UI thread until the values are ready, which can cause performance issues.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataSync() {
    this.throwIfDisposed();
    const e = ws().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return e.map((t) => vr(t));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return e;
  }
  /** Returns the underlying bytes of the tensor's data. */
  async bytes() {
    this.throwIfDisposed();
    const e = await ws().read(this.dataId);
    return this.dtype === "string" ? e : new Uint8Array(e.buffer);
  }
  /**
   * Disposes `tf.Tensor` from memory.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dispose() {
    this.isDisposed || (ws().disposeTensor(this), this.isDisposedInternal = !0);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  /**
   * Prints the `tf.Tensor`. See `tf.print` for details.
   *
   * @param verbose Whether to print verbose information about the tensor,
   *    including dtype and size.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  print(e = !1) {
    return Fo.print(this, e);
  }
  /**
   * Returns a copy of the tensor. See `tf.clone` for details.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  clone() {
    return this.throwIfDisposed(), Fo.clone(this);
  }
  /**
   * Returns a human-readable description of the tensor. Useful for logging.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  toString(e = !1) {
    const t = this.dataSync();
    return wC(t, this.shape, this.dtype, e);
  }
  cast(e) {
    return this.throwIfDisposed(), Fo.cast(this, e);
  }
  variable(e = !0, t, s) {
    return this.throwIfDisposed(), ws().makeVariable(this, e, t, s);
  }
}
Object.defineProperty(Je, Symbol.hasInstance, {
  value: (n) => !!n && n.data != null && n.dataSync != null && n.throwIfDisposed != null
});
function J() {
  return vp("Tensor", () => Je);
}
J();
class hc extends Je {
  constructor(e, t, s, r) {
    super(e.shape, e.dtype, e.dataId, r), this.trainable = t, this.name = s;
  }
  /**
   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
   * the same shape and dtype as the old `tf.Tensor`.
   *
   * @param newValue New tensor to be assigned to this variable.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  assign(e) {
    if (e.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);
    if (!He(e.shape, this.shape))
      throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);
    ws().disposeTensor(this), this.dataId = e.dataId, ws().incRef(
      this,
      null
      /* backend */
    );
  }
  dispose() {
    ws().disposeVariable(this), this.isDisposedInternal = !0;
  }
}
Object.defineProperty(hc, Symbol.hasInstance, {
  value: (n) => n instanceof Je && n.assign != null && n.assign instanceof Function
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var o0;
(function(n) {
  n.R0 = "R0", n.R1 = "R1", n.R2 = "R2", n.R3 = "R3", n.R4 = "R4", n.R5 = "R5", n.R6 = "R6";
})(o0 || (o0 = {}));
var Td;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "int32", n.complex64 = "complex64";
})(Td || (Td = {}));
var Ed;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "bool", n.complex64 = "complex64";
})(Ed || (Ed = {}));
var Dd;
(function(n) {
  n.float32 = "float32", n.int32 = "float32", n.bool = "float32", n.complex64 = "complex64";
})(Dd || (Dd = {}));
var Ad;
(function(n) {
  n.float32 = "complex64", n.int32 = "complex64", n.bool = "complex64", n.complex64 = "complex64";
})(Ad || (Ad = {}));
const CC = {
  float32: Dd,
  int32: Td,
  bool: Ed,
  complex64: Ad
};
function Rn(n, e) {
  if (n === "string" || e === "string") {
    if (n === "string" && e === "string")
      return "string";
    throw new Error(`Can not upcast ${n} with ${e}`);
  }
  return CC[n][e];
}
function Nf(n) {
  return Rn(n, "int32");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function It(n, e) {
  if (n.dtype === e.dtype)
    return [n, e];
  const t = Rn(n.dtype, e.dtype);
  return [n.cast(t), e.cast(t)];
}
function SC(n, e) {
  N(n.dtype === e.dtype, () => `The dtypes of the first(${n.dtype}) and second(${e.dtype}) input must match`);
}
function h1(n) {
  const e = [];
  return d1(n, e, /* @__PURE__ */ new Set()), e;
}
function d1(n, e, t) {
  if (n == null)
    return;
  if (n instanceof Je) {
    e.push(n);
    return;
  }
  if (!NC(n))
    return;
  const s = n;
  for (const r in s) {
    const o = s[r];
    t.has(o) || (t.add(o), d1(o, e, t));
  }
}
function NC(n) {
  return Array.isArray(n) || typeof n == "object";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jh(n) {
  return n.kernelName != null;
}
class a0 {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = !1, this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null,
      get kernelNames() {
        return Array.from(new Set(this.kernels.map((e) => e.name)));
      }
    };
  }
  dispose() {
    for (const e in this.registeredVariables)
      this.registeredVariables[e].dispose();
  }
}
class Jo {
  constructor(e) {
    this.ENV = e, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new a0();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    const e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      const s = e[t];
      if (await this.initializeBackend(s).success) {
        await this.setBackend(s);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: e, asyncInit: t } = this.initializeBackendsAndReturnBest();
      if (t)
        throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(e);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(e) {
    if (!(e in this.registry))
      if (e in this.registryFactory) {
        const { asyncInit: t } = this.initializeBackend(e);
        if (t)
          return null;
      } else
        return null;
    return this.registry[e];
  }
  findBackendFactory(e) {
    return e in this.registryFactory ? this.registryFactory[e].factory : null;
  }
  registerBackend(e, t, s = 1) {
    return e in this.registryFactory ? (Vn(`${e} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[e] = { factory: t, priority: s }, !0);
  }
  async setBackend(e) {
    if (this.registryFactory[e] == null)
      throw new Error(`Backend name '${e}' not found in registry`);
    if (this.backendName = e, this.registry[e] == null) {
      this.backendInstance = null;
      const { success: t, asyncInit: s } = this.initializeBackend(e);
      if (!(s ? await t : t))
        return !1;
    }
    return this.backendInstance = this.registry[e], this.setupRegisteredKernels(), this.profiler = new mC(this.backendInstance), !0;
  }
  setupRegisteredKernels() {
    Zg(this.backendName).forEach((t) => {
      t.setupFunc != null && t.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(e) {
    Zg(e).forEach((s) => {
      s.disposeFunc != null && s.disposeFunc(this.registry[e]);
    });
  }
  /**
   * Initializes a backend by looking up the backend name in the factory
   * registry and calling the factory method. Returns a boolean representing
   * whether the initialization of the backend suceeded. Throws an error if
   * there is no backend in the factory registry.
   */
  initializeBackend(e) {
    const t = this.registryFactory[e];
    if (t == null)
      throw new Error(`Cannot initialize backend ${e}, no registration found.`);
    try {
      const s = t.factory();
      if (s && !(s instanceof bp) && typeof s.then == "function") {
        const r = ++this.pendingBackendInitId, o = s.then((a) => r < this.pendingBackendInitId ? !1 : (this.registry[e] = a, this.pendingBackendInit = null, !0)).catch((a) => (r < this.pendingBackendInitId || (this.pendingBackendInit = null, Vn(`Initialization of backend ${e} failed`), Vn(a.stack || a.message)), !1));
        return this.pendingBackendInit = o, { success: o, asyncInit: !0 };
      } else
        return this.registry[e] = s, { success: !0, asyncInit: !1 };
    } catch (s) {
      return Vn(`Initialization of backend ${e} failed`), Vn(s.stack || s.message), { success: !1, asyncInit: !1 };
    }
  }
  removeBackend(e) {
    if (!(e in this.registryFactory))
      throw new Error(`${e} backend not found in registry`);
    this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++, e in this.registry && (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]), delete this.registryFactory[e], this.backendName === e && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((e, t) => this.registryFactory[t].priority - this.registryFactory[e].priority);
  }
  initializeBackendsAndReturnBest() {
    const e = this.getSortedBackends();
    for (let t = 0; t < e.length; t++) {
      const s = e[t], { success: r, asyncInit: o } = this.initializeBackend(s);
      if (o || r)
        return { name: s, asyncInit: o };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(e, t) {
    const s = this.state.tensorInfo.get(t), r = s.backend, o = this.readSync(t), a = r.refCount(t);
    r.disposeData(t, !0), s.backend = e, e.move(t, o, s.shape, s.dtype, a), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(e, t) {
    let s = null;
    if (t == null) {
      if (typeof e != "function")
        throw new Error("Please provide a function to tidy()");
      t = e;
    } else {
      if (typeof e != "string" && !(e instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof t != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      s = e;
    }
    let r;
    return this.scopedRun(() => this.startScope(s), () => this.endScope(r), () => (r = t(), r instanceof Promise && console.error("Cannot return a Promise inside of tidy."), r));
  }
  scopedRun(e, t, s) {
    e();
    try {
      const r = s();
      return t(), r;
    } catch (r) {
      throw t(), r;
    }
  }
  nextTensorId() {
    return Jo.nextTensorId++;
  }
  nextVariableId() {
    return Jo.nextVariableId++;
  }
  /**
   * This method is called instead of the public-facing tensor.clone() when
   * saving a tensor for backwards pass. It makes sure to add the clone
   * operation to the tape regardless of being called inside a kernel
   * execution.
   */
  clone(e) {
    const t = _.runKernel(ki, { x: e }), s = { x: e }, r = (a) => ({
      x: () => {
        const i = "float32", l = { x: a }, c = { dtype: i };
        return _.runKernel(
          fi,
          l,
          // tslint:disable-next-line: no-unnecessary-type-assertion
          c
        );
      }
    }), o = [];
    return this.addTapeNode(this.state.activeScope.name, s, [t], r, o, {}), t;
  }
  /**
   * Execute a kernel with the given name and return the output tensor.
   *
   * @param kernelName The name of the kernel to execute.
   * @param inputs A map of input names to tensors.
   * @param attrs A map of attribute names to their values. An attribute is a
   *     primitive (non-tensor) input to the kernel.
   * @param inputsToSave A list of tensors, inputs to save for the backprop
   *     computation.
   * @param outputsToSave A list of booleans, specifying which output to save
   *     for the backprop computation. These are booleans since the output
   * tensors are not visible to the user.
   */
  runKernel(e, t, s) {
    if (this.backendName == null && this.backend, !(Sd(e, this.backendName) != null))
      throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: e, inputs: t, attrs: s });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(e, t, s) {
    const r = this.backend.numDataIds();
    let o = 0;
    s.forEach((l) => {
      o += l.dtype === "complex64" ? 3 : 1;
    });
    const a = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = r - t - o - a;
    if (i > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`);
  }
  /**
   * Internal helper method to execute a kernel Func
   *
   * Use `runKernel` to execute kernels from outside of engine.
   */
  runKernelFunc(e) {
    let t, s = [];
    const r = this.isTapeOn(), o = this.state.numBytes, a = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let i;
    this.backendName == null && this.backend;
    let l;
    const c = jh(e) ? e.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (jh(e)) {
      const { kernelName: f, inputs: m, attrs: g } = e;
      this.backendName == null && this.backend;
      const y = Sd(f, this.backendName);
      N(y != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), i = () => {
        const b = this.backend.numDataIds();
        l = y.kernelFunc({ inputs: m, attrs: g, backend: this.backend });
        const w = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, w);
        const x = w.map((v) => v.rank != null ? v : this.makeTensorFromTensorInfo(v));
        if (r) {
          const v = this.getTensorsForGradient(f, m, x);
          s = this.saveTensorsForBackwardMode(v);
        }
        return x;
      };
    } else {
      const { forwardFunc: f } = e, m = (g) => {
        r && (s = g.map((y) => this.keep(this.clone(y))));
      };
      i = () => {
        const g = this.backend.numDataIds();
        l = this.tidy(() => f(this.backend, m));
        const y = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(c, g, y), y;
      };
    }
    const { inputs: u, attrs: h } = e, d = jh(e) ? null : e.backwardsFunc;
    let p;
    return this.scopedRun(
      // Stop recording to a tape when running a kernel.
      () => this.state.kernelDepth++,
      () => this.state.kernelDepth--,
      () => {
        !this.ENV.getBool("DEBUG") && !this.state.profiling ? t = i() : (p = this.profiler.profileKernel(c, u, () => i()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(p), t = p.outputs);
      }
    ), r && this.addTapeNode(c, u, t, d, s, h), this.state.profiling && this.state.activeProfile.kernels.push({
      name: c,
      bytesAdded: this.state.numBytes - o,
      totalBytesSnapshot: this.state.numBytes,
      tensorsAdded: this.state.numTensors - a,
      totalTensorsSnapshot: this.state.numTensors,
      inputShapes: Object.keys(u).map((f) => u[f] != null ? u[f].shape : null),
      outputShapes: t.map((f) => f.shape),
      kernelTimeMs: p.timeMs,
      extraInfo: p.extraInfo
    }), Array.isArray(l) ? t : t[0];
  }
  /**
   * Saves tensors used in forward mode for use in backward mode.
   *
   * @param tensors the list of tensors to save.
   */
  saveTensorsForBackwardMode(e) {
    return e.map((s) => this.keep(this.clone(s)));
  }
  /**
   * Returns a list of tensors to save for a given gradient calculation.
   *
   * @param kernelName name of kernel to look up gradient for.
   * @param inputs a map of input tensors.
   * @param outputs an array of output tensors from forward mode of kernel.
   */
  getTensorsForGradient(e, t, s) {
    const r = Yg(e);
    if (r != null) {
      const o = r.inputsToSave || [], a = r.outputsToSave || [];
      let i;
      r.saveAllInputs ? (N(Array.isArray(t), () => "saveAllInputs is true, expected inputs to be an array."), i = Object.keys(t).map((c) => t[c])) : i = o.map((c) => t[c]);
      const l = s.filter((c, u) => a[u]);
      return i.concat(l);
    }
    return [];
  }
  /**
   * Internal method used by public APIs for tensor creation. Makes a new
   * tensor with the provided shape, dtype and values. It always
   * creates a new data id and writes the values to the underlying backend.
   */
  makeTensor(e, t, s, r) {
    if (e == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    s = s || "float32", r = r || this.backend;
    let o = e;
    s === "string" && oi(e[0]) && (o = e.map((l) => br(l)));
    const a = r.write(o, t, s), i = new Je(t, s, a, this.nextTensorId());
    if (this.trackTensor(i, r), s === "string") {
      const l = this.state.tensorInfo.get(a), c = K$(o);
      this.state.numBytes += c - l.bytes, l.bytes = c;
    }
    return i;
  }
  /**
   * Internal method used by backends. Makes a new tensor
   * that is a wrapper around an existing data id. It doesn't create
   * a new data id, only increments the ref count used in memory tracking.
   * @deprecated
   */
  makeTensorFromDataId(e, t, s, r) {
    s = s || "float32";
    const o = { dataId: e, shape: t, dtype: s };
    return this.makeTensorFromTensorInfo(o, r);
  }
  /**
   * Internal method used by backends. Makes a new tensor that is a wrapper
   * around an existing data id in TensorInfo. It doesn't create a new data id,
   * only increments the ref count used in memory tracking.
   */
  makeTensorFromTensorInfo(e, t) {
    const { dataId: s, shape: r, dtype: o } = e, a = new Je(r, o, s, this.nextTensorId());
    return this.trackTensor(a, t), a;
  }
  makeVariable(e, t = !0, s, r) {
    s = s || this.nextVariableId().toString(), r != null && r !== e.dtype && (e = e.cast(r));
    const o = new hc(e, t, s, this.nextTensorId());
    if (this.state.registeredVariables[o.name] != null)
      throw new Error(`Variable with name ${o.name} was already registered`);
    return this.state.registeredVariables[o.name] = o, this.incRef(o, this.backend), o;
  }
  trackTensor(e, t) {
    this.state.numTensors++, e.dtype === "string" && this.state.numStringTensors++;
    let s = 0;
    e.dtype !== "complex64" && e.dtype !== "string" && (s = e.size * yd(e.dtype)), this.state.numBytes += s, this.state.tensorInfo.has(e.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(e.dataId, {
      backend: t || this.backend,
      dtype: e.dtype,
      shape: e.shape,
      bytes: s
    })), e instanceof hc || this.track(e);
  }
  // Track the tensor by dataId and increase the refCount for the dataId in the
  // backend.
  // TODO(pyu10055): This is currently used by makeVariable method, to increase
  // refCount on the backend for the dataId. It can potentially be replaced with
  // Identity op indead of calling backend directly.
  incRef(e, t) {
    this.trackTensor(e, t), this.backend.incRef(e.dataId);
  }
  removeDataId(e, t) {
    this.state.tensorInfo.has(e) && this.state.tensorInfo.get(e).backend === t && (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
  }
  disposeTensor(e) {
    if (!this.state.tensorInfo.has(e.dataId))
      return;
    const t = this.state.tensorInfo.get(e.dataId);
    if (this.state.numTensors--, e.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= t.bytes), e.dtype !== "complex64" && e.dtype !== "string") {
      const s = e.size * yd(e.dtype);
      this.state.numBytes -= s;
    }
    t.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, t.backend);
  }
  disposeVariables() {
    for (const e in this.state.registeredVariables) {
      const t = this.state.registeredVariables[e];
      this.disposeVariable(t);
    }
  }
  disposeVariable(e) {
    this.disposeTensor(e), this.state.registeredVariables[e.name] != null && delete this.state.registeredVariables[e.name];
  }
  memory() {
    const e = this.backend.memory();
    return e.numTensors = this.state.numTensors, e.numDataBuffers = this.state.numDataBuffers, e.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (e.unreliable = !0, e.reasons == null && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
  }
  async profile(e) {
    this.state.profiling = !0;
    const t = this.state.numBytes, s = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await e(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((r) => r.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - t, this.state.activeProfile.newTensors = this.state.numTensors - s;
    for (const r of this.state.activeProfile.kernels)
      r.kernelTimeMs = await r.kernelTimeMs, r.extraInfo = await r.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(e, t, s, r, o, a) {
    const i = { id: this.state.nextTapeNodeId++, kernelName: e, inputs: t, outputs: s, saved: o }, l = Yg(e);
    l != null && (r = l.gradFunc), r != null && (i.gradient = (c) => (c = c.map((u, h) => {
      if (u == null) {
        const d = s[h], p = sn(d.size, d.dtype);
        return this.makeTensor(p, d.shape, d.dtype);
      }
      return u;
    }), r(c.length > 1 ? c : c[0], o, a))), this.state.activeTape.push(i);
  }
  keep(e) {
    return e.kept = !0, e;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  /**
   * Start a scope. Use this with endScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  startScope(e) {
    const t = {
      track: [],
      name: "unnamed scope",
      id: this.state.nextScopeId++
    };
    e && (t.name = e), this.state.scopeStack.push(t), this.state.activeScope = t;
  }
  /**
   * End a scope. Use this with startScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  endScope(e) {
    const t = h1(e), s = new Set(t.map((o) => o.id));
    for (let o = 0; o < this.state.activeScope.track.length; o++) {
      const a = this.state.activeScope.track[o];
      !a.kept && !s.has(a.id) && a.dispose();
    }
    const r = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], t.forEach((o) => {
      !o.kept && o.scopeId === r.id && this.track(o);
    });
  }
  /**
   * Returns gradients of `f` with respect to each of the `xs`. The gradients
   * returned are of the same length as `xs`, but some might be null if `f`
   * was not a function of that `x`. It also takes optional dy to multiply the
   * gradient, which defaults to `1`.
   */
  gradients(e, t, s, r = !1) {
    if (N(t.length > 0, () => "gradients() received an empty list of xs."), s != null && s.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);
    const o = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", e));
    N(o instanceof Je, () => "The result y returned by f() must be a tensor.");
    const a = bC(this.state.activeTape, t, o);
    if (!r && a.length === 0 && t.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const i = {};
      i[o.id] = s ?? kC(o.shape), xC(
        i,
        a,
        // Pass the tidy function to avoid circular dep with `tape.ts`.
        (c) => this.tidy(c),
        // Pass an add function to avoide a circular dep with `tape.ts`.
        TC
      );
      const l = t.map((c) => i[c.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((c) => {
        for (const u of c.saved)
          u.dispose();
      }), this.state.activeTape = null), { value: o, grads: l };
    });
  }
  customGrad(e) {
    return N(xd(e), () => "The f passed in customGrad(f) must be a function."), (...t) => {
      N(t.every((i) => i instanceof Je), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let s;
      const r = {};
      t.forEach((i, l) => {
        r[l] = i;
      });
      const o = (i, l) => (s = e(...t, l), N(s.value instanceof Je, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), N(xd(s.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), s.value), a = (i, l) => {
        const c = s.gradFunc(i, l), u = Array.isArray(c) ? c : [c];
        N(u.length === t.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), N(u.every((d) => d instanceof Je), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const h = {};
        return u.forEach((d, p) => {
          h[p] = () => d;
        }), h;
      };
      return this.runKernelFunc({
        forwardFunc: o,
        backwardsFunc: a,
        inputs: r
      });
    };
  }
  readSync(e) {
    return this.state.tensorInfo.get(e).backend.readSync(e);
  }
  read(e) {
    return this.state.tensorInfo.get(e).backend.read(e);
  }
  readToGPU(e, t) {
    return this.state.tensorInfo.get(e).backend.readToGPU(e, t);
  }
  async time(e) {
    const t = bn(), s = await this.backend.time(e);
    return s.wallMs = bn() - t, s;
  }
  /**
   * Tracks a Tensor in the current scope to be automatically cleaned up
   * when the current scope ends, and returns the value.
   *
   * @param result The Tensor to track in the current scope.
   */
  track(e) {
    return this.state.activeScope != null && (e.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(e)), e;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  /**
   * Resets the engine state. Removes all backends but does not remove
   * registered backend factories.
   */
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new a0();
    for (const e in this.registry)
      this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
Jo.nextTensorId = 0;
Jo.nextVariableId = 0;
function kC(n) {
  const e = wp(Z(n), "float32");
  return _.makeTensor(e, n, "float32");
}
function p1() {
  const n = Jy();
  if (n._tfengine == null) {
    const e = new Y$(n);
    n._tfengine = new Jo(e);
  }
  return eC(n._tfengine.ENV), IC(() => n._tfengine), n._tfengine;
}
const _ = p1();
function TC(n, e) {
  const t = { a: n, b: e };
  return _.runKernel(ma, t);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EC() {
  return typeof navigator < "u" && navigator != null;
}
function f1(n) {
  if (n || EC()) {
    if (n || (n = navigator), n.product === "ReactNative")
      return !0;
    const e = n.userAgent || n.vendor || // tslint:disable-next-line:no-any
    (typeof window < "u" ? window.opera : "");
    if (!e) {
      const t = n;
      return t.userAgentData && t.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || // tslint:disable-next-line:max-line-length
    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
  }
  return !1;
}
function m1() {
  return typeof window < "u" && window.document != null || //@ts-ignore
  typeof WorkerGlobalScope < "u";
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fn = K();
Fn.registerFlag("DEBUG", () => !1, (n) => {
  n && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
Fn.registerFlag("IS_BROWSER", () => m1());
Fn.registerFlag("IS_NODE", () => typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u");
Fn.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
Fn.registerFlag("PROD", () => !1);
Fn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => Fn.getBool("DEBUG"));
Fn.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0);
Fn.registerFlag("IS_TEST", () => !1);
Fn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => !0);
Fn.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1);
Fn.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
Fn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1);
Fn.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _r(n, e) {
  let t = n;
  if (Hs(n))
    return e === "string" ? [] : [n.length];
  if (!Array.isArray(n))
    return [];
  const s = [];
  for (; Array.isArray(t) || Hs(t) && e !== "string"; )
    s.push(t.length), t = t[0];
  return Array.isArray(n) && K().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && g1(n, s, []), s;
}
function g1(n, e, t) {
  if (t = t || [], !Array.isArray(n) && !Hs(n)) {
    N(e.length === 0, () => `Element arr[${t.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);
    return;
  }
  N(e.length > 0, () => `Element arr[${t.join("][")}] should be a primitive, but is an array of ${n.length} elements`), N(n.length === e[0], () => `Element arr[${t.join("][")}] should have ${e[0]} elements, but has ${n.length} elements`);
  const s = e.slice(1);
  for (let r = 0; r < n.length; ++r)
    g1(n[r], s, t.concat(r));
}
function i0(n, e, t, s) {
  if (n !== "string_or_numeric") {
    if (n == null)
      throw new Error("Expected dtype cannot be null.");
    if (n !== "numeric" && n !== e || n === "numeric" && e === "string")
      throw new Error(`Argument '${t}' passed to '${s}' must be ${n} tensor, but got ${e} tensor`);
  }
}
function k(n, e, t, s = "numeric") {
  if (n instanceof Je)
    return i0(s, n.dtype, e, t), n;
  let r = ai(n);
  if (r !== "string" && ["bool", "int32", "float32"].indexOf(s) >= 0 && (r = s), i0(s, r, e, t), n == null || !Hs(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string") {
    const l = n == null ? "null" : n.constructor.name;
    throw new Error(`Argument '${e}' passed to '${t}' must be a Tensor or TensorLike, but got '${l}'`);
  }
  const o = _r(n, r);
  !Hs(n) && !Array.isArray(n) && (n = [n]);
  const i = r !== "string" ? go(n, r) : Ko(n, [], !0);
  return _.makeTensor(i, o, r);
}
function dc(n, e, t, s = "numeric") {
  if (!Array.isArray(n))
    throw new Error(`Argument ${e} passed to ${t} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return n.map((o, a) => k(o, `${e}[${a}]`, t, s));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const y1 = "__op";
function R(n) {
  const e = Object.keys(n);
  if (e.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);
  let t = e[0];
  const s = n[t];
  t.endsWith("_") && (t = t.substring(0, t.length - 1)), t = t + y1;
  const r = (...o) => {
    _.startScope(t);
    try {
      const a = s(...o);
      return Yo(a) && console.error("Cannot return a Promise inside of tidy."), _.endScope(a), a;
    } catch (a) {
      throw _.endScope(null), a;
    }
  };
  return Object.defineProperty(r, "name", { value: t, configurable: !0 }), r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DC(n, e) {
  const t = k(n, "real", "complex"), s = k(e, "imag", "complex");
  Pn(t.shape, s.shape, `real and imag shapes, ${t.shape} and ${s.shape}, must match in call to tf.complex().`);
  const r = { real: t, imag: s };
  return _.runKernel(Tp, r);
}
const Ir = R({ complex_: DC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Or(n, e, t, s) {
  if (s == null && (s = ai(n)), s === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!Hs(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (e != null) {
    Yy(e);
    const r = Z(e), o = Z(t);
    N(r === o, () => `Based on the provided shape, [${e}], the tensor should have ${r} values but has ${o}`);
    for (let a = 0; a < t.length; ++a) {
      const i = t[a], l = a === t.length - 1 ? i !== Z(e.slice(a)) : !0;
      N(t[a] === e[a] || !l, () => `Error creating a new Tensor. Inferred shape (${t}) does not match the provided shape (${e}). `);
    }
  }
  return !Hs(n) && !Array.isArray(n) && (n = [n]), e = e || t, n = s !== "string" ? go(n, s) : Ko(n, [], !0), _.makeTensor(n, e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ws(n, e, t) {
  const s = _r(n, t);
  return Or(n, e, s, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rd = {
  float32: 4,
  float16: 2,
  int32: 4,
  uint16: 2,
  uint8: 1,
  bool: 1,
  complex64: 8
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pc = 4;
async function Fd(n, e) {
  const t = [], s = [], r = Array.isArray(n) ? n.map((a) => a.name) : Object.keys(n);
  for (let a = 0; a < r.length; ++a) {
    const i = r[a], l = Array.isArray(n) ? n[a].tensor : n[i];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);
    const c = { name: i, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      const u = new Promise(async (h) => {
        const d = await l.bytes(), p = d.reduce((g, y) => g + y.length, 0) + pc * d.length, f = new Uint8Array(p);
        let m = 0;
        for (let g = 0; g < d.length; g++) {
          const y = d[g], b = new Uint8Array(new Uint32Array([y.length]).buffer);
          f.set(b, m), m += pc, f.set(y, m), m += y.length;
        }
        h(f);
      });
      s.push(u);
    } else
      s.push(l.data());
    e != null && (c.group = e), t.push(c);
  }
  const o = await Promise.all(s);
  return { data: AC(o), specs: t };
}
function b1(n, e) {
  const t = {};
  let s, r = 0;
  for (const o of e) {
    const a = o.name, i = o.dtype, l = o.shape, c = Z(l);
    let u;
    if ("quantization" in o) {
      const h = o.quantization;
      if (h.dtype === "uint8" || h.dtype === "uint16") {
        if (!("min" in h && "scale" in h))
          throw new Error(`Weight ${o.name} with quantization ${h.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (h.dtype === "float16") {
        if (i !== "float32")
          throw new Error(`Weight ${o.name} is quantized with ${h.dtype} which only supports weights of type float32 not ${i}.`);
      } else
        throw new Error(`Weight ${o.name} has unknown quantization dtype ${h.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      const d = Rd[h.dtype], p = n.slice(r, r + c * d), f = h.dtype === "uint8" ? new Uint8Array(p) : new Uint16Array(p);
      if (i === "float32")
        if (h.dtype === "uint8" || h.dtype === "uint16") {
          u = new Float32Array(f.length);
          for (let m = 0; m < f.length; m++) {
            const g = f[m];
            u[m] = g * h.scale + h.min;
          }
        } else if (h.dtype === "float16")
          s === void 0 && (s = PC()), u = s(f);
        else
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type float32.`);
      else if (i === "int32") {
        if (h.dtype !== "uint8" && h.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type int32.`);
        u = new Int32Array(f.length);
        for (let m = 0; m < f.length; m++) {
          const g = f[m];
          u[m] = Math.round(g * h.scale + h.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${a}': ${i}`);
      r += c * d;
    } else if (i === "string") {
      const h = Z(o.shape);
      u = [];
      for (let d = 0; d < h; d++) {
        const p = new Uint32Array(n.slice(r, r + pc))[0];
        r += pc;
        const f = new Uint8Array(n.slice(r, r + p));
        u.push(f), r += p;
      }
    } else {
      const h = Rd[i], d = n.slice(r, r + c * h);
      if (i === "float32")
        u = new Float32Array(d);
      else if (i === "int32")
        u = new Int32Array(d);
      else if (i === "bool")
        u = new Uint8Array(d);
      else if (i === "complex64") {
        u = new Float32Array(d);
        const p = new Float32Array(u.length / 2), f = new Float32Array(u.length / 2);
        for (let y = 0; y < p.length; y++)
          p[y] = u[y * 2], f[y] = u[y * 2 + 1];
        const m = Ws(p, l, "float32"), g = Ws(f, l, "float32");
        t[a] = Ir(m, g), m.dispose(), g.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${a}': ${i}`);
      r += c * h;
    }
    i !== "complex64" && (t[a] = Ws(u, l, i));
  }
  return t;
}
function AC(n) {
  if (n === null)
    throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
  let e = 0;
  const t = [];
  n.forEach((o) => {
    if (e += o.byteLength, t.push(o.byteLength === o.buffer.byteLength ? o : new o.constructor(o)), !(o instanceof Float32Array || o instanceof Int32Array || o instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`);
  });
  const s = new Uint8Array(e);
  let r = 0;
  return t.forEach((o) => {
    s.set(new Uint8Array(o.buffer), r), r += o.byteLength;
  }), s.buffer;
}
const kf = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function l0(n) {
  return kf ? Buffer.byteLength(n) : new Blob([n]).size;
}
function RC(n) {
  if (kf)
    return Buffer.from(n).toString("base64");
  const e = new Uint8Array(n);
  let t = "";
  for (let s = 0, r = e.length; s < r; s++)
    t += String.fromCharCode(e[s]);
  return btoa(t);
}
function FC(n) {
  if (kf) {
    const s = Buffer.from(n, "base64");
    return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
  }
  const e = atob(n), t = new Uint8Array(e.length);
  for (let s = 0; s < e.length; ++s)
    t.set([e.charCodeAt(s)], s);
  return t.buffer;
}
function ju(n) {
  if (n.length === 1)
    return n[0];
  let e = 0;
  n.forEach((r) => {
    e += r.byteLength;
  });
  const t = new Uint8Array(e);
  let s = 0;
  return n.forEach((r) => {
    t.set(new Uint8Array(r), s), s += r.byteLength;
  }), t.buffer;
}
function c0(n) {
  const e = "/";
  for (n = n.trim(); n.endsWith(e); )
    n = n.slice(0, n.length - 1);
  const t = n.split(e);
  return t[t.length - 1];
}
function x1(n, e) {
  const t = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy,
    weightsManifest: e
  };
  return n.signature != null && (t.signature = n.signature), n.userDefinedMetadata != null && (t.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (t.modelInitializer = n.modelInitializer), n.trainingConfig != null && (t.trainingConfig = n.trainingConfig), t;
}
function w1(n, e, t) {
  const s = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy
  };
  if (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig), n.weightsManifest != null) {
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!t)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    s.weightSpecs = e, s.weightData = t;
  }
  return n.signature != null && (s.signature = n.signature), n.userDefinedMetadata != null && (s.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (s.modelInitializer = n.modelInitializer), s;
}
async function Tf(n, e) {
  let t, s;
  return n.weightsManifest != null && ([t, s] = await e(n.weightsManifest)), w1(n, t, s);
}
function nl(n) {
  if (n.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return {
    dateSaved: /* @__PURE__ */ new Date(),
    modelTopologyType: "JSON",
    modelTopologyBytes: n.modelTopology == null ? 0 : l0(JSON.stringify(n.modelTopology)),
    weightSpecsBytes: n.weightSpecs == null ? 0 : l0(JSON.stringify(n.weightSpecs)),
    weightDataBytes: n.weightData == null ? 0 : n.weightData.byteLength
  };
}
function v1(n) {
  const e = [];
  for (const t of n)
    e.push(...t.weights);
  return e;
}
function _C() {
  const n = (t) => {
    let s = t << 13, r = 0;
    for (; !(s & 8388608); )
      r -= 8388608, s <<= 1;
    return s &= -8388609, r += 947912704, s | r;
  }, e = new Uint32Array(2048);
  e[0] = 0;
  for (let t = 1; t < 1024; t++)
    e[t] = n(t);
  for (let t = 1024; t < 2048; t++)
    e[t] = 939524096 + (t - 1024 << 13);
  return e;
}
function OC() {
  const n = new Uint32Array(64);
  n[0] = 0, n[31] = 1199570944, n[32] = 2147483648, n[63] = 3347054592;
  for (let e = 1; e < 31; e++)
    n[e] = e << 23;
  for (let e = 33; e < 63; e++)
    n[e] = 2147483648 + (e - 32 << 23);
  return n;
}
function LC() {
  const n = new Uint32Array(64);
  for (let e = 0; e < 64; e++)
    n[e] = 1024;
  return n[0] = n[32] = 0, n;
}
function PC() {
  const n = _C(), e = OC(), t = LC();
  return (s) => {
    const r = new ArrayBuffer(4 * s.length), o = new Uint32Array(r);
    for (let a = 0; a < s.length; a++) {
      const i = s[a], l = n[t[i >> 10] + (i & 1023)] + e[i >> 10];
      o[a] = l;
    }
    return new Float32Array(r);
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bt {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return bt.instance == null && (bt.instance = new bt()), bt.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerSaveRouter(e) {
    bt.getInstance().saveRouters.push(e);
  }
  /**
   * Register a load-handler router.
   *
   * @param loadRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `load` method defined or `null`.
   */
  static registerLoadRouter(e) {
    bt.getInstance().loadRouters.push(e);
  }
  /**
   * Look up IOHandler for saving, given a URL-like string.
   *
   * @param url
   * @returns If only one match is found, an instance of IOHandler with the
   * `save` method defined. If no match is found, `null`.
   * @throws Error, if more than one match is found.
   */
  static getSaveHandlers(e) {
    return bt.getHandlers(e, "save");
  }
  /**
   * Look up IOHandler for loading, given a URL-like string.
   *
   * @param url
   * @param loadOptions Optional, custom load options.
   * @returns All valid handlers for `url`, given the currently registered
   *   handler routers.
   */
  static getLoadHandlers(e, t) {
    return bt.getHandlers(e, "load", t);
  }
  static getHandlers(e, t, s) {
    const r = [];
    return (t === "load" ? bt.getInstance().loadRouters : bt.getInstance().saveRouters).forEach((a) => {
      const i = a(e, s);
      i !== null && r.push(i);
    }), r;
  }
}
const zC = (n) => bt.registerSaveRouter(n), MC = (n) => bt.registerLoadRouter(n), I1 = (n) => bt.getSaveHandlers(n), BC = (n, e) => bt.getLoadHandlers(n, e);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _d = "tensorflowjs", Od = 1, eo = "models_store", mr = "model_info_store";
function $1() {
  if (!K().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const n = typeof window > "u" ? self : window, e = n.indexedDB || n.mozIndexedDB || n.webkitIndexedDB || n.msIndexedDB || n.shimIndexedDB;
  if (e == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return e;
}
function Ld(n) {
  const e = n.result;
  e.createObjectStore(eo, { keyPath: "modelPath" }), e.createObjectStore(mr, { keyPath: "modelPath" });
}
class ao {
  constructor(e) {
    if (this.indexedDB = $1(), e == null || !e)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = e;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, e);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  /**
   * Perform database action to put model artifacts into or read model artifacts
   * from IndexedDB object store.
   *
   * Whether the action is put or get depends on whether `modelArtifacts` is
   * specified. If it is specified, the action will be put; otherwise the action
   * will be get.
   *
   * @param modelPath A unique string path for the model.
   * @param modelArtifacts If specified, it will be the model artifacts to be
   *   stored in IndexedDB.
   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
   *   of `ModelArtifacts`, if the action is get.
   */
  databaseAction(e, t) {
    return new Promise((s, r) => {
      const o = this.indexedDB.open(_d, Od);
      o.onupgradeneeded = () => Ld(o), o.onsuccess = () => {
        const a = o.result;
        if (t == null) {
          const i = a.transaction(eo, "readonly"), c = i.objectStore(eo).get(this.modelPath);
          c.onsuccess = () => {
            if (c.result == null)
              return a.close(), r(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            s(c.result.modelArtifacts);
          }, c.onerror = (u) => (a.close(), r(c.error)), i.oncomplete = () => a.close();
        } else {
          const i = nl(t), l = a.transaction(mr, "readwrite");
          let c = l.objectStore(mr);
          const u = c.put({ modelPath: this.modelPath, modelArtifactsInfo: i });
          let h;
          u.onsuccess = () => {
            h = a.transaction(eo, "readwrite");
            const p = h.objectStore(eo).put({
              modelPath: this.modelPath,
              modelArtifacts: t,
              modelArtifactsInfo: i
            });
            p.onsuccess = () => s({ modelArtifactsInfo: i }), p.onerror = (f) => {
              c = l.objectStore(mr);
              const m = c.delete(this.modelPath);
              m.onsuccess = () => (a.close(), r(p.error)), m.onerror = (g) => (a.close(), r(p.error));
            };
          }, u.onerror = (d) => (a.close(), r(u.error)), l.oncomplete = () => {
            h == null ? a.close() : h.oncomplete = () => a.close();
          };
        }
      }, o.onerror = (a) => r(o.error);
    });
  }
}
ao.URL_SCHEME = "indexeddb://";
const C1 = (n) => K().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(ao.URL_SCHEME) ? VC(n.slice(ao.URL_SCHEME.length)) : null;
bt.registerSaveRouter(C1);
bt.registerLoadRouter(C1);
function VC(n) {
  return new ao(n);
}
function WC(n) {
  return n.startsWith(ao.URL_SCHEME) ? n.slice(ao.URL_SCHEME.length) : n;
}
class UC {
  constructor() {
    this.indexedDB = $1();
  }
  async listModels() {
    return new Promise((e, t) => {
      const s = this.indexedDB.open(_d, Od);
      s.onupgradeneeded = () => Ld(s), s.onsuccess = () => {
        const r = s.result, o = r.transaction(mr, "readonly"), i = o.objectStore(mr).getAll();
        i.onsuccess = () => {
          const l = {};
          for (const c of i.result)
            l[c.modelPath] = c.modelArtifactsInfo;
          e(l);
        }, i.onerror = (l) => (r.close(), t(i.error)), o.oncomplete = () => r.close();
      }, s.onerror = (r) => t(s.error);
    });
  }
  async removeModel(e) {
    return e = WC(e), new Promise((t, s) => {
      const r = this.indexedDB.open(_d, Od);
      r.onupgradeneeded = () => Ld(r), r.onsuccess = () => {
        const o = r.result, a = o.transaction(mr, "readwrite"), i = a.objectStore(mr), l = i.get(e);
        let c;
        l.onsuccess = () => {
          if (l.result == null)
            return o.close(), s(new Error(`Cannot find model with path '${e}' in IndexedDB.`));
          {
            const u = i.delete(e), h = () => {
              c = o.transaction(eo, "readwrite");
              const p = c.objectStore(eo).delete(e);
              p.onsuccess = () => t(l.result.modelArtifactsInfo), p.onerror = (f) => s(l.error);
            };
            u.onsuccess = h, u.onerror = (d) => (h(), o.close(), s(l.error));
          }
        }, l.onerror = (u) => (o.close(), s(l.error)), a.oncomplete = () => {
          c == null ? o.close() : c.oncomplete = () => o.close();
        };
      }, r.onerror = (o) => s(r.error);
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Zs = "/", _o = "tensorflowjs_models", S1 = "info", GC = "model_topology", HC = "weight_specs", jC = "weight_data", qC = "model_metadata";
function N1(n) {
  return {
    info: [_o, n, S1].join(Zs),
    topology: [_o, n, GC].join(Zs),
    weightSpecs: [_o, n, HC].join(Zs),
    weightData: [_o, n, jC].join(Zs),
    modelMetadata: [_o, n, qC].join(Zs)
  };
}
function k1(n) {
  for (const e of Object.values(n))
    window.localStorage.removeItem(e);
}
function KC(n) {
  const e = n.split(Zs);
  if (e.length < 3)
    throw new Error(`Invalid key format: ${n}`);
  return e.slice(1, e.length - 1).join(Zs);
}
function XC(n) {
  return n.startsWith(io.URL_SCHEME) ? n.slice(io.URL_SCHEME.length) : n;
}
class io {
  constructor(e) {
    if (!K().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, e == null || !e)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = e, this.keys = N1(this.modelPath);
  }
  /**
   * Save model artifacts to browser local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @param modelArtifacts The model artifacts to be stored.
   * @returns An instance of SaveResult.
   */
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const t = JSON.stringify(e.modelTopology), s = JSON.stringify(e.weightSpecs), r = nl(e);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(r)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, s), this.LS.setItem(this.keys.weightData, RC(e.weightData));
        const o = {
          format: e.format,
          generatedBy: e.generatedBy,
          convertedBy: e.convertedBy,
          signature: e.signature != null ? e.signature : void 0,
          userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0,
          modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0,
          trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0
        };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(o)), { modelArtifactsInfo: r };
      } catch {
        throw k1(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`);
      }
    }
  }
  /**
   * Load a model from local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @returns The loaded model (if loading succeeds).
   */
  async load() {
    const e = JSON.parse(this.LS.getItem(this.keys.info));
    if (e == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const t = {}, s = JSON.parse(this.LS.getItem(this.keys.topology));
    if (s == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t.modelTopology = s;
    const r = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (r == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    t.weightSpecs = r;
    const o = this.LS.getItem(this.keys.modelMetadata);
    if (o != null) {
      const i = JSON.parse(o);
      t.format = i.format, t.generatedBy = i.generatedBy, t.convertedBy = i.convertedBy, i.signature != null && (t.signature = i.signature), i.userDefinedMetadata != null && (t.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (t.modelInitializer = i.modelInitializer), i.trainingConfig != null && (t.trainingConfig = i.trainingConfig);
    }
    const a = this.LS.getItem(this.keys.weightData);
    if (a == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return t.weightData = FC(a), t;
  }
}
io.URL_SCHEME = "localstorage://";
const T1 = (n) => K().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(io.URL_SCHEME) ? YC(n.slice(io.URL_SCHEME.length)) : null;
bt.registerSaveRouter(T1);
bt.registerLoadRouter(T1);
function YC(n) {
  return new io(n);
}
class ZC {
  constructor() {
    N(K().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), N(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const e = {}, t = _o + Zs, s = Zs + S1;
    for (let r = 0; r < this.LS.length; ++r) {
      const o = this.LS.key(r);
      if (o.startsWith(t) && o.endsWith(s)) {
        const a = KC(o);
        e[a] = JSON.parse(this.LS.getItem(o));
      }
    }
    return e;
  }
  async removeModel(e) {
    e = XC(e);
    const t = N1(e);
    if (this.LS.getItem(t.info) == null)
      throw new Error(`Cannot find model at path '${e}'`);
    const s = JSON.parse(this.LS.getItem(t.info));
    return k1(t), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wo = "://";
class ln {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return ln.instance == null && (ln.instance = new ln()), ln.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerManager(e, t) {
    N(e != null, () => "scheme must not be undefined or null."), e.endsWith(Wo) && (e = e.slice(0, e.indexOf(Wo))), N(e.length > 0, () => "scheme must not be an empty string.");
    const s = ln.getInstance();
    N(s.managers[e] == null, () => `A model store manager is already registered for scheme '${e}'.`), s.managers[e] = t;
  }
  static getManager(e) {
    const t = ln.getInstance().managers[e];
    if (t == null)
      throw new Error(`Cannot find model manager for scheme '${e}'`);
    return t;
  }
  static getSchemes() {
    return Object.keys(ln.getInstance().managers);
  }
}
function tc(n) {
  if (n.indexOf(Wo) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ln.getSchemes().join(",")}`);
  return {
    scheme: n.split(Wo)[0],
    path: n.split(Wo)[1]
  };
}
async function E1(n, e, t = !1) {
  N(n !== e, () => `Old path and new path are the same: '${n}'`);
  const s = bt.getLoadHandlers(n);
  N(s.length > 0, () => `Copying failed because no load handler is found for source URL ${n}.`), N(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);
  const r = s[0], o = bt.getSaveHandlers(e);
  N(o.length > 0, () => `Copying failed because no save handler is found for destination URL ${e}.`), N(o.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${e}.`);
  const a = o[0], i = tc(n).scheme, l = tc(n).path, c = i === tc(n).scheme, u = await r.load();
  t && c && await ln.getManager(i).removeModel(l);
  const h = await a.save(u);
  return t && !c && await ln.getManager(i).removeModel(l), h.modelArtifactsInfo;
}
async function JC() {
  const n = ln.getSchemes(), e = {};
  for (const t of n) {
    const s = await ln.getManager(t).listModels();
    for (const r in s) {
      const o = t + Wo + r;
      e[o] = s[r];
    }
  }
  return e;
}
async function QC(n) {
  const e = tc(n);
  return ln.getManager(e.scheme).removeModel(e.path);
}
async function eS(n, e) {
  return E1(n, e, !1);
}
async function tS(n, e) {
  return E1(n, e, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nS {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1;
  }
  fetch(e, t) {
    return fetch(e, t);
  }
  now() {
    return performance.now();
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e);
  }
  decode(e, t) {
    return new TextDecoder(t).decode(e);
  }
  // If the setTimeout nesting level is greater than 5 and timeout is less
  // than 4ms, timeout will be clamped to 4ms, which hurts the perf.
  // Interleaving window.postMessage and setTimeout will trick the browser and
  // avoid the clamp.
  setTimeoutCustom(e, t) {
    if (!window || !K().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(e, t);
      return;
    }
    this.functionRefs.push(e), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, t), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", (s) => {
      if (s.source === window && s.data.name === this.messageName) {
        s.stopPropagation();
        const r = this.functionRefs[s.data.index];
        r(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, !0));
  }
}
if (K().get("IS_BROWSER")) {
  K().setPlatform("browser", new nS());
  try {
    ln.registerManager(io.URL_SCHEME, new ZC());
  } catch {
  }
  try {
    ln.registerManager(ao.URL_SCHEME, new UC());
  } catch {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sS = {
  // tslint:disable-next-line:no-require-imports
  importFetch: () => require("node-fetch")
};
let qh;
class rS {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(e, t) {
    return K().global.fetch != null ? K().global.fetch(e, t) : (qh == null && (qh = sS.importFetch()), qh(e, t));
  }
  now() {
    const e = process.hrtime();
    return e[0] * 1e3 + e[1] / 1e6;
  }
  encode(e, t) {
    if (t !== "utf-8" && t !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);
    return this.textEncoder.encode(e);
  }
  decode(e, t) {
    return e.length === 0 ? "" : new this.util.TextDecoder(t).decode(e);
  }
}
K().get("IS_NODE") && !K().get("IS_BROWSER") && K().setPlatform("node", new rS());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Le(n, e = "float32", t) {
  return e = e || "float32", Yy(n), new Gt(n, e, t);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oS(n, e) {
  const t = k(n, "x", "cast");
  if (!q$(e))
    throw new Error(`Failed to cast to unknown dtype ${e}`);
  if (e === "string" && t.dtype !== "string" || e !== "string" && t.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  const s = { x: t }, r = { dtype: e };
  return _.runKernel(fi, s, r);
}
const fe = R({ cast_: oS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aS(n) {
  const t = { x: k(n, "x", "clone", "string_or_numeric") };
  return _.runKernel(ki, t);
}
const Qs = R({ clone_: aS });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D1(n, e = !1) {
  console.log(n.toString(e));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
p1();
const iS = {
  buffer: Le,
  cast: fe,
  clone: Qs,
  print: D1
};
$C(iS);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lS = "model", cS = ".json", uS = ".weights.bin";
function u0(n) {
  return new Promise((e) => setTimeout(e)).then(n);
}
class lo {
  constructor(e) {
    if (!K().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e.startsWith(lo.URL_SCHEME) && (e = e.slice(lo.URL_SCHEME.length)), (e == null || e.length === 0) && (e = lS), this.modelJsonFileName = e + cS, this.weightDataFileName = e + uS;
  }
  async save(e) {
    if (typeof document > "u")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    const t = window.URL.createObjectURL(new Blob([e.weightData], { type: "application/octet-stream" }));
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      const s = [{
        paths: ["./" + this.weightDataFileName],
        weights: e.weightSpecs
      }], r = x1(e, s), o = window.URL.createObjectURL(new Blob([JSON.stringify(r)], { type: "application/json" })), a = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (a.download = this.modelJsonFileName, a.href = o, await u0(() => a.dispatchEvent(new MouseEvent("click"))), e.weightData != null) {
        const i = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        i.download = this.weightDataFileName, i.href = t, await u0(() => i.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: nl(e) };
    }
  }
}
lo.URL_SCHEME = "downloads://";
class hS {
  constructor(e) {
    if (e == null || e.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);
    this.jsonFile = e[0], this.weightsFiles = e.slice(1);
  }
  async load() {
    return new Promise((e, t) => {
      const s = new FileReader();
      s.onload = (r) => {
        const o = JSON.parse(r.target.result), a = o.modelTopology;
        if (a == null) {
          t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (o.weightsManifest == null) {
          t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          e({ modelTopology: a });
          return;
        }
        const l = Tf(o, (c) => this.loadWeights(c));
        e(l);
      }, s.onerror = (r) => t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), s.readAsText(this.jsonFile);
    });
  }
  loadWeights(e) {
    const t = [], s = [];
    for (const a of e)
      t.push(...a.weights), s.push(...a.paths);
    const r = this.checkManifestAndWeightFiles(e), o = s.map((a) => this.loadWeightsFile(a, r[a]));
    return Promise.all(o).then((a) => [t, ju(a)]);
  }
  loadWeightsFile(e, t) {
    return new Promise((s, r) => {
      const o = new FileReader();
      o.onload = (a) => {
        const i = a.target.result;
        s(i);
      }, o.onerror = (a) => r(`Failed to weights data from file of path '${e}'.`), o.readAsArrayBuffer(t);
    });
  }
  /**
   * Check the compatibility between weights manifest and weight files.
   */
  checkManifestAndWeightFiles(e) {
    const t = [], s = this.weightsFiles.map((o) => c0(o.name)), r = {};
    for (const o of e)
      o.paths.forEach((a) => {
        const i = c0(a);
        if (t.indexOf(i) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);
        if (t.push(i), s.indexOf(i) === -1)
          throw new Error(`Weight file with basename '${i}' is not provided.`);
        r[a] = this.weightsFiles[s.indexOf(i)];
      });
    if (t.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return r;
  }
}
const dS = (n) => K().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(lo.URL_SCHEME) ? pS(n.slice(lo.URL_SCHEME.length)) : null;
bt.registerSaveRouter(dS);
function pS(n = "model") {
  return new lo(n);
}
function fS(n) {
  return new hS(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h0(n, e, t, s) {
  a(n), t = t ?? 0, s = s ?? 1, i(t, s);
  let r = 0;
  const o = (l) => (l.then((c) => {
    const u = t + ++r / n.length * (s - t);
    return e(u), c;
  }), l);
  function a(l) {
    N(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function i(l, c) {
    N(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), N(c >= 0 && c <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${c}`), N(c >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`);
  }
  return Promise.all(n.map(o));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function A1(n, e) {
  e == null && (e = {});
  const t = e.fetchFunc == null ? K().platform.fetch : e.fetchFunc, s = n.map((h) => t(h, e.requestInit, { isBinary: !0 })), i = (e.onProgress == null ? await Promise.all(s) : await h0(s, e.onProgress, 0, 0.5)).map((h) => h.arrayBuffer());
  return e.onProgress == null ? await Promise.all(i) : await h0(i, e.onProgress, 0.5, 1);
}
async function mS(n, e = "", t, s) {
  return R1((a) => A1(a, { requestInit: s }))(n, e, t);
}
function R1(n) {
  return async (e, t = "", s) => {
    const r = e.map(() => !1), o = {}, a = s != null ? s.map(() => !1) : [], i = [];
    if (e.forEach((p, f) => {
      let m = 0;
      p.weights.forEach((g) => {
        const y = "quantization" in g ? g.quantization.dtype : g.dtype, b = Rd[y] * Z(g.shape), w = () => {
          r[f] = !0, o[f] == null && (o[f] = []), o[f].push({
            manifestEntry: g,
            groupOffset: m,
            sizeBytes: b
          });
        };
        s != null ? s.forEach((x, v) => {
          x === g.name && (w(), a[v] = !0);
        }) : w(), i.push(g.name), m += b;
      });
    }), !a.every((p) => p)) {
      const p = s.filter((f, m) => !a[m]);
      throw new Error(`Could not find weights in manifest with names: ${p.join(", ")}. 
Manifest JSON has weights with names: ${i.join(", ")}.`);
    }
    const l = r.reduce((p, f, m) => (f && p.push(m), p), []), c = [];
    l.forEach((p) => {
      e[p].paths.forEach((f) => {
        const m = t + (t.endsWith("/") ? "" : "/") + f;
        c.push(m);
      });
    });
    const u = await n(c), h = {};
    let d = 0;
    return l.forEach((p) => {
      const f = e[p].paths.length;
      let m = 0;
      for (let x = 0; x < f; x++)
        m += u[d + x].byteLength;
      const g = new ArrayBuffer(m), y = new Uint8Array(g);
      let b = 0;
      for (let x = 0; x < f; x++) {
        const v = new Uint8Array(u[d + x]);
        y.set(v, b), b += v.byteLength;
      }
      o[p].forEach((x) => {
        const v = g.slice(x.groupOffset, x.groupOffset + x.sizeBytes), $ = b1(v, [x.manifestEntry]);
        for (const C in $)
          h[C] = $[C];
      }), d += f;
    }), h;
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gS = "application/octet-stream", yS = "application/json";
class Ef {
  constructor(e, t) {
    if (this.DEFAULT_METHOD = "POST", t == null && (t = {}), this.weightPathPrefix = t.weightPathPrefix, this.onProgress = t.onProgress, this.weightUrlConverter = t.weightUrlConverter, t.fetchFunc != null ? (N(typeof t.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t.fetchFunc) : this.fetch = K().platform.fetch, N(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && N(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, t.requestInit != null && t.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = t.requestInit || {};
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    const t = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    t.body = new FormData();
    const s = [{
      paths: ["./model.weights.bin"],
      weights: e.weightSpecs
    }], r = x1(e, s);
    t.body.append("model.json", new Blob([JSON.stringify(r)], { type: yS }), "model.json"), e.weightData != null && t.body.append("model.weights.bin", new Blob([e.weightData], { type: gS }), "model.weights.bin");
    const o = await this.fetch(this.path, t);
    if (o.ok)
      return {
        modelArtifactsInfo: nl(e),
        responses: [o]
      };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${o.status}.`);
  }
  /**
   * Load model artifacts via HTTP request(s).
   *
   * See the documentation to `tf.io.http` for details on the saved
   * artifacts.
   *
   * @returns The loaded model artifacts (if loading succeeds).
   */
  async load() {
    const e = await this.fetch(this.path, this.requestInit);
    if (!e.ok)
      throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);
    let t;
    try {
      t = await e.json();
    } catch {
      let a = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? a += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : a += " Please make sure the server is serving valid JSON for this request.", new Error(a);
    }
    const s = t.modelTopology, r = t.weightsManifest;
    if (s == null && r == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return Tf(t, (o) => this.loadWeights(o));
  }
  async loadWeights(e) {
    const t = Array.isArray(this.path) ? this.path[1] : this.path, [s, r] = bS(t), o = this.weightPathPrefix || s, a = v1(e), i = [], l = [];
    for (const u of e)
      for (const h of u.paths)
        this.weightUrlConverter != null ? l.push(this.weightUrlConverter(h)) : i.push(o + h + r);
    this.weightUrlConverter && i.push(...await Promise.all(l));
    const c = await A1(i, {
      requestInit: this.requestInit,
      fetchFunc: this.fetch,
      onProgress: this.onProgress
    });
    return [a, ju(c)];
  }
}
Ef.URL_SCHEME_REGEX = /^https?:\/\//;
function bS(n) {
  const e = n.lastIndexOf("/"), t = n.lastIndexOf("?"), s = n.substring(0, e), r = t > e ? n.substring(t) : "";
  return [s + "/", r];
}
function Pd(n) {
  return n.match(Ef.URL_SCHEME_REGEX) != null;
}
const F1 = (n, e) => {
  if (typeof fetch > "u" && (e == null || e.fetchFunc == null))
    return null;
  {
    let t = !0;
    if (Array.isArray(n) ? t = n.every((s) => Pd(s)) : t = Pd(n), t)
      return Df(n, e);
  }
  return null;
};
bt.registerSaveRouter(F1);
bt.registerLoadRouter(F1);
function Df(n, e) {
  return new Ef(n, e);
}
function xS(n, e) {
  return Df(n, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Kh {
  constructor(e) {
    this.modelArtifacts = e;
  }
  load() {
    return this.modelArtifacts;
  }
}
class _1 {
  constructor(e) {
    this.saveHandler = e;
  }
  save(e) {
    return this.saveHandler(e);
  }
}
class wS {
  constructor(e) {
    e.load && (this.load = () => Promise.resolve(e.load())), e.save && (this.save = (t) => Promise.resolve(e.save(t)));
  }
}
function vS(n, e, t, s) {
  const r = arguments;
  return new wS(O1(...r));
}
function O1(n, e, t, s) {
  return arguments.length === 1 ? n.modelTopology != null || n.weightSpecs != null ? new Kh(n) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Kh({ modelTopology: n })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Kh({
    modelTopology: n,
    weightSpecs: e,
    weightData: t,
    trainingConfig: s
  }));
}
function IS(n) {
  return new _1(n);
}
function $S(n) {
  return new _1(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const L1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  browserFiles: fS,
  browserHTTPRequest: xS,
  concatenateArrayBuffers: ju,
  copyModel: eS,
  decodeWeights: b1,
  encodeWeights: Fd,
  fromMemory: vS,
  fromMemorySync: O1,
  getLoadHandlers: BC,
  getModelArtifactsForJSON: Tf,
  getModelArtifactsForJSONSync: w1,
  getModelArtifactsInfoForJSON: nl,
  getSaveHandlers: I1,
  getWeightSpecs: v1,
  http: Df,
  isHTTPScheme: Pd,
  listModels: JC,
  loadWeights: mS,
  moveModel: tS,
  registerLoadRouter: MC,
  registerSaveRouter: zC,
  removeModel: QC,
  weightsLoaderFactory: R1,
  withSaveHandler: IS,
  withSaveHandlerSync: $S
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CS(n, e, t = !1, s = !1) {
  let r = k(n, "a", "matMul"), o = k(e, "b", "matMul");
  [r, o] = It(r, o);
  const a = { a: r, b: o }, i = { transposeA: t, transposeB: s };
  return _.runKernel(Yc, a, i);
}
const Me = R({ matMul_: CS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SS(n, e, t = 1, s = 0, r = "int32") {
  if (e < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);
  const a = { indices: k(n, "indices", "oneHot", "int32") }, i = { dtype: r, depth: e, onValue: t, offValue: s };
  return _.runKernel(ku, a, i);
}
const Af = R({ oneHot_: SS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fr() {
  return _;
}
function d0() {
  return _.memory();
}
function H(n, e) {
  return _.tidy(n, e);
}
function Be(n) {
  h1(n).forEach((t) => t.dispose());
}
function Yt(n) {
  return _.keep(n);
}
function NS() {
  return _.backendName;
}
function P1(n, e, t = 1) {
  return _.registerBackend(n, e, t);
}
function kS() {
  return _.backend;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TS(n) {
  const t = { input: k(n, "input", "imag") };
  return _.runKernel(jp, t);
}
const qu = R({ imag_: TS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ES(n) {
  const t = { x: k(n, "x", "neg") };
  return _.runKernel(Cu, t);
}
const gt = R({ neg_: ES });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DS(n) {
  const t = { input: k(n, "input", "real") };
  return _.runKernel(of, t);
}
const Ha = R({ real_: DS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AS(n, e, t) {
  const s = k(n, "x", "transpose");
  if (e == null && (e = s.shape.map((a, i) => i).reverse()), N(s.rank === e.length, () => `Error in transpose: rank of input ${s.rank} must match length of perm ${e}.`), e.forEach((a) => {
    N(a >= 0 && a < s.rank, () => `All entries in 'perm' must be between 0 and ${s.rank - 1} but got ${e}`);
  }), s.rank <= 1)
    return s.clone();
  const r = { x: s }, o = { perm: e };
  return s.dtype === "complex64" ? H(() => {
    let a = Ha(s), i = qu(s);
    return a = _.runKernel(Vo, { x: a }, o), i = _.runKernel(Vo, { x: i }, o), t && (i = gt(i)), Ir(a, i);
  }) : _.runKernel(Vo, r, o);
}
const We = R({ transpose_: AS });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qo(n, e) {
  const t = n.length, s = [];
  for (let r = 0; r < t; r++) {
    const o = t - 1 - r, a = n[o] || 1;
    (e[e.length - 1 - r] || 1) > 1 && a === 1 && s.unshift(o);
  }
  return s;
}
function Pt(n, e) {
  const t = [];
  for (let s = 0; s < e.length; s++) {
    const r = n[n.length - s - 1], o = e.length - s - 1, a = e[o];
    (r == null || r === 1 && a > 1) && t.unshift(o);
  }
  return t;
}
function Fe(n, e) {
  const t = [], s = Math.max(n.length, e.length);
  for (let r = 0; r < s; r++) {
    let o = n[n.length - r - 1];
    o == null && (o = 1);
    let a = e[e.length - r - 1];
    if (a == null && (a = 1), o === 1)
      t.unshift(a);
    else if (a === 1)
      t.unshift(o);
    else if (o !== a) {
      const i = `Operands could not be broadcast together with shapes ${n} and ${e}.`;
      throw Error(i);
    } else
      t.unshift(o);
  }
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z1(n, e, t) {
  if (pa(n), e != null && e.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  const s = _r(n, t);
  if (s.length !== 3 && s.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (s.length === 1 && e == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Or(n, e, s, t);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Gr;
function RS(n, e = 3) {
  if (e > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (n == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let t = !1, s = !1, r = !1, o = !1, a = !1, i = !1;
  if (n.data instanceof Uint8Array)
    t = !0;
  else if (typeof ImageData < "u" && n instanceof ImageData)
    s = !0;
  else if (typeof HTMLVideoElement < "u" && n instanceof HTMLVideoElement)
    r = !0;
  else if (typeof HTMLImageElement < "u" && n instanceof HTMLImageElement)
    o = !0;
  else if (n.getContext != null)
    a = !0;
  else if (typeof ImageBitmap < "u" && n instanceof ImageBitmap)
    i = !0;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);
  if (Sd($d, _.backendName) != null) {
    const f = { pixels: n }, m = { numChannels: e };
    return _.runKernel($d, f, m);
  }
  const [c, u] = r ? [
    n.videoWidth,
    n.videoHeight
  ] : [n.width, n.height];
  let h;
  if (a)
    h = // tslint:disable-next-line:no-any
    n.getContext("2d").getImageData(0, 0, c, u).data;
  else if (s || t)
    h = n.data;
  else if (o || r || i) {
    if (Gr == null)
      if (typeof document > "u")
        if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u")
          Gr = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        Gr = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 });
    Gr.canvas.width = c, Gr.canvas.height = u, Gr.drawImage(n, 0, 0, c, u), h = Gr.getImageData(0, 0, c, u).data;
  }
  let d;
  if (e === 4)
    d = new Int32Array(h);
  else {
    const f = c * u;
    d = new Int32Array(f * e);
    for (let m = 0; m < f; m++)
      for (let g = 0; g < e; ++g)
        d[m * e + g] = h[m * 4 + g];
  }
  return z1(d, [u, c, e], "int32");
}
const M1 = R({ fromPixels_: RS });
function Rf(n, e) {
  const t = n.shape.length, s = e.shape.length;
  if (t < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t}.`);
  if (s < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
  if (e.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);
  if (e.shape[s - 1] > t)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[s - 1]} vs. ${t}`);
  if (Z(n.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);
  const r = e.shape, o = r[r.length - 1];
  let a = 1;
  for (let h = 0; h < r.length - 1; ++h)
    a *= r[h];
  const i = n.shape, l = r.slice();
  l.pop();
  let c = 1;
  for (let h = o; h < t; ++h)
    c *= i[h], l.push(i[h]);
  const u = [
    ...ke(n.shape).map((h) => h / c),
    1
  ].slice(0, o);
  return [l, a, c, u];
}
function B1(n, e, t) {
  const s = e.rank > 1 ? e.shape[e.rank - 1] : 1, r = e.rank > 1 ? e.rank - 1 : 1, o = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t.shape}, indices.shape: ${e.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;
  if (t.rank < r)
    throw new Error(o + ` update.rank < ${r}. `);
  if (n.length < s + (t.rank - r))
    throw new Error(o + ` Output shape length < ${s + (t.rank - r)}`);
  if (t.rank !== r + n.length - s)
    throw new Error(o + ` update.rank != ${r + n.length - s}`);
  for (let a = 0; a < r; ++a)
    if (t.shape[a] !== e.shape[a])
      throw new Error(o + ` updates.shape[${a}] (${t.shape[a]}) != indices.shape[${a}] (${e.shape[a]}).`);
  for (let a = 0; a < t.rank - r; ++a)
    if (t.shape[a + r] !== n[a + s])
      throw new Error(o + ` updates.shape[${a + r}] (${t.shape[a + r]}) != shape[${a + r}] (${n[a + r]})`);
}
function V1(n, e, t) {
  if (e.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);
  if (n.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);
  if (e.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);
  if (t.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t}`);
  if (t.length === 0) {
    if (e.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);
    if (n.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`);
  }
  B1(t, e, n);
}
function sl(n, e, t) {
  const s = e.shape.length, r = s > 1 ? e.shape[s - 1] : 1, o = t.length;
  let a = 1;
  for (let h = r; h < o; ++h)
    a *= t[h];
  const i = r < 1 ? 1 : r, l = Z(e.shape) / i, c = [...ke(t.slice(0, r)), 1], u = Z(t);
  return { sliceRank: r, numUpdates: l, sliceSize: a, strides: c, outputSize: u };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zd = -2, FS = -1;
function Ff(n, e, t) {
  const s = n.shape.length;
  N(s === e.length, () => `Error in slice${s}D: Length of begin ${e} must match the rank of the array (${s}).`), N(s === t.length, () => `Error in slice${s}D: Length of size ${t} must match the rank of the array (${s}).`);
  for (let r = 0; r < s; ++r)
    N(e[r] + t[r] <= n.shape[r], () => `Error in slice${s}D: begin[${r}] + size[${r}] (${e[r] + t[r]}) would overflow input.shape[${r}] (${n.shape[r]})`);
}
function _S(n) {
  const e = [];
  let t = 0;
  for (; n > 0; )
    n & 1 && e.push(t), n /= 2, t++;
  return e;
}
function _f(n, e, t) {
  const s = [];
  for (let r = 0; r < n.length; r++)
    s[r] = Math.ceil((e[r] - n[r]) / t[r]);
  return s;
}
function W1(n, e, t, s) {
  const r = [...n];
  for (let o = r.length; o < s.length; o++)
    r.push(1);
  for (let o = 0; o < t; o++)
    o === 0 ? r[e] = 1 : (r.splice(
      e,
      0,
      1
      /* element to add */
    ), r.pop());
  return r;
}
function U1(n, e, t) {
  return t <= n ? t : t - (e - 1);
}
function G1(n, e) {
  const t = [];
  for (let s = 0; s < n; s++)
    t.push(e + s);
  return t;
}
function OS(n, e, t, s, r, o, a, i, l) {
  const c = n.length;
  let u = new Array(c), h = new Array(c), d = new Array(c);
  if (e.length && t > 0) {
    const p = e[0], f = t + 1;
    u = H1(a, p, f, s, n), h = j1(i, p, f, r, n), d = W1(o, p, f, n);
  } else
    for (let p = 0; p < c; p++)
      u[p] = K1(a, s, o, n, p, l), h[p] = X1(i, r, o, n, p, l), d[p] = q1(o, p, l);
  return {
    begin: u,
    end: h,
    strides: d
  };
}
function H1(n, e, t, s, r) {
  const o = [...r], a = G1(t, e);
  for (let i = 0; i < o.length; i++)
    if (a.indexOf(i) > -1)
      o[i] = 0;
    else {
      const l = U1(e, t, i);
      let c = s[l];
      n & 1 << l && (c = 0), o[i] = c;
    }
  return o;
}
function j1(n, e, t, s, r) {
  const o = [...r], a = G1(t, e);
  for (let i = 0; i < o.length; i++)
    if (a.indexOf(i) > -1)
      o[i] = Number.MAX_SAFE_INTEGER;
    else {
      const l = U1(e, t, i);
      let c = s[l];
      n & 1 << l && (c = Number.MAX_SAFE_INTEGER), o[i] = c;
    }
  for (let i = 0; i < o.length; i++) {
    const l = r[i];
    o[i] < 0 && (o[i] += l), o[i] = oo(0, o[i], r[i]);
  }
  return o;
}
function q1(n, e, t) {
  let s = n[e];
  return (t & 1 << e || s == null) && (s = 1), s;
}
function K1(n, e, t, s, r, o) {
  let a = e[r];
  const i = t[r] || 1;
  (n & 1 << r || o & 1 << r || a == null) && (i > 0 ? a = Number.MIN_SAFE_INTEGER : a = Number.MAX_SAFE_INTEGER);
  const l = s[r];
  return a < 0 && (a += l), a = oo(0, a, l - 1), a;
}
function X1(n, e, t, s, r, o) {
  let a = e[r];
  const i = t[r] || 1;
  (n & 1 << r || o & 1 << r || a == null) && (i > 0 ? a = Number.MAX_SAFE_INTEGER : a = Number.MIN_SAFE_INTEGER);
  const l = s[r];
  return a < 0 && (a += l), i > 0 ? a = oo(0, a, l) : a = oo(-1, a, l - 1), a;
}
function Of(n, e, t) {
  let s = t.length;
  for (let r = 0; r < t.length; r++)
    if (t[r] > 1) {
      s = r;
      break;
    }
  for (let r = s + 1; r < t.length; r++)
    if (e[r] > 0 || t[r] !== n[r])
      return !1;
  return !0;
}
function Lf(n, e) {
  let t = n.length > 0 ? n[n.length - 1] : 1;
  for (let s = 0; s < n.length - 1; s++)
    t += n[s] * e[s];
  return t;
}
function Ku(n, e, t) {
  let s;
  const r = n.shape.length;
  typeof e == "number" ? s = [e, ...new Array(r - 1).fill(0)] : e.length < r ? s = e.concat(new Array(r - e.length).fill(0)) : s = e.slice(), s.forEach((a) => {
    N(a !== -1, () => "slice() does not support negative begin indexing.");
  });
  let o;
  return t == null ? o = new Array(r).fill(-1) : typeof t == "number" ? o = [t, ...new Array(r - 1).fill(-1)] : t.length < r ? o = t.concat(new Array(r - t.length).fill(-1)) : o = t, o = o.map((a, i) => a >= 0 ? a : (N(a === -1, () => `Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`), n.shape[i] - s[i])), [s, o];
}
function Pf(n, e, t, s, r, o, a, i, l) {
  let c;
  if (s == null ? (c = new Array(e.length), c.fill(1)) : c = s, a != null && a & a - 1)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let u = !1;
  const h = {
    dims: c.length,
    numAddAxisAfterEllipsis: 0,
    begin: e.slice(),
    end: t.slice(),
    strides: c.slice(),
    beginMask: r,
    endMask: o,
    ellipsisMask: a,
    newAxisMask: i,
    shrinkAxisMask: l
  };
  for (let w = 0; w < h.dims; w++)
    u && 1 << w & i && h.numAddAxisAfterEllipsis++, 1 << w & a && (u = !0);
  u || (h.ellipsisMask |= 1 << h.dims, h.dims++);
  const d = {
    dims: n.length,
    beginMask: 0,
    endMask: 0,
    beginValid: !1,
    endValid: !1
  };
  LS(h, d);
  let p = !0, f = !0, m = !0;
  const g = [], y = [];
  for (let w = 0; w < n.length; ++w) {
    if (d.strides[w] === 0)
      throw Error(`strides[${w}] must be non-zero`);
    const x = !!(d.shrinkAxisMask & 1 << w), v = n[w];
    if (v === -1) {
      g.push(x ? 1 : -1);
      continue;
    }
    const $ = [d.beginMask & 1 << w, d.endMask & 1 << w], C = [
      d.strides[w] > 0 ? 0 : -1,
      d.strides[w] > 0 ? v : v - 1
    ];
    if (x && d.strides[w] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    m = m && d.strides[w] === 1;
    const S = !!(d.beginMask & 1 << w && d.endMask & 1 << w);
    if (d.beginValid && d.endValid) {
      if (x) {
        const V = d.begin[w] < 0 ? v + d.begin[w] : d.begin[w];
        if (d.begin[w] = V, d.end[w] = d.begin[w] + 1, V < 0 || V >= v)
          throw Error(`slice index ${d.begin[w]} of dimension ${w} out of bounds.`);
      } else
        d.begin[w] = p0(d.begin[w], 0, d.strides[w], v, $, C), d.end[w] = p0(d.end[w], 1, d.strides[w], v, $, C);
      const O = d.strides[w] === 1 && d.begin[w] === 0 && d.end[w] === v;
      p = p && O, f = f && (w === 0 && d.strides[w] === 1 || O);
    } else
      p = p && d.strides[w] === 1 && S, f = f && (w === 0 && d.strides[w] === 1 || S);
    let E, D = !1;
    if (d.beginValid && d.endValid ? (E = d.end[w] - d.begin[w], D = !0) : x ? (E = 1, D = !0) : S && v >= 0 && (d.strides[w] < 0 ? E = -v : E = v, D = !0), D) {
      let O;
      E === 0 || E < 0 != d.strides[w] < 0 ? O = 0 : O = Math.trunc(E / d.strides[w]) + (E % d.strides[w] !== 0 ? 1 : 0), g.push(O);
    } else
      g.push(-1);
  }
  for (let w = 0; w < d.finalShapeGatherIndices.length; ++w) {
    const x = d.finalShapeGatherIndices[w];
    x >= 0 ? y.push(g[x]) : x === zd && y.push(1);
  }
  return {
    finalShapeSparse: y.filter((w, x) => d.finalShapeGatherIndices[x] !== zd),
    finalShape: y,
    isIdentity: p,
    sliceDim0: f,
    isSimpleSlice: m,
    begin: d.begin,
    end: d.end,
    strides: d.strides
  };
}
function LS(n, e) {
  e.beginMask = 0, e.endMask = 0, e.shrinkAxisMask = 0;
  let t = 0;
  e.beginValid = n.begin != null, e.endValid = n.end != null, e.begin = new Array(e.dims), e.end = new Array(e.dims), e.strides = new Array(e.dims), e.finalShapeGatherIndices = [], e.finalShapeGatherIndicesSparse = [], e.inputShapeGatherIndicesSparse = new Array(e.dims);
  for (let s = 0; s < n.dims; s++)
    if (1 << s & n.ellipsisMask) {
      const r = Math.min(e.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis, e.dims);
      for (; t < r; t++)
        e.begin[t] = 0, e.end[t] = 0, e.strides[t] = 1, e.beginMask |= 1 << t, e.endMask |= 1 << t, e.finalShapeGatherIndices.push(t), e.finalShapeGatherIndicesSparse.push(-1), e.inputShapeGatherIndicesSparse[t] = s;
    } else if (1 << s & n.newAxisMask)
      e.finalShapeGatherIndices.push(zd), e.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (t === e.begin.length)
        throw Error(`Index out of range using input dim ${t}; input has only ${e.dims} dims, ${e.begin.length}.`);
      n.begin != null && (e.begin[t] = n.begin[s]), n.end != null && (e.end[t] = n.end[s]), e.strides[t] = n.strides[s], n.beginMask & 1 << s && (e.beginMask |= 1 << t), n.endMask & 1 << s && (e.endMask |= 1 << t), n.shrinkAxisMask & 1 << s ? (e.finalShapeGatherIndices.push(FS), e.finalShapeGatherIndicesSparse.push(-1), e.shrinkAxisMask |= 1 << t) : (e.finalShapeGatherIndices.push(t), e.finalShapeGatherIndicesSparse.push(s)), e.inputShapeGatherIndicesSparse[t] = s, t++;
    }
}
function p0(n, e, t, s, r, o) {
  if (r[e])
    return t > 0 ? o[e] : o[e + 1 & 1];
  {
    const a = n < 0 ? s + n : n;
    return a < o[0] ? o[0] : a > o[1] ? o[1] : a;
  }
}
const PS = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertParamsValid: Ff,
  computeFlatOffset: Lf,
  computeOutShape: _f,
  getNormalizedAxes: OS,
  isSliceContinous: Of,
  maskToAxes: _S,
  parseSliceParams: Ku,
  sliceInfo: Pf,
  startForAxis: K1,
  startIndicesWithElidedDims: H1,
  stopForAxis: X1,
  stopIndicesWithElidedDims: j1,
  stridesForAxis: q1,
  stridesWithElidedDims: W1
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ga {
  /**
   * Return the class name for this class to use in serialization contexts.
   *
   * Generally speaking this will be the same thing that constructor.name
   * would have returned.  However, the class name needs to be robust
   * against minification for serialization/deserialization to work properly.
   *
   * There's also places such as initializers.VarianceScaling, where
   * implementation details between different languages led to different
   * class hierarchies and a non-leaf node is used for serialization purposes.
   */
  getClassName() {
    return this.constructor.className;
  }
  /**
   * Creates an instance of T from a ConfigDict.
   *
   * This works for most descendants of serializable.  A few need to
   * provide special handling.
   * @param cls A Constructor for the class to instantiate.
   * @param config The Configuration for the object.
   */
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t);
  }
}
class ns {
  constructor() {
    this.classNameMap = {};
  }
  /**
   * Returns the singleton instance of the map.
   */
  static getMap() {
    return ns.instance == null && (ns.instance = new ns()), ns.instance;
  }
  /**
   * Registers the class as serializable.
   */
  static register(e) {
    ns.getMap().classNameMap[e.className] = [e, e.fromConfig];
  }
}
function re(n) {
  N(n.className != null, () => "Class being registered does not have the static className property defined."), N(typeof n.className == "string", () => "className is required to be a string, but got type " + typeof n.className), N(n.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), ns.register(n);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zS(n, e) {
  let t = k(n, "a", "add"), s = k(e, "b", "add");
  [t, s] = It(t, s);
  const r = { a: t, b: s };
  return _.runKernel(ma, r);
}
const ne = R({ add_: zS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MS(n, e) {
  let t = k(n, "a", "floorDiv"), s = k(e, "b", "floorDiv");
  [t, s] = It(t, s);
  const r = { a: t, b: s };
  return _.runKernel(Si, r);
}
const zf = R({ floorDiv_: MS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BS(n, e) {
  let t = k(n, "a", "div"), s = k(e, "b", "div");
  if ([t, s] = It(t, s), t.dtype === "int32" && s.dtype === "int32")
    return zf(t, s);
  const r = { a: t, b: s }, o = {};
  return _.runKernel(xi, r, o);
}
const be = R({ div_: BS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VS(n, e) {
  let t = k(n, "a", "mul"), s = k(e, "b", "mul");
  [t, s] = It(t, s);
  const r = { a: t, b: s };
  return _.runKernel(Li, r);
}
const F = R({ mul_: VS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WS(n) {
  const e = k(n, "x", "abs");
  if (e.dtype === "complex64") {
    const t = { x: e };
    return _.runKernel(Jc, t);
  } else {
    const t = { x: e };
    return _.runKernel(Gc, t);
  }
}
const At = R({ abs_: WS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function US(n) {
  const t = { x: k(n, "x", "acos") };
  return _.runKernel(ii, t);
}
const Y1 = R({ acos_: US });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GS(n) {
  const t = { x: k(n, "x", "acosh") };
  return _.runKernel(li, t);
}
const Z1 = R({ acosh_: GS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HS(n) {
  N(Array.isArray(n), () => "The argument passed to tf.addN() must be a list of tensors"), N(n.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${n.length}`);
  const e = n.map((r, o) => k(r, `tensors${o}`, "addN")), t = e[0];
  e.forEach((r) => {
    if (r.dtype !== t.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), e.forEach((r) => {
    if (!He(r.shape, t.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  const s = e;
  return _.runKernel(Hc, s);
}
const jS = R({ addN_: HS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qS(n, e = null, t = !1) {
  const r = { x: k(n, "x", "all", "bool") }, o = { axis: e, keepDims: t };
  return _.runKernel(Ip, r, o);
}
const Mf = R({ all_: qS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KS(n, e = null, t = !1) {
  const r = { x: k(n, "x", "any", "bool") }, o = { axis: e, keepDims: t };
  return _.runKernel($p, r, o);
}
const fc = R({ any_: KS });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XS(n, e = 0) {
  const s = { x: k(n, "x", "argMax") }, r = { axis: e };
  return _.runKernel(jc, s, r);
}
const ea = R({ argMax_: XS });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YS(n, e = 0) {
  const s = { x: k(n, "x", "argMin") }, r = { axis: e };
  return _.runKernel(qc, s, r);
}
const J1 = R({ argMin_: YS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZS(n) {
  const t = { x: k(n, "x", "asin") };
  return _.runKernel(ci, t);
}
const Q1 = R({ asin_: ZS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JS(n) {
  const t = { x: k(n, "x", "asinh") };
  return _.runKernel(ui, t);
}
const eb = R({ asinh_: JS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QS(n) {
  const t = { x: k(n, "x", "atan") };
  return _.runKernel(hi, t);
}
const tb = R({ atan_: QS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eN(n, e) {
  let t = k(n, "a", "atan2"), s = k(e, "b", "atan2");
  [t, s] = It(t, s);
  const r = { a: t, b: s };
  return _.runKernel(pi, r);
}
const nb = R({ atan2_: eN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tN(n) {
  const t = { x: k(n, "x", "atanh") };
  return _.runKernel(di, t);
}
const sb = R({ atanh_: tN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rl(n, e, t, s, r = "NHWC", o) {
  const a = n[3], i = [...e, a], l = lr(r);
  return jt(n, i, t, o, s, null, null, l);
}
function ps(n, e, t, s, r, o, a = "channelsLast") {
  const [i, l] = mc(e);
  let c;
  if (a === "channelsLast")
    c = [i, l, n[3], n[3]];
  else if (a === "channelsFirst")
    c = [i, l, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return jt(n, c, t, s, r, o, !1, a);
}
function ir(n, e, t, s, r, o, a = "NDHWC") {
  const [i, l, c] = Md(e);
  let u, h;
  if (a === "NDHWC")
    h = "channelsLast", u = [i, l, c, n[4], n[4]];
  else if (a === "NCDHW")
    h = "channelsFirst", u = [i, l, c, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return Lr(n, u, t, s, r, !1, h, o);
}
function jt(n, e, t, s, r, o, a = !1, i = "channelsLast") {
  let [l, c, u, h] = [-1, -1, -1, -1];
  if (i === "channelsLast")
    [l, c, u, h] = n;
  else if (i === "channelsFirst")
    [l, h, c, u] = n;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  const [d, p, , f] = e, [m, g] = mc(t), [y, b] = mc(s), w = Uo(d, y), x = Uo(p, b), { padInfo: v, outHeight: $, outWidth: C } = rN(r, c, u, m, g, w, x, o, i), S = a ? f * h : f;
  let E;
  return i === "channelsFirst" ? E = [l, S, $, C] : i === "channelsLast" && (E = [l, $, C, S]), {
    batchSize: l,
    dataFormat: i,
    inHeight: c,
    inWidth: u,
    inChannels: h,
    outHeight: $,
    outWidth: C,
    outChannels: S,
    padInfo: v,
    strideHeight: m,
    strideWidth: g,
    filterHeight: d,
    filterWidth: p,
    effectiveFilterHeight: w,
    effectiveFilterWidth: x,
    dilationHeight: y,
    dilationWidth: b,
    inShape: n,
    outShape: E,
    filterShape: e
  };
}
function Lr(n, e, t, s, r, o = !1, a = "channelsLast", i) {
  let [l, c, u, h, d] = [-1, -1, -1, -1, -1];
  if (a === "channelsLast")
    [l, c, u, h, d] = n;
  else if (a === "channelsFirst")
    [l, d, c, u, h] = n;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  const [p, f, m, , g] = e, [y, b, w] = Md(t), [x, v, $] = Md(s), C = Uo(p, x), S = Uo(f, v), E = Uo(m, $), { padInfo: D, outDepth: O, outHeight: V, outWidth: W } = oN(r, c, u, h, y, b, w, C, S, E, i), U = o ? g * d : g;
  let j;
  return a === "channelsFirst" ? j = [l, U, O, V, W] : a === "channelsLast" && (j = [l, O, V, W, U]), {
    batchSize: l,
    dataFormat: a,
    inDepth: c,
    inHeight: u,
    inWidth: h,
    inChannels: d,
    outDepth: O,
    outHeight: V,
    outWidth: W,
    outChannels: U,
    padInfo: D,
    strideDepth: y,
    strideHeight: b,
    strideWidth: w,
    filterDepth: p,
    filterHeight: f,
    filterWidth: m,
    effectiveFilterDepth: C,
    effectiveFilterHeight: S,
    effectiveFilterWidth: E,
    dilationDepth: x,
    dilationHeight: v,
    dilationWidth: $,
    inShape: n,
    outShape: j,
    filterShape: e
  };
}
function nN(n, e, t, s, r) {
  s == null && (s = Bf(n, e, t));
  const o = n[0], a = n[1], i = no((o - e + 2 * s) / t + 1, r), l = no((a - e + 2 * s) / t + 1, r);
  return [i, l];
}
function sN(n, e, t, s, r, o) {
  r == null && (r = Bf(n, e, s));
  const a = n[0], i = n[1], l = n[2], c = no((a - e + 2 * r) / s + 1, o), u = no((i - e + 2 * r) / s + 1, o), h = no((l - e + 2 * r) / s + 1, o);
  return [c, u, h, t];
}
function Bf(n, e, t, s = 1) {
  const r = Uo(e, s);
  return Math.floor((n[0] * (t - 1) - t + r) / 2);
}
function mc(n) {
  return typeof n == "number" ? [n, n, n] : n.length === 2 ? [n[0], n[1], 1] : n;
}
function Md(n) {
  return typeof n == "number" ? [n, n, n] : n;
}
function Uo(n, e) {
  return e <= 1 ? n : n + (n - 1) * (e - 1);
}
function rN(n, e, t, s, r, o, a, i, l) {
  let c, u, h;
  if (typeof n == "number") {
    c = { top: n, bottom: n, left: n, right: n, type: n === 0 ? "VALID" : "NUMBER" };
    const p = nN([e, t], o, s, n, i);
    u = p[0], h = p[1];
  } else if (n === "same") {
    u = Math.ceil(e / s), h = Math.ceil(t / r);
    const d = Math.max(0, (u - 1) * s + o - e), p = Math.max(0, (h - 1) * r + a - t), f = Math.floor(d / 2), m = d - f, g = Math.floor(p / 2), y = p - g;
    c = { top: f, bottom: m, left: g, right: y, type: "SAME" };
  } else if (n === "valid")
    c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, u = Math.ceil((e - o + 1) / s), h = Math.ceil((t - a + 1) / r);
  else if (typeof n == "object") {
    const d = l === "channelsLast" ? n[1][0] : n[2][0], p = l === "channelsLast" ? n[1][1] : n[2][1], f = l === "channelsLast" ? n[2][0] : n[3][0], m = l === "channelsLast" ? n[2][1] : n[3][1];
    c = { top: d, bottom: p, left: f, right: m, type: d === 0 && p === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT" }, u = no((e - o + d + p) / s + 1, i), h = no((t - a + f + m) / r + 1, i);
  } else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: c, outHeight: u, outWidth: h };
}
function oN(n, e, t, s, r, o, a, i, l, c, u) {
  let h, d, p, f;
  if (typeof n == "number") {
    h = {
      top: n,
      bottom: n,
      left: n,
      right: n,
      front: n,
      back: n,
      type: n === 0 ? "VALID" : "NUMBER"
    };
    const g = sN([e, t, s, 1], i, 1, r, n, u);
    d = g[0], p = g[1], f = g[2];
  } else if (n === "same") {
    d = Math.ceil(e / r), p = Math.ceil(t / o), f = Math.ceil(s / a);
    const m = (d - 1) * r + i - e, g = (p - 1) * o + l - t, y = (f - 1) * a + c - s, b = Math.floor(m / 2), w = m - b, x = Math.floor(g / 2), v = g - x, $ = Math.floor(y / 2), C = y - $;
    h = { top: x, bottom: v, left: $, right: C, front: b, back: w, type: "SAME" };
  } else if (n === "valid")
    h = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      front: 0,
      back: 0,
      type: "VALID"
    }, d = Math.ceil((e - i + 1) / r), p = Math.ceil((t - l + 1) / o), f = Math.ceil((s - c + 1) / a);
  else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: h, outDepth: d, outHeight: p, outWidth: f };
}
function no(n, e) {
  if (!e)
    return Math.trunc(n);
  switch (e) {
    case "round":
      return Math.round(n);
    case "ceil":
      return Math.ceil(n);
    case "floor":
      return Math.floor(n);
    default:
      throw new Error(`Unknown roundingMode ${e}`);
  }
}
function $r(n) {
  const [e, t, s] = mc(n);
  return e === 1 && t === 1 && s === 1;
}
function Qt(n, e) {
  return $r(n) || $r(e);
}
function lr(n) {
  if (n === "NHWC")
    return "channelsLast";
  if (n === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${n}`);
}
function pn(n, e, t) {
  if (t != null) {
    if (typeof e == "string")
      throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);
    if (typeof e == "number")
      N(Xo(e), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${e}.`);
    else if (typeof e == "object")
      e.forEach((s) => {
        s.forEach((r) => {
          N(Xo(r), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${t} but got pad ${r}.`);
        });
      });
    else
      throw Error(`Error in ${n}: Unknown padding parameter: ${e}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aN(n, e) {
  const s = { x: k(n, "x", "reshape", "string_or_numeric") }, r = { shape: e };
  return _.runKernel(Ru, s, r);
}
const P = R({ reshape_: aN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iN(n, e, t, s, r) {
  const o = k(n, "x", "avgPool", "float32"), a = 1;
  N(Qt(t, a), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`);
  let i = o, l = !1;
  o.rank === 3 && (l = !0, i = P(o, [1, o.shape[0], o.shape[1], o.shape[2]])), N(i.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${i.rank}.`), pn("avgPool", s, r);
  const c = { x: i }, u = { filterSize: e, strides: t, pad: s, dimRoundingMode: r };
  let h = _.runKernel(Kc, c, u);
  return h = fe(h, o.dtype), l ? P(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const Xu = R({ avgPool_: iN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lN(n, e, t, s, r, o = "NDHWC") {
  const a = k(n, "x", "avgPool3d", "float32");
  let i = a, l = !1;
  a.rank === 4 && (l = !0, i = P(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), N(i.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`), N(o === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), pn("avgPool3d", s, r);
  const c = { x: i }, u = { filterSize: e, strides: t, pad: s, dimRoundingMode: r, dataFormat: o };
  let h = _.runKernel(Xc, c, u);
  return h = fe(h, i.dtype), l ? P(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const rb = R({ avgPool3d_: lN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cN(n, e = 0) {
  N(n.length >= 1, () => "Pass at least one tensor to concat");
  const t = dc(n, "tensors", "concat", "string_or_numeric");
  if (t[0].dtype === "complex64" && t.forEach((o) => {
    if (o.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${o.dtype}. `);
  }), t.length === 1)
    return Qs(t[0]);
  const s = t, r = { axis: e };
  return _.runKernel(Qc, s, r);
}
const ft = R({ concat_: cN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uN(n) {
  const t = { x: k(n, "x", "sigmoid", "float32") };
  return _.runKernel(qi, t);
}
const Cs = R({ sigmoid_: uN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hN(n, e, t) {
  const s = k(n, "x", "slice", "string_or_numeric");
  if (s.rank === 0)
    throw new Error("Slicing scalar is not possible");
  const r = { x: s }, o = { begin: e, size: t };
  return _.runKernel(Pu, r, o);
}
const Ee = R({ slice_: hN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dN(n) {
  const t = { x: k(n, "x", "tanh", "float32") };
  return _.runKernel(Qi, t);
}
const ta = R({ tanh_: dN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pN(n, e, t, s, r, o) {
  const a = k(n, "forgetBias", "basicLSTMCell"), i = k(e, "lstmKernel", "basicLSTMCell"), l = k(t, "lstmBias", "basicLSTMCell"), c = k(s, "data", "basicLSTMCell"), u = k(r, "c", "basicLSTMCell"), h = k(o, "h", "basicLSTMCell"), d = ft([c, h], 1), p = Me(d, i), f = ne(p, l), m = f.shape[0], g = f.shape[1] / 4, y = [m, g], b = Ee(f, [0, 0], y), w = Ee(f, [0, g], y), x = Ee(f, [0, g * 2], y), v = Ee(f, [0, g * 3], y), $ = ne(F(Cs(b), ta(w)), F(u, Cs(ne(a, x)))), C = F(ta($), Cs(v));
  return [$, C];
}
const fN = R({ basicLSTMCell_: pN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mN(n, e, t) {
  const s = k(n, "x", "batchToSpaceND"), r = e.reduce((i, l) => i * l);
  N(s.rank >= 1 + e.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${e.length}`), N(t.length === e.length, () => `crops.length is ${t.length} but should be equal to blockShape.length  ${e.length}`), N(s.shape[0] % r === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${r}`);
  const o = { x: s }, a = { blockShape: e, crops: t };
  return _.runKernel(Zc, o, a);
}
const Yu = R({ batchToSpaceND_: mN });
function gN(n) {
  let e;
  return n.rank === 0 || n.rank === 1 ? e = P(n, [1, 1, 1, n.size]) : n.rank === 2 ? e = P(n, [1, 1, n.shape[0], n.shape[1]]) : n.rank === 3 ? e = P(n, [1, n.shape[0], n.shape[1], n.shape[2]]) : e = n, e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yN(n, e, t, s, r, o) {
  o == null && (o = 1e-3);
  const a = k(n, "x", "batchNorm"), i = k(e, "mean", "batchNorm"), l = k(t, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  s != null && (u = k(s, "offset", "batchNorm")), N(i.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), N(u == null || i.rank === u.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), N(c == null || i.rank === c.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const d = {
    x: gN(a),
    scale: c,
    offset: u,
    mean: i,
    variance: l
  }, p = { varianceEpsilon: o }, f = _.runKernel(lu, d, p);
  return P(f, a.shape);
}
const ol = R({ batchNorm_: yN });
function bN(n, e, t, s, r, o) {
  const a = k(n, "x", "batchNorm"), i = k(e, "mean", "batchNorm"), l = k(t, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = k(s, "offset", "batchNorm")), N(a.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`), N(i.rank === 2 || i.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`), N(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), c != null && N(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`), u != null && N(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`), ol(a, i, l, u, c, o);
}
const ob = R({ batchNorm2d_: bN });
function xN(n, e, t, s, r, o) {
  const a = k(n, "x", "batchNorm"), i = k(e, "mean", "batchNorm"), l = k(t, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = k(s, "offset", "batchNorm")), N(a.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`), N(i.rank === 3 || i.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`), N(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), c != null && N(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`), u != null && N(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`), ol(a, i, l, u, c, o);
}
const ab = R({ batchNorm3d_: xN });
function wN(n, e, t, s, r, o) {
  const a = k(n, "x", "batchNorm"), i = k(e, "mean", "batchNorm"), l = k(t, "variance", "batchNorm");
  let c;
  r != null && (c = k(r, "scale", "batchNorm"));
  let u;
  return s != null && (u = k(s, "offset", "batchNorm")), N(a.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`), N(i.rank === 4 || i.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`), N(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), c != null && N(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`), u != null && N(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`), ol(a, i, l, u, c, o);
}
const ib = R({ batchNorm4d_: wN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vN(n, e, t) {
  const s = k(n, "x", "bincount"), r = k(e, "weights", "bincount");
  N(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), N(t >= 0, () => `size must be non-negative, but got ${t}.`), N(r.size === s.size || r.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`);
  const o = { x: s, weights: r }, a = { size: t };
  return _.runKernel(Np, o, a);
}
const lb = R({ bincount_: vN });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IN(n, e) {
  const t = k(n, "s0", "broadcastArgs", "int32"), s = k(e, "s1", "broadcastArgs", "int32");
  if (t.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t.rank}`);
  if (s.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);
  const r = { s0: t, s1: s };
  return _.runKernel(kp, r);
}
const $N = R({ broadcastArgs_: IN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CN(n, e) {
  let t = k(n, "broadcastTo", "x");
  const s = t.shape;
  if (e.some((c) => !(c > 0) || c % 1 !== 0))
    throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);
  if (e.length < t.rank)
    throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t.rank}.`);
  if (e.length > t.rank) {
    const c = t.shape.slice();
    for (; c.length < e.length; )
      c.unshift(1);
    t = P(t, c);
  }
  const r = t.shape, o = Array.from(e);
  for (let c = e.length - 1; c >= 0; c--)
    if (r[c] === e[c])
      o[c] = 1;
    else if (t.shape[c] !== 1)
      throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${e}].`);
  if (o.map((c, u) => c > 1 ? u : -1).filter((c) => c >= 0).length === 0)
    return Qs(t);
  const i = { x: t }, l = { reps: o };
  return _.runKernel(el, i, l);
}
const Go = R({ broadcastTo_: CN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SN(n) {
  const t = { x: k(n, "x", "ceil", "float32") };
  return _.runKernel(mi, t);
}
const cb = R({ ceil_: SN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ya(n, e, t) {
  const s = { shape: n, value: e, dtype: t };
  return _.runKernel(Wp, {}, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NN(n, e, t) {
  const s = k(n, "x", "clipByValue");
  if (N(e <= t, () => `Error in clip: min (${e}) must be less than or equal to max (${t}).`), e === t)
    return ya(s.shape, e, s.dtype);
  const r = { x: s }, o = { clipValueMin: e, clipValueMax: t };
  return _.runKernel(gi, r, o);
}
const _n = R({ clipByValue_: NN });
function kN(n) {
  return ft(
    n,
    0
    /* axis */
  );
}
const ub = R({ concat1d_: kN });
function TN(n, e) {
  return ft(n, e);
}
const Zu = R({ concat2d_: TN });
function EN(n, e) {
  return ft(n, e);
}
const hb = R({ concat3d_: EN });
function DN(n, e) {
  return ft(n, e);
}
const db = R({ concat4d_: DN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AN(n, e, t, s, r = "NHWC", o = [1, 1], a) {
  const i = k(n, "x", "conv2d", "float32"), l = k(e, "filter", "conv2d", "float32");
  let c = i, u = !1;
  i.rank === 3 && (u = !0, c = P(i, [1, i.shape[0], i.shape[1], i.shape[2]])), N(c.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`), N(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), pn("conv2d", s, a);
  const h = r === "NHWC" ? c.shape[3] : c.shape[1];
  N(h === l.shape[2], () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`), N(Qt(t, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`);
  const d = { x: c, filter: l }, p = { strides: t, pad: s, dataFormat: r, dilations: o, dimRoundingMode: a }, f = _.runKernel(eu, d, p);
  return u ? P(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Cr = R({ conv2d_: AN });
function RN(n, e, t, s, r = "NWC", o = 1, a) {
  const i = k(n, "x", "conv1d"), l = k(e, "filter", "conv1d");
  let c = i, u = !1;
  i.rank === 2 && (u = !0, c = P(i, [1, i.shape[0], i.shape[1]])), N(c.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`), N(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), pn("conv1d", s, a), N(c.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`), N(Qt(t, o), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${t} and dilation '${o}'`), N(r === "NWC", () => `Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);
  const h = P(l, [1, l.shape[0], l.shape[1], l.shape[2]]), d = P(c, [c.shape[0], 1, c.shape[1], c.shape[2]]), g = Cr(d, h, [1, t], s, "NHWC", [1, o], a);
  return u ? P(g, [g.shape[2], g.shape[3]]) : P(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
const Vf = R({ conv1d_: RN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FN(n, e, t, s, r, o = "NHWC", a) {
  N(n.length === e.rank, () => `Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);
  let i = n, l = e, c = !1;
  e.rank === 3 && (c = !0, l = P(e, [1, e.shape[0], e.shape[1], e.shape[2]]), i = [1, n[0], n[1], n[2]]), N(i.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`), N(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), N(t.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${t.rank}`);
  const u = o === "NHWC" ? i[3] : i[1], h = o === "NHWC" ? l.shape[3] : l.shape[1];
  N(u === t.shape[2], () => `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${t.shape[2]}.`), N(h === t.shape[3], () => `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${t.shape[3]}.`), pn("conv2dDerInput", r, a);
  const d = { dy: l, filter: t }, p = { strides: s, pad: r, dataFormat: o, dimRoundingMode: a, inputShape: i }, f = _.runKernel(tu, d, p);
  return c ? P(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Wf = R({ conv2DBackpropInput_: FN });
function _N(n, e, t, s, r, o) {
  const a = k(n, "x", "conv2dTranspose"), i = k(e, "filter", "conv2dTranspose");
  return Wf(t, a, i, s, r, "NHWC", o);
}
const Uf = R({ conv2dTranspose_: _N });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ON(n, e, t, s, r = "NDHWC", o = [1, 1, 1]) {
  const a = k(n, "x", "conv3d"), i = k(e, "filter", "conv3d");
  let l = a, c = !1;
  a.rank === 4 && (c = !0, l = P(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), N(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), N(i.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`), N(l.shape[4] === i.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`), N(Qt(t, o), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`), N(r === "NDHWC", () => `Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);
  const u = { x: l, filter: i }, h = { strides: t, pad: s, dataFormat: r, dilations: o }, d = _.runKernel(nu, u, h);
  return c ? P(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const pb = R({ conv3d_: ON });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LN(n, e, t, s, r) {
  N(n.length === e.rank, () => `Length of inShape (${n.length}) and rank of dy (${e.rank}) must match`);
  let o = n, a = e, i = !1;
  e.rank === 4 && (i = !0, a = P(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]]), o = [1, n[0], n[1], n[2], n[3]]);
  const l = o[4], c = a.shape[4];
  N(o.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`), N(a.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`), N(t.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${t.rank}`), N(l === t.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${t.shape[3]}.`), N(c === t.shape[4], () => `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${t.shape[4]}.`);
  const u = { dy: a, filter: t }, h = { pad: r, strides: s, inputShape: o }, d = _.runKernel(Ap, u, h);
  return i ? P(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const fb = R({ conv3DBackpropInput_: LN });
function PN(n, e, t, s, r) {
  const o = k(n, "x", "conv3dTranspose"), a = k(e, "filter", "conv3dTranspose");
  return fb(t, o, a, s, r);
}
const mb = R({ conv3dTranspose_: PN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zN(n) {
  const t = { x: k(n, "x", "cos", "float32") };
  return _.runKernel(yi, t);
}
const Ju = R({ cos_: zN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MN(n) {
  const t = { x: k(n, "x", "cosh", "float32") };
  return _.runKernel(bi, t);
}
const Gf = R({ cosh_: MN });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BN(n, e = 0, t = !1, s = !1) {
  const o = { x: k(n, "x", "cumprod") }, a = { axis: e, exclusive: t, reverse: s };
  return _.runKernel(Rp, o, a);
}
const gc = R({ cumprod_: BN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VN(n, e = 0, t = !1, s = !1) {
  const o = { x: k(n, "x", "cumsum") }, a = { axis: e, exclusive: t, reverse: s };
  return _.runKernel(su, o, a);
}
const Hf = R({ cumsum_: VN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WN(n, e, t, s = !1) {
  const r = k(n, "x", "denseBincount"), o = k(e, "weights", "denseBincount");
  N(r.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${r.dtype}`), N(r.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`), N(t >= 0, () => `size must be non-negative, but got ${t}.`), N(o.size === r.size || o.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`);
  const a = { x: r, weights: o }, i = { size: t, binaryOutput: s };
  return _.runKernel(_p, a, i);
}
const UN = R({ denseBincount_: WN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GN(n, e, t = "NHWC") {
  const s = k(n, "x", "depthToSpace", "float32"), r = t === "NHWC" ? s.shape[1] : s.shape[2], o = t === "NHWC" ? s.shape[2] : s.shape[3], a = t === "NHWC" ? s.shape[3] : s.shape[1];
  N(e > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${e}`), N(r * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${e}  for depthToSpace with input shape
    ${s.shape}`), N(o * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${e} for depthToSpace with input shape
        ${s.shape}`), N(a % (e * e) === 0, () => `Dimension size must be evenly divisible by ${e * e} but is ${a} for depthToSpace with input shape ${s.shape}`);
  const i = { x: s }, l = { blockSize: e, dataFormat: t };
  return _.runKernel(Op, i, l);
}
const gb = R({ depthToSpace_: GN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HN(n, e, t, s, r = "NHWC", o = [1, 1], a) {
  const i = k(n, "x", "depthwiseConv2d", "float32"), l = k(e, "filter", "depthwiseConv2d", "float32");
  let c = i, u = !1;
  i.rank === 3 && (u = !0, c = P(i, [1, i.shape[0], i.shape[1], i.shape[2]])), N(c.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`), N(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
  const h = r === "NHWC" ? c.shape[3] : c.shape[1];
  N(h === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`), pn("depthwiseConv2d", s, a);
  const d = { x: c, filter: l }, p = { strides: t, pad: s, dataFormat: r, dilations: o, dimRoundingMode: a }, f = _.runKernel(ru, d, p);
  return u ? P(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const al = R({ depthwiseConv2d_: HN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jN(n) {
  const t = { x: k(n, "x", "diag") };
  return _.runKernel(zp, t);
}
const qN = R({ diag_: jN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KN(n, e, t, s, r = [1, 1], o = "NHWC") {
  const a = k(n, "x", "dilation2d"), i = k(e, "filter", "dilation2d");
  N(a.rank === 3 || a.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`), N(i.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`), N(o === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);
  let l = a, c = !1;
  a.rank === 3 && (l = P(a, [1, a.shape[0], a.shape[1], a.shape[2]]), c = !0);
  const u = { x: l, filter: i }, h = { strides: t, pad: s, dilations: r }, d = _.runKernel(ou, u, h);
  return c ? P(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const yb = R({ dilation2d_: KN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XN(n, e) {
  let t = k(n, "a", "equal", "string_or_numeric"), s = k(e, "b", "equal", "string_or_numeric");
  [t, s] = It(t, s), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(au, r);
}
const ks = R({ equal_: XN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YN(n, e, t) {
  const s = k(e, "a", "where"), r = k(t, "b", "where"), o = k(n, "condition", "where", "bool"), a = Fe(Fe(o.shape, s.shape), r.shape), i = Go(o, a), l = Go(s, a), c = Go(r, a), u = {
    condition: i,
    t: l,
    e: c
  };
  return _.runKernel(Lu, u);
}
const In = R({ where_: YN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZN(n) {
  const t = { x: k(n, "x", "zerosLike") };
  return _.runKernel(Gu, t);
}
const Ge = R({ zerosLike_: ZN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JN(n, e) {
  let t = k(n, "a", "div"), s = k(e, "b", "div");
  [t, s] = It(t, s);
  const r = be(t, s), o = Ge(r), a = ks(s, o);
  return In(a, o, r);
}
const bb = R({ divNoNan_: JN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QN(n, e) {
  const t = k(n, "t1", "dot"), s = k(e, "t2", "dot");
  N((t.rank === 1 || t.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${t.rank} and ${s.rank}.`);
  const r = t.rank === 1 ? t.size : t.shape[1], o = s.rank === 1 ? s.size : s.shape[0];
  if (N(r === o, () => `Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`), t.rank === 1 && s.rank === 1) {
    const a = P(t, [1, -1]), i = P(s, [-1, 1]), l = Me(a, i);
    return P(l, []);
  } else if (t.rank === 1 && s.rank === 2) {
    const a = P(t, [1, -1]), i = P(s, [s.shape[0], s.shape[1]]), l = Me(a, i);
    return P(l, [l.size]);
  } else if (t.rank === 2 && s.rank === 1) {
    const a = P(s, [-1, 1]), i = Me(t, a);
    return P(i, [i.size]);
  } else {
    const a = P(s, [s.shape[0], s.shape[1]]);
    return Me(t, a);
  }
}
const xb = R({ dot_: QN });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ek(n, ...e) {
  const t = e.map((r, o) => k(r, `tensors${o}`, "einsum")), s = { equation: n };
  return _.runKernel(Mp, t, s);
}
const tk = R({ einsum_: ek });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nk(n) {
  const t = { x: k(n, "x", "elu", "float32") };
  return _.runKernel(wi, t);
}
const il = R({ elu_: nk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sk(n) {
  let e = k(n, "x", "erf");
  N(e.dtype === "int32" || e.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), e.dtype === "int32" && (e = fe(e, "float32"));
  const t = { x: e };
  return _.runKernel(vi, t);
}
const wb = R({ erf_: sk });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jf(n, e) {
  for (let t = 0; t < n.length; ++t)
    if (n[n.length - t - 1] !== e - 1 - t)
      return !1;
  return !0;
}
function vb(n, e, t) {
  const s = n.length + e.length, r = [];
  let o = 0, a = 0;
  for (let i = 0; i < s; i++)
    t.indexOf(i) === -1 ? r.push(n[o++]) : r.push(e[a++]);
  return r;
}
function qt(n, e) {
  const t = [], s = n.length;
  for (let o = 0; o < s; o++)
    e.indexOf(o) === -1 && t.push(n[o]);
  const r = e.map((o) => n[o]);
  return [t, r];
}
function St(n, e) {
  const t = e.map((s) => 1);
  return vb(n, t, e);
}
function en(n, e, t) {
  N(jf(e, t), () => `${n} supports only inner-most axes for now. Got axes ${e} and rank-${t} input.`);
}
function wt(n, e) {
  if (jf(n, e))
    return null;
  const t = [];
  for (let s = 0; s < e; ++s)
    n.indexOf(s) === -1 && t.push(s);
  return n.forEach((s) => t.push(s)), t;
}
function Pr(n) {
  return n.map((e, t) => [t, e]).sort((e, t) => e[1] - t[1]).map((e) => e[0]);
}
function Nt(n, e) {
  const t = [];
  for (let s = e - n; s < e; ++s)
    t.push(s);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rk(n, e = null, t = !1) {
  const r = { x: k(n, "x", "max") }, o = { reductionIndices: e, keepDims: t };
  return _.runKernel(bu, r, o);
}
const Ss = R({ max_: rk });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ok(n, e = null, t = !1) {
  const r = { x: k(n, "x", "min") }, o = { axis: e, keepDims: t };
  return _.runKernel(Iu, r, o);
}
const yc = R({ min_: ok });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ak(n, e) {
  let t = k(n, "base", "pow"), s = k(e, "exp", "pow");
  [t, s] = It(t, s);
  const r = { a: t, b: s };
  return _.runKernel(Pi, r);
}
const Sr = R({ pow_: ak });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Te(n, e) {
  if ((Hs(n) && e !== "string" || Array.isArray(n)) && e !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (e === "string" && Hs(n) && !(n instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Or(n, [], [], e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ik(n) {
  const t = { x: k(n, "x", "sqrt", "float32") };
  return _.runKernel(Xi, t);
}
const rn = R({ sqrt_: ik });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lk(n) {
  const e = k(n, "x", "square"), t = {};
  return _.runKernel("Square", { x: e }, t);
}
const at = R({ square_: lk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ck(n, e = null, t = !1) {
  let s = k(n, "x", "sum");
  s.dtype === "bool" && (s = fe(s, "int32"));
  const r = { x: s }, o = { axis: e, keepDims: t };
  return _.runKernel(zu, r, o);
}
const Ie = R({ sum_: ck });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uk(n, e = "euclidean", t = null, s = !1) {
  n = k(n, "x", "norm");
  const r = Ib(n, e, t);
  let o = r.shape;
  if (s) {
    const a = ze(t, n.shape);
    o = St(r.shape, a);
  }
  return P(r, o);
}
function Ib(n, e, t = null) {
  if (n.rank === 0)
    return At(n);
  if (n.rank !== 1 && t === null)
    return Ib(P(n, [-1]), e, t);
  if (n.rank === 1 || typeof t == "number" || Array.isArray(t) && t.length === 1) {
    if (e === 1)
      return Ie(At(n), t);
    if (e === 1 / 0)
      return Ss(At(n), t);
    if (e === -1 / 0)
      return yc(At(n), t);
    if (e === "euclidean" || e === 2)
      return rn(Ie(Sr(At(n), Te(2, "int32")), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  if (Array.isArray(t) && t.length === 2) {
    if (e === 1)
      return Ss(Ie(At(n), t[0]), t[1] - 1);
    if (e === 1 / 0)
      return Ss(Ie(At(n), t[1]), t[0]);
    if (e === -1 / 0)
      return yc(Ie(At(n), t[1]), t[0]);
    if (e === "fro" || e === "euclidean")
      return rn(Ie(at(n), t));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  throw new Error(`Error in norm: invalid axis: ${t}`);
}
const ll = R({ norm_: uk });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hk(n, e = null, t = !1) {
  return ll(n, "euclidean", e, t);
}
const $b = R({ euclideanNorm_: hk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dk(n) {
  const t = { x: k(n, "x", "exp") };
  return _.runKernel(Ii, t);
}
const Gn = R({ exp_: dk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pk(n, e = 0) {
  const t = k(n, "x", "expandDims", "string_or_numeric");
  N(e <= t.rank, () => "Axis must be <= rank of the tensor");
  const s = { input: t }, r = { dim: e };
  return _.runKernel(iu, s, r);
}
const xn = R({ expandDims_: pk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fk(n) {
  const t = { x: k(n, "x", "expm1") };
  return _.runKernel($i, t);
}
const Cb = R({ expm1_: fk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mk(n, e) {
  const t = k(n, "x", "tile", "string_or_numeric");
  N(t.rank === e.length, () => `Error in transpose: rank of input ${t.rank} must match length of reps ${e}.`);
  const s = { x: t }, r = { reps: e };
  return _.runKernel(el, s, r);
}
const is = R({ tile_: mk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gk(n, e, t, s = "float32") {
  e == null && (e = n);
  const r = Le([n, e], s), o = n <= e ? n : e;
  for (let i = 0; i < o; ++i)
    r.set(1, i, i);
  const a = P(r.toTensor(), [n, e]);
  if (t == null)
    return a;
  if (t.length === 1)
    return is(xn(a, 0), [t[0], 1, 1]);
  if (t.length === 2)
    return is(xn(xn(a, 0), 0), [t[0], t[1], 1, 1]);
  if (t.length === 3)
    return is(xn(xn(xn(a, 0), 0), 0), [
      t[0],
      t[1],
      t[2],
      1,
      1
    ]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t.length}D.`);
}
const qf = R({ eye_: gk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yk(n) {
  const t = { x: k(n, "x", "floor", "float32") };
  return _.runKernel(Ci, t);
}
const cl = R({ floor_: yk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bk(n, e, t = 0, s = 0) {
  const r = k(n, "x", "gather"), o = k(e, "indices", "gather", "int32"), a = { x: r, indices: o }, i = { axis: t, batchDims: s };
  return _.runKernel(cu, a, i);
}
const ul = R({ gather_: bk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xk(n, e) {
  let t = k(n, "a", "greater", "string_or_numeric"), s = k(e, "b", "greater", "string_or_numeric");
  [t, s] = It(t, s), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(uu, r);
}
const qn = R({ greater_: xk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wk(n, e) {
  let t = k(n, "a", "greaterEqual", "string_or_numeric"), s = k(e, "b", "greaterEqual", "string_or_numeric");
  [t, s] = It(t, s), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(Ni, r);
}
const yo = R({ greaterEqual_: wk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vk(n) {
  const t = { x: k(n, "x", "isFinite") };
  return _.runKernel(Ti, t);
}
const Sb = R({ isFinite_: vk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ik(n) {
  const t = { x: k(n, "x", "isInf") };
  return _.runKernel(Ei, t);
}
const Nb = R({ isInf_: Ik });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $k(n) {
  const t = { x: k(n, "x", "isNaN") };
  return _.runKernel(Di, t);
}
const kb = R({ isNaN_: $k });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ck(n, e = 0.2) {
  const s = { x: k(n, "x", "leakyRelu") }, r = { alpha: e };
  return _.runKernel(hu, s, r);
}
const Qu = R({ leakyRelu_: Ck });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sk(n, e) {
  let t = k(n, "a", "less", "string_or_numeric"), s = k(e, "b", "less", "string_or_numeric");
  [t, s] = It(t, s), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(du, r);
}
const Kf = R({ less_: Sk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nk(n, e) {
  let t = k(n, "a", "lessEqual", "string_or_numeric"), s = k(e, "b", "lessEqual", "string_or_numeric");
  [t, s] = It(t, s), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(pu, r);
}
const bo = R({ lessEqual_: Nk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kk(n, e, t) {
  if (t <= 0)
    throw new Error("The number of values should be positive.");
  const s = { start: n, stop: e, num: t };
  return _.runKernel(qp, {}, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tk(n, e = 5, t = 1, s = 1, r = 0.5) {
  const o = k(n, "x", "localResponseNormalization");
  N(o.rank === 4 || o.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${o.rank}.`), N(Xo(e), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);
  let a = o, i = !1;
  o.rank === 3 && (i = !0, a = P(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  const l = { x: a }, c = { depthRadius: e, bias: t, alpha: s, beta: r }, u = _.runKernel(yu, l, c);
  return i ? P(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
const Tb = R({ localResponseNormalization_: Tk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ek(n) {
  const t = { x: k(n, "x", "log", "float32") };
  return _.runKernel(Ai, t);
}
const Hn = R({ log_: Ek });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dk(n) {
  const t = { x: k(n, "x", "log1p") };
  return _.runKernel(Ri, t);
}
const eh = R({ log1p_: Dk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ak(n, e) {
  N(xd(n), () => "The f passed in variableGrads(f) must be a function"), N(e == null || Array.isArray(e) && e.every((c) => c instanceof hc), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  const t = e != null;
  if (!t) {
    e = [];
    for (const c in _.registeredVariables)
      e.push(_.registeredVariables[c]);
  }
  const s = t ? e.filter((c) => !c.trainable) : null, r = e.length;
  e = e.filter((c) => c.trainable), N(e.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);
  const o = !0, { value: a, grads: i } = _.gradients(n, e, null, o);
  N(i.some((c) => c != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), N(a.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);
  const l = {};
  return e.forEach((c, u) => {
    i[u] != null && (l[c.name] = i[u]);
  }), s != null && s.forEach((c) => l[c.name] = null), { value: a, grads: l };
}
function or(n) {
  return _.customGrad(n);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rk(n) {
  const t = { x: k(n, "x", "softplus") };
  return _.runKernel(Ki, t);
}
const ba = R({ softplus_: Rk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fk(n) {
  const e = k(n, "x", "logSigmoid");
  return or((s) => ({ value: gt(ba(gt(s))), gradFunc: (a) => F(a, Cs(gt(s))) }))(e);
}
const Eb = R({ logSigmoid_: Fk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _k(n, e) {
  let t = k(n, "a", "sub"), s = k(e, "b", "sub");
  [t, s] = It(t, s);
  const r = { a: t, b: s };
  return _.runKernel(Zi, r);
}
const ge = R({ sub_: _k });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ok(n, e = -1) {
  const t = k(n, "logits", "logSoftmax");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and axis was ${e}`);
  return or((r, o) => {
    const i = Ss(r, e, !0), l = ge(r, i), c = ge(fe(l, "float32"), Hn(Ie(Gn(l), e, !0)));
    return o([c]), { value: c, gradFunc: (h, d) => {
      const [p] = d, f = !0, m = Gn(p);
      return ge(h, F(Ie(h, e, f), m));
    } };
  })(t);
}
const Xf = R({ logSoftmax_: Ok });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lk(n, e = null, t = !1) {
  const s = k(n, "x", "logSumExp"), r = ze(e, s.shape), o = Ss(
    s,
    r,
    !0
    /* keepDims */
  ), a = ge(s, o), i = Gn(a), l = Ie(i, r), c = Hn(l), u = ne(P(o, c.shape), c);
  if (t) {
    const h = St(u.shape, r);
    return P(u, h);
  }
  return u;
}
const Yf = R({ logSumExp_: Lk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pk(n, e) {
  const t = k(n, "a", "logicalAnd", "bool"), s = k(e, "b", "logicalAnd", "bool");
  Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(fu, r);
}
const js = R({ logicalAnd_: Pk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zk(n) {
  const t = { x: k(n, "x", "logicalNot", "bool") };
  return _.runKernel(mu, t);
}
const th = R({ logicalNot_: zk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mk(n, e) {
  const t = k(n, "a", "logicalOr", "bool"), s = k(e, "b", "logicalOr", "bool");
  Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(gu, r);
}
const Zf = R({ logicalOr_: Mk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bk(n, e) {
  const t = k(n, "a", "logicalXor", "bool"), s = k(e, "b", "logicalXor", "bool");
  return Fe(t.shape, s.shape), js(Zf(n, e), th(js(n, e)));
}
const Db = R({ logicalXor_: Bk });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ll = 2147483648;
function Vk(n, e, t = "left") {
  const s = k(n, "sortedSequence", "searchSorted"), r = k(e, "values", "searchSorted"), o = s.shape[s.shape.length - 1], a = r.shape[r.shape.length - 1], i = P(s, [-1, o]), l = P(r, [-1, a]);
  if (i.rank < 2)
    throw new Error("Sorted input argument must be at least 2-dimensional");
  if (i.shape[0] !== l.shape[0])
    throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (Z(l.shape) >= Ll)
    throw new Error(`values tensor size must less than ${Ll}`);
  if (i.shape[1] >= Ll)
    throw new Error(`trailing dim_size must less than ${Ll} for int32 output type, was ${i.shape[1]}`);
  const c = {
    sortedSequence: i,
    values: l
  }, u = { side: t };
  return _.runKernel(uf, c, u);
}
const Jf = R({ searchSorted_: Vk });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wk(n, e) {
  return Jf(n, e, "left");
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uk(n, e, t, s, r) {
  const o = k(n, "x", "maxPool"), a = 1;
  let i = o, l = !1;
  o.rank === 3 && (l = !0, i = P(o, [1, o.shape[0], o.shape[1], o.shape[2]])), N(i.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${i.rank}.`), N(Qt(t, a), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${t} and dilations '${a}'`), pn("maxPool", s, r);
  const c = { x: i }, u = { filterSize: e, strides: t, pad: s, dimRoundingMode: r }, h = _.runKernel(xu, c, u);
  return l ? P(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const nh = R({ maxPool_: Uk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gk(n, e = [1, 1, 1], t, s, r, o = "NDHWC") {
  const a = k(n, "x", "maxPool3d");
  let i = a, l = !1;
  a.rank === 4 && (l = !0, i = P(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), N(i.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`), N(o === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`), pn("maxPool3d", s, r);
  const c = { x: i }, u = { filterSize: e, strides: t, pad: s, dimRoundingMode: r, dataFormat: o }, h = _.runKernel(wu, c, u);
  return l ? P(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const Ab = R({ maxPool3d_: Gk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hk(n, e, t, s, r = !1) {
  const a = { x: k(n, "x", "maxPoolWithArgmax") }, i = { filterSize: e, strides: t, pad: s, includeBatchInIndex: r }, l = _.runKernel(Zp, a, i);
  return { result: l[0], indexes: l[1] };
}
const jk = R({ maxPoolWithArgmax_: Hk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qk(n, e) {
  let t = k(n, "a", "maximum"), s = k(e, "b", "maximum");
  [t, s] = It(t, s), t.dtype === "bool" && (t = fe(t, "int32"), s = fe(s, "int32")), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(Fi, r);
}
const cr = R({ maximum_: qk });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kk(n, e = null, t = !1) {
  const r = { x: k(n, "x", "mean") }, o = { axis: e, keepDims: t };
  return _.runKernel(vu, r, o);
}
const vt = R({ mean_: Kk });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rt(n, e = "float32") {
  if (e === "complex64") {
    const s = Rt(n, "float32"), r = Rt(n, "float32");
    return Ir(s, r);
  }
  const t = sn(Z(n), e);
  return _.makeTensor(t, n, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wn(n, e = "float32") {
  if (e === "complex64") {
    const s = Wn(n, "float32"), r = Rt(n, "float32");
    return Ir(s, r);
  }
  const t = wp(Z(n), e);
  return _.makeTensor(t, n, e);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xk(n, e, { indexing: t = "xy" } = {}) {
  if (t !== "xy" && t !== "ij")
    throw new TypeError(`${t} is not a valid third argument to meshgrid`);
  if (n === void 0)
    return [];
  let s = k(n, "x", "meshgrid", n instanceof Je ? n.dtype : "float32");
  if (e === void 0)
    return [s];
  let r = k(e, "y", "meshgrid", e instanceof Je ? e.dtype : "float32");
  const o = Z(s.shape), a = Z(r.shape);
  return t === "xy" ? (s = P(s, [1, -1]), r = P(r, [-1, 1]), [
    Me(Wn([a, 1], s.dtype), s),
    Me(r, Wn([1, o], r.dtype))
  ]) : (s = P(s, [-1, 1]), r = P(r, [1, -1]), [
    Me(s, Wn([1, a], s.dtype)),
    Me(Wn([o, 1], r.dtype), r)
  ]);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yk(n, e) {
  let t = k(n, "a", "minimum"), s = k(e, "b", "minimum");
  [t, s] = It(t, s), t.dtype === "bool" && (t = fe(t, "int32"), s = fe(s, "int32")), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(_i, r);
}
const hl = R({ minimum_: Yk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zk(n, e, t) {
  N(t === "reflect" || t === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${t}.`);
  const s = k(n, "x", "mirrorPad");
  if (s.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  N(e.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${e.length}.`);
  const r = t === "reflect" ? 1 : 0;
  for (let i = 0; i < s.rank; i++)
    N(e[i].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), N(e[i][0] >= 0 && e[i][0] <= s.shape[i] - r && e[i][1] >= 0 && e[i][1] <= s.shape[i] - r, () => `Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i] - r} or less than 0 for input of shape ${s.shape}`);
  const o = { paddings: e, mode: t }, a = { x: s };
  return _.runKernel($u, a, o);
}
const Rb = R({ mirrorPad_: Zk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Jk(n, e) {
  let t = k(n, "a", "mod"), s = k(e, "b", "mod");
  [t, s] = It(t, s);
  const r = { a: t, b: s };
  return _.runKernel(Oi, r);
}
const Fb = R({ mod_: Jk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qk(n, e = null, t = !1) {
  n = k(n, "x", "moments");
  const s = ze(e, n.shape), r = vt(n, s, t);
  let o = r.shape;
  t || (o = St(r.shape, s));
  const a = at(ge(fe(n, "float32"), P(r, o))), i = vt(a, s, t);
  return { mean: r, variance: i };
}
const sh = R({ moments_: Qk });
function eT(n, e, t, s) {
  const r = k(e, "data", "multiRNNCell"), o = dc(t, "c", "multiRNNCell"), a = dc(s, "h", "multiRNNCell");
  let i = r;
  const l = [];
  for (let h = 0; h < n.length; h++) {
    const d = n[h](i, o[h], a[h]);
    l.push(d[0]), l.push(d[1]), i = d[1];
  }
  const c = [], u = [];
  for (let h = 0; h < l.length; h += 2)
    c.push(l[h]), u.push(l[h + 1]);
  return [c, u];
}
const tT = R({ multiRNNCell_: eT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nT(n, e, t, s = !1) {
  const r = k(n, "logits", "multinomial"), o = r.size, a = r.rank;
  if (o < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);
  if (a > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);
  t = t || Math.random();
  const l = { logits: a === 1 ? P(r, [1, -1]) : r }, c = { numSamples: e, seed: t, normalized: s }, u = _.runKernel(Jp, l, c);
  return a === 1 ? P(u, [u.size]) : u;
}
const sT = R({ multinomial_: nT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rT(n, e) {
  let t = k(n, "a", "notEqual", "string_or_numeric"), s = k(e, "b", "notEqual", "string_or_numeric");
  [t, s] = It(t, s), Fe(t.shape, s.shape);
  const r = { a: t, b: s };
  return _.runKernel(Su, r);
}
const na = R({ notEqual_: rT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oT(n) {
  const t = { x: k(n, "x", "onesLike") };
  return _.runKernel(Nu, t);
}
const jn = R({ onesLike_: oT });
function aT(n, e) {
  const t = k(n, "v1", "outerProduct"), s = k(e, "v2", "outerProduct");
  N(t.rank === 1 && s.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${t.rank} and ${s.rank}.`);
  const r = P(t, [-1, 1]), o = P(s, [1, -1]);
  return Me(r, o);
}
const iT = R({ outerProduct_: aT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lT(n, e, t = 0) {
  const s = k(n, "x", "pad");
  if (s.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const r = { paddings: e, constantValue: t }, o = { x: s };
  return _.runKernel(Eu, o, r);
}
const zr = R({ pad_: lT });
function cT(n, e, t = 0) {
  return N(e.length === 2, () => "Invalid number of paddings. Must be length of 2."), zr(n, [e], t);
}
const uT = R({ pad1d_: cT });
function hT(n, e, t = 0) {
  return N(e.length === 2 && e[0].length === 2 && e[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), zr(n, e, t);
}
const dT = R({ pad2d_: hT });
function pT(n, e, t = 0) {
  return N(e.length === 3 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), zr(n, e, t);
}
const fT = R({ pad3d_: pT });
function mT(n, e, t = 0) {
  return N(e.length === 4 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2 && e[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), zr(n, e, t);
}
const gT = R({ pad4d_: mT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yT(n, e, t) {
  const s = k(n, "x", "spaceToBatchND");
  N(s.rank >= 1 + e.length, () => `input rank ${s.rank} should be > than [blockShape] ${e.length}`), N(t.length === e.length, () => `paddings.shape[0] ${t.length} must be equal to [blockShape] ${e.length}`), N(s.shape.reduce((a, i, l) => l > 0 && l <= e.length ? a && (i + t[l - 1][0] + t[l - 1][1]) % e[l - 1] === 0 : a, !0), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${t.toString()} must be divisible by blockShapes ${e.toString()}`);
  const r = { x: s }, o = { blockShape: e, paddings: t };
  return _.runKernel(Mu, r, o);
}
const rh = R({ spaceToBatchND_: yT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bT(n, e, t, s, r, o, a) {
  r == null && (r = [1, 1]), o == null && (o = 1), s === 0 && (s = "valid");
  const i = k(n, "x", "maxPool");
  let l = i, c = !1;
  i.rank === 3 && (c = !0, l = P(i, [1, i.shape[0], i.shape[1], i.shape[2]])), N(Qt(o, r), () => `Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);
  const u = ps(l.shape, e, o, r, s), h = [u.dilationHeight, u.dilationWidth];
  let d;
  s === "same" ? d = wT([u.filterHeight, u.filterWidth], h) : d = [[0, 0], [0, 0]];
  const p = h[0] === 1 && h[1] === 1, [f, m] = xT([u.inHeight, u.inWidth], h, d), g = p ? s : "valid", y = p ? l : rh(l, h, f), w = (t === "avg" ? () => Xu(y, e, o, g, a) : () => nh(y, e, o, g, a))(), x = p ? w : Yu(w, h, m);
  return c ? P(x, [x.shape[1], x.shape[2], x.shape[3]]) : x;
}
function xT(n, e, t) {
  const s = t.map((u) => u[0]), r = t.map((u) => u[1]), o = n.concat(s, r), a = e.map((u, h) => (u - o[h] % u) % u), i = r.map((u, h) => u + a[h]), l = e.map((u, h) => [s[h], i[h]]), c = e.map((u, h) => [0, a[h]]);
  return [l, c];
}
function wT(n, e) {
  const s = n.map((a, i) => a + (a - 1) * (e[i] - 1)).map((a) => a - 1), r = s.map((a) => Math.floor(a / 2)), o = s.map((a, i) => a - r[i]);
  return s.map((a, i) => [r[i], o[i]]);
}
const _b = R({ pool_: bT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vT(n, e) {
  const t = k(n, "x", "prelu"), s = k(e, "alpha", "prelu"), r = { x: t, alpha: s };
  return _.runKernel(Du, r);
}
const oh = R({ prelu_: vT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IT(n, e = null, t = !1) {
  let s = k(n, "x", "prod");
  s.dtype === "bool" && (s = fe(s, "int32"));
  const r = { x: s }, o = { axis: e, keepDims: t };
  return _.runKernel(Au, r, o);
}
const Ob = R({ prod_: IT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $T(n, e, t, s) {
  const r = n.map((u, h) => k(u, `tensors${h}`, "raggedGather", "int32")), o = k(e, "paramsDenseValues", "raggedGather"), a = k(t, "indices", "raggedGather", "int32"), i = {
    paramsNestedSplits: r,
    paramsDenseValues: o,
    indices: a
  }, l = { outputRaggedRank: s }, c = _.runKernel(nf, i, l);
  return {
    outputNestedSplits: c.slice(0, c.length - 1),
    outputDenseValues: c[c.length - 1]
  };
}
const CT = R({ raggedGather_: $T });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ST(n, e, t, s, r) {
  const o = k(n, "shape", "raggedTensorToTensor", "int32"), a = k(e, "values", "raggedTensorToTensor"), i = k(t, "defaultValue", "raggedTensorToTensor", a.dtype), l = s.map((h, d) => k(h, `tensors${d}`, "raggedTensorToTensor", "int32")), c = {
    shape: o,
    values: a,
    defaultValue: i,
    rowPartitionTensors: l
  }, u = { rowPartitionTypes: r };
  return _.runKernel(sf, c, u);
}
const NT = R({ raggedTensorToTensor_: ST });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kT(n, e, t) {
  const s = Z(n);
  let r = null;
  if (t == null || t === "float32")
    r = new Float32Array(s);
  else if (t === "int32")
    r = new Int32Array(s);
  else if (t === "bool")
    r = new Uint8Array(s);
  else
    throw new Error(`Unknown data type ${t}`);
  for (let o = 0; o < s; o++)
    r[o] = e();
  return _.makeTensor(r, n, t);
}
const TT = R({ rand_: kT });
var Qf = { exports: {} };
Qf.exports;
(function(n) {
  (function(e, t, s) {
    function r(l) {
      var c = this, u = i();
      c.next = function() {
        var h = 2091639 * c.s0 + c.c * 23283064365386963e-26;
        return c.s0 = c.s1, c.s1 = c.s2, c.s2 = h - (c.c = h | 0);
      }, c.c = 1, c.s0 = u(" "), c.s1 = u(" "), c.s2 = u(" "), c.s0 -= u(l), c.s0 < 0 && (c.s0 += 1), c.s1 -= u(l), c.s1 < 0 && (c.s1 += 1), c.s2 -= u(l), c.s2 < 0 && (c.s2 += 1), u = null;
    }
    function o(l, c) {
      return c.c = l.c, c.s0 = l.s0, c.s1 = l.s1, c.s2 = l.s2, c;
    }
    function a(l, c) {
      var u = new r(l), h = c && c.state, d = u.next;
      return d.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, d.double = function() {
        return d() + (d() * 2097152 | 0) * 11102230246251565e-32;
      }, d.quick = d, h && (typeof h == "object" && o(h, u), d.state = function() {
        return o(u, {});
      }), d;
    }
    function i() {
      var l = 4022871197, c = function(u) {
        u = String(u);
        for (var h = 0; h < u.length; h++) {
          l += u.charCodeAt(h);
          var d = 0.02519603282416938 * l;
          l = d >>> 0, d -= l, d *= l, l = d >>> 0, d -= l, l += d * 4294967296;
        }
        return (l >>> 0) * 23283064365386963e-26;
      };
      return c;
    }
    t && t.exports ? t.exports = a : this.alea = a;
  })(
    ss,
    n
  );
})(Qf);
var ET = Qf.exports, em = { exports: {} };
em.exports;
(function(n) {
  (function(e, t, s) {
    function r(i) {
      var l = this, c = "";
      l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
        var h = l.x ^ l.x << 11;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ h ^ h >>> 8;
      }, i === (i | 0) ? l.x = i : c += i;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, l.next();
    }
    function o(i, l) {
      return l.x = i.x, l.y = i.y, l.z = i.z, l.w = i.w, l;
    }
    function a(i, l) {
      var c = new r(i), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    t && t.exports ? t.exports = a : this.xor128 = a;
  })(
    ss,
    n
  );
})(em);
var DT = em.exports, tm = { exports: {} };
tm.exports;
(function(n) {
  (function(e, t, s) {
    function r(i) {
      var l = this, c = "";
      l.next = function() {
        var h = l.x ^ l.x >>> 2;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (h ^ h << 1)) | 0;
      }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, i === (i | 0) ? l.x = i : c += i;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, u == c.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
    }
    function o(i, l) {
      return l.x = i.x, l.y = i.y, l.z = i.z, l.w = i.w, l.v = i.v, l.d = i.d, l;
    }
    function a(i, l) {
      var c = new r(i), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    t && t.exports ? t.exports = a : this.xorwow = a;
  })(
    ss,
    n
  );
})(tm);
var AT = tm.exports, nm = { exports: {} };
nm.exports;
(function(n) {
  (function(e, t, s) {
    function r(i) {
      var l = this;
      l.next = function() {
        var u = l.x, h = l.i, d, p;
        return d = u[h], d ^= d >>> 7, p = d ^ d << 24, d = u[h + 1 & 7], p ^= d ^ d >>> 10, d = u[h + 3 & 7], p ^= d ^ d >>> 3, d = u[h + 4 & 7], p ^= d ^ d << 7, d = u[h + 7 & 7], d = d ^ d << 13, p ^= d ^ d << 9, u[h] = p, l.i = h + 1 & 7, p;
      };
      function c(u, h) {
        var d, p = [];
        if (h === (h | 0))
          p[0] = h;
        else
          for (h = "" + h, d = 0; d < h.length; ++d)
            p[d & 7] = p[d & 7] << 15 ^ h.charCodeAt(d) + p[d + 1 & 7] << 13;
        for (; p.length < 8; ) p.push(0);
        for (d = 0; d < 8 && p[d] === 0; ++d) ;
        for (d == 8 ? p[7] = -1 : p[d], u.x = p, u.i = 0, d = 256; d > 0; --d)
          u.next();
      }
      c(l, i);
    }
    function o(i, l) {
      return l.x = i.x.slice(), l.i = i.i, l;
    }
    function a(i, l) {
      i == null && (i = +/* @__PURE__ */ new Date());
      var c = new r(i), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.x && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    t && t.exports ? t.exports = a : this.xorshift7 = a;
  })(
    ss,
    n
  );
})(nm);
var RT = nm.exports, sm = { exports: {} };
sm.exports;
(function(n) {
  (function(e, t, s) {
    function r(i) {
      var l = this;
      l.next = function() {
        var u = l.w, h = l.X, d = l.i, p, f;
        return l.w = u = u + 1640531527 | 0, f = h[d + 34 & 127], p = h[d = d + 1 & 127], f ^= f << 13, p ^= p << 17, f ^= f >>> 15, p ^= p >>> 12, f = h[d] = f ^ p, l.i = d, f + (u ^ u >>> 16) | 0;
      };
      function c(u, h) {
        var d, p, f, m, g, y = [], b = 128;
        for (h === (h | 0) ? (p = h, h = null) : (h = h + "\0", p = 0, b = Math.max(b, h.length)), f = 0, m = -32; m < b; ++m)
          h && (p ^= h.charCodeAt((m + 32) % h.length)), m === 0 && (g = p), p ^= p << 10, p ^= p >>> 15, p ^= p << 4, p ^= p >>> 13, m >= 0 && (g = g + 1640531527 | 0, d = y[m & 127] ^= p + g, f = d == 0 ? f + 1 : 0);
        for (f >= 128 && (y[(h && h.length || 0) & 127] = -1), f = 127, m = 4 * 128; m > 0; --m)
          p = y[f + 34 & 127], d = y[f = f + 1 & 127], p ^= p << 13, d ^= d << 17, p ^= p >>> 15, d ^= d >>> 12, y[f] = p ^ d;
        u.w = g, u.X = y, u.i = f;
      }
      c(l, i);
    }
    function o(i, l) {
      return l.i = i.i, l.w = i.w, l.X = i.X.slice(), l;
    }
    function a(i, l) {
      i == null && (i = +/* @__PURE__ */ new Date());
      var c = new r(i), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.X && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    t && t.exports ? t.exports = a : this.xor4096 = a;
  })(
    ss,
    // window object or global
    n
  );
})(sm);
var FT = sm.exports, rm = { exports: {} };
rm.exports;
(function(n) {
  (function(e, t, s) {
    function r(i) {
      var l = this, c = "";
      l.next = function() {
        var h = l.b, d = l.c, p = l.d, f = l.a;
        return h = h << 25 ^ h >>> 7 ^ d, d = d - p | 0, p = p << 24 ^ p >>> 8 ^ f, f = f - h | 0, l.b = h = h << 20 ^ h >>> 12 ^ d, l.c = d = d - p | 0, l.d = p << 16 ^ d >>> 16 ^ f, l.a = f - h | 0;
      }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, i === Math.floor(i) ? (l.a = i / 4294967296 | 0, l.b = i | 0) : c += i;
      for (var u = 0; u < c.length + 20; u++)
        l.b ^= c.charCodeAt(u) | 0, l.next();
    }
    function o(i, l) {
      return l.a = i.a, l.b = i.b, l.c = i.c, l.d = i.d, l;
    }
    function a(i, l) {
      var c = new r(i), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && o(u, c), h.state = function() {
        return o(c, {});
      }), h;
    }
    t && t.exports ? t.exports = a : this.tychei = a;
  })(
    ss,
    n
  );
})(rm);
var _T = rm.exports, Lb = { exports: {} };
const OT = {}, LT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: OT
}, Symbol.toStringTag, { value: "Module" })), PT = /* @__PURE__ */ aC(LT);
(function(n) {
  (function(e, t, s) {
    var r = 256, o = 6, a = 52, i = "random", l = s.pow(r, o), c = s.pow(2, a), u = c * 2, h = r - 1, d;
    function p(x, v, $) {
      var C = [];
      v = v == !0 ? { entropy: !0 } : v || {};
      var S = y(g(
        v.entropy ? [x, w(t)] : x ?? b(),
        3
      ), C), E = new f(C), D = function() {
        for (var O = E.g(o), V = l, W = 0; O < c; )
          O = (O + W) * r, V *= r, W = E.g(1);
        for (; O >= u; )
          O /= 2, V /= 2, W >>>= 1;
        return (O + W) / V;
      };
      return D.int32 = function() {
        return E.g(4) | 0;
      }, D.quick = function() {
        return E.g(4) / 4294967296;
      }, D.double = D, y(w(E.S), t), (v.pass || $ || function(O, V, W, U) {
        return U && (U.S && m(U, E), O.state = function() {
          return m(E, {});
        }), W ? (s[i] = O, V) : O;
      })(
        D,
        S,
        "global" in v ? v.global : this == s,
        v.state
      );
    }
    function f(x) {
      var v, $ = x.length, C = this, S = 0, E = C.i = C.j = 0, D = C.S = [];
      for ($ || (x = [$++]); S < r; )
        D[S] = S++;
      for (S = 0; S < r; S++)
        D[S] = D[E = h & E + x[S % $] + (v = D[S])], D[E] = v;
      (C.g = function(O) {
        for (var V, W = 0, U = C.i, j = C.j, q = C.S; O--; )
          V = q[U = h & U + 1], W = W * r + q[h & (q[U] = q[j = h & j + V]) + (q[j] = V)];
        return C.i = U, C.j = j, W;
      })(r);
    }
    function m(x, v) {
      return v.i = x.i, v.j = x.j, v.S = x.S.slice(), v;
    }
    function g(x, v) {
      var $ = [], C = typeof x, S;
      if (v && C == "object")
        for (S in x)
          try {
            $.push(g(x[S], v - 1));
          } catch {
          }
      return $.length ? $ : C == "string" ? x : x + "\0";
    }
    function y(x, v) {
      for (var $ = x + "", C, S = 0; S < $.length; )
        v[h & S] = h & (C ^= v[h & S] * 19) + $.charCodeAt(S++);
      return w(v);
    }
    function b() {
      try {
        var x;
        return d && (x = d.randomBytes) ? x = x(r) : (x = new Uint8Array(r), (e.crypto || e.msCrypto).getRandomValues(x)), w(x);
      } catch {
        var v = e.navigator, $ = v && v.plugins;
        return [+/* @__PURE__ */ new Date(), e, $, e.screen, w(t)];
      }
    }
    function w(x) {
      return String.fromCharCode.apply(0, x);
    }
    if (y(s.random(), t), n.exports) {
      n.exports = p;
      try {
        d = PT;
      } catch {
      }
    } else
      s["seed" + i] = p;
  })(
    // global: `self` in browsers (including strict mode and web workers),
    // otherwise `this` in Node and other environments
    typeof self < "u" ? self : ss,
    [],
    // pool: entropy pool starts empty
    Math
    // math: package containing random, pow, and seedrandom
  );
})(Lb);
var zT = Lb.exports, MT = ET, BT = DT, VT = AT, WT = RT, UT = FT, GT = _T, xo = zT;
xo.alea = MT;
xo.xor128 = BT;
xo.xorwow = VT;
xo.xorshift7 = WT;
xo.xor4096 = UT;
xo.tychei = GT;
var ah = xo;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class om {
  constructor(e, t, s, r, o) {
    this.mean = e, this.stdDev = t, this.dtype = s, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    const a = o || Math.random();
    this.random = ah.alea(a.toString());
  }
  /** Returns next sample from a Gaussian distribution. */
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const r = this.nextVal;
      return this.nextVal = NaN, r;
    }
    let e, t, s = !1;
    for (; !s; ) {
      let r, o, a;
      do
        r = 2 * this.random() - 1, o = 2 * this.random() - 1, a = r * r + o * o;
      while (a >= 1 || a === 0);
      const i = Math.sqrt(-2 * Math.log(a) / a);
      e = this.mean + this.stdDev * r * i, t = this.mean + this.stdDev * o * i, (!this.truncated || this.isValidTruncated(e)) && (s = !0);
    }
    return (!this.truncated || this.isValidTruncated(t)) && (this.nextVal = this.convertValue(t)), this.convertValue(e);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(e) {
    return this.dtype == null || this.dtype === "float32" ? e : Math.round(e);
  }
  /** Returns true if less than 2-standard-deviations from the mean. */
  isValidTruncated(e) {
    return e <= this.upper && e >= this.lower;
  }
}
class HT {
  constructor(e, t, s, r) {
    this.alpha = e, this.beta = 1 / t, this.dtype = s;
    const o = r || Math.random();
    this.randu = ah.alea(o.toString()), this.randn = new om(0, 1, s, !1, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  /** Returns next sample from a gamma distribution. */
  nextValue() {
    let e, t, s, r, o, a;
    for (; ; ) {
      do
        r = this.randn.nextValue(), a = 1 + this.c * r;
      while (a <= 0);
      if (a *= a * a, e = r * r, t = 1 - 0.331 * e * e, s = 0.5 * e + this.d * (1 - a + Math.log(a)), o = this.randu(), o < t || Math.log(o) < s)
        break;
    }
    return a = 1 / this.beta * this.d * a, this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(e) {
    return this.dtype === "float32" ? e : Math.round(e);
  }
}
class jT {
  constructor(e = 0, t = 1, s, r) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = t - e, this.dtype = s, r == null && (r = Math.random()), typeof r == "number" && (r = r.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);
    this.random = ah.alea(r);
  }
  convertValue(e) {
    return this.canReturnFloat() ? e : Math.round(e);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qT(n, e, t = 1, s = "float32", r) {
  if (t == null && (t = 1), s == null && (s = "float32"), s !== "float32" && s !== "int32")
    throw new Error(`Unsupported data type ${s}`);
  const o = new HT(e, t, s, r), a = Le(n, s);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = o.nextValue();
  return a.toTensor();
}
const KT = R({ randomGamma_: qT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XT(n, e = 0, t = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error(`Unsupported data type ${s}`);
  const o = new om(e, t, s, !1, r), a = Le(n, s);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = o.nextValue();
  return a.toTensor();
}
const am = R({ randomNormal_: XT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YT(n, e, t) {
  if (e != null && e === "bool")
    throw new Error(`Unsupported data type ${e}`);
  return am(n, 0, 1, e, t);
}
const ZT = R({ randomStandardNormal_: YT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JT(n, e = 0, t = 1, s = "float32", r) {
  const o = Le(n, s), a = new jT(e, t, null, r);
  for (let i = 0; i < o.values.length; i++)
    o.values[i] = a.nextValue();
  return o.toTensor();
}
const dl = R({ randomUniform_: JT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ja(n, e, t = 1, s = "float32") {
  if (t === 0)
    throw new Error("Cannot have a step of zero");
  const r = { start: n, stop: e, step: t, dtype: s };
  return _.runKernel(rf, {}, r);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QT(n) {
  const t = { x: k(n, "x", "reciprocal") };
  return _.runKernel(zi, t);
}
const Pb = R({ reciprocal_: QT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eE(n) {
  const t = { x: k(n, "x", "relu") };
  return _.runKernel(Mi, t);
}
const Ks = R({ relu_: eE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tE(n) {
  const t = { x: k(n, "x", "relu6") };
  return _.runKernel(Bi, t);
}
const im = R({ relu6_: tE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nE(n, e) {
  const s = { x: k(n, "x", "reverse") }, r = { dims: e };
  return _.runKernel(Ou, s, r);
}
const hs = R({ reverse_: nE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sE(n) {
  const e = k(n, "x", "reverse");
  return N(e.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`), hs(e, 0);
}
const rE = R({ reverse1d_: sE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oE(n, e) {
  const t = k(n, "x", "reverse");
  return N(t.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${t.rank}.`), hs(t, e);
}
const aE = R({ reverse2d_: oE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iE(n, e) {
  const t = k(n, "x", "reverse");
  return N(t.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${t.rank}.`), hs(t, e);
}
const lE = R({ reverse3d_: iE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cE(n, e) {
  const t = k(n, "x", "reverse");
  return N(t.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${t.rank}.`), hs(t, e);
}
const uE = R({ reverse4d_: cE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hE(n) {
  const t = { x: k(n, "x", "round") };
  return _.runKernel(Vi, t);
}
const lm = R({ round_: hE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dE(n) {
  const t = { x: k(n, "x", "rsqrt", "float32") };
  return _.runKernel(Wi, t);
}
const cm = R({ rsqrt_: dE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pE(n) {
  const t = { x: k(n, "x", "selu") };
  return _.runKernel(Ui, t);
}
const um = R({ selu_: pE });
function fE(n, e, t, s, r, o = [1, 1], a = "NHWC") {
  const i = k(n, "x", "separableConv2d"), l = k(e, "depthwiseFilter", "separableConv2d"), c = k(t, "pointwiseFilter", "separableConv2d");
  let u = i, h = !1;
  if (i.rank === 3 && (h = !0, u = P(i, [1, i.shape[0], i.shape[1], i.shape[2]])), a === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  N(u.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`), N(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), N(c.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), N(c.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`), N(c.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);
  const d = l.shape[2], p = l.shape[3];
  N(c.shape[2] === d * p, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${d * p}, but got ${c.shape[2]}.`);
  const f = al(u, l, s, r, a, o), g = Cr(f, c, 1, "valid", a);
  return h ? P(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const hm = R({ separableConv2d_: fE });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function mE(n, e) {
  const t = k(n, "x", "setdiff1d"), s = k(e, "y", "setdiff1d");
  N(t.dtype === s.dtype, () => `x and y should have the same dtype, but got x (${t.dtype}) and y (${s.dtype}).`), N(t.rank === 1, () => `x should be 1D tensor, but got x (${t.shape}).`), N(s.rank === 1, () => `y should be 1D tensor, but got y (${s.shape}).`);
  const r = await t.data(), o = await s.data(), a = new Set(o);
  let i = 0;
  for (let u = 0; u < r.length; u++)
    a.has(r[u]) || i++;
  const l = new Gt([i], t.dtype), c = new Gt([i], "int32");
  for (let u = 0, h = 0; u < r.length; u++)
    a.has(r[u]) || (l.values[h] = r[u], c.values[h] = u, h++);
  return [l.toTensor(), c.toTensor()];
}
const gE = mE;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yE(n) {
  const t = { x: k(n, "x", "sign") };
  return _.runKernel(ji, t);
}
const zb = R({ sign_: yE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bE(n) {
  const t = { x: k(n, "x", "sin", "float32") };
  return _.runKernel(Gi, t);
}
const dm = R({ sin_: bE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xE(n) {
  const t = { x: k(n, "x", "sinh") };
  return _.runKernel(Hi, t);
}
const pm = R({ sinh_: xE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wE(n, e, t) {
  const s = k(n, "x", "slice1d");
  return N(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), Ee(s, [e], [t]);
}
const ih = R({ slice1d_: wE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vE(n, e, t) {
  const s = k(n, "x", "slice2d");
  return N(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), Ee(s, e, t);
}
const fm = R({ slice2d_: vE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IE(n, e, t) {
  const s = k(n, "x", "slice3d");
  return N(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), Ee(s, e, t);
}
const lh = R({ slice3d_: IE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $E(n, e, t) {
  const s = k(n, "x", "slice4d");
  return N(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), Ee(s, e, t);
}
const qa = R({ slice4d_: $E });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CE(n, e = -1) {
  const t = k(n, "logits", "softmax", "float32");
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t.rank} and dim was ${e}`);
  const s = { logits: t }, r = { dim: e };
  return _.runKernel(Vu, s, r);
}
const ch = R({ softmax_: CE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SE(n) {
  N(n.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);
  const e = { input: n };
  return _.runKernel(Vp, e);
}
const uh = R({ fft_: SE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NE(n) {
  N(n.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);
  const e = { input: n };
  return _.runKernel(Hp, e);
}
const Ka = R({ ifft_: NE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kE(n) {
  const e = n.shape[n.shape.length - 1], t = n.size / e;
  let s;
  if (e <= 2) {
    const r = P(n, [t, e]);
    s = Ka(r);
  } else {
    const r = [t, 2 * (e - 1)], o = P(Ha(n), [t, e]), a = P(qu(n), [t, e]), i = hs(Ee(o, [0, 1], [t, e - 2]), 1), l = F(hs(Ee(a, [0, 1], [t, e - 2]), 1), Te(-1)), c = ft([o, i], 1), u = ft([a, l], 1), h = P(Ir(c, u), [r[0], r[1]]);
    s = Ka(h);
  }
  if (s = Ha(s), n.rank === 3 && n.shape[0] !== 0) {
    const r = s, o = n.shape[0];
    s = P(s, [o, s.shape[0] / o, s.shape[1]]), r.dispose();
  }
  return s;
}
const mm = R({ irfft_: kE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TE(n, e, t = 0) {
  const r = { x: k(n, "x", "split") }, o = { numOrSizeSplits: e, axis: t };
  return _.runKernel(Bu, r, o);
}
const Dn = R({ split_: TE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EE(n, e) {
  N(n.dtype === "float32", () => `The dtype for rfft() must be real value but got ${n.dtype}`);
  let t = n.shape[n.shape.length - 1];
  const s = n.size / t;
  let r;
  if (e != null && e < t) {
    const f = n.shape.map((g) => 0), m = n.shape.map((g) => g);
    m[n.shape.length - 1] = e, r = Ee(n, f, m), t = e;
  } else if (e != null && e > t) {
    const f = n.shape.map((m) => m);
    f[n.shape.length - 1] = e - t, r = ft([n, Rt(f)], n.shape.length - 1), t = e;
  } else
    r = n;
  const o = Ge(r), a = P(Ir(r, o), [s, t]), i = uh(a), l = Math.floor(t / 2) + 1, c = Ha(i), u = qu(i), h = Dn(c, [l, t - l], c.shape.length - 1), d = Dn(u, [l, t - l], u.shape.length - 1), p = r.shape.slice();
  return p[r.shape.length - 1] = l, P(Ir(h[0], d[0]), p);
}
const hh = R({ rfft_: EE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DE(n, e) {
  let t = k(n, "a", "squaredDifference"), s = k(e, "b", "squaredDifference");
  [t, s] = It(t, s), Fe(t.shape, s.shape);
  const r = { a: t, b: s }, o = {};
  return _.runKernel(Yi, r, o);
}
const gm = R({ squaredDifference_: DE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AE(n, e) {
  const t = k(n, "x", "squeeze", "string_or_numeric");
  return P(t, Rr(t.shape, e).newShape);
}
const An = R({ squeeze_: AE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RE(n, e = 0) {
  const t = dc(n, "tensors", "stack", "string_or_numeric");
  N(t.length >= 1, () => "Pass at least one tensor to tf.stack"), t.length > 0 && N(e <= t[0].rank, () => "Axis must be <= rank of the tensor");
  const s = t, r = { axis: e };
  return _.runKernel(Tu, s, r);
}
const ds = R({ stack_: RE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FE(n, e = 0) {
  const s = { x: k(n, "x", "step") }, r = { alpha: e };
  return _.runKernel(tl, s, r);
}
const xa = R({ step_: FE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _E(n, e, t, s, r = 0, o = 0, a = 0, i = 0, l = 0) {
  const u = { x: k(n, "x", "stridedSlice", "string_or_numeric") }, h = {
    begin: e,
    end: t,
    strides: s,
    beginMask: r,
    endMask: o,
    ellipsisMask: a,
    newAxisMask: i,
    shrinkAxisMask: l
  };
  return _.runKernel(yf, u, h);
}
const Mb = R({ stridedSlice_: _E });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OE(n) {
  const t = { x: k(n, "x", "tan", "float32") };
  return _.runKernel(Ji, t);
}
const Bb = R({ tan_: OE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ct(n, e) {
  pa(n);
  const t = _r(n, e);
  if (t.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Or(n, null, t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function er(n, e, t) {
  if (pa(n), e != null && e.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  const s = _r(n, t);
  if (s.length !== 2 && s.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (s.length === 1 && e == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Or(n, e, s, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LE(n, e, t) {
  if (pa(n), e != null && e.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  const s = _r(n, t);
  if (s.length !== 4 && s.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (s.length === 1 && e == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Or(n, e, s, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PE(n, e, t) {
  if (pa(n), e != null && e.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  const s = _r(n, t);
  if (s.length !== 5 && s.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (s.length === 1 && e == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Or(n, e, s, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zE(n, e, t) {
  if (pa(n), e != null && e.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  const s = _r(n, t);
  if (s.length !== 6 && s.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (s.length === 1 && e == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return e = e || s, Or(n, e, s, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ME(n, e = 1, t = !0) {
  const s = k(n, "x", "topk");
  if (s.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  const r = s.shape[s.shape.length - 1];
  if (e < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);
  if (e > r)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${e}`);
  const o = { x: s }, a = { k: e, sorted: t }, [i, l] = _.runKernel(vf, o, a);
  return { values: i, indices: l };
}
const Vb = R({ topk_: ME });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BE(n, e = 0, t = 1, s, r) {
  if (s != null && s === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  const o = new om(e, t, s, !0, r), a = Le(n, s);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = o.nextValue();
  return a.toTensor();
}
const ym = R({ truncatedNormal_: BE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VE(n, e = 0) {
  const t = k(n, "x", "unique", "string_or_numeric");
  N(t.rank > 0, () => "The input tensor must be at least 1D");
  const s = { x: t }, r = { axis: e }, [o, a] = _.runKernel($f, s, r);
  return { values: o, indices: a };
}
const Wb = R({ unique_: VE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WE(n, e, t) {
  const s = k(n, "x", "unsortedSegmentSum"), r = k(e, "segmentIds", "unsortedSegmentSum", "int32");
  N(Xo(t), () => "numSegments must be of dtype int");
  const o = { x: s, segmentIds: r }, a = { numSegments: t };
  return _.runKernel(Uu, o, a);
}
const bm = R({ unsortedSegmentSum_: WE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UE(n, e = 0) {
  const t = k(n, "x", "unstack", "string_or_numeric");
  N(e >= -t.shape.length && e < t.shape.length, () => `Axis = ${e} is not in [-${t.shape.length}, ${t.shape.length})`);
  const s = { value: t }, r = { axis: e };
  return _.runKernel(Wu, s, r);
}
const Ts = R({ unstack_: UE });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GE(n, e) {
  return Jf(n, e, "right");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ub(n, e = !0, t, s) {
  return _.makeVariable(n, e, t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xm(n, e) {
  const t = [];
  for (let o = 0; o < e.length; o++)
    e[o] && t.push(o);
  const s = Le(n, "int32"), r = Le([t.length, n.length], "int32");
  for (let o = 0; o < t.length; o++) {
    const a = s.indexToLoc(t[o]), i = o * n.length;
    r.values.set(a, i);
  }
  return r.toTensor();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function HE(n) {
  const e = k(n, "condition", "whereAsync", "bool"), t = await e.data(), s = xm(e.shape, t);
  return n !== e && e.dispose(), s;
}
const Gb = HE;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function jE(n, e, t) {
  const s = k(n, "tensor", "boolMask"), r = k(e, "mask", "boolMask", "bool"), o = t ?? 0, a = r.rank, i = s.shape;
  N(a > 0, () => "mask cannot be scalar"), Pn(i.slice(o, o + a), r.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let l = 1;
  for (let m = o; m < o + a; m++)
    l *= i[m];
  const c = i.slice(0, o).concat([l], i.slice(o + a)), u = P(s, c), h = P(r, [-1]), d = await Gb(h), p = An(d, [1]), f = ul(u, p, o);
  return n !== s && s.dispose(), e !== r && r.dispose(), p.dispose(), u.dispose(), h.dispose(), d.dispose(), f;
}
const qE = jE;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KE(n, e, t, s, r = !0) {
  const o = k(n, "v", "movingAverage"), a = k(e, "x", "movingAverage"), i = k(t, "decay", "movingAverage");
  SC(o, a), N(He(o.shape, a.shape), () => "Shape mismatch in v and x");
  const l = Te(1), c = ge(l, i);
  let u = F(ge(a, o), c);
  if (r) {
    N(s != null, () => "When using zeroDebias: true, step is required.");
    const h = k(s, "step", "movingAverage");
    u = be(u, ge(l, Sr(i, h)));
  }
  return ne(o, u);
}
const XE = R({ movingAverage_: KE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YE(n, e, t) {
  const s = k(n, "indices", "scatterND", "int32"), r = k(e, "updates", "scatterND");
  V1(r, s, t);
  const o = { indices: s, updates: r }, a = { shape: t };
  return _.runKernel(cf, o, a);
}
const ZE = R({ scatterND_: YE });
function JE(n, e, t, s) {
  if (n.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);
  if (n.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);
  const r = n.rank > 0 ? n.shape[0] : 1, o = n.rank > 1 ? n.shape[1] : 1;
  if (t.length !== o)
    throw new Error(`outputShape has incorrect number of elements:, ${t.length}, should be: ${o}.`);
  const a = e.size;
  if (!(e.rank === 0 || e.rank === 1 && a === r))
    throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${r}]`);
  if (e.dtype !== s.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QE(n, e, t, s = 0) {
  const r = k(n, "sparseIndices", "sparseToDense", "int32"), o = k(e, "sparseValues", "sparseToDense", "string_or_numeric"), a = k(s, "defaultValue", "sparseToDense", o.dtype);
  JE(r, o, t, a);
  const i = {
    sparseIndices: r,
    sparseValues: o,
    defaultValue: a
  }, l = { outputShape: t };
  return _.runKernel(mf, i, l);
}
const e3 = R({ sparseToDense_: QE });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function t3(n, e) {
  const t = k(e, "indices", "gatherND", "int32"), r = { params: k(n, "x", "gatherND", "string_or_numeric"), indices: t };
  return _.runKernel(Gp, r);
}
const n3 = R({ gatherND_: t3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s3(n, e) {
  if (e == null)
    return n.shape.slice();
  if (He(n.shape, e))
    return e;
  if (n.shape.length === e.length) {
    const t = [];
    for (let s = 0; s < n.shape.length; s++)
      e[s] == null && n.shape[s] != null ? t.push(n.shape[s]) : t.push(e[s]);
    return t;
  }
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function r3(n, e, t, s) {
  const r = k(n, "x", "dropout");
  if (N(r.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`), N(e >= 0 && e < 1, () => `rate must be a float in the range [0, 1), but got ${e}.`), e === 0)
    return n instanceof Je ? r.clone() : r;
  const o = s3(r, t), a = 1 - e, i = be(cl(ne(dl(o, 0, 1, "float32", s), a)), a);
  return F(r, i);
}
const Hb = R({ dropout_: r3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jb(n) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function wm(n, e, t) {
  const s = 1 - n % 2, r = new Float32Array(n);
  for (let o = 0; o < n; ++o) {
    const a = 2 * Math.PI * o / (n + s - 1);
    r[o] = e - t * Math.cos(a);
  }
  return Ct(r, "float32");
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function o3(n, e, t = 1) {
  const s = k(n, "predictions", "inTopK"), r = k(e, "targets", "inTopK");
  N(s.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`), N(s.rank - 1 === r.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`), Pn(s.shape.slice(0, s.shape.length - 1), r.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  const o = s.shape[s.shape.length - 1];
  N(t > 0 && t <= o, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${t}`);
  const a = await s.data(), i = await r.data(), [l, c] = [a.length / o, o], u = Ht("bool", l);
  for (let h = 0; h < l; h++) {
    const d = h * c, p = a.subarray(d, d + c), f = [];
    for (let m = 0; m < p.length; m++)
      f.push({ value: p[m], index: m });
    f.sort((m, g) => g.value - m.value), u[h] = 0;
    for (let m = 0; m < t; m++)
      if (f[m].index === i[h]) {
        u[h] = 1;
        break;
      }
  }
  return n !== s && s.dispose(), e !== r && r.dispose(), Ws(u, r.shape, "bool");
}
const a3 = o3;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i3(n, e, t, s, r, o = "NHWC", a) {
  let i = n;
  n.rank === 3 && (i = P(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = e;
  l.rank === 3 && (l = P(e, [1, e.shape[0], e.shape[1], e.shape[2]])), N(i.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`), N(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), N(t.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${t}.`);
  const c = o === "NHWC" ? i.shape[3] : i.shape[1], u = o === "NHWC" ? l.shape[3] : l.shape[1];
  N(c === t[2], () => `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${t[2]}.`), N(u === t[3], () => `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${t[3]}).`), pn("conv2dDerFilter", r, a);
  const h = { x: i, dy: l }, d = { strides: s, pad: r, dataFormat: o, dimRoundingMode: a, filterShape: t };
  return _.runKernel(Ep, h, d);
}
const vm = R({ conv2DBackpropFilter_: i3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dh(n, e, t) {
  if (t == null || t === "linear")
    return n;
  if (t === "relu")
    return F(n, xa(e));
  throw new Error(`Cannot compute gradient for fused activation ${t}.`);
}
function ph(n, e) {
  let t = e;
  const s = Pt(n.shape, e.shape);
  return s.length > 0 && (t = Ie(t, s)), P(t, n.shape);
}
function fh(n, e, t, s) {
  if (e === "linear")
    return n;
  if (e === "relu")
    return Ks(n);
  if (e === "elu")
    return il(n);
  if (e === "relu6")
    return im(n);
  if (e === "prelu")
    return oh(n, t);
  if (e === "leakyrelu")
    return Qu(n, s);
  if (e === "sigmoid")
    return Cs(n);
  throw new Error(`Unknown fused activation ${e}.`);
}
const mh = (n, e) => !(n > 0) || e === "linear";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l3({ x: n, filter: e, strides: t, pad: s, dataFormat: r = "NHWC", dilations: o = [1, 1], dimRoundingMode: a, bias: i, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (l = l || "linear", mh(_.state.gradientDepth, l) === !1) {
    N(r === "NHWC", () => `Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let $ = Cr(n, e, t, s, r, o, a);
    return i != null && ($ = ne($, i)), fh($, l, c, u);
  }
  const h = k(n, "x", "conv2d", "float32"), d = k(e, "filter", "conv2d", "float32");
  let p = h, f = !1;
  h.rank === 3 && (f = !0, p = P(h, [1, h.shape[0], h.shape[1], h.shape[2]])), N(p.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`), N(d.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`), pn("fused conv2d", s, a);
  const m = r === "NHWC" ? p.shape[3] : p.shape[1];
  N(d.shape[2] === m, () => `Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`), N(Qt(t, o), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`);
  const g = jt(p.shape, d.shape, t, o, s, a);
  let y;
  i != null && (y = k(i, "bias", "fused conv2d"), [y] = It(y, h), r === "NHWC" ? Fe(g.outShape, y.shape) : (N(y.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`), N(y.shape.length === 0 || y.shape[0] === g.outChannels || y.shape[0] === 1, () => `Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let b;
  if (c != null) {
    const $ = c.shape;
    if (N($.length <= 1 || $.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${$.length}.`), $.length === 1)
      N($[0] === 1 || $[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if ($.length === 3)
      try {
        Fe($, g.outShape);
      } catch {
        const S = `Error in fused conv2d: PReLU activation weights (${$}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
        throw Error(S);
      }
    b = k(c, "prelu weights", "fused conv2d");
  }
  const w = ($, C) => {
    N(r === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);
    const [S, E, D, O] = C, V = dh($, D, l);
    N($r(o), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);
    const W = Wf(E.shape, V, S, t, s), U = vm(E, V, S.shape, t, s), j = [W, U];
    if (O != null) {
      const q = ph(O, V);
      j.push(q);
    }
    return j;
  }, x = {
    x: p,
    filter: d,
    bias: y,
    preluActivationWeights: b
  }, v = {
    strides: t,
    pad: s,
    dataFormat: r,
    dilations: o,
    dimRoundingMode: a,
    activation: l,
    leakyreluAlpha: u
  };
  return i == null ? or((C, S, E) => {
    let D = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      _.runKernel(ic, x, v)
    );
    return E([S, C, D]), f && (D = P(D, [D.shape[1], D.shape[2], D.shape[3]])), { value: D, gradFunc: w };
  })(p, d) : or((C, S, E, D) => {
    let O = _.runKernel(ic, x, v);
    return D([S, C, O, E]), f && (O = P(O, [O.shape[1], O.shape[2], O.shape[3]])), { value: O, gradFunc: w };
  })(p, d, y);
}
const qb = R({ fusedConv2d_: l3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c3(n, e, t, s, r, o = [1, 1], a) {
  let i = n;
  n.rank === 3 && (i = P(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = e;
  l.rank === 3 && (l = P(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  const c = { x: i, dy: l }, u = { strides: s, pad: r, dimRoundingMode: a, dilations: o, filterShape: t };
  return _.runKernel(Lp, c, u);
}
const Kb = R({ depthwiseConv2dNativeBackpropFilter_: c3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u3(n, e, t, s, r, o = [1, 1], a) {
  let i = e, l = !1;
  e.rank === 3 && (l = !0, i = P(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  const c = { dy: i, filter: t }, u = { strides: s, pad: r, dimRoundingMode: a, dilations: o, inputShape: n }, h = (
    // tslint:disable-next-line: no-unnecessary-type-assertion
    _.runKernel(Pp, c, u)
  );
  return l ? P(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const Xb = R({ depthwiseConv2dNativeBackpropInput_: u3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h3({ x: n, filter: e, strides: t, pad: s, dataFormat: r = "NHWC", dilations: o = [1, 1], dimRoundingMode: a, bias: i, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (mh(_.state.gradientDepth, l) === !1) {
    let v = al(n, e, t, s, r, o, a);
    return i != null && (v = ne(v, i)), fh(v, l, c, u);
  }
  const h = k(n, "x", "depthwiseConv2d", "float32"), d = k(e, "filter", "depthwiseConv2d", "float32");
  let p = h, f = !1;
  h.rank === 3 && (f = !0, p = P(h, [1, h.shape[0], h.shape[1], h.shape[2]])), N(p.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`), N(d.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`), N(p.shape[3] === d.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`), o == null && (o = [1, 1]), N(Qt(t, o), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t} and dilations '${o}'`), pn("fused depthwiseConv2d", s, a);
  const m = jt(
    p.shape,
    d.shape,
    t,
    o,
    s,
    a,
    !0
    /* depthwise */
  );
  let g;
  i != null && (g = k(i, "bias", "fused conv2d"), [g] = It(g, h), Fe(m.outShape, g.shape));
  let y;
  c != null && (y = k(c, "prelu weights", "fused depthwiseConv2d"));
  const b = (v, $) => {
    N($r(o), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);
    const [C, S, E, D] = $, O = dh(v, E, l), V = Xb(S.shape, O, C, t, s, o, a), W = Kb(S, O, C.shape, t, s, o, a);
    if (D != null) {
      const U = ph(g, O);
      return [V, W, U];
    }
    return [V, W];
  }, w = {
    x: p,
    filter: d,
    bias: g,
    preluActivationWeights: y
  }, x = {
    strides: t,
    pad: s,
    dataFormat: r,
    dilations: o,
    dimRoundingMode: a,
    activation: l,
    leakyreluAlpha: u
  };
  return i == null ? or(($, C, S) => {
    let E = _.runKernel(lc, w, x);
    return S([C, $, E]), f && (E = P(E, [E.shape[1], E.shape[2], E.shape[3]])), { value: E, gradFunc: b };
  })(p, d) : or(($, C, S, E) => {
    let D = _.runKernel(lc, w, x);
    return E([C, $, D, S]), f && (D = P(D, [D.shape[1], D.shape[2], D.shape[3]])), { value: D, gradFunc: b };
  })(p, d, g);
}
const d3 = R({ fusedDepthwiseConv2d_: h3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p3({ a: n, b: e, transposeA: t = !1, transposeB: s = !1, bias: r, activation: o = "linear", preluActivationWeights: a, leakyreluAlpha: i = 0.2 }) {
  if (mh(_.state.gradientDepth, o) === !1) {
    let O = Me(n, e, t, s);
    return r != null && (O = ne(O, r)), fh(O, o, a, i);
  }
  let l = k(n, "a", "fused matMul"), c = k(e, "b", "fused matMul");
  [l, c] = It(l, c);
  const u = t ? l.shape[l.rank - 2] : l.shape[l.rank - 1], h = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2], d = t ? l.shape[l.rank - 1] : l.shape[l.rank - 2], p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1], f = l.shape.slice(0, -2), m = c.shape.slice(0, -2), g = Z(f), y = Z(m);
  N(u === h, () => `Error in fused matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${t} and transposeB=${s} must match.`);
  const w = Fe(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([d, p]), x = t ? P(l, [g, u, d]) : P(l, [g, d, u]), v = s ? P(c, [y, p, h]) : P(c, [y, h, p]);
  let $;
  r != null && ($ = k(r, "bias", "fused matMul"), [$] = It($, l), Fe(w, $.shape));
  let C;
  a != null && (C = k(a, "prelu weights", "fused matMul"));
  const S = (O, V) => {
    const [W, U, j, q] = V, Y = dh(P(O, j.shape), j, o);
    let X, Q;
    if (!t && !s ? (X = Me(Y, U, !1, !0), Q = Me(W, Y, !0, !1)) : !t && s ? (X = Me(Y, U, !1, !1), Q = Me(Y, W, !0, !1)) : t && !s ? (X = Me(U, Y, !1, !0), Q = Me(W, Y, !1, !1)) : (X = Me(U, Y, !0, !0), Q = Me(Y, W, !0, !0)), r != null) {
      const se = ph(q, Y);
      return [X, Q, se];
    } else
      return [X, Q];
  }, E = {
    a: x,
    b: v,
    bias: $,
    preluActivationWeights: C
  }, D = { transposeA: t, transposeB: s, activation: o, leakyreluAlpha: i };
  return r == null ? or((V, W, U) => {
    const j = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      _.runKernel(ac, E, D)
    );
    return U([V, W, j]), { value: P(j, w), gradFunc: S };
  })(x, v) : or((V, W, U, j) => {
    const q = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      _.runKernel(ac, E, D)
    );
    return j([V, W, q, U]), { value: P(q, w), gradFunc: S };
  })(x, v, $);
}
const Bd = R({ fusedMatMul_: p3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  conv2d: qb,
  depthwiseConv2d: d3,
  matMul: Bd
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m3(n) {
  return wm(n, 0.54, 0.46);
}
const g3 = R({ hammingWindow_: m3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y3(n) {
  return wm(n, 0.5, 0.5);
}
const Yb = R({ hannWindow_: y3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b3(n, e, t, s = !1, r = 0) {
  let o = 0;
  const a = [];
  for (; o + e <= n.size; )
    a.push(Ee(n, o, e)), o += t;
  if (s)
    for (; o < n.size; ) {
      const i = o + e - n.size, l = ft([
        Ee(n, o, e - i),
        ya([i], r)
      ]);
      a.push(l), o += t;
    }
  return a.length === 0 ? er([], [0, e]) : P(ft(a), [a.length, e]);
}
const Zb = R({ frame_: b3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x3(n, e, t, s, r = Yb) {
  s == null && (s = jb(e));
  const o = Zb(n, e, t), a = F(o, r(e));
  return hh(a, s);
}
const w3 = R({ stft_: x3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v3(n, e, t, s, r = "bilinear", o = 0) {
  const a = k(n, "image", "cropAndResize"), i = k(e, "boxes", "cropAndResize", "float32"), l = k(t, "boxInd", "cropAndResize", "int32"), c = i.shape[0];
  N(a.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`), N(i.rank === 2 && i.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${i.shape}.`), N(l.rank === 1 && l.shape[0] === c, () => `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${i.shape}.`), N(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), N(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), N(r === "bilinear" || r === "nearest", () => `method must be bilinear or nearest, but was ${r}`);
  const u = { image: a, boxes: i, boxInd: l }, h = { method: r, extrapolationValue: o, cropSize: s };
  return _.runKernel(Fp, u, h);
}
const I3 = R({ cropAndResize_: v3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $3(n) {
  const e = k(n, "image", "flipLeftRight", "float32");
  N(e.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);
  const t = { image: e };
  return _.runKernel(Up, t, {});
}
const C3 = R({ flipLeftRight_: $3 });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S3(n) {
  const e = k(n, "image", "grayscaleToRGB"), t = e.rank - 1, s = e.shape[t];
  N(e.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`), N(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
  const r = new Array(e.rank);
  return r.fill(1, 0, t), r[t] = 3, is(e, r);
}
const N3 = R({ grayscaleToRGB_: S3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k3(n, e, t = 0, s = 0.5) {
  const r = k(n, "image", "rotateWithOffset", "float32");
  N(r.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);
  const o = { image: r }, a = { radians: e, fillValue: t, center: s };
  return _.runKernel(Cf, o, a);
}
const T3 = R({ rotateWithOffset_: k3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wa(n, e, t, s, r, o) {
  s == null && (s = 0.5), r == null && (r = Number.NEGATIVE_INFINITY), o == null && (o = 0);
  const a = n.shape[0];
  return t = Math.min(t, a), N(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), N(n.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`), N(n.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`), N(e.rank === 1, () => "scores must be a 1D tensor"), N(e.shape[0] === a, () => `scores has incompatible shape with boxes. Expected ${a}, but was ${e.shape[0]}`), N(0 <= o && o <= 1, () => `softNmsSigma must be in [0, 1], but was '${o}'`), { maxOutputSize: t, iouThreshold: s, scoreThreshold: r, softNmsSigma: o };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function E3(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const o = k(n, "boxes", "nonMaxSuppression", "float32"), a = k(e, "scores", "nonMaxSuppression", "float32"), i = wa(o, a, t, s, r);
  t = i.maxOutputSize, s = i.iouThreshold, r = i.scoreThreshold;
  const l = { maxOutputSize: t, iouThreshold: s, scoreThreshold: r };
  return _.runKernel(Qp, { boxes: o, scores: a }, l);
}
const D3 = R({ nonMaxSuppression_: E3 });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A3(n, e, t) {
  const s = R3(n, e, t), r = s < 0 ? -(s + 1) : s;
  n.splice(r, 0, e);
}
function R3(n, e, t) {
  return _3(n, e, t || F3);
}
function F3(n, e) {
  return n > e ? 1 : n < e ? -1 : 0;
}
function _3(n, e, t) {
  let s = 0, r = n.length, o = 0, a = !1;
  for (; s < r; ) {
    o = s + (r - s >>> 1);
    const i = t(e, n[o]);
    i > 0 ? s = o + 1 : (r = o, a = !i);
  }
  return a ? s : -s - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Im(n, e, t, s, r) {
  return Sm(
    n,
    e,
    t,
    s,
    r,
    0
    /* softNmsSigma */
  );
}
function $m(n, e, t, s, r, o) {
  return Sm(
    n,
    e,
    t,
    s,
    r,
    0,
    !1,
    o,
    !0
    /* returnValidOutputs */
  );
}
function Cm(n, e, t, s, r, o) {
  return Sm(
    n,
    e,
    t,
    s,
    r,
    o,
    !0
    /* returnScoresTensor */
  );
}
function Sm(n, e, t, s, r, o, a = !1, i = !1, l = !1) {
  const c = [];
  for (let g = 0; g < e.length; g++)
    e[g] > r && c.push({ score: e[g], boxIndex: g, suppressBeginIndex: 0 });
  c.sort(f0);
  const u = o > 0 ? -0.5 / o : 0, h = [], d = [];
  for (; h.length < t && c.length > 0; ) {
    const g = c.pop(), { score: y, boxIndex: b, suppressBeginIndex: w } = g;
    if (y < r)
      break;
    let x = !1;
    for (let v = h.length - 1; v >= w; --v) {
      const $ = O3(n, b, h[v]);
      if ($ >= s) {
        x = !0;
        break;
      }
      if (g.score = g.score * L3(s, u, $), g.score <= r)
        break;
    }
    g.suppressBeginIndex = h.length, x || (g.score === y ? (h.push(b), d.push(g.score)) : g.score > r && A3(c, g, f0));
  }
  const p = h.length, f = t - p;
  i && f > 0 && (h.push(...new Array(f).fill(0)), d.push(...new Array(f).fill(0)));
  const m = { selectedIndices: h };
  return a && (m.selectedScores = d), l && (m.validOutputs = p), m;
}
function O3(n, e, t) {
  const s = n.subarray(e * 4, e * 4 + 4), r = n.subarray(t * 4, t * 4 + 4), o = Math.min(s[0], s[2]), a = Math.min(s[1], s[3]), i = Math.max(s[0], s[2]), l = Math.max(s[1], s[3]), c = Math.min(r[0], r[2]), u = Math.min(r[1], r[3]), h = Math.max(r[0], r[2]), d = Math.max(r[1], r[3]), p = (i - o) * (l - a), f = (h - c) * (d - u);
  if (p <= 0 || f <= 0)
    return 0;
  const m = Math.max(o, c), g = Math.max(a, u), y = Math.min(i, h), b = Math.min(l, d), w = Math.max(y - m, 0) * Math.max(b - g, 0);
  return w / (p + f - w);
}
function L3(n, e, t) {
  const s = Math.exp(e * t * t);
  return t <= n ? s : 0;
}
function f0(n, e) {
  return n.score - e.score || n.score === e.score && e.boxIndex - n.boxIndex;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function P3(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY) {
  const o = k(n, "boxes", "nonMaxSuppressionAsync"), a = k(e, "scores", "nonMaxSuppressionAsync"), i = wa(o, a, t, s, r);
  t = i.maxOutputSize, s = i.iouThreshold, r = i.scoreThreshold;
  const l = await Promise.all([o.data(), a.data()]), c = l[0], u = l[1], { selectedIndices: h } = Im(c, u, t, s, r);
  return o !== n && o.dispose(), a !== e && a.dispose(), Ct(h, "int32");
}
const z3 = P3;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function M3(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
  const a = k(n, "boxes", "nonMaxSuppression"), i = k(e, "scores", "nonMaxSuppression"), l = wa(a, i, t, s, r, o);
  t = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
  const c = { boxes: a, scores: i }, u = { maxOutputSize: t, iouThreshold: s, scoreThreshold: r, softNmsSigma: o }, h = _.runKernel(tf, c, u);
  return { selectedIndices: h[0], selectedScores: h[1] };
}
const B3 = R({ nonMaxSuppressionWithScore_: M3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function V3(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, o = 0) {
  const a = k(n, "boxes", "nonMaxSuppressionAsync"), i = k(e, "scores", "nonMaxSuppressionAsync"), l = wa(a, i, t, s, r, o);
  t = l.maxOutputSize, s = l.iouThreshold, r = l.scoreThreshold, o = l.softNmsSigma;
  const c = await Promise.all([a.data(), i.data()]), u = c[0], h = c[1], { selectedIndices: d, selectedScores: p } = Cm(u, h, t, s, r, o);
  return a !== n && a.dispose(), i !== e && i.dispose(), {
    selectedIndices: Ct(d, "int32"),
    selectedScores: Ct(p)
  };
}
const W3 = V3;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U3(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
  const a = k(n, "boxes", "nonMaxSuppression"), i = k(e, "scores", "nonMaxSuppression"), l = wa(
    a,
    i,
    t,
    s,
    r,
    null
    /* softNmsSigma */
  ), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, d = { boxes: a, scores: i }, p = {
    maxOutputSize: c,
    iouThreshold: u,
    scoreThreshold: h,
    padToMaxOutputSize: o
  }, f = _.runKernel(ef, d, p);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
const G3 = R({ nonMaxSuppressionPadded_: U3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function H3(n, e, t, s = 0.5, r = Number.NEGATIVE_INFINITY, o = !1) {
  const a = k(n, "boxes", "nonMaxSuppressionAsync"), i = k(e, "scores", "nonMaxSuppressionAsync"), l = wa(
    a,
    i,
    t,
    s,
    r,
    null
    /* softNmsSigma */
  ), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, [d, p] = await Promise.all([a.data(), i.data()]), { selectedIndices: f, validOutputs: m } = $m(d, p, c, u, h, o);
  return a !== n && a.dispose(), i !== e && i.dispose(), {
    selectedIndices: Ct(f, "int32"),
    validOutputs: Te(m, "int32")
  };
}
const j3 = H3;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function q3(n, e, t = !1, s = !1) {
  const r = k(n, "images", "resizeBilinear");
  N(r.rank === 3 || r.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`), N(e.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${e}.`), N(s === !1 || t === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let o = r, a = !1;
  r.rank === 3 && (a = !0, o = P(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const i = { images: o }, l = { alignCorners: t, halfPixelCenters: s, size: e }, c = _.runKernel(_u, i, l);
  return a ? P(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const Jb = R({ resizeBilinear_: q3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K3(n, e, t = !1, s = !1) {
  const r = k(n, "images", "resizeNearestNeighbor");
  N(r.rank === 3 || r.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`), N(e.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`), N(r.dtype === "float32" || r.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), N(s === !1 || t === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let o = r, a = !1;
  r.rank === 3 && (a = !0, o = P(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const i = { images: o }, l = { alignCorners: t, halfPixelCenters: s, size: e }, c = _.runKernel(Fu, i, l);
  return a ? P(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const Qb = R({ resizeNearestNeighbor_: K3 });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X3(n, e = "binary", t = !1, s = 0.5) {
  const r = k(n, "image", "threshold"), o = 0.2989, a = 0.587, i = 0.114, l = r.shape[0] * r.shape[1];
  let c = F(Ct([s]), 255), u, h, d, p;
  if (N(r.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${r.rank}.`), N(r.shape[2] === 3 || r.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`), N(r.dtype === "int32" || r.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`), N(e === "otsu" || e === "binary", () => `Method must be binary or otsu, but was ${e}`), r.shape[2] === 3) {
    [u, h, d] = Dn(r, [1, 1, 1], -1);
    const g = F(u, o), y = F(h, a), b = F(d, i);
    p = ne(ne(g, y), b);
  } else
    p = n;
  if (e === "otsu") {
    const g = lb(fe(lm(p), "int32"), Ws([]), 256);
    c = Y3(g, l);
  }
  const f = t ? bo(p, c) : qn(p, c);
  return fe(F(f, 255), "int32");
}
function Y3(n, e) {
  let t = Ct([-1]), s = Ct([0]), r = Ct([0]), o, a, i, l, c, u;
  for (let h = 0; h < n.size - 1; h++) {
    o = Ee(n, 0, h + 1), a = Ee(n, h + 1), c = be(Ie(o), e), u = be(Ie(a), e);
    const d = Ie(F(o, ja(0, o.size)));
    i = be(d, Ie(o));
    const p = ya(a.shape, o.size), f = ne(ja(0, a.size), p), m = F(a, f);
    l = be(Ie(m), Ie(a));
    const g = ge(i, l), y = ge(i, l), b = F(c, u);
    r = F(F(b, g), y);
    const w = qn(r, s);
    s = In(w, r, s), t = In(w, Ct([h]), t);
  }
  return t;
}
const Z3 = R({ threshold_: X3 });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J3(n, e, t = "nearest", s = "constant", r = 0, o) {
  const a = k(n, "image", "transform", "float32"), i = k(e, "transforms", "transform", "float32");
  N(a.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${a.rank}.`), N(i.rank === 2 && (i.shape[0] === a.shape[0] || i.shape[0] === 1) && i.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), N(o == null || o.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${o}.`);
  const l = { image: a, transforms: i }, c = { interpolation: t, fillMode: s, fillValue: r, outputShape: o };
  return _.runKernel(If, l, c);
}
const Q3 = R({ transform_: J3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eD(n, e, t) {
  N(e % 1 === 0, () => `bandPart(): numLower must be an integer, got ${e}.`), N(t % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${t}.`);
  const s = k(n, "a", "bandPart");
  N(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
  const r = s.shape, [o, a] = s.shape.slice(-2);
  if (!(e <= o))
    throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${o}).`);
  if (!(t <= a))
    throw new Error(`bandPart(): numUpper (${t}) must not be greater than the number of columns (${a}).`);
  e < 0 && (e = o), t < 0 && (t = a);
  const i = P(ja(0, o, 1, "int32"), [-1, 1]), l = ja(0, a, 1, "int32"), c = ge(i, l), u = js(bo(c, Te(+e, "int32")), yo(c, Te(-t, "int32"))), h = Rt([o, a], s.dtype);
  return P(ds(Ts(P(s, [-1, o, a])).map((d) => In(u, d, h))), r);
}
const tD = R({ bandPart_: eD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nD(n) {
  let e;
  if (Array.isArray(n)) {
    e = !1, N(n != null && n.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const r = n[0].shape[0];
    for (let o = 1; o < n.length; ++o)
      N(n[o].shape[0] === r, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`);
  } else
    e = !0, n = Dn(n, n.shape[0], 0).map((r) => An(r, [0]));
  N(n.length <= n[0].shape[0], () => `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);
  const t = [], s = n;
  for (let r = 0; r < n.length; ++r)
    t.push(_.tidy(() => {
      let o = s[r];
      if (r > 0)
        for (let a = 0; a < r; ++a) {
          const i = F(Ie(F(t[a], o)), t[a]);
          o = ge(o, i);
        }
      return be(o, ll(o, "euclidean"));
    }));
  return e ? ds(t, 0) : t;
}
const sD = R({ gramSchmidt_: nD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rD(n, e = !1) {
  if (N(n.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`), n.rank === 2)
    return m0(n, e);
  {
    const t = n.shape.slice(0, n.shape.length - 2).reduce((l, c) => l * c), s = Ts(P(n, [
      t,
      n.shape[n.shape.length - 2],
      n.shape[n.shape.length - 1]
    ]), 0), r = [], o = [];
    s.forEach((l) => {
      const [c, u] = m0(l, e);
      r.push(c), o.push(u);
    });
    const a = P(ds(r, 0), n.shape), i = P(ds(o, 0), n.shape);
    return [a, i];
  }
}
function m0(n, e = !1) {
  return _.tidy(() => {
    N(n.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);
    const t = n.shape[0], s = n.shape[1];
    let r = qf(t), o = Qs(n);
    const a = er([[1]], [1, 1]);
    let i = Qs(a);
    const l = t >= s ? s : t;
    for (let c = 0; c < l; ++c) {
      const u = o, h = i, d = r;
      [i, o, r] = _.tidy(() => {
        const p = Ee(o, [c, c], [t - c, 1]), f = ll(p), m = Ee(o, [c, c], [1, 1]), g = In(qn(m, 0), er([[-1]]), er([[1]])), y = ge(m, F(g, f)), b = be(p, y);
        b.shape[0] === 1 ? i = Qs(a) : i = ft([
          a,
          Ee(b, [1, 0], [b.shape[0] - 1, b.shape[1]])
        ], 0);
        const w = gt(be(Me(g, y), f)), x = Ee(o, [c, 0], [t - c, s]), v = F(w, i), $ = We(i);
        if (c === 0)
          o = ge(x, Me(v, Me($, x)));
        else {
          const E = ge(x, Me(v, Me($, x)));
          o = ft([Ee(o, [0, 0], [c, s]), E], 0);
        }
        const C = We(v), S = Ee(r, [0, c], [t, r.shape[1] - c]);
        if (c === 0)
          r = ge(S, Me(Me(S, i), C));
        else {
          const E = ge(S, Me(Me(S, i), C));
          r = ft([Ee(r, [0, 0], [t, c]), E], 1);
        }
        return [i, o, r];
      }), Be([u, h, d]);
    }
    return !e && t > s && (r = Ee(r, [0, 0], [t, s]), o = Ee(o, [0, 0], [s, s])), [r, o];
  });
}
const oD = R({ qr_: rD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var vn;
(function(n) {
  n[n.NONE = 0] = "NONE", n[n.MEAN = 1] = "MEAN", n[n.SUM = 2] = "SUM", n[n.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(vn || (vn = {}));
function aD(n, e, t = vn.SUM_BY_NONZERO_WEIGHTS) {
  const s = k(n, "losses", "computeWeightedLoss");
  let r = null;
  e != null && (r = k(e, "weights", "computeWeightedLoss"));
  const o = r == null ? s : F(s, r);
  if (t === vn.NONE)
    return o;
  if (t === vn.SUM)
    return Ie(o);
  if (t === vn.MEAN) {
    if (r == null)
      return vt(o);
    {
      const a = s.size / r.size, i = be(Ie(o), Ie(r));
      return a > 1 ? be(i, Te(a)) : i;
    }
  }
  if (t === vn.SUM_BY_NONZERO_WEIGHTS) {
    if (r == null)
      return be(Ie(o), Te(s.size));
    {
      const a = F(r, Wn(s.shape)), i = fe(Ie(na(a, Te(0))), "float32");
      return be(Ie(o), i);
    }
  }
  throw Error(`Unknown reduction: ${t}`);
}
const ur = R({ computeWeightedLoss_: aD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iD(n, e, t, s = vn.SUM_BY_NONZERO_WEIGHTS) {
  const r = k(n, "labels", "absoluteDifference"), o = k(e, "predictions", "absoluteDifference");
  let a = null;
  t != null && (a = k(t, "weights", "absoluteDifference")), Pn(r.shape, o.shape, "Error in absoluteDifference: ");
  const i = At(ge(r, o));
  return ur(i, a, s);
}
const lD = R({ absoluteDifference_: iD });
function cD(n, e, t, s, r = vn.SUM_BY_NONZERO_WEIGHTS) {
  const o = k(n, "labels", "cosineDistance"), a = k(e, "predictions", "cosineDistance");
  let i = null;
  s != null && (i = k(s, "weights", "cosineDistance")), Pn(o.shape, a.shape, "Error in cosineDistance: ");
  const l = Te(1), c = ge(l, Ie(F(o, a), t, !0));
  return ur(c, i, r);
}
const uD = R({ cosineDistance_: cD });
function hD(n, e, t, s = vn.SUM_BY_NONZERO_WEIGHTS) {
  let r = k(n, "labels", "hingeLoss");
  const o = k(e, "predictions", "hingeLoss");
  let a = null;
  t != null && (a = k(t, "weights", "hingeLoss")), Pn(r.shape, o.shape, "Error in hingeLoss: ");
  const i = Te(1);
  r = ge(F(Te(2), r), i);
  const l = Ks(ge(i, F(r, o)));
  return ur(l, a, s);
}
const dD = R({ hingeLoss_: hD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pD(n, e, t, s = 1, r = vn.SUM_BY_NONZERO_WEIGHTS) {
  const o = k(n, "labels", "huberLoss"), a = k(e, "predictions", "huberLoss");
  let i = null;
  t != null && (i = k(t, "weights", "huberLoss")), Pn(o.shape, a.shape, "Error in huberLoss: ");
  const l = Te(s), c = At(ge(a, o)), u = hl(c, l), h = ge(c, u), d = ne(F(Te(0.5), at(u)), F(l, h));
  return ur(d, i, r);
}
const fD = R({ huberLoss_: pD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mD(n, e, t, s = 1e-7, r = vn.SUM_BY_NONZERO_WEIGHTS) {
  const o = k(n, "labels", "logLoss"), a = k(e, "predictions", "logLoss");
  let i = null;
  t != null && (i = k(t, "weights", "logLoss")), Pn(o.shape, a.shape, "Error in logLoss: ");
  const l = Te(1), c = Te(s), u = gt(F(o, Hn(ne(a, c)))), h = F(ge(l, o), Hn(ne(ge(l, a), c))), d = ge(u, h);
  return ur(d, i, r);
}
const gD = R({ logLoss_: mD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yD(n, e, t, s = vn.SUM_BY_NONZERO_WEIGHTS) {
  const r = k(n, "labels", "meanSquaredError"), o = k(e, "predictions", "meanSquaredError");
  let a = null;
  t != null && (a = k(t, "weights", "meanSquaredError")), Pn(r.shape, o.shape, "Error in meanSquaredError: ");
  const i = gm(r, o);
  return ur(i, a, s);
}
const bD = R({ meanSquaredError_: yD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xD(n, e) {
  const t = k(n, "labels", "sigmoidCrossEntropyWithLogits"), s = k(e, "logits", "sigmoidCrossEntropyWithLogits");
  Pn(t.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  const r = Ks(s), o = F(s, t), a = eh(Gn(gt(At(s))));
  return ne(ge(r, o), a);
}
function wD(n, e, t, s = 0, r = vn.SUM_BY_NONZERO_WEIGHTS) {
  let o = k(n, "multiClassLabels", "sigmoidCrossEntropy");
  const a = k(e, "logits", "sigmoidCrossEntropy");
  let i = null;
  if (t != null && (i = k(t, "weights", "sigmoidCrossEntropy")), Pn(o.shape, a.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
    const c = Te(s), u = Te(1), h = Te(0.5);
    o = ne(F(o, ge(u, c)), F(h, c));
  }
  const l = xD(o, a);
  return ur(l, i, r);
}
const vD = R({ sigmoidCrossEntropy_: wD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ID(n, e, t = -1) {
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t}`);
  return or((r, o, a) => {
    const l = Yf(o, [t], !0), c = ge(fe(o, "float32"), l);
    a([r, c]);
    const u = gt(F(c, r));
    return { value: Ie(u, [t]), gradFunc: (p, f) => {
      const [m, g] = f, y = St(p.shape, [t]);
      return [
        F(P(p, y), ge(fe(m, "float32"), Gn(g))),
        F(P(p, y), ge(Gn(g), fe(m, "float32")))
      ];
    } };
  })(n, e);
}
function $D(n, e, t, s = 0, r = vn.SUM_BY_NONZERO_WEIGHTS) {
  let o = k(n, "onehotLabels", "softmaxCrossEntropy");
  const a = k(e, "logits", "softmaxCrossEntropy");
  let i = null;
  if (t != null && (i = k(t, "weights", "softmaxCrossEntropy")), Pn(o.shape, a.shape, "Error in softmaxCrossEntropy: "), s > 0) {
    const c = Te(s), u = Te(1), h = Te(o.shape[1]);
    o = ne(F(o, ge(u, c)), be(c, h));
  }
  const l = ID(o, a);
  return ur(l, i, r);
}
const CD = R({ softmaxCrossEntropy_: $D });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SD(n, e, t, s) {
  const r = k(n, "indices", "sparseFillEmptyRows", "int32"), o = k(e, "values", "sparseFillEmptyRows"), a = k(t, "denseShape", "sparseFillEmptyRows", "int32"), i = k(s, "defaultValue", "sparseFillEmptyRows", o.dtype);
  if (r.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);
  if (a.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);
  if (i.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${i.shape}`);
  const l = {
    indices: r,
    values: o,
    denseShape: a,
    defaultValue: i
  }, c = _.runKernel(hf, l);
  return {
    outputIndices: c[0],
    outputValues: c[1],
    emptyRowIndicator: c[2],
    reverseIndexMap: c[3]
  };
}
const ND = R({ sparseFillEmptyRows_: SD });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kD(n, e, t) {
  const s = k(n, "inputIndices", "sparseReshape", "int32"), r = k(e, "inputShape", "sparseReshape", "int32"), o = k(t, "newShape", "sparseReshape", "int32");
  if (s.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
  if (r.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);
  const a = {
    inputIndices: s,
    inputShape: r,
    newShape: o
  }, i = _.runKernel(df, a);
  return { outputIndices: i[0], outputShape: i[1] };
}
const TD = R({ sparseReshape_: kD });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ED(n, e, t) {
  const s = k(n, "data", "sparseSegmentMean"), r = k(e, "indices", "sparseSegmentMean", "int32"), o = k(t, "segmentIds", "sparseSegmentMean", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${o.shape}`);
  const a = {
    data: s,
    indices: r,
    segmentIds: o
  };
  return _.runKernel(pf, a);
}
const DD = R({ sparseSegmentMean_: ED });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AD(n, e, t) {
  const s = k(n, "data", "sparseSegmentSum"), r = k(e, "indices", "sparseSegmentSum", "int32"), o = k(t, "segmentIds", "sparseSegmentSum", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${r.shape}`);
  if (o.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${o.shape}`);
  const a = {
    data: s,
    indices: r,
    segmentIds: o
  };
  return _.runKernel(ff, a);
}
const RD = R({ sparseSegmentSum_: AD });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FD(n, e, t, s, r, o, a, i) {
  const l = k(n, "data", "stringNGrams", "string");
  if (l.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${l.shape}`);
  const c = k(e, "dataSplits", "stringNGrams");
  if (c.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  const u = {
    separator: t,
    nGramWidths: s,
    leftPad: r,
    rightPad: o,
    padWidth: a,
    preserveShortSequences: i
  }, h = { data: l, dataSplits: c }, d = _.runKernel(bf, h, u);
  return { nGrams: d[0], nGramsSplits: d[1] };
}
const _D = R({ stringNGrams_: FD });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OD(n, e, t = !0) {
  const s = k(n, "input", "stringSplit", "string"), r = k(e, "delimiter", "stringSplit", "string");
  if (s.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
  if (r.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);
  const o = { skipEmpty: t }, a = { input: s, delimiter: r }, i = _.runKernel(xf, a, o);
  return { indices: i[0], values: i[1], shape: i[2] };
}
const LD = R({ stringSplit_: OD });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PD(n, e) {
  const t = k(n, "input", "stringToHashBucketFast", "string"), s = { numBuckets: e };
  if (e <= 0)
    throw new Error("Number of buckets must be at least 1");
  const r = { input: t };
  return _.runKernel(wf, r, s);
}
const zD = R({ stringToHashBucketFast_: PD });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MD = {
  fft: uh,
  ifft: Ka,
  rfft: hh,
  irfft: mm
}, BD = {
  hammingWindow: g3,
  hannWindow: Yb,
  frame: Zb,
  stft: w3
}, $s = {
  flipLeftRight: C3,
  grayscaleToRGB: N3,
  resizeNearestNeighbor: Qb,
  resizeBilinear: Jb,
  rotateWithOffset: T3,
  cropAndResize: I3,
  nonMaxSuppression: D3,
  nonMaxSuppressionAsync: z3,
  nonMaxSuppressionWithScore: B3,
  nonMaxSuppressionWithScoreAsync: W3,
  nonMaxSuppressionPadded: G3,
  nonMaxSuppressionPaddedAsync: j3,
  threshold: Z3,
  transform: Q3
}, ex = {
  bandPart: tD,
  gramSchmidt: sD,
  qr: oD
}, VD = {
  absoluteDifference: lD,
  computeWeightedLoss: ur,
  cosineDistance: uD,
  hingeLoss: dD,
  huberLoss: fD,
  logLoss: gD,
  meanSquaredError: bD,
  sigmoidCrossEntropy: vD,
  softmaxCrossEntropy: CD
}, WD = {
  sparseFillEmptyRows: ND,
  sparseReshape: TD,
  sparseSegmentMean: DD,
  sparseSegmentSum: RD
}, UD = {
  stringNGrams: _D,
  stringSplit: LD,
  stringToHashBucketFast: zD
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Mr extends ga {
  /**
   * Executes `f()` and minimizes the scalar output of `f()` by computing
   * gradients of y with respect to the list of trainable variables provided by
   * `varList`. If no list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to minimize.
   * @param returnCost Whether to return the scalar cost value produced by
   * executing `f()`.
   * @param varList An optional list of variables to update. If specified, only
   * the trainable variables in varList will be updated by minimize. Defaults to
   * all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  minimize(e, t = !1, s) {
    const { value: r, grads: o } = this.computeGradients(e, s);
    if (s != null) {
      const a = s.map((i) => ({ name: i.name, tensor: o[i.name] }));
      this.applyGradients(a);
    } else
      this.applyGradients(o);
    return Be(o), t ? r : (r.dispose(), null);
  }
  /**
   * The number of iterations that this optimizer instance has been invoked for.
   */
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  /**
   * Executes f() and computes the gradient of the scalar output of f() with
   * respect to the list of trainable variables provided by `varList`. If no
   * list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to use for computing
   * gradients with respect to variables.
   * @param varList An optional list of variables to compute gradients with
   * respect to. If specified, only the trainable variables in varList will have
   * gradients computed with respect to. Defaults to all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  computeGradients(e, t) {
    return Ak(e, t);
  }
  /**
   * Dispose the variables (if any) owned by this optimizer instance.
   */
  dispose() {
    this.iterations_ != null && Be(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), {
      name: "iter",
      // TODO(cais): Use 'int64' type when available.
      tensor: Te(this.iterations_, "int32")
    };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(e) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  /**
   * Extract the first element of the weight values and set it
   * as the iterations counter variable of this instance of optimizer.
   *
   * @param weightValues
   * @returns Weight values with the first element consumed and excluded.
   */
  async extractIterations(e) {
    return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1);
  }
}
Object.defineProperty(Mr, Symbol.hasInstance, {
  value: (n) => n.minimize != null && n.computeGradients != null && n.applyGradients != null
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Nm extends Mr {
  constructor(e, t, s = null) {
    super(), this.learningRate = e, this.rho = t, this.epsilon = s, this.accumulatedGrads = [], this.accumulatedUpdates = [], s == null && (this.epsilon = _.backend.epsilon());
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const o = _.registeredVariables[s], a = !1;
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
        originalName: `${s}/accum_grad`,
        variable: H(() => Ge(o).variable(a))
      }), this.accumulatedUpdates[r] == null && (this.accumulatedUpdates[r] = {
        originalName: `${s}/accum_var`,
        variable: H(() => Ge(o).variable(a))
      });
      const i = Array.isArray(e) ? e[r].tensor : e[s];
      if (i == null)
        return;
      const l = this.accumulatedGrads[r].variable, c = this.accumulatedUpdates[r].variable;
      H(() => {
        const u = ne(F(l, this.rho), F(at(i), 1 - this.rho)), h = F(be(rn(ne(c, this.epsilon)), rn(ne(l, this.epsilon))), i), d = ne(F(c, this.rho), F(at(h), 1 - this.rho));
        l.assign(u), c.assign(d);
        const p = ne(F(h, -this.learningRate), o);
        o.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Be(this.accumulatedGrads.map((e) => e.variable)), Be(this.accumulatedUpdates.map((e) => e.variable)));
  }
  async getWeights() {
    const e = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = e.length / 2, s = !1;
    this.accumulatedGrads = e.slice(0, t).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedUpdates = e.slice(t, t * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      rho: this.rho,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.rho, t.epsilon);
  }
}
Nm.className = "Adadelta";
re(Nm);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class km extends Mr {
  constructor(e, t = 0.1) {
    super(), this.learningRate = e, this.initialAccumulatorValue = t, this.accumulatedGrads = [];
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const o = _.registeredVariables[s];
      this.accumulatedGrads[r] == null && (this.accumulatedGrads[r] = {
        originalName: `${s}/accumulator`,
        variable: H(() => ya(o.shape, this.initialAccumulatorValue).variable(!1))
      });
      const a = Array.isArray(e) ? e[r].tensor : e[s];
      if (a == null)
        return;
      const i = this.accumulatedGrads[r].variable;
      H(() => {
        const l = ne(i, at(a));
        i.assign(l);
        const c = ne(F(be(a, rn(ne(l, _.backend.epsilon()))), -this.learningRate), o);
        o.assign(c);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Be(this.accumulatedGrads.map((e) => e.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = !1;
    this.accumulatedGrads = e.map((s) => ({ originalName: s.name, variable: s.tensor.variable(t) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      initialAccumulatorValue: this.initialAccumulatorValue
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.initialAccumulatorValue);
  }
}
km.className = "Adagrad";
re(km);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Tm extends Mr {
  constructor(e, t, s, r = null) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = s, this.epsilon = r, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], H(() => {
      this.accBeta1 = Te(t).variable(), this.accBeta2 = Te(s).variable();
    }), r == null && (this.epsilon = _.backend.epsilon());
  }
  applyGradients(e) {
    const t = Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e);
    H(() => {
      const s = ge(1, this.accBeta1), r = ge(1, this.accBeta2);
      t.forEach((o, a) => {
        const i = _.registeredVariables[o], l = !1;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = {
          originalName: `${o}/m`,
          variable: H(() => Ge(i).variable(l))
        }), this.accumulatedSecondMoment[a] == null && (this.accumulatedSecondMoment[a] = {
          originalName: `${o}/v`,
          variable: H(() => Ge(i).variable(l))
        });
        const c = Array.isArray(e) ? e[a].tensor : e[o];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[a].variable, h = this.accumulatedSecondMoment[a].variable, d = ne(F(u, this.beta1), F(c, 1 - this.beta1)), p = ne(F(h, this.beta2), F(at(c), 1 - this.beta2)), f = be(d, s), m = be(p, r);
        u.assign(d), h.assign(p);
        const g = ne(F(be(f, ne(rn(m), this.epsilon)), -this.learningRate), i);
        i.assign(g);
      }), this.accBeta1.assign(F(this.accBeta1, this.beta1)), this.accBeta2.assign(F(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Be(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedSecondMoment != null && Be(this.accumulatedSecondMoment.map((e) => e.variable));
  }
  async getWeights() {
    const e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e), H(() => {
      this.accBeta1.assign(Sr(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(Sr(this.beta2, this.iterations_ + 1));
    });
    const t = e.length / 2, s = !1;
    this.accumulatedFirstMoment = e.slice(0, t).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedSecondMoment = e.slice(t, t * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon);
  }
}
Tm.className = "Adam";
re(Tm);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Em extends Mr {
  constructor(e, t, s, r = null, o = 0) {
    super(), this.learningRate = e, this.beta1 = t, this.beta2 = s, this.epsilon = r, this.decay = o, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], H(() => {
      this.iteration = Te(0).variable(), this.accBeta1 = Te(t).variable();
    }), r == null && (this.epsilon = _.backend.epsilon());
  }
  applyGradients(e) {
    const t = Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e);
    H(() => {
      const s = ge(1, this.accBeta1), r = be(-this.learningRate, ne(F(this.iteration, this.decay), 1));
      t.forEach((o, a) => {
        const i = _.registeredVariables[o], l = !1;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = {
          originalName: `${o}/m`,
          variable: Ge(i).variable(l)
        }), this.accumulatedWeightedInfNorm[a] == null && (this.accumulatedWeightedInfNorm[a] = {
          originalName: `${o}/v`,
          variable: Ge(i).variable(l)
        });
        const c = Array.isArray(e) ? e[a].tensor : e[o];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[a].variable, h = this.accumulatedWeightedInfNorm[a].variable, d = ne(F(u, this.beta1), F(c, 1 - this.beta1)), p = F(h, this.beta2), f = At(c), m = cr(p, f);
        u.assign(d), h.assign(m);
        const g = ne(F(be(r, s), be(d, ne(m, this.epsilon))), i);
        i.assign(g);
      }), this.iteration.assign(ne(this.iteration, 1)), this.accBeta1.assign(F(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Be(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedWeightedInfNorm != null && Be(this.accumulatedWeightedInfNorm.map((e) => e.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(e) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon,
      decay: this.decay
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
  }
}
Em.className = "Adamax";
re(Em);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class gh extends Mr {
  constructor(e) {
    super(), this.learningRate = e, this.setLearningRate(e);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const o = Array.isArray(e) ? e[r].tensor : e[s];
      if (o == null)
        return;
      const a = _.registeredVariables[s];
      H(() => {
        const i = ne(F(this.c, o), a);
        a.assign(i);
      });
    }), this.incrementIterations();
  }
  /**
   * Sets the learning rate of the optimizer.
   */
  setLearningRate(e) {
    this.learningRate = e, this.c != null && this.c.dispose(), this.c = Yt(Te(-e));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e) {
    if (e = await this.extractIterations(e), e.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate);
  }
}
gh.className = "SGD";
re(gh);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Dm extends gh {
  constructor(e, t, s = !1) {
    super(e), this.learningRate = e, this.momentum = t, this.useNesterov = s, this.accumulations = [], this.m = Te(this.momentum);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const o = _.registeredVariables[s];
      this.accumulations[r] == null && (this.accumulations[r] = {
        originalName: `${s}/momentum`,
        variable: H(() => Ge(o).variable(!1))
      });
      const a = this.accumulations[r].variable, i = Array.isArray(e) ? e[r].tensor : e[s];
      i != null && H(() => {
        let l;
        const c = ne(F(this.m, a), i);
        this.useNesterov ? l = ne(F(this.c, ne(i, F(c, this.m))), o) : l = ne(F(this.c, c), o), a.assign(c), o.assign(l);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Be(this.accumulations.map((e) => e.variable));
  }
  /**
   * Sets the momentum of the optimizer.
   *
   * @param momentum
   */
  setMomentum(e) {
    this.momentum = e;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = !1;
    this.accumulations = e.map((s) => ({ originalName: s.name, variable: s.tensor.variable(t) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      momentum: this.momentum,
      useNesterov: this.useNesterov
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.momentum, t.useNesterov);
  }
}
Dm.className = "Momentum";
re(Dm);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Am extends Mr {
  constructor(e, t = 0.9, s = 0, r = null, o = !1) {
    if (super(), this.learningRate = e, this.decay = t, this.momentum = s, this.epsilon = r, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = o, r == null && (this.epsilon = _.backend.epsilon()), e == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((s) => s.name) : Object.keys(e)).forEach((s, r) => {
      const o = _.registeredVariables[s], a = !1;
      this.accumulatedMeanSquares[r] == null && (this.accumulatedMeanSquares[r] = {
        originalName: `${s}/rms`,
        variable: H(() => Ge(o).variable(a))
      }), this.accumulatedMoments[r] == null && (this.accumulatedMoments[r] = {
        originalName: `${s}/momentum`,
        variable: H(() => Ge(o).variable(a))
      }), this.accumulatedMeanGrads[r] == null && this.centered && (this.accumulatedMeanGrads[r] = {
        originalName: `${s}/mg`,
        variable: H(() => Ge(o).variable(a))
      });
      const i = Array.isArray(e) ? e[r].tensor : e[s];
      if (i == null)
        return;
      const l = this.accumulatedMeanSquares[r].variable, c = this.accumulatedMoments[r].variable;
      H(() => {
        const u = ne(F(l, this.decay), F(at(i), 1 - this.decay));
        if (this.centered) {
          const h = this.accumulatedMeanGrads[r].variable, d = ne(F(h, this.decay), F(i, 1 - this.decay)), p = be(F(i, this.learningRate), rn(ge(u, ne(at(d), this.epsilon)))), f = ne(F(c, this.momentum), p);
          l.assign(u), h.assign(d), c.assign(f);
          const m = ge(o, f);
          o.assign(m);
        } else {
          const h = ne(F(l, this.decay), F(at(i), 1 - this.decay)), d = ne(F(c, this.momentum), be(F(i, this.learningRate), rn(ne(h, this.epsilon))));
          l.assign(h), c.assign(d);
          const p = ge(o, d);
          o.assign(p);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Be(this.accumulatedMeanSquares.map((e) => e.variable)), this.accumulatedMeanGrads != null && this.centered && Be(this.accumulatedMeanGrads.map((e) => e.variable)), this.accumulatedMoments != null && Be(this.accumulatedMoments.map((e) => e.variable));
  }
  async getWeights() {
    const e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && e.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    const t = this.centered ? e.length / 3 : e.length / 2, s = !1;
    this.accumulatedMeanSquares = e.slice(0, t).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.accumulatedMoments = e.slice(t, t * 2).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })), this.centered && (this.accumulatedMeanGrads = e.slice(t * 2, t * 3).map((r) => ({
      originalName: r.name,
      variable: r.tensor.variable(s)
    })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      decay: this.decay,
      momentum: this.momentum,
      epsilon: this.epsilon,
      centered: this.centered
    };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
  }
}
Am.className = "RMSProp";
re(Am);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Hr {
  /**
   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
   *
   * ```js
   * // Fit a quadratic function by learning the coefficients a, b, c.
   * const xs = tf.tensor1d([0, 1, 2, 3]);
   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
   *
   * const a = tf.scalar(Math.random()).variable();
   * const b = tf.scalar(Math.random()).variable();
   * const c = tf.scalar(Math.random()).variable();
   *
   * // y = a * x^2 + b * x + c.
   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
   * const loss = (pred, label) => pred.sub(label).square().mean();
   *
   * const learningRate = 0.01;
   * const optimizer = tf.train.sgd(learningRate);
   *
   * // Train the model.
   * for (let i = 0; i < 10; i++) {
   *   optimizer.minimize(() => loss(f(xs), ys));
   * }
   *
   * // Make predictions.
   * console.log(
   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
   * const preds = f(xs).dataSync();
   * preds.forEach((pred, i) => {
   *   console.log(`x: ${i}, pred: ${pred}`);
   * });
   * ```
   *
   * @param learningRate The learning rate to use for the SGD algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static sgd(e) {
    return new gh(e);
  }
  /**
   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
   * descent.
   *
   * See
   * [http://proceedings.mlr.press/v28/sutskever13.pdf](
   * http://proceedings.mlr.press/v28/sutskever13.pdf)
   *
   * @param learningRate The learning rate to use for the Momentum gradient
   * descent algorithm.
   * @param momentum The momentum to use for the momentum gradient descent
   * algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static momentum(e, t, s = !1) {
    return new Dm(e, t, s);
  }
  /**
   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
   * descent. This implementation uses plain momentum and is not centered
   * version of RMSProp.
   *
   * See
   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
   *
   * @param learningRate The learning rate to use for the RMSProp gradient
   * descent algorithm.
   * @param decay The discounting factor for the history/coming gradient.
   * @param momentum The momentum to use for the RMSProp gradient descent
   * algorithm.
   * @param epsilon Small value to avoid zero denominator.
   * @param centered If true, gradients are normalized by the estimated
   * variance of the gradient.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static rmsprop(e, t = 0.9, s = 0, r = null, o = !1) {
    return new Am(e, t, s, r, o);
  }
  /**
   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adam gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adam(e = 1e-3, t = 0.9, s = 0.999, r = null) {
    return new Tm(e, t, s, r);
  }
  /**
   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
   *
   * @param learningRate The learning rate to use for the Adadelta gradient
   * descent algorithm.
   * @param rho The learning rate decay over each update.
   * @param epsilon A constant epsilon used to better condition the grad
   * update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adadelta(e = 1e-3, t = 0.95, s = null) {
    return new Nm(e, t, s);
  }
  /**
   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adamax gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   * @param decay The learning rate decay over each update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adamax(e = 2e-3, t = 0.9, s = 0.999, r = null, o = 0) {
    return new Em(e, t, s, r, o);
  }
  /**
   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
   * See
   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
   * or
   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
   *
   * @param learningRate The learning rate to use for the Adagrad gradient
   * descent algorithm.
   * @param initialAccumulatorValue Starting value for the accumulators, must be
   * positive.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adagrad(e, t = 0.1) {
    return new km(e, t);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const To = {
  sgd: Hr.sgd,
  momentum: Hr.momentum,
  adadelta: Hr.adadelta,
  adagrad: Hr.adagrad,
  rmsprop: Hr.rmsprop,
  adamax: Hr.adamax,
  adam: Hr.adam
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GD = typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (n) => n();
function tx() {
  return new Promise((n) => GD(() => n()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rm(n, e) {
  const t = n[0].length;
  n.forEach((r, o) => {
    N(r.length === t, () => `Error in concat${t}D: rank of tensors[${o}] must be the same as the rank of the rest (${t})`);
  }), N(e >= 0 && e < t, () => `Error in concat${t}D: axis must be between 0 and ${t - 1}.`);
  const s = n[0];
  n.forEach((r, o) => {
    for (let a = 0; a < t; a++)
      N(a === e || r[a] === s[a], () => `Error in concat${t}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`);
  });
}
function Us(n, e) {
  const t = n[0].slice();
  for (let s = 1; s < n.length; s++)
    t[e] += n[s][e];
  return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var vs;
(function(n) {
  n[n.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", n[n.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", n[n.ROW_LENGTHS = 2] = "ROW_LENGTHS", n[n.ROW_SPLITS = 3] = "ROW_SPLITS", n[n.ROW_LIMITS = 4] = "ROW_LIMITS", n[n.ROW_STARTS = 5] = "ROW_STARTS";
})(vs || (vs = {}));
function nx(n, e, t) {
  let s = new Array();
  if (t == null && e == null)
    return s;
  if (e == null)
    for (; s.length < n + t.length; )
      s.push(-1);
  else
    s = e.slice();
  if (t == null)
    return s;
  if (n + t.length !== s.length)
    throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${n + t.length}, but shape.rank = ${s.length}`);
  for (let r = 1; r < t.length; ++r) {
    const o = t[r], a = s[s.length - t.length + r], i = s[a];
    if (o >= 0)
      if (i >= 0) {
        if (i !== o)
          throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${r + n}] = ${o} but shape[${r + n}] = ${i}`);
      } else
        s[a] = o;
  }
  return s;
}
function sx(n) {
  const e = {
    FIRST_DIM_SIZE: vs.FIRST_DIM_SIZE,
    VALUE_ROWIDS: vs.VALUE_ROWIDS,
    ROW_LENGTHS: vs.ROW_LENGTHS,
    ROW_SPLITS: vs.ROW_SPLITS,
    ROW_LIMITS: vs.ROW_LIMITS,
    ROW_STARTS: vs.ROW_STARTS
  }, t = [];
  for (const s of n)
    if (s in e)
      t.push(e[s]);
    else
      break;
  return t;
}
function rx(n) {
  return n.length === 0 ? 0 : n[0] === vs.FIRST_DIM_SIZE ? n.length - 1 : n.length;
}
function ox(n, e) {
  if (n == null || e == null)
    return;
  const t = n.length, s = e.length;
  if (t >= s)
    throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t} must be less than ragged tensor input flatValues.rank = ${s})`);
  for (let r = 0; r < Math.min(t, s - 1); ++r) {
    const o = n[r], a = e[r + 1];
    if (o >= 0 && a >= 0 && o !== 1 && o !== a)
      throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${r - n.length}] = ${o} but ragged tensor input.flatValues.shape[${r - n.length}] = ${a}`);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fm = 30;
function yh(n) {
  return n <= Fm ? n : wd(n, Math.floor(Math.sqrt(n)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _m(n, e, t) {
  const s = t * (typeof n == "number" ? n : n[0]), r = e * (typeof n == "number" ? n : n[1]);
  return [s, r];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pl(n, e, t, s = !0) {
  let r = [];
  if (s)
    r = r.concat(e.slice(0)), r.push(n[0] / t), r = r.concat(n.slice(1));
  else {
    r = r.concat(n[0]);
    const o = e.length;
    for (let a = 0; a < o; ++a)
      r = r.concat([n[a + 1] / e[a], e[a]]);
    r = r.concat(n.slice(o + 1));
  }
  return r;
}
function fl(n, e, t = !0) {
  const s = [];
  if (t) {
    s.push(e);
    for (let r = e + 1; r < n; ++r)
      r <= 2 * e ? (s.push(r), s.push(r - (e + 1))) : s.push(r);
  } else {
    const r = [], o = [];
    for (let a = 1; a < n; ++a)
      a >= e * 2 + 1 || a % 2 === 1 ? o.push(a) : r.push(a);
    s.push(...r), s.push(0), s.push(...o);
  }
  return s;
}
function ml(n, e, t, s = !0) {
  const r = [];
  s ? r.push(n[0] / t) : r.push(n[0] * t);
  for (let o = 1; o < n.length; ++o)
    o <= e.length ? s ? r.push(e[o - 1] * n[o]) : r.push(n[o] / e[o - 1]) : r.push(n[o]);
  return r;
}
function Om(n, e) {
  const t = [0];
  for (let s = 0; s < e; ++s)
    t.push(n[s][0]);
  return t;
}
function Lm(n, e, t) {
  const s = n.slice(0, 1);
  for (let r = 0; r < t; ++r)
    s.push(n[r + 1] - e[r][0] - e[r][1]);
  return s;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bh = 1.7580993408473768, xh = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pm = 0.3275911, zm = 0.254829592, Mm = -0.284496736, Bm = 1.421413741, Vm = -1.453152027, Wm = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ar(n, e) {
  if (n.length !== e.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${e.length}.`);
  const t = new Float32Array(n.length * 2);
  for (let s = 0; s < t.length; s += 2)
    t[s] = n[s / 2], t[s + 1] = e[s / 2];
  return t;
}
function ax(n) {
  const e = new Float32Array(n.length / 2), t = new Float32Array(n.length / 2);
  for (let s = 0; s < n.length; s += 2)
    e[s / 2] = n[s], t[s / 2] = n[s + 1];
  return { real: e, imag: t };
}
function ix(n) {
  const e = Math.ceil(n.length / 4), t = new Float32Array(e), s = new Float32Array(e);
  for (let r = 0; r < n.length; r += 4)
    t[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: t, imag: s };
}
function lx(n) {
  const e = Math.floor(n.length / 4), t = new Float32Array(e), s = new Float32Array(e);
  for (let r = 2; r < n.length; r += 4)
    t[Math.floor(r / 4)] = n[r], s[Math.floor(r / 4)] = n[r + 1];
  return { real: t, imag: s };
}
function Um(n, e) {
  const t = n[e * 2], s = n[e * 2 + 1];
  return { real: t, imag: s };
}
function cx(n, e, t, s) {
  n[s * 2] = e, n[s * 2 + 1] = t;
}
function ux(n, e) {
  const t = new Float32Array(n / 2), s = new Float32Array(n / 2);
  for (let r = 0; r < Math.ceil(n / 2); r++) {
    const o = (e ? 2 : -2) * Math.PI * (r / n);
    t[r] = Math.cos(o), s[r] = Math.sin(o);
  }
  return { real: t, imag: s };
}
function hx(n, e, t) {
  const s = (t ? 2 : -2) * Math.PI * (n / e), r = Math.cos(s), o = Math.sin(s);
  return { real: r, imag: o };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xh = "->", HD = /->/g, g0 = ",", y0 = "...";
function Gm(n, e) {
  n = n.replace(/\s/g, "");
  const t = (n.length - n.replace(HD, "").length) / Xh.length;
  if (t < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (t > 1)
    throw new Error(`Equation must contain exactly one arrow ("${Xh}").`);
  const [s, r] = n.split(Xh);
  N(s.indexOf(y0) === -1, () => `The ellipsis notation ("${y0}") is not supported yet.`);
  const o = s.split(g0), a = o.length;
  if (e !== a)
    throw new Error(`Expected ${a} input tensors, received ${e}`);
  if (a > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const i = [];
  for (let d = 0; d < r.length; ++d) {
    const p = r[d];
    if (!o.some((f) => f.indexOf(p) !== -1))
      throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);
    i.indexOf(p) === -1 && i.push(p);
  }
  for (let d = 0; d < s.length; ++d) {
    const p = s[d];
    i.indexOf(p) === -1 && p !== g0 && i.push(p);
  }
  const l = new Array(o.length);
  for (let d = 0; d < a; ++d) {
    if (new Set(o[d].split("")).size !== o[d].length)
      throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);
    l[d] = [];
    for (let p = 0; p < o[d].length; ++p)
      l[d].push(i.indexOf(o[d][p]));
  }
  const c = i.length, u = r.length, h = [];
  for (let d = u; d < c; ++d)
    h.push(d);
  return { allDims: i, summedDims: h, idDims: l };
}
function Hm(n, e) {
  let t = new Array(n);
  t.fill(-1);
  for (let r = 0; r < e.length; ++r)
    t[e[r]] = r;
  const s = [];
  for (let r = 0; r < n; ++r)
    t[r] === -1 && s.push(r);
  return t = t.filter((r) => r !== -1), { permutationIndices: t, expandDims: s };
}
function jm(n, e, t) {
  const s = new Array(n);
  for (let r = 0; r < t.length; ++r) {
    const o = t[r].shape;
    for (let a = 0; a < e[r].length; ++a)
      s[e[r][a]] === void 0 ? s[e[r][a]] = o[a] : N(s[e[r][a]] === o[a], () => `Expected dimension ${s[e[r][a]]} at axis ${a} of input shaped ${JSON.stringify(o)}, but got dimension ${o[a]}`);
  }
}
function qm(n, e) {
  const t = n, s = [];
  let r = 0;
  n.length === 0 && t.push(-1), r = n.length + 1;
  for (let a = 0; a < r; ++a)
    s.push([]);
  const o = [];
  for (let a = 0; a < t.length; ++a) {
    const i = t[a], l = jD(e, i);
    for (const c of l)
      o.indexOf(c) === -1 && (s[a].push(c), o.push(c));
  }
  return { path: t, steps: s };
}
function Km(n) {
  return n.every((e, t) => e === t);
}
function jD(n, e) {
  const t = [];
  for (let s = 0; s < n.length; ++s)
    (n[s].length === 0 || n[s].indexOf(e) !== -1 || e === -1) && t.push(s);
  return t;
}
function Xm(n, e, t = 0) {
  let s = [];
  if (typeof e == "number")
    N(n.shape[t] % e === 0, () => "Number of splits must evenly divide the axis."), s = new Array(e).fill(n.shape[t] / e);
  else {
    const r = e.reduce((a, i) => (i === -1 && (a += 1), a), 0);
    N(r <= 1, () => "There should be only one negative value in split array.");
    const o = e.indexOf(-1);
    if (o !== -1) {
      const a = e.reduce((i, l) => l > 0 ? i + l : i);
      e[o] = n.shape[t] - a;
    }
    N(n.shape[t] === e.reduce((a, i) => a + i), () => "The sum of sizes must match the size of the axis dimension."), s = e;
  }
  return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dx(n) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function px(n, e) {
  return `indices(${n}, 0) is invalid: ${e} < 0`;
}
function fx(n, e, t) {
  return `indices(${n}, 0) is invalid: ${e} >= ${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mx(n, e) {
  return `only one output dimension may be -1, not both ${n} and ${e}`;
}
function gx(n, e) {
  return `size ${n} must be non-negative, not ${e}`;
}
function yx() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function bx(n, e) {
  const t = Z(n), s = Z(e);
  return `Input to reshape is a SparseTensor with ${t}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${e}`;
}
function xx(n, e) {
  const t = Z(n), s = Z(e);
  return `Input to reshape is a tensor with ${t} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vd() {
  return "segment ids must be >= 0";
}
function wx() {
  return "segment ids are not increasing";
}
function vx(n, e) {
  return `Segment id ${n} out of range [0, ${e}), possibly because segmentIds input is not sorted.`;
}
function Ix(n, e, t) {
  return `Bad: indices[${n}] == ${e} out of range [0, ${t})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $x(n, e) {
  let t = !1, s;
  for (n <= Fm ? (s = n, t = !0) : s = wd(n, Math.floor(Math.sqrt(n))); !t; )
    s > e || s === n ? t = !0 : s = wd(n, s + 1);
  return s;
}
function Cx(n, e, t) {
  const s = [], r = n.length;
  for (let o = 0; o < r; o++)
    o !== e ? s.push(n[o]) : s.push(t);
  return s;
}
function Ym(n, e, t, s) {
  const r = e.shape.length, o = n.shape.length;
  if (s !== 0 && (s < -r || s > r))
    throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);
  if (s < 0 && (s += r), s > o)
    throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${o}).`);
  if (t < s)
    throw new Error(`batchDims (${s}) must be less than or equal to axis (${t}).`);
  for (let h = 0; h < s; ++h)
    if (n.shape[h] !== e.shape[h])
      throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${e.shape[h]}.`);
  const a = n.shape[t], i = [];
  let l = 1, c = 1, u = 1;
  for (let h = 0; h < s; ++h)
    i.push(n.shape[h]), l *= n.shape[h];
  for (let h = s; h < t; h++)
    i.push(n.shape[h]), c *= n.shape[h];
  for (let h = s; h < r; h++)
    i.push(e.shape[h]);
  for (let h = t + 1; h < o; h++)
    i.push(n.shape[h]), u *= n.shape[h];
  return { batchSize: l, sliceSize: u, outerSize: c, dimSize: a, outputShape: i };
}
const qD = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  collectGatherOpShapeInfo: Ym,
  computeOutShape: Cx,
  segOpComputeOptimalWindowSize: $x
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function co(n) {
  try {
    return n.map((e) => vr(e));
  } catch (e) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`);
  }
}
function Sx(n) {
  return n.map((e) => br(e));
}
const KD = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ERF_A1: zm,
  ERF_A2: Mm,
  ERF_A3: Bm,
  ERF_A4: Vm,
  ERF_A5: Wm,
  ERF_P: Pm,
  PARALLELIZE_THRESHOLD: Fm,
  get RowPartitionType() {
    return vs;
  },
  SELU_SCALE: xh,
  SELU_SCALEALPHA: bh,
  applyActivation: fh,
  assertAndGetBroadcastShape: Fe,
  assertAxesAreInnerMostDims: en,
  assertParamsConsistent: Rm,
  assignToTypedArray: cx,
  axesAreInnerMostDims: jf,
  calculateShapes: sl,
  checkEinsumDimSizes: jm,
  checkPadOnDimRoundingMode: pn,
  combineLocations: vb,
  combineRaggedTensorToTensorShapes: nx,
  complexWithEvenIndex: ix,
  complexWithOddIndex: lx,
  computeConv2DInfo: jt,
  computeConv3DInfo: Lr,
  computeDefaultPad: Bf,
  computeDilation2DInfo: rl,
  computeOptimalWindowSize: yh,
  computeOutAndReduceShapes: qt,
  computeOutShape: Us,
  computePool2DInfo: ps,
  computePool3DInfo: ir,
  convertConv2DDataFormat: lr,
  decodeEinsumEquation: Gm,
  eitherStridesOrDilationsAreOne: Qt,
  expandShapeToKeepDim: St,
  exponent: hx,
  exponents: ux,
  fromStringArrayToUint8: Sx,
  fromUint8ToStringArray: co,
  getAxesPermutation: wt,
  getBroadcastDims: Qo,
  getComplexWithIndex: Um,
  getEinsumComputePath: qm,
  getEinsumPermutation: Hm,
  getFusedBiasGradient: ph,
  getFusedDyActivation: dh,
  getImageCenter: _m,
  getInnerMostAxes: Nt,
  getPermuted: fl,
  getRaggedRank: rx,
  getReductionAxes: Pt,
  getReshaped: pl,
  getReshapedPermuted: ml,
  getRowPartitionTypesHelper: sx,
  getSliceBeginCoords: Om,
  getSliceSize: Lm,
  getSparseFillEmptyRowsIndicesDenseShapeMismatch: dx,
  getSparseFillEmptyRowsNegativeIndexErrorMessage: px,
  getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: fx,
  getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: yx,
  getSparseReshapeInputOutputMismatchErrorMessage: xx,
  getSparseReshapeInputOutputMultipleErrorMessage: bx,
  getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: mx,
  getSparseReshapeNegativeOutputDimErrorMessage: gx,
  getSparseSegmentReductionIndicesOutOfRangeErrorMessage: Ix,
  getSparseSegmentReductionNegativeSegmentIdsErrorMessage: Vd,
  getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: wx,
  getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: vx,
  getUndoAxesPermutation: Pr,
  isIdentityPermutation: Km,
  log: rC,
  mergeRealAndImagArrays: ar,
  prepareAndValidate: Rf,
  prepareSplitSize: Xm,
  segment_util: qD,
  shouldFuse: mh,
  slice_util: PS,
  splitRealAndImagArrays: ax,
  tupleValuesAreOne: $r,
  upcastType: Rn,
  validateDefaultValueShape: ox,
  validateInput: V1,
  validateUpdateShape: B1,
  warn: Vn
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Nx = {
  kernelName: Gc,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(n, xa(fe(t, "float32"), -1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XD = {
  kernelName: ii,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return {
      x: () => {
        const s = at(fe(t, "float32")), r = rn(ge(Te(1), s));
        return gt(be(n, r));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YD = {
  kernelName: li,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return {
      x: () => {
        const s = rn(ge(at(fe(t, "float32")), 1));
        return be(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZD = {
  kernelName: ma,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Fe(t.shape, s.shape);
    return { a: () => {
      let i = n;
      const l = Pt(t.shape, r);
      return l.length > 0 && (i = Ie(i, l)), P(i, t.shape);
    }, b: () => {
      let i = n;
      const l = Pt(s.shape, r);
      return l.length > 0 && (i = Ie(i, l)), P(i, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JD = {
  kernelName: Hc,
  saveAllInputs: !0,
  gradFunc: (n, e) => {
    const t = {};
    return e.forEach((s, r) => {
      t[r] = () => n.clone();
    }), t;
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QD = {
  kernelName: jc,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => Ge(t) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eA = {
  kernelName: qc,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => Ge(t) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tA = {
  kernelName: ci,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, rn(ge(Te(1), at(fe(t, "float32"))))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nA = {
  kernelName: ui,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return {
      x: () => {
        const s = rn(ne(Te(1), at(fe(t, "float32"))));
        return be(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sA = {
  kernelName: pi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Fe(t.shape, s.shape);
    return { a: () => {
      const i = ne(at(t), at(s));
      let l = F(n, be(s, i));
      const c = Pt(t.shape, r);
      return c.length > 0 && (l = Ie(l, c)), P(l, t.shape);
    }, b: () => {
      const i = ne(at(t), at(s));
      let l = gt(F(n, be(t, i)));
      const c = Pt(s.shape, r);
      return c.length > 0 && (l = Ie(l, c)), P(l, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rA = {
  kernelName: hi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, ne(at(fe(t, "float32")), 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oA = {
  kernelName: di,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, ge(Te(1), at(fe(t, "float32")))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aA(n, e, t, s, r, o) {
  const a = k(n, "dy", "avgPool3dGrad"), i = k(e, "input", "avgPool3dGrad");
  let l = a, c = i, u = !1;
  i.rank === 4 && (u = !0, l = P(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]), c = P(i, [
    1,
    i.shape[0],
    i.shape[1],
    i.shape[2],
    i.shape[3]
  ])), N(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), N(c.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`), pn("avgPool3dGrad", r, o);
  const h = { dy: l, input: c }, d = { filterSize: t, strides: s, pad: r, dimRoundingMode: o }, p = _.runKernel(Sp, h, d);
  return u ? P(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const iA = R({ avgPool3dGrad_: aA });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lA = {
  kernelName: Xc,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { filterSize: r, strides: o, pad: a, dimRoundingMode: i } = t;
    return {
      x: () => iA(n, s, r, o, a, i)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cA(n, e, t, s, r) {
  const o = k(n, "dy", "avgPoolGrad"), a = k(e, "input", "avgPoolGrad");
  N(a.rank === o.rank, () => `Rank of input (${a.rank}) does not match rank of dy (${o.rank})`);
  let i = a, l = o, c = !1;
  a.rank === 3 && (c = !0, i = P(a, [1, a.shape[0], a.shape[1], a.shape[2]]), l = P(o, [1, o.shape[0], o.shape[1], o.shape[2]])), N(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), N(i.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);
  const u = { dy: l, input: i }, h = { filterSize: t, strides: s, pad: r }, d = _.runKernel(Cp, u, h);
  return c ? P(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const uA = R({ avgPoolGrad_: cA });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hA = {
  kernelName: Kc,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { filterSize: r, strides: o, pad: a } = t;
    return { x: () => uA(n, s, r, o, a) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dA = {
  kernelName: Yc,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e, t) => {
    const [s, r] = e, { transposeA: o, transposeB: a } = t;
    return !o && !a ? {
      a: () => Me(n, r, !1, !0),
      b: () => Me(s, n, !0, !1)
    } : !o && a ? {
      a: () => Me(n, r, !1, !1),
      b: () => Me(n, s, !0, !1)
    } : o && !a ? {
      a: () => Me(r, n, !1, !0),
      b: () => Me(s, n, !1, !1)
    } : {
      a: () => Me(r, n, !0, !0),
      b: () => Me(n, s, !0, !0)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pA = {
  kernelName: Zc,
  gradFunc: (n, e, t) => {
    const { blockShape: s, crops: r } = t;
    return { x: () => rh(n, s, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fA = {
  kernelName: nC,
  gradFunc: (n, e, t) => {
    const s = t, r = s.inputShape, o = s.shape, a = Array.from(o);
    for (let l = r.length - 1; l >= 0; l--)
      if (r[l] === o[l])
        a[l] = 1;
      else if (r[l] !== 1)
        throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);
    const i = [];
    for (let l = 0; l < a.length; l++)
      a[l] > 1 && i.push(l);
    return { x: () => Ie(
      n,
      i,
      !0
      /* keepDims */
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mA = {
  kernelName: fi,
  gradFunc: (n) => ({ x: () => n.clone() })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gA = {
  kernelName: mi,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yA = {
  kernelName: gi,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { clipValueMin: r, clipValueMax: o } = t;
    return {
      x: () => In(js(yo(s, r), bo(s, o)), n, Ge(n))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bA = {
  kernelName: Jc,
  inputsToSave: ["x"],
  gradFunc: Nx.gradFunc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xA = {
  kernelName: Qc,
  saveAllInputs: !0,
  gradFunc: (n, e, t) => {
    const s = e.map((l) => l.shape), { axis: r } = t, o = ze(r, e[0].shape)[0], a = s.map((l) => l[o]);
    return Dn(n, a, o).map((l) => () => l);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wA = {
  kernelName: eu,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, e, t) => {
    const [s, r] = e, { dilations: o, strides: a, pad: i, dataFormat: l } = t;
    return N($r(o), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`), {
      x: () => Wf(s.shape, n, r, a, i, l),
      filter: () => vm(s, n, r.shape, a, i, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vA = {
  kernelName: tu,
  inputsToSave: ["dy", "filter"],
  gradFunc: (n, e, t) => {
    const [s, r] = e, { strides: o, pad: a, dataFormat: i, dimRoundingMode: l } = t;
    return {
      dy: () => Cr(n, r, o, a, i, 1, l),
      filter: () => vm(n, s, r.shape, o, a, i, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IA(n, e, t, s, r) {
  let o = n;
  n.rank === 4 && (o = P(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
  let a = e;
  a.rank === 4 && (a = P(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]])), N(o.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`), N(a.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`), N(t.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${t}.`), N(o.shape[4] === t[3], () => `Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${t[3]}.`), N(a.shape[4] === t[4], () => `Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${t[4]}).`);
  const i = { x: o, dy: a }, l = { strides: s, pad: r, filterShape: t };
  return _.runKernel(Dp, i, l);
}
const $A = R({ conv3DBackpropFilter_: IA });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CA = {
  kernelName: nu,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, e, t) => {
    const { dilations: s, strides: r, pad: o } = t;
    N($r(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    const [a, i] = e;
    return {
      x: () => fb(a.shape, n, i, r, o),
      filter: () => $A(a, n, i.shape, r, o)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SA = {
  kernelName: yi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(gt(dm(fe(t, "float32"))), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NA = {
  kernelName: bi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(pm(fe(t, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kA = {
  kernelName: su,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { axis: r, exclusive: o, reverse: a } = t;
    return {
      x: () => {
        const i = wt([r], s.rank);
        let l = Hf(n, r, o, !a);
        return i != null && (l = We(l, i)), l;
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TA = {
  kernelName: ru,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, e, t) => {
    const { dilations: s, strides: r, pad: o, dimRoundingMode: a } = t, i = s ?? [1, 1];
    N($r(i), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);
    const [l, c] = e;
    return N(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), N(c.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`), N(l.shape[3] === c.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), N(Qt(r, i), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`), pn("depthwiseConv2d", o, a), {
      x: () => Xb(l.shape, n, c, r, o, i, a),
      filter: () => Kb(l, n, c.shape, r, o, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EA = {
  kernelName: ou,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, e, t) => {
    const [s, r] = e, o = { x: s, filter: r, dy: n }, a = { x: s, filter: r, dy: n };
    return {
      x: () => _.runKernel(vd, o, t),
      filter: () => _.runKernel(Id, a, t)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DA = {
  kernelName: wi,
  outputsToSave: [!0],
  gradFunc: (n, e) => {
    const [t] = e, s = { dy: n, y: t };
    return { x: () => _.runKernel(Bp, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AA = {
  kernelName: vi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e, s = F(Gn(gt(at(t))), 2 / Math.sqrt(Math.PI));
    return { x: () => F(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RA = {
  kernelName: Ii,
  outputsToSave: [!0],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(n, t) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FA = {
  kernelName: iu,
  inputsToSave: ["input"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { input: () => P(n, t.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _A = {
  kernelName: $i,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(n, Gn(t)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OA = {
  kernelName: Ci,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LA = {
  kernelName: Si,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Fe(t.shape, s.shape);
    return { a: () => {
      const i = be(n, fe(s, "float32")), l = Pt(t.shape, r);
      return l.length > 0 ? P(Ie(i, l), t.shape) : i;
    }, b: () => {
      let i = F(n, fe(t, "float32"));
      const l = Pt(s.shape, r);
      l.length > 0 && (i = P(Ie(i, l), s.shape));
      const c = at(s);
      return gt(be(i, fe(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PA = {
  kernelName: lu,
  inputsToSave: ["x", "mean", "variance", "scale"],
  gradFunc: (n, e, t) => {
    const { varianceEpsilon: s } = t, [r, o, a, i] = e, l = i ?? Te(1), c = Pt(o.shape, r.shape), u = [];
    if (o.rank === 1) {
      for (let x = 0; x < r.shape.length - 1; ++x)
        u.push(r.shape[x]);
      u.push(1);
    }
    const h = ge(r, o), d = F(n, l), p = cm(ne(a, Te(s))), f = F(F(F(p, p), p), Te(-0.5));
    return {
      x: () => o.rank === 1 ? P(F(F(n, is(P(p, [1, 1, 1, o.shape[0]]), u)), l), r.shape) : P(F(F(n, p), l), r.shape),
      mean: () => {
        let x = F(F(p, Te(-1)), d);
        return o.rank === 1 && (x = Ie(x, c)), P(x, o.shape);
      },
      variance: () => {
        let x = F(F(f, h), d);
        return o.rank === 1 && (x = Ie(x, c)), P(x, o.shape);
      },
      scale: () => {
        const x = F(h, p);
        let v = F(n, x);
        return o.rank === 1 && (v = Ie(v, c)), P(v, o.shape);
      },
      offset: () => {
        let x = n;
        return o.rank === 1 && (x = Ie(x, c)), P(x, o.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zA = {
  kernelName: cu,
  inputsToSave: ["x", "indices"],
  gradFunc: (n, e, t) => {
    const [s, r] = e, { axis: o } = t, a = ze(o, s.shape)[0];
    return { x: () => {
      const l = s.shape, c = r.size, u = l.slice(0, a), h = u.length, d = l.slice(o, l.length).slice(1), p = d.length, f = b0(0, h), m = b0(h + 1, h + 1 + p), g = x0([u, [c], d]), y = P(n, g), b = P(r, [c]), w = x0([[h], f, m]), x = We(y, w);
      let v = bm(x, b, s.shape[a]);
      const $ = Pr(w);
      return v = We(v, $), v;
    }, indices: () => r };
  }
};
function b0(n, e) {
  const t = [];
  for (let s = n; s < e; ++s)
    t.push(s);
  return t;
}
function x0(n) {
  const e = [];
  for (let t = 0; t < n.length; ++t)
    for (let s = 0; s < n[t].length; ++s)
      e.push(n[t][s]);
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MA = {
  kernelName: Ni,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e;
    return { a: () => Ge(t), b: () => Ge(s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BA = {
  kernelName: ki,
  gradFunc: (n) => ({ x: () => fe(n, "float32") })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VA = {
  kernelName: Ti,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WA = {
  kernelName: Ei,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UA = {
  kernelName: Di,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GA = {
  kernelName: hu,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { alpha: r } = t, o = qn(s, 0);
    return { x: () => In(o, n, F(n, r)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HA = {
  kernelName: Ri,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, ne(t, 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jA = {
  kernelName: Ai,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, fe(t, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qA = {
  kernelName: sC,
  inputsToSave: [],
  outputsToSave: [!0],
  gradFunc: (n, e, t) => {
    const [s] = e, { axis: r } = t;
    return {
      logits: () => {
        const a = Gn(s);
        return ge(n, F(Ie(n, r, !0), a));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KA(n, e, t, s = 5, r = 1, o = 1, a = 0.5) {
  const i = { x: n, y: e, dy: t }, l = { depthRadius: s, bias: r, alpha: o, beta: a };
  return _.runKernel(Kp, i, l);
}
const XA = R({ localResponseNormalizationBackprop_: KA });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YA = {
  kernelName: yu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, e, t) => {
    const [s, r] = e, { depthRadius: o, bias: a, alpha: i, beta: l } = t;
    return {
      x: () => XA(s, r, n, o, a, i, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kx(n, e, t, s) {
  return e.rank < t.rank && (e = P(e, St(e.shape, s))), n.rank < t.rank && (n = P(n, St(n.shape, s))), {
    x: () => F(n, fe(ks(t, e), n.dtype))
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w0 = {
  kernelName: bu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, e, t) => {
    const s = t, { reductionIndices: r } = s, o = e[0], a = e[1], i = ze(r, o.shape), l = kx(n, a, o, i);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZA = {
  kernelName: Fi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e;
    return { a: () => F(n, fe(yo(t, s), "float32")), b: () => F(n, fe(Kf(t, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JA(n, e, t, s, r, o, a) {
  const i = k(n, "dy", "maxPool3dGrad"), l = k(e, "input", "maxPool3dGrad"), c = k(t, "output", "maxPool3dGrad");
  let u = i, h = l, d = c, p = !1;
  l.rank === 4 && (p = !0, u = P(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), h = P(l, [
    1,
    l.shape[0],
    l.shape[1],
    l.shape[2],
    l.shape[3]
  ]), d = P(c, [
    1,
    c.shape[0],
    c.shape[1],
    c.shape[2],
    c.shape[3]
  ])), N(u.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), N(h.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`), N(d.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`), pn("maxPool3dGrad", o, a);
  const f = { dy: u, input: h, output: d }, m = { filterSize: s, strides: r, pad: o, dimRoundingMode: a }, g = _.runKernel(Yp, f, m);
  return p ? P(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
const QA = R({ maxPool3dGrad_: JA });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eR = {
  kernelName: wu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, e, t) => {
    const [s, r] = e, { filterSize: o, strides: a, pad: i, dimRoundingMode: l } = t;
    return {
      x: () => QA(n, s, r, o, a, i, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tR(n, e, t, s, r, o, a) {
  const i = k(n, "dy", "maxPoolGrad"), l = k(e, "input", "maxPoolGrad"), c = k(t, "output", "maxPoolGrad");
  N(l.rank === i.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${i.rank})`), N(i.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`), N(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), pn("maxPoolGrad", o, a);
  const u = { dy: i, input: l, output: c }, h = { filterSize: s, strides: r, pad: o, dimRoundingMode: a };
  return _.runKernel(Xp, u, h);
}
const nR = R({ maxPoolGrad_: tR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sR = {
  kernelName: xu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, e, t) => {
    const [s, r] = e, { filterSize: o, strides: a, pad: i } = t;
    return {
      x: () => nR(n, s, r, o, a, i)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rR = {
  kernelName: vu,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { axis: r } = t, o = ze(r, s.shape), i = qt(s.shape, o)[1], l = Z(i);
    return { x: () => {
      const u = s.shape.slice();
      o.forEach((p) => {
        u[p] = 1;
      });
      const h = P(n, u);
      return be(F(h, Wn(s.shape, "float32")), l);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oR = {
  kernelName: Iu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, e, t) => {
    const s = t, { axis: r } = s, [o, a] = e, i = ze(r, o.shape), l = kx(n, a, o, i);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aR = {
  kernelName: _i,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e;
    return { a: () => F(n, fe(bo(t, s), "float32")), b: () => F(n, fe(qn(t, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iR = {
  kernelName: $u,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const s = e[0], { paddings: r } = t, o = r.map((a) => a[0]);
    return { x: () => Ee(n, o, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lR = {
  kernelName: Oi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Fe(t.shape, s.shape);
    return { a: () => {
      const i = Pt(t.shape, r);
      return i.length > 0 ? P(Ie(n, i), t.shape) : n;
    }, b: () => {
      const i = F(n, gt(cl(be(t, s)))), l = Pt(s.shape, r);
      return l.length > 0 ? P(Ie(i, l), s.shape) : i;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cR = {
  kernelName: Li,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Fe(t.shape, s.shape);
    return { a: () => {
      const i = F(n, fe(s, "float32")), l = Pt(t.shape, r);
      return l.length > 0 ? P(Ie(i, l), t.shape) : i;
    }, b: () => {
      const i = F(n, fe(t, "float32")), l = Pt(s.shape, r);
      return l.length > 0 ? P(Ie(i, l), s.shape) : i;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uR = {
  kernelName: Cu,
  gradFunc: (n) => ({ x: () => gt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hR = {
  kernelName: ku,
  inputsToSave: ["indices"],
  gradFunc: (n, e) => {
    const t = e[0];
    return { indices: () => Rt(t.shape, "float32") };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dR = {
  kernelName: Nu,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pR = {
  kernelName: Tu,
  saveAllInputs: !0,
  gradFunc: (n, e, t) => {
    const { axis: s } = t;
    return Ts(n, s).map((o) => () => o);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const v0 = {
  kernelName: Eu,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const s = e[0], { paddings: r } = t, o = r.map((a) => a[0]);
    return { x: () => Ee(n, o, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fR = {
  kernelName: Pi,
  inputsToSave: ["a", "b"],
  outputsToSave: [!0],
  gradFunc: (n, e) => {
    const [t, s, r] = e, o = t, a = s, i = Fe(o.shape, a.shape);
    return { a: () => {
      const u = fe(a, "float32");
      let h = F(n, F(u, Sr(o, ge(u, Te(1)))));
      const d = Pt(o.shape, i);
      return d.length > 0 && (h = Ie(h, d)), P(h, o.shape);
    }, b: () => {
      const u = qn(o, 0), h = In(u, Hn(o), Ge(o));
      let d = F(n, F(r, h));
      const p = Pt(a.shape, i);
      return p.length > 0 && (d = Ie(d, p)), P(d, a.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mR = {
  kernelName: Du,
  inputsToSave: ["x", "alpha"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = qn(t, 0);
    return {
      x: () => In(r, n, F(n, s)),
      alpha: () => {
        let o = In(r, Ge(n), F(n, t));
        const a = Pt(s.shape, n.shape);
        return a.length > 0 && (o = Ie(o, a)), P(o, s.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gR(n, e, t) {
  const s = n.shape.slice();
  s[t] = 1;
  const r = P(e, s), o = gc(n, t, !0, !1), a = gc(n, t, !0, !0), i = F(o, a);
  return F(r, i);
}
function yR(n, e, t) {
  const s = n.shape.length, r = s - t.length, o = wt(t, s);
  let a = n;
  o != null && (a = We(n, o));
  const i = a.shape.slice(), c = i.splice(s - t.length, t.length).reduce((d, p) => d * p, 1);
  i.push(c);
  const u = a.reshape(i);
  let h = gR(u, e, r);
  if (h = h.reshape(a.shape), o != null) {
    const d = Pr(o);
    h = We(h, d);
  }
  return h;
}
const bR = {
  kernelName: Au,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { axis: r } = t;
    let o = [];
    return r == null ? o = s.shape.map((a, i) => i) : typeof r == "number" ? o = [r] : o = r, { x: () => yR(s, n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xR = {
  kernelName: xi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Fe(t.shape, s.shape);
    return { a: () => {
      const i = be(n, fe(s, "float32")), l = Pt(t.shape, r);
      return l.length > 0 ? P(Ie(i, l), t.shape) : i;
    }, b: () => {
      let i = F(n, fe(t, "float32"));
      const l = Pt(s.shape, r);
      l.length > 0 && (i = P(Ie(i, l), s.shape));
      const c = at(s);
      return gt(be(i, fe(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wR = {
  kernelName: zi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, gt(at(t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vR = {
  kernelName: Bi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e, s = F(bo(t, 6), xa(t));
    return { x: () => F(n, fe(s, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IR = {
  kernelName: Mi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(n, fe(xa(t), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $R = {
  kernelName: Ru,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => P(n, t.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CR = {
  kernelName: _u,
  inputsToSave: ["images"],
  gradFunc: (n, e, t) => {
    const [s] = e, r = { dy: n, images: s };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      _.runKernel(lf, r, t)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SR = {
  kernelName: Fu,
  inputsToSave: ["images"],
  gradFunc: (n, e, t) => {
    const [s] = e, r = { dy: n, images: s };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      _.runKernel(af, r, t)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NR = {
  kernelName: Ou,
  gradFunc: (n, e, t) => {
    const { dims: s } = t, r = ze(s, n.shape);
    return { x: () => hs(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kR = {
  kernelName: Vi,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TR = {
  kernelName: Wi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => gt(be(n, F(Sr(t, 1.5), 2))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ER = {
  kernelName: Lu,
  inputsToSave: ["condition"],
  gradFunc: (n, e) => {
    const [t] = e;
    return {
      // TODO(julianoks): Return null for condition gradient
      // when backprop supports it.
      condition: () => fe(Ge(t), "float32"),
      t: () => F(n, fe(t, n.dtype)),
      e: () => F(n, fe(th(t), n.dtype))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DR = {
  kernelName: Ui,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return {
      x: () => {
        const s = qn(t, Te(0)), r = Te(bh), o = Te(xh), a = F(n, o), i = F(F(n, r), Gn(fe(t, "float32")));
        return In(s, a, i);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AR = {
  kernelName: qi,
  outputsToSave: [!0],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(n, F(t, ge(Te(1), t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RR = {
  kernelName: ji,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FR = {
  kernelName: Gi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(Ju(fe(t, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _R = {
  kernelName: Hi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(Gf(fe(t, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OR = {
  kernelName: Pu,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { begin: r, size: o } = t, a = s.shape, [i, l] = Ku(s, r, o), c = [];
    for (let u = 0; u < n.rank; u++)
      c.push([i[u], a[u] - i[u] - l[u]]);
    return { x: () => zr(n, c) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LR = {
  kernelName: Vu,
  outputsToSave: [!0],
  gradFunc: (n, e, t) => {
    const [s] = e, { dim: r } = t, o = !0, a = F(n, s);
    return {
      logits: () => ge(a, F(Ie(a, [r], o), s))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PR = {
  kernelName: Ki,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(n, Cs(t)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const I0 = {
  kernelName: Mu,
  gradFunc: (n, e, t) => {
    const { blockShape: s, paddings: r } = t;
    return { x: () => Yu(n, s, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $0 = {
  kernelName: Bu,
  gradFunc: (n, e, t) => {
    const { axis: s } = t;
    return { x: () => ft(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zR = {
  kernelName: Xi,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, F(rn(fe(t, "float32")), 2)) };
  }
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MR = {
  kernelName: gf,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(n, F(fe(t, "float32"), 2)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BR = {
  kernelName: Yi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Te(2);
    return { a: () => F(n, F(r, ge(t, s))), b: () => F(n, F(r, ge(s, t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VR = {
  kernelName: tl,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WR = {
  kernelName: Zi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, e) => {
    const [t, s] = e, r = Fe(t.shape, s.shape);
    return { a: () => {
      let i = n;
      const l = Pt(t.shape, r);
      return l.length > 0 && (i = Ie(i, l)), P(i, t.shape);
    }, b: () => {
      let i = n;
      const l = Pt(s.shape, r);
      return l.length > 0 && (i = Ie(i, l)), P(gt(i), s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UR = {
  kernelName: zu,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, r = s.shape.slice(), { axis: o } = t;
    ze(o, s.shape).forEach((c) => {
      r[c] = 1;
    });
    const i = P(n, r), l = F(i, Wn(s.shape, "float32"));
    return { x: () => l };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GR = {
  kernelName: Ji,
  inputsToSave: ["x"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => be(n, at(Ju(t))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HR = {
  kernelName: Qi,
  outputsToSave: [!0],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => F(ge(Te(1), at(t)), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jR = {
  kernelName: el,
  inputsToSave: ["x"],
  gradFunc: (n, e, t) => {
    const [s] = e, { reps: r } = t;
    return { x: () => {
      let a = Ge(s);
      if (s.rank === 1)
        for (let i = 0; i < r[0]; ++i)
          a = ne(a, Ee(n, [i * s.shape[0]], [s.shape[0]]));
      else if (s.rank === 2)
        for (let i = 0; i < r[0]; ++i)
          for (let l = 0; l < r[1]; ++l)
            a = ne(a, Ee(n, [i * s.shape[0], l * s.shape[1]], [
              s.shape[0],
              s.shape[1]
            ]));
      else if (s.rank === 3)
        for (let i = 0; i < r[0]; ++i)
          for (let l = 0; l < r[1]; ++l)
            for (let c = 0; c < r[2]; ++c)
              a = ne(a, Ee(n, [i * s.shape[0], l * s.shape[1], c * s.shape[2]], [s.shape[0], s.shape[1], s.shape[2]]));
      else if (s.rank === 4)
        for (let i = 0; i < r[0]; ++i)
          for (let l = 0; l < r[1]; ++l)
            for (let c = 0; c < r[2]; ++c)
              for (let u = 0; u < r[3]; ++u)
                a = ne(a, Ee(n, [
                  i * s.shape[0],
                  l * s.shape[1],
                  c * s.shape[2],
                  u * s.shape[3]
                ], [s.shape[0], s.shape[1], s.shape[2], s.shape[3]]));
      else
        throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
      return a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qR = {
  kernelName: Vo,
  gradFunc: (n, e, t) => {
    const s = t, { perm: r } = s, o = Pr(r);
    return { x: () => We(n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KR = {
  kernelName: Wu,
  gradFunc: (n, e, t) => {
    const s = t, { axis: r } = s;
    return { value: () => ds(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XR = {
  kernelName: Uu,
  inputsToSave: ["segmentIds"],
  gradFunc: (n, e) => {
    const [t] = e;
    return { x: () => YR(n, t) };
  }
};
function YR(n, e) {
  const t = cr(e, Ge(e)), s = ul(n, t);
  let r = yo(e, Te(0, "int32"));
  const o = s.rank - r.rank;
  for (let i = 0; i < o; ++i)
    r = xn(r, i + 1);
  r = js(r, Wn(s.shape, "bool"));
  const a = Ge(s);
  return In(r, s, a);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZR = {
  kernelName: Gu,
  gradFunc: (n) => ({ x: () => Ge(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JR = [
  Nx,
  XD,
  YD,
  ZD,
  JD,
  QD,
  eA,
  tA,
  nA,
  sA,
  rA,
  oA,
  lA,
  hA,
  dA,
  pA,
  fA,
  mA,
  gA,
  yA,
  bA,
  xA,
  vA,
  wA,
  CA,
  SA,
  NA,
  kA,
  TA,
  EA,
  xR,
  DA,
  AA,
  RA,
  FA,
  _A,
  LA,
  OA,
  PA,
  zA,
  MA,
  BA,
  VA,
  WA,
  UA,
  GA,
  HA,
  jA,
  qA,
  YA,
  w0,
  w0,
  ZA,
  eR,
  sR,
  rR,
  oR,
  aR,
  iR,
  lR,
  cR,
  uR,
  hR,
  dR,
  pR,
  v0,
  v0,
  fR,
  mR,
  bR,
  wR,
  vR,
  IR,
  $R,
  CR,
  SR,
  NR,
  kR,
  TR,
  ER,
  DR,
  AR,
  RR,
  FR,
  _R,
  OR,
  LR,
  PR,
  I0,
  I0,
  $0,
  $0,
  zR,
  BR,
  MR,
  VR,
  WR,
  UR,
  GR,
  HR,
  jR,
  qR,
  KR,
  XR,
  ZR
];
for (const n of JR)
  oC(n);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.abs = function() {
  return this.throwIfDisposed(), At(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.acos = function() {
  return this.throwIfDisposed(), Y1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.acosh = function() {
  return this.throwIfDisposed(), Z1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.add = function(n) {
  return this.throwIfDisposed(), ne(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.all = function(n, e) {
  return this.throwIfDisposed(), Mf(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.any = function(n, e) {
  return this.throwIfDisposed(), fc(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.argMax = function(n) {
  return this.throwIfDisposed(), ea(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.argMin = function(n) {
  return this.throwIfDisposed(), J1(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asScalar = function() {
  return this.throwIfDisposed(), N(this.size === 1, () => "The array must have only 1 element."), P(this, []);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asType = function(n) {
  return this.throwIfDisposed(), fe(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as1D = function() {
  return this.throwIfDisposed(), P(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as2D = function(n, e) {
  return this.throwIfDisposed(), P(this, [n, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as3D = function(n, e, t) {
  return this.throwIfDisposed(), P(this, [n, e, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as4D = function(n, e, t, s) {
  return this.throwIfDisposed(), P(this, [n, e, t, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as5D = function(n, e, t, s, r) {
  return this.throwIfDisposed(), P(this, [n, e, t, s, r]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asin = function() {
  return this.throwIfDisposed(), Q1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asinh = function() {
  return this.throwIfDisposed(), eb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.atan = function() {
  return this.throwIfDisposed(), tb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.atan2 = function(n) {
  return this.throwIfDisposed(), nb(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.atanh = function() {
  return this.throwIfDisposed(), sb(this);
};
J().prototype.avgPool = function(n, e, t, s) {
  return this.throwIfDisposed(), Xu(this, n, e, t, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.batchToSpaceND = function(n, e) {
  return this.throwIfDisposed(), Yu(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.batchNorm = function(n, e, t, s, r) {
  return this.throwIfDisposed(), ol(this, n, e, t, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.broadcastTo = function(n) {
  return this.throwIfDisposed(), Go(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cast = function(n) {
  return this.throwIfDisposed(), fe(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.ceil = function() {
  return this.throwIfDisposed(), cb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.clipByValue = function(n, e) {
  return this.throwIfDisposed(), _n(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.concat = function(n, e) {
  return this.throwIfDisposed(), n instanceof Je && (n = [n]), ft([this, ...n], e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.conv1d = function(n, e, t, s, r, o) {
  return this.throwIfDisposed(), Vf(this, n, e, t, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.conv2dTranspose = function(n, e, t, s, r) {
  return this.throwIfDisposed(), Uf(this, n, e, t, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.conv2d = function(n, e, t, s, r, o) {
  return this.throwIfDisposed(), Cr(this, n, e, t, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cos = function() {
  return this.throwIfDisposed(), Ju(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cosh = function() {
  return this.throwIfDisposed(), Gf(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cumprod = function(n, e, t) {
  return this.throwIfDisposed(), gc(this, n, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cumsum = function(n, e, t) {
  return this.throwIfDisposed(), Hf(this, n, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.depthToSpace = function(n, e) {
  return this.throwIfDisposed(), gb(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.depthwiseConv2d = function(n, e, t, s, r, o) {
  return this.throwIfDisposed(), al(this, n, e, t, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.dilation2d = function(n, e, t, s, r) {
  return this.throwIfDisposed(), yb(this, n, e, t, s, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.divNoNan = function(n) {
  return this.throwIfDisposed(), bb(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.div = function(n) {
  return this.throwIfDisposed(), be(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.dot = function(n) {
  return this.throwIfDisposed(), xb(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.elu = function() {
  return this.throwIfDisposed(), il(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.equal = function(n) {
  return this.throwIfDisposed(), ks(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.erf = function() {
  return this.throwIfDisposed(), wb(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.euclideanNorm = function(n, e) {
  return this.throwIfDisposed(), $b(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.exp = function() {
  return this.throwIfDisposed(), Gn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.expandDims = function(n) {
  return this.throwIfDisposed(), xn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.expm1 = function() {
  return this.throwIfDisposed(), Cb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.fft = function() {
  return this.throwIfDisposed(), uh(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.flatten = function() {
  return this.throwIfDisposed(), P(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.floor = function() {
  return this.throwIfDisposed(), cl(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.floorDiv = function(n) {
  return this.throwIfDisposed(), zf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.gather = function(n, e) {
  return this.throwIfDisposed(), ul(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.greaterEqual = function(n) {
  return this.throwIfDisposed(), yo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.greater = function(n) {
  return this.throwIfDisposed(), qn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.ifft = function() {
  return this.throwIfDisposed(), Ka(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.irfft = function() {
  return this.throwIfDisposed(), mm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.isFinite = function() {
  return this.throwIfDisposed(), Sb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.isInf = function() {
  return this.throwIfDisposed(), Nb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.isNaN = function() {
  return this.throwIfDisposed(), kb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.leakyRelu = function(n) {
  return this.throwIfDisposed(), Qu(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.lessEqual = function(n) {
  return this.throwIfDisposed(), bo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.less = function(n) {
  return this.throwIfDisposed(), Kf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.localResponseNormalization = function(n, e, t, s) {
  return this.throwIfDisposed(), Tb(this, n, e, t, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), Eb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logSoftmax = function(n) {
  return this.throwIfDisposed(), Xf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logSumExp = function(n, e) {
  return this.throwIfDisposed(), Yf(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.log = function() {
  return this.throwIfDisposed(), Hn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.log1p = function() {
  return this.throwIfDisposed(), eh(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalAnd = function(n) {
  return this.throwIfDisposed(), js(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalNot = function() {
  return this.throwIfDisposed(), th(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalOr = function(n) {
  return this.throwIfDisposed(), Zf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalXor = function(n) {
  return this.throwIfDisposed(), Db(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.matMul = function(n, e, t) {
  return this.throwIfDisposed(), Me(this, n, e, t);
};
J().prototype.maxPool = function(n, e, t, s) {
  return this.throwIfDisposed(), nh(this, n, e, t, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.max = function(n, e) {
  return this.throwIfDisposed(), Ss(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.maximum = function(n) {
  return this.throwIfDisposed(), cr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mean = function(n, e) {
  return this.throwIfDisposed(), vt(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.min = function(n, e) {
  return this.throwIfDisposed(), yc(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.minimum = function(n) {
  return this.throwIfDisposed(), hl(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mirrorPad = function(n, e) {
  return this.throwIfDisposed(), Rb(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mod = function(n) {
  return this.throwIfDisposed(), Fb(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mul = function(n) {
  return this.throwIfDisposed(), F(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.neg = function() {
  return this.throwIfDisposed(), gt(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.norm = function(n, e, t) {
  return this.throwIfDisposed(), ll(this, n, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.notEqual = function(n) {
  return this.throwIfDisposed(), na(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.oneHot = function(n, e = 1, t = 0) {
  return this.throwIfDisposed(), Af(this, n, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.onesLike = function() {
  return this.throwIfDisposed(), jn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.pad = function(n, e) {
  return this.throwIfDisposed(), zr(this, n, e);
};
J().prototype.pool = function(n, e, t, s, r, o) {
  return this.throwIfDisposed(), _b(this, n, e, t, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.pow = function(n) {
  return this.throwIfDisposed(), Sr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.prelu = function(n) {
  return this.throwIfDisposed(), oh(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.prod = function(n, e) {
  return this.throwIfDisposed(), Ob(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reciprocal = function() {
  return this.throwIfDisposed(), Pb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.relu = function() {
  return this.throwIfDisposed(), Ks(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.relu6 = function() {
  return this.throwIfDisposed(), im(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reshapeAs = function(n) {
  return this.throwIfDisposed(), P(this, n.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reshape = function(n) {
  return this.throwIfDisposed(), P(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.resizeBilinear = function(n, e, t) {
  return this.throwIfDisposed(), Jb(this, n, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.resizeNearestNeighbor = function(n, e, t) {
  return this.throwIfDisposed(), Qb(this, n, e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reverse = function(n) {
  return this.throwIfDisposed(), hs(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.rfft = function() {
  return this.throwIfDisposed(), hh(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.round = function() {
  return this.throwIfDisposed(), lm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.rsqrt = function() {
  return this.throwIfDisposed(), cm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.selu = function() {
  return this.throwIfDisposed(), um(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.separableConv2d = function(n, e, t, s, r, o) {
  return this.throwIfDisposed(), hm(this, n, e, t, s, r, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sigmoid = function() {
  return this.throwIfDisposed(), Cs(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sign = function() {
  return this.throwIfDisposed(), zb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sin = function() {
  return this.throwIfDisposed(), dm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sinh = function() {
  return this.throwIfDisposed(), pm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.slice = function(n, e) {
  return this.throwIfDisposed(), Ee(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.softmax = function(n) {
  return this.throwIfDisposed(), ch(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.softplus = function() {
  return this.throwIfDisposed(), ba(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.spaceToBatchND = function(n, e) {
  return this.throwIfDisposed(), rh(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.split = function(n, e) {
  return this.throwIfDisposed(), Dn(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sqrt = function() {
  return this.throwIfDisposed(), rn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.square = function() {
  return this.throwIfDisposed(), at(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.squaredDifference = function(n) {
  return this.throwIfDisposed(), gm(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.squeeze = function(n) {
  return this.throwIfDisposed(), An(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.stack = function(n, e) {
  this.throwIfDisposed();
  const t = n instanceof Je ? [this, n] : [this, ...n];
  return ds(t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.step = function(n) {
  return this.throwIfDisposed(), xa(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.stridedSlice = function(n, e, t, s, r, o, a, i) {
  return this.throwIfDisposed(), Mb(this, n, e, t, s, r, o, a, i);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sub = function(n) {
  return this.throwIfDisposed(), ge(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sum = function(n, e) {
  return this.throwIfDisposed(), Ie(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.tan = function() {
  return this.throwIfDisposed(), Bb(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.tanh = function() {
  return this.throwIfDisposed(), ta(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.tile = function(n) {
  return this.throwIfDisposed(), is(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.toBool = function() {
  return this.throwIfDisposed(), fe(this, "bool");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.toFloat = function() {
  return this.throwIfDisposed(), fe(this, "float32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.toInt = function() {
  return this.throwIfDisposed(), fe(this, "int32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.topk = function(n, e) {
  return this.throwIfDisposed(), Vb(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.transpose = function(n) {
  return this.throwIfDisposed(), We(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.unique = function(n) {
  return this.throwIfDisposed(), Wb(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.unsortedSegmentSum = function(n, e) {
  return this.throwIfDisposed(), bm(this, n, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.unstack = function(n) {
  return this.throwIfDisposed(), Ts(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.where = function(n, e) {
  return this.throwIfDisposed(), In(n, this, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.zerosLike = function() {
  return this.throwIfDisposed(), Ge(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Ls extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, Ls.prototype);
  }
}
class ls extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, ls.prototype);
  }
}
class z extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, z.prototype);
  }
}
class Pe extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, Pe.prototype);
  }
}
class Zm extends Error {
  constructor(e) {
    super(e), Object.setPrototypeOf(this, Zm.prototype);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Tx {
  constructor(e) {
    this.maxEntries = e || 100, this.cache = /* @__PURE__ */ new Map();
  }
  /**
   * Get the entry for the key and mark it as used recently.
   */
  get(e) {
    let t;
    return this.cache.has(e) && (t = this.cache.get(e), this.cache.delete(e), this.cache.set(e, t)), t;
  }
  /**
   * Put the entry into the cache. If the key already existed, mark the key as
   * used recently.
   */
  put(e, t) {
    if (this.cache.has(e))
      this.cache.delete(e);
    else if (this.cache.size >= this.maxEntries) {
      const s = this.cache.keys().next().value;
      this.cache.delete(s);
    }
    this.cache.set(e, t);
  }
  /**
   * Get the MaxEntries of the cache.
   */
  getMaxEntries() {
    return this.maxEntries;
  }
  /**
   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce
   * entries in the cache.
   */
  setMaxEntries(e) {
    if (e < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);
    if (this.maxEntries > e)
      for (let t = 0; t < this.maxEntries - e; t++) {
        const s = this.cache.keys().next().value;
        this.cache.delete(s);
      }
    this.maxEntries = e;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function uo(n, e) {
  if (Array.isArray(n)) {
    let t = [];
    for (let s = 0; s < e; s++)
      t = t.concat(n);
    return t;
  } else {
    const t = new Array(e);
    return t.fill(n), t;
  }
}
function Ps(n, e) {
  if (!n)
    throw new Zm(e);
}
function C0(n, e) {
  let t = 0;
  for (const s of n)
    s === e && t++;
  return t;
}
function wn(n) {
  return n.length === 1 ? n[0] : n;
}
function ht(n) {
  return Array.isArray(n) ? n : [n];
}
function Xs(n) {
  const t = n.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return t[0] !== "_" ? t : "private" + t;
}
function Zr(n) {
  return n.length <= 1 || n.indexOf("_") === -1 ? n : n.replace(/[_]+(\w|$)/g, (e, t) => t.toUpperCase());
}
let Zn = {};
function Jm(n) {
  if (n == null)
    return null;
  const e = {};
  return e.className = n.getClassName(), e.config = n.getConfig(), e;
}
function Wd(n) {
  if (!(n == null || typeof n != "object"))
    if (Array.isArray(n))
      n.forEach((e) => Wd(e));
    else {
      const e = Object.keys(n);
      for (const t of e) {
        const s = n[t];
        s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? n[t] = s.value : Wd(s));
      }
    }
}
function gl(n, e = {}, t = {}, s = "object", r = !1) {
  if (typeof n == "string") {
    const o = n;
    let a;
    if (o in t)
      a = t[o];
    else if (o in Zn)
      a = Zn[o];
    else if (a = e[o], a == null)
      throw new z(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return a;
  } else {
    const o = n;
    if (o.className == null || o.config == null)
      throw new z(`${s}: Improper config format: ${JSON.stringify(o)}.
'className' and 'config' must set.`);
    const a = o.className;
    let i, l;
    if (a in t ? [i, l] = t[a] : a in Zn ? [i, l] = Zn.className : a in e && ([i, l] = e[a]), i == null)
      throw new z(`Unknown ${s}: ${a}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      const c = {};
      for (const p of Object.keys(Zn))
        c[p] = Zn[p];
      for (const p of Object.keys(t))
        c[p] = t[p];
      const u = o.config;
      u.customObjects = c;
      const h = Object.assign({}, Zn);
      for (const p of Object.keys(t))
        Zn[p] = t[p];
      Wd(o.config);
      const d = l(i, o.config, t, r);
      return Zn = Object.assign({}, h), d;
    } else {
      const c = Object.assign({}, Zn);
      for (const h of Object.keys(t))
        Zn[h] = t[h];
      const u = new i(o.config);
      return Zn = Object.assign({}, c), u;
    }
  }
}
function QR(n, e) {
  return n < e ? -1 : n > e ? 1 : 0;
}
function Pl(n, e) {
  return -1 * QR(n, e);
}
function xr(n) {
  if (n == null)
    return n;
  const e = [];
  for (const t of n)
    e.indexOf(t) === -1 && e.push(t);
  return e;
}
function eF(n) {
  if (n == null)
    throw new z(`Invalid value in obj: ${JSON.stringify(n)}`);
  for (const e in n)
    if (n.hasOwnProperty(e))
      return !1;
  return !0;
}
function wo(n, e, t) {
  if (t != null && n.indexOf(t) < 0)
    throw new z(`${t} is not a valid ${e}.  Valid values are ${n} or null/undefined.`);
}
function Qm(n, e, t = 0, s = 1 / 0) {
  return Ps(t >= 0), Ps(s >= t), Array.isArray(n) && n.length >= t && n.length <= s && n.every((r) => typeof r === e);
}
function Ut(n, e) {
  Array.isArray(n) ? (N(n.length > 0, () => `${e} is unexpectedly an empty array.`), n.forEach((t, s) => Ut(t, `element ${s + 1} of ${e}`))) : N(Number.isInteger(n) && n > 0, () => `Expected ${e} to be a positive integer, but got ${Ex(n)}.`);
}
function Ex(n) {
  return n === null ? "null" : Array.isArray(n) ? "[" + n.map((e) => Ex(e)).join(",") + "]" : typeof n == "string" ? `"${n}"` : `${n}`;
}
function tF(n, e, t) {
  let s = t != null ? t() : bn(), r;
  return (...a) => {
    const i = t != null ? t() : bn();
    return i - s < e || (s = i, r = n(...a)), r;
  };
}
function Dx(n) {
  return n === "relu" ? "relu" : n === "linear" ? "linear" : n === "elu" ? "elu" : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let nF = 0;
function Ax() {
  return nF++;
}
const zl = {};
function wh(n = "") {
  return n in zl || (zl[n] = 0), zl[n] += 1, n + zl[n].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const sF = ["channelsFirst", "channelsLast"], rF = ["nearest", "bilinear"], oF = ["valid", "same", "causal"], aF = ["max", "avg"], iF = ["sum", "mul", "concat", "ave"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Eo = /* @__PURE__ */ new Map();
function kt(n) {
  wo(sF, "DataFormat", n);
}
function lF(n) {
  wo(rF, "InterpolationFormat", n);
}
function Kn(n) {
  wo(oF, "PaddingMode", n);
}
function Rx(n) {
  wo(aF, "PoolMode", n);
}
const Ga = [], S0 = "/";
function so(n, e) {
  Ga.push(n);
  try {
    const t = e();
    return Ga.pop(), t;
  } catch (t) {
    throw Ga.pop(), t;
  }
}
function cF() {
  return Ga.length === 0 ? "" : Ga.join(S0) + S0;
}
function Fx(n) {
  if (!Ox(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  return cF() + n;
}
function _x(n) {
  if (!Ox(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  Eo.has(n) || Eo.set(n, 0);
  const e = Eo.get(n);
  if (Eo.set(n, Eo.get(n) + 1), e > 0) {
    const t = `${n}_${e}`;
    return Eo.set(t, 1), t;
  } else
    return n;
}
const uF = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function Ox(n) {
  return !!n.match(uF);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function hF(n) {
  return n === parseInt(n.toString(), 10);
}
function wr(n, e, t) {
  e == null && (e = 0), t == null && (t = n.length);
  let s = 1;
  for (let r = e; r < t; ++r)
    s *= n[r];
  return s;
}
function sa(n) {
  if (n.length === 0)
    return Number.NaN;
  let e = Number.POSITIVE_INFINITY;
  for (let t = 0; t < n.length; t++) {
    const s = n[t];
    s < e && (e = s);
  }
  return e;
}
function Nr(n) {
  if (n.length === 0)
    return Number.NaN;
  let e = Number.NEGATIVE_INFINITY;
  for (let t = 0; t < n.length; t++) {
    const s = n[t];
    s > e && (e = s);
  }
  return e;
}
function Es(n, e) {
  if (e < n)
    throw new z(`end (${e}) < begin (${n}) is forbidden.`);
  const t = [];
  for (let s = n; s < e; ++s)
    t.push(s);
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Yh;
function Ft() {
  return Yh == null && (Yh = kS().epsilon()), Yh;
}
function Ds() {
  return "channelsLast";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function yl(n, e) {
  return fe(n, e);
}
function bl(n, e = -1) {
  const t = n.shape.slice();
  return e < 0 && (e = t.length + e + 1), t.splice(e, 0, 1), P(n, t);
}
function dF(n, e) {
  return H(() => {
    if (n.shape.length !== 2)
      throw new z(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);
    const t = bl(n, 1);
    return Ud(t, [1, e, 1]);
  });
}
function pF(n) {
  const e = [wr(n.shape)];
  return P(n, e);
}
function fF(n) {
  if (n.rank <= 1)
    throw new z(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);
  const e = [n.shape[0], wr(n.shape, 1)];
  return P(n, e);
}
function ro(n, e, t) {
  return H(() => {
    switch (n.rank) {
      case 1:
        return ih(n, e, t);
      case 2:
        return fm(n, [e, 0], [t, n.shape[1]]);
      case 3:
        return lh(n, [e, 0, 0], [t, n.shape[1], n.shape[2]]);
      case 4:
        return qa(n, [e, 0, 0, 0], [t, n.shape[1], n.shape[2], n.shape[3]]);
      case 5:
        return Ee(n, [e, 0, 0, 0, 0], [
          t,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4]
        ]);
      case 6:
        return Ee(n, [e, 0, 0, 0, 0, 0], [
          t,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4],
          n.shape[5]
        ]);
      default:
        throw new z(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Zh(n, e, t) {
  return H(() => {
    switch (n.rank) {
      case 1:
        return ih(n, e, t);
      case 2:
        return fm(n, [0, e], [n.shape[0], t]);
      case 3:
        return lh(n, [0, 0, e], [n.shape[0], n.shape[1], t]);
      case 4:
        return qa(n, [0, 0, 0, e], [n.shape[0], n.shape[1], n.shape[2], t]);
      default:
        throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Ml(n, e, t, s) {
  return H(() => {
    switch (n.rank) {
      case 1:
        return ih(n, e, t);
      case 2:
        switch (s) {
          case 1:
            return ro(n, e, t);
          case 2:
            return Zh(n, e, t);
          default:
            throw new z(`The axis is not within the rank of the tensor ${s}`);
        }
      case 3:
        switch (s) {
          case 1:
            return ro(n, e, t);
          case 2:
            return lh(n, [0, e, 0], [n.shape[0], t, n.shape[2]]);
          case 3:
            return Zh(n, e, t);
          default:
            throw new z(`The axis is not within the rank of the tensor ${s}`);
        }
      case 4:
        switch (s) {
          case 1:
            return ro(n, e, t);
          case 2:
            return qa(n, [0, e, 0, 0], [n.shape[0], t, n.shape[2], n.shape[3]]);
          case 3:
            return qa(n, [0, 0, e, 0], [n.shape[0], n.shape[1], t, n.shape[3]]);
          case 4:
            return Zh(n, e, t);
          default:
            throw new z(`The axis is not within the rank of the tensor ${s}`);
        }
      default:
        throw new z(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function eg(n, e = -1) {
  let t;
  return e < 0 && (t = n[0].rank, t !== 0 ? e = t : e = 0), e === n[0].rank && (e = -1), ft(n, e);
}
function N0(n, e) {
  switch (n.rank) {
    case 1:
      return ub([n, e]);
    case 2:
      return Zu([n, e], 0);
    case 3:
      return hb([n, e], 0);
    case 4:
      return db([n, e], 0);
    default:
      throw new z(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
  }
}
function Ud(n, e) {
  if (Array.isArray(e) || (e = [e]), n.rank !== e.length)
    throw new z(`The length of input n (${e.length}) does not match the number of dimensions in input x (${n.rank})`);
  return is(n, e);
}
function vh(n, e = 0, t = 1, s, r) {
  return am(n, e, t, s, r);
}
function Gs(n, e, t, s) {
  if (n.rank < 2 || e.rank < 2)
    throw new Pe(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${e.shape}`);
  if (e.rank >= 3) {
    const r = n.shape.slice(-1)[0], o = e.shape.slice(-2)[0];
    if (r !== o)
      throw new Pe(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${e.shape}`);
  }
  if (n.rank === 2 && e.rank === 2)
    return Bd({
      a: n,
      b: e,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Gd(n.rank, s, Ds()) : null,
      activation: t
    });
  {
    const r = n.shape.slice(), o = r.pop();
    n = P(n, [-1, o]);
    const a = e.shape.slice(), i = a.pop(), l = a.pop(), c = [...a, i], u = Array.from({ length: e.rank }, (f, m) => m === 0 ? e.rank - 2 : m <= e.rank - 2 ? m - 1 : m);
    e = P(We(e, u), [l, -1]);
    const h = [...r, ...c];
    return P(Bd({
      a: n,
      b: e,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Gd(n.rank, s, Ds()) : null,
      activation: t
    }), h);
  }
}
function Lx(n, e, t) {
  return H(() => (Array.isArray(e) ? e = Ct(e, "int32") : e = fe(e, "int32"), ul(n, e, t)));
}
function xl(n) {
  return F(n, n);
}
function Gd(n, e, t) {
  const s = e.shape;
  if (e.rank !== 1 && e.rank !== n)
    throw new z(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${n}`);
  if (n === 5) {
    if (t === "channelsFirst")
      return s.length === 1 ? P(e, [1, s[0], 1, 1, 1]) : P(e, [1, s[3], s[0], s[1], s[2]]);
    if (t === "channelsLast")
      return s.length === 1 ? P(e, [1, 1, 1, 1, s[0]]) : P(e, [1].concat(s));
  } else if (n === 4) {
    if (t === "channelsFirst")
      return s.length === 1 ? P(e, [1, s[0], 1, 1]) : P(e, [1, s[2], s[0], s[1]]);
    if (t === "channelsLast")
      return s.length === 1 ? P(e, [1, 1, 1, s[0]]) : P(e, [1].concat(s));
  } else if (n === 3) {
    if (t === "channelsFirst")
      return s.length === 1 ? P(e, [1, s[0], 1]) : P(e, [1, s[1], s[0]]);
    if (t === "channelsLast")
      return s.length === 1 ? P(e, [1, 1, s[0]]) : P(e, [1].concat(s));
  } else if (n < 3)
    return e;
  throw new z(`Unsupported input rank by biasAdd: ${e.rank}`);
}
function Fs(n, e, t) {
  return H(() => (t == null && (t = Ds()), kt(t), ne(n, Gd(n.rank, e, t))));
}
function mF(n, e = 1) {
  if (e !== 1)
    throw new Pe(`Support for alpha values other than 1 (${e}) is not implemented yet.`);
  return il(n);
}
function gF(n) {
  return H(() => be(n, ne(At(n), 1)));
}
function Px(n, e, t, s) {
  return H(() => Hb(n, e, t, s));
}
function yF(n) {
  return H(() => {
    const e = ne(0.5, F(0.2, n));
    return _n(e, 0, 1);
  });
}
function wl(n, e, t = !1) {
  return t ? n() : e();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const bF = ["fanIn", "fanOut", "fanAvg"], xF = ["normal", "uniform", "truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function wF(n) {
  wo(bF, "FanMode", n);
}
function vF(n) {
  wo(xF, "Distribution", n);
}
class fs extends ga {
  fromConfigUsesCustomObjects() {
    return !1;
  }
  getConfig() {
    return {};
  }
}
class zx extends fs {
  apply(e, t) {
    return Rt(e, t);
  }
}
zx.className = "Zeros";
re(zx);
class tg extends fs {
  apply(e, t) {
    return Wn(e, t);
  }
}
tg.className = "Ones";
re(tg);
class Mx extends fs {
  constructor(e) {
    if (super(), typeof e != "object")
      throw new z(`Expected argument of type ConstantConfig but got ${e}`);
    if (e.value === void 0)
      throw new z(`config must have value set but got ${e}`);
    this.value = e.value;
  }
  apply(e, t) {
    return H(() => F(Te(this.value), Wn(e, t)));
  }
  getConfig() {
    return {
      value: this.value
    };
  }
}
Mx.className = "Constant";
re(Mx);
class Bx extends fs {
  constructor(e) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = e.minval || this.DEFAULT_MINVAL, this.maxval = e.maxval || this.DEFAULT_MAXVAL, this.seed = e.seed;
  }
  apply(e, t) {
    return dl(e, this.minval, this.maxval, t);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
Bx.className = "RandomUniform";
re(Bx);
class Vx extends fs {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new Pe(`randomNormal does not support dType ${t}.`);
    return vh(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Vx.className = "RandomNormal";
re(Vx);
class Wx extends fs {
  constructor(e) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = e.mean || this.DEFAULT_MEAN, this.stddev = e.stddev || this.DEFAULT_STDDEV, this.seed = e.seed;
  }
  apply(e, t) {
    if (t = t || "float32", t !== "float32" && t !== "int32")
      throw new Pe(`truncatedNormal does not support dType ${t}.`);
    return ym(e, this.mean, this.stddev, t, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Wx.className = "TruncatedNormal";
re(Wx);
class Ux extends fs {
  constructor(e) {
    super(), this.gain = e.gain != null ? e.gain : 1;
  }
  apply(e, t) {
    return H(() => {
      if (e.length !== 2 || e[0] !== e[1])
        throw new z("Identity matrix initializer can only be used for 2D square matrices.");
      return F(this.gain, qf(e[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
Ux.className = "Identity";
re(Ux);
function IF(n, e = "channelsLast") {
  let t, s;
  if (kt(e), n.length === 2)
    t = n[0], s = n[1];
  else if ([3, 4, 5].indexOf(n.length) !== -1) {
    if (e === "channelsFirst") {
      const r = wr(n, 2);
      t = n[1] * r, s = n[0] * r;
    } else if (e === "channelsLast") {
      const r = wr(n, 0, n.length - 2);
      t = n[n.length - 2] * r, s = n[n.length - 1] * r;
    }
  } else {
    const r = wr(n);
    t = Math.sqrt(r), s = Math.sqrt(r);
  }
  return [t, s];
}
class On extends fs {
  /**
   * Constructor of VarianceScaling.
   * @throws ValueError for invalid value in scale.
   */
  constructor(e) {
    if (super(), e.scale < 0)
      throw new z(`scale must be a positive float. Got: ${e.scale}`);
    this.scale = e.scale == null ? 1 : e.scale, this.mode = e.mode == null ? "fanIn" : e.mode, wF(this.mode), this.distribution = e.distribution == null ? "normal" : e.distribution, vF(this.distribution), this.seed = e.seed;
  }
  apply(e, t) {
    const s = IF(e), r = s[0], o = s[1];
    let a = this.scale;
    if (this.mode === "fanIn" ? a /= Math.max(1, r) : this.mode === "fanOut" ? a /= Math.max(1, o) : a /= Math.max(1, (r + o) / 2), this.distribution === "normal") {
      const i = Math.sqrt(a);
      if (t = t || "float32", t !== "float32" && t !== "int32")
        throw new Pe(`${this.getClassName()} does not support dType ${t}.`);
      return ym(e, 0, i, t, this.seed);
    } else {
      const i = Math.sqrt(3 * a);
      return dl(e, -i, i, t);
    }
  }
  getConfig() {
    return {
      scale: this.scale,
      mode: this.mode,
      distribution: this.distribution,
      seed: this.seed
    };
  }
}
On.className = "VarianceScaling";
re(On);
class ng extends On {
  /**
   * Constructor of GlorotUniform
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(e) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "uniform",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return On.className;
  }
}
ng.className = "GlorotUniform";
re(ng);
class sg extends On {
  /**
   * Constructor of GlorotNormal.
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(e) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "normal",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return On.className;
  }
}
sg.className = "GlorotNormal";
re(sg);
class rg extends On {
  constructor(e) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "normal",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return On.className;
  }
}
rg.className = "HeNormal";
re(rg);
class og extends On {
  constructor(e) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "uniform",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return On.className;
  }
}
og.className = "HeUniform";
re(og);
class ag extends On {
  constructor(e) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "normal",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return On.className;
  }
}
ag.className = "LeCunNormal";
re(ag);
class ig extends On {
  constructor(e) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "uniform",
      seed: e == null ? null : e.seed
    });
  }
  getClassName() {
    return On.className;
  }
}
ig.className = "LeCunNormal";
re(ig);
class Gx extends fs {
  constructor(e) {
    if (super(), this.DEFAULT_GAIN = 1, this.gain = e.gain == null ? this.DEFAULT_GAIN : e.gain, this.seed = e.seed, this.seed != null)
      throw new Pe("Random seed is not implemented for Orthogonal Initializer yet.");
  }
  apply(e, t) {
    return H(() => {
      if (e.length < 2)
        throw new Pe("Shape must be at least 2D.");
      e[0] * e[1] > 2e3 && console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0] * e[1]}) elements: Slowness may result.`);
      const s = e[0] > e[1] ? [e[1], e[0]] : e, r = vh(s, 0, 1, "float32");
      let o = ex.gramSchmidt(r);
      return e[0] > e[1] && (o = We(o)), F(this.gain, o);
    });
  }
  getConfig() {
    return {
      gain: this.gain,
      seed: this.seed
    };
  }
}
Gx.className = "Orthogonal";
re(Gx);
const k0 = {
  constant: "Constant",
  glorotNormal: "GlorotNormal",
  glorotUniform: "GlorotUniform",
  heNormal: "HeNormal",
  heUniform: "HeUniform",
  identity: "Identity",
  leCunNormal: "LeCunNormal",
  leCunUniform: "LeCunUniform",
  ones: "Ones",
  orthogonal: "Orthogonal",
  randomNormal: "RandomNormal",
  randomUniform: "RandomUniform",
  truncatedNormal: "TruncatedNormal",
  varianceScaling: "VarianceScaling",
  zeros: "Zeros"
};
function T0(n, e = {}) {
  return gl(n, ns.getMap().classNameMap, e, "initializer");
}
function xt(n) {
  return Jm(n);
}
function mt(n) {
  if (typeof n == "string") {
    const e = n in k0 ? k0[n] : n;
    if (e === "GlorotNormal")
      return new sg();
    if (e === "GlorotUniform")
      return new ng();
    if (e === "HeNormal")
      return new rg();
    if (e === "HeUniform")
      return new og();
    if (e === "LeCunNormal")
      return new ag();
    if (e === "LeCunUniform")
      return new ig();
    {
      const t = {};
      return t.className = e, t.config = {}, T0(t);
    }
  } else return n instanceof fs ? n : T0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Hd(n) {
  return Array.isArray(n) && Array.isArray(n[0]);
}
function bc(n) {
  return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function _e(n) {
  let e;
  if (Array.isArray(n)) {
    if (n.length !== 1)
      throw new z(`Expected Tensor length to be 1; got ${n.length}`);
    e = n[0];
  } else
    e = n;
  return e;
}
function tt(n) {
  if (Array.isArray(n) && Array.isArray(n[0])) {
    if (n.length === 1)
      return n = n, n[0];
    throw new z(`Expected exactly 1 Shape; got ${n.length}`);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function xc(n) {
  let e = 0;
  for (const t of n)
    t.shape.length === 0 ? e += 1 : e += t.shape.reduce((s, r) => s * r);
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const E0 = "Variable";
class $F {
  /**
   * Construct Variable from a `tf.Tensor`.
   *
   * If not explicitly named, the Variable will be given a name with the
   * prefix 'Variable'. Variable names are unique. In the case of name
   * collision, suffixies '_<num>' will be added to the name.
   *
   * @param val Initial value of the Variable.
   * @param name Name of the variable. If `null` or `undefined` is provided, it
   *   will default a name with the prefix 'Variable'.
   * @param constraint Optional, projection function to be applied to the
   * variable after optimize updates
   * @throws ValueError if `name` is `null` or `undefined`.
   */
  constructor(e, t = "float32", s = E0, r = !0, o = null) {
    this.dtype = t ?? "float32", this.shape = e.shape, this.id = Ax(), s = s ?? E0, this.originalName = Fx(s), this.name = _x(this.originalName), this.trainable_ = r, this.constraint = o, this.val = Ub(e, this.trainable_, this.name, this.dtype);
  }
  /**
   * Get a snapshot of the Variable's value.
   *
   * The returned value is a snapshot of the Variable's value at the time of
   * the invocation. Future mutations in the value of the tensor will only
   * be reflected by future calls to this method.
   */
  read() {
    return this.assertNotDisposed(), this.val;
  }
  /**
   * Update the value of the Variable.
   *
   * @param newVal: The new value to update to. Must be consistent with the
   *   dtype and shape of the Variable.
   * @return This Variable.
   */
  write(e) {
    return this.assertNotDisposed(), CF(this.val, e), this.val.id !== e.id && (this.val.assign(e), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  /**
   * Dispose this LayersVariable instance from memory.
   */
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.trainable_ = e, this.val.trainable = e;
  }
}
function CF(n, e) {
  if (n.shape.toString() !== e.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(n.shape) + " vs. " + JSON.stringify(e.shape));
}
function jd(n) {
  return n.map((e) => e.read());
}
function lg(n) {
  n.forEach((e) => {
    e[0].write(e[1]);
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class _t {
  constructor(e) {
    this.dtype = e.dtype, this.shape = e.shape, e.shape != null ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {};
  }
}
class Bs {
  /**
   *
   * @param dtype
   * @param shape
   * @param sourceLayer The Layer that produced this symbolic tensor.
   * @param inputs The inputs passed to sourceLayer's __call__() method.
   * @param nodeIndex
   * @param tensorIndex
   * @param callArgs The keyword arguments passed to the __call__() method.
   * @param name
   * @param outputTensorIndex The index of this tensor in the list of outputs
   *   returned by apply().
   */
  constructor(e, t, s, r, o, a, i) {
    this.dtype = e, this.shape = t, this.sourceLayer = s, this.inputs = r, this.callArgs = o, this.outputTensorIndex = i, this.id = Ax(), a != null && (this.originalName = Fx(a), this.name = _x(this.originalName)), this.rank = t.length;
  }
}
let SF = 0;
class Ih {
  constructor(e, t) {
    this.callArgs = t, this.id = SF++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;
    for (const s of e.inboundLayers)
      s != null && s.outboundNodes.push(this);
    e.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const e = [];
    for (const t of this.inboundLayers)
      t != null ? e.push(t.name) : e.push(null);
    return {
      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
      inboundLayers: e,
      nodeIndices: this.nodeIndices,
      tensorIndices: this.tensorIndices
    };
  }
}
let NF = 0;
class je extends ga {
  constructor(e = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = NF++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = [];
    let t = e.name;
    if (!t) {
      const s = this.getClassName();
      t = Xs(s) + "_" + wh(s);
    }
    if (this.name = t, this.trainable_ = e.trainable == null ? !0 : e.trainable, e.inputShape != null || e.batchInputShape != null) {
      let s;
      if (e.batchInputShape != null)
        s = e.batchInputShape;
      else if (e.inputShape != null) {
        let o = null;
        e.batchSize != null && (o = e.batchSize), s = [o].concat(e.inputShape);
      }
      this.batchInputShape = s;
      let r = e.dtype;
      r == null && (r = e.inputDType), r == null && (r = "float32"), this.dtype = r;
    }
    e.weights != null ? this.initialWeights = e.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1;
  }
  /**
   * Converts a layer and its index to a unique (immutable type) name.
   * This function is used internally with `this.containerNodes`.
   * @param layer The layer.
   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
   *   nodes.
   *
   * @returns The unique name.
   */
  static nodeKey(e, t) {
    return e.name + "_ib-" + t.toString();
  }
  /**
   * Returns this.inboundNode at index nodeIndex.
   *
   * Porting note: This is a replacement for _get_node_attribute_at_index()
   * @param nodeIndex
   * @param attrName The name of the attribute related to request for this node.
   */
  getNodeAtIndex(e, t) {
    if (this.inboundNodes.length === 0)
      throw new ls(`The layer has never been called and thus has no defined ${t}.`);
    if (this.inboundNodes.length <= e)
      throw new z(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[e];
  }
  /**
   * Retrieves the input tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple inputs).
   */
  getInputAt(e) {
    return wn(this.getNodeAtIndex(e, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple outputs).
   */
  getOutputAt(e) {
    return wn(this.getNodeAtIndex(e, "output").outputTensors);
  }
  // Properties
  /**
   * Retrieves the input tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Input tensor or list of input tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get input() {
    if (this.inboundNodes.length > 1)
      throw new Ls(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new Ls(`Layer ${this.name} is not connected, no input to return.`);
    return wn(this.getNodeAtIndex(0, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Output tensor or list of output tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get output() {
    if (this.inboundNodes.length === 0)
      throw new Ls(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new Ls(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return wn(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  /**
   * Retrieves the Layer's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return this.losses.map((e) => e());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(e) {
    this._built = e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this._trainableWeights.forEach((t) => t.trainable = e), this.trainable_ = e;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((e) => e.trainable) : [];
  }
  set trainableWeights(e) {
    this._trainableWeights = e;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((e) => !e.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(e) {
    this._nonTrainableWeights = e;
  }
  /**
   * The concatenation of the lists trainableWeights and nonTrainableWeights
   * (in this order).
   */
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  /**
   * Reset the states of the layer.
   *
   * This method of the base Layer class is essentially a no-op.
   * Subclasses that are stateful (e.g., stateful RNNs) should override this
   * method.
   */
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  /**
   * Checks compatibility between the layer and provided inputs.
   *
   * This checks that the tensor(s) `input`
   * verify the input assumptions of the layer
   * (if any). If not, exceptions are raised.
   *
   * @param inputs Input tensor or list of input tensors.
   *
   * @exception ValueError in case of mismatch between
   *   the provided inputs and the expectations of the layer.
   */
  assertInputCompatibility(e) {
    if (e = ht(e), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    const t = ht(this.inputSpec);
    if (e.length !== t.length)
      throw new z(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);
    for (let s = 0; s < e.length; s++) {
      const r = e[s], o = t[s];
      if (o == null)
        continue;
      const a = r.rank;
      if (o.ndim != null && a !== o.ndim)
        throw new z(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${a}`);
      if (o.maxNDim != null && a > o.maxNDim)
        throw new z(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${a}`);
      if (o.minNDim != null && a < o.minNDim)
        throw new z(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${a}.`);
      if (o.dtype != null && r.dtype !== o.dtype)
        throw new z(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);
      if (o.axes) {
        const i = r.shape;
        for (const l in o.axes) {
          const c = Number(l), u = o.axes[l], h = c >= 0 ? i[c] : i[i.length + c];
          if (u != null && [u, null].indexOf(h) === -1)
            throw new z(`Input ${s} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${u} but got shape ${i}.`);
        }
      }
      if (o.shape != null)
        for (let i = 0; i < o.shape.length; ++i) {
          const l = o.shape[i], c = r.shape[i];
          if (l != null && c != null && l !== c)
            throw new z(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`);
        }
    }
  }
  /**
   * This is where the layer's logic lives.
   *
   * @param inputs Input tensor, or list/tuple of input tensors.
   * @param kwargs Additional keyword arguments.
   *
   * @return A tensor or list/tuple of tensors.
   */
  call(e, t) {
    return e;
  }
  invokeCallHook(e, t) {
    this._callHook != null && this._callHook(e, t);
  }
  /**
   * Set call hook.
   * This is currently used for testing only.
   * @param callHook
   */
  setCallHook(e) {
    this._callHook = e;
  }
  /**
   * Clear call hook.
   * This is currently used for testing only.
   */
  clearCallHook() {
    this._callHook = null;
  }
  /**
   * Builds or executes a `Layer`'s logic.
   *
   * When called with `tf.Tensor`(s), execute the `Layer`'s computation and
   * return Tensor(s). For example:
   *
   * ```js
   * const denseLayer = tf.layers.dense({
   *   units: 1,
   *   kernelInitializer: 'zeros',
   *   useBias: false
   * });
   *
   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
   * // numeric values).
   * const input = tf.ones([2, 2]);
   * const output = denseLayer.apply(input);
   *
   * // The output's value is expected to be [[0], [0]], due to the fact that
   * // the dense layer has a kernel initialized to all-zeros and does not have
   * // a bias.
   * output.print();
   * ```
   *
   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
   * future execution.  This entails internal book-keeping on shapes of
   * expected Tensors, wiring layers together, and initializing weights.
   *
   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
   * building of non-`tf.Sequential` models. For example:
   *
   * ```js
   * const flattenLayer = tf.layers.flatten();
   * const denseLayer = tf.layers.dense({units: 1});
   *
   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
   * const input = tf.input({shape: [2, 2]});
   * const output1 = flattenLayer.apply(input);
   *
   * // output1.shape is [null, 4]. The first dimension is the undetermined
   * // batch size. The second dimension comes from flattening the [2, 2]
   * // shape.
   * console.log(JSON.stringify(output1.shape));
   *
   * // The output SymbolicTensor of the flatten layer can be used to call
   * // the apply() of the dense layer:
   * const output2 = denseLayer.apply(output1);
   *
   * // output2.shape is [null, 1]. The first dimension is the undetermined
   * // batch size. The second dimension matches the number of units of the
   * // dense layer.
   * console.log(JSON.stringify(output2.shape));
   *
   * // The input and output can be used to construct a model that consists
   * // of the flatten and dense layers.
   * const model = tf.model({inputs: input, outputs: output2});
   * ```
   *
   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
   * @param kwargs Additional keyword arguments to be passed to `call()`.
   *
   * @return Output of the layer's `call` method.
   *
   * @exception ValueError error in case the layer is missing shape information
   *   for its `build` call.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  // Porting Note: This is a replacement for __call__() in Python.
  apply(e, t) {
    t = t || {}, this.assertNotDisposed();
    const s = ht(e);
    let r = !0;
    for (const a of s)
      if (!(a instanceof Bs)) {
        r = !1;
        break;
      }
    let o = !0;
    for (const a of s)
      if (a instanceof Bs) {
        o = !1;
        break;
      }
    if (r === o)
      throw new z("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return so(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(e);
        const a = [];
        for (const i of ht(e))
          a.push(i.shape);
        this.build(wn(a)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && o && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(e), o) {
        let a = this.call(e, t);
        const i = ht(a), l = [];
        for (let c of i)
          s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
        if (a = wn(l), this.activityRegularizer != null)
          throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return a;
      } else {
        const a = kF(e), i = this.computeOutputShape(a);
        let l;
        const c = TF(e);
        if (this.warnOnIncompatibleInputShape(Array.isArray(e) ? a[0] : a), i != null && i.length > 0 && Array.isArray(i[0]) ? l = i.map((u, h) => new Bs(c, u, this, ht(e), t, this.name, h)) : l = new Bs(c, i, this, ht(e), t, this.name), this.addInboundNode(e, l, null, null, a, i, t), this._refCount++, this.activityRegularizer != null)
          throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return l;
      }
    });
  }
  /**
   * Check compatibility between input shape and this layer's batchInputShape.
   *
   * Print warning if any incompatibility is found.
   *
   * @param inputShape Input shape to be checked.
   */
  warnOnIncompatibleInputShape(e) {
    if (this.batchInputShape != null)
      if (e.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let t = !1;
        this.batchInputShape.forEach((s, r) => {
          s != null && e[r] != null && e[r] !== s && (t = !0);
        }), t && console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  /**
   * Retrieves the output shape(s) of a layer.
   *
   * Only applicable if the layer has only one inbound node, or if all inbound
   * nodes have the same output shape.
   *
   * @returns Output shape or shapes.
   * @throws AttributeError: if the layer is connected to more than one incoming
   *   nodes.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new Ls(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const e = [];
    for (const t of this.inboundNodes) {
      const s = JSON.stringify(t.outputShapes);
      e.indexOf(s) === -1 && e.push(s);
    }
    if (e.length === 1) {
      const t = this.inboundNodes[0].outputShapes;
      return Array.isArray(t) && Array.isArray(t[0]) && t.length === 1 ? t[0] : t;
    } else
      throw new Ls(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  /**
   * Counts the total number of numbers (e.g., float32, int32) in the
   * weights.
   *
   * @returns An integer count.
   * @throws RuntimeError: If the layer is not built yet (in which case its
   *   weights are not defined yet.)
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  countParams() {
    if (!this.built)
      throw new ls(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return xc(this.weights);
  }
  /**
   * Creates the layer weights.
   *
   * Must be implemented on all layers that have weights.
   *
   * Called when apply() is called to construct the weights.
   *
   * @param inputShape A `Shape` or array of `Shape` (unused).
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  build(e) {
    this.built = !0;
  }
  /**
   * Returns the current values of the weights of the layer.
   *
   * @param trainableOnly Whether to get the values of only trainable weights.
   * @returns Weight values as an `Array` of `tf.Tensor`s.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getWeights(e = !1) {
    return jd(e ? this.trainableWeights : this.weights);
  }
  /**
   * Sets the weights of the layer, from Tensors.
   *
   * @param weights a list of Tensors. The number of arrays and their shape
   *   must match number of the dimensions of the weights of the layer (i.e.
   *   it should match the output of `getWeights`).
   *
   * @exception ValueError If the provided weights list does not match the
   *   layer's specifications.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  setWeights(e) {
    H(() => {
      const t = this.weights;
      if (t.length !== e.length)
        throw new z(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);
      if (t.length === 0)
        return;
      const s = [], r = jd(t);
      for (let o = 0; o < r.length; ++o) {
        const a = r[o], i = t[o], l = e[o];
        if (!He(a.shape, l.shape))
          throw new z(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);
        s.push([i, l]);
      }
      lg(s);
    });
  }
  /**
   * Adds a weight variable to the layer.
   *
   * @param name Name of the new weight variable.
   * @param shape The shape of the weight.
   * @param dtype The dtype of the weight.
   * @param initializer An initializer instance.
   * @param regularizer A regularizer instance.
   * @param trainable Whether the weight should be trained via backprop or not
   *   (assuming that the layer itself is also trainable).
   * @param constraint An optional trainable.
   * @return The created weight variable.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addWeight(e, t, s, r, o, a, i, l) {
    if (this._addedWeightNames.indexOf(e) !== -1)
      throw new z(`Duplicate weight name ${e} for layer ${this.name}`);
    this._addedWeightNames.push(e), s == null && (s = "float32"), this.fastWeightInitDuringBuild && (r = l != null ? l() : mt("zeros"));
    const c = r.apply(t, s), u = new $F(c, s, e, a, i);
    return c.dispose(), o != null && this.addLoss(() => o.apply(u.read())), a == null && (a = !0), a ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
  }
  /**
   * Set the fast-weight-initialization flag.
   *
   * In cases where the initialized weight values will be immediately
   * overwritten by loaded weight values during model loading, setting
   * the flag to `true` saves unnecessary calls to potentially expensive
   * initializers and speeds up the loading process.
   *
   * @param value Target value of the flag.
   */
  setFastWeightInitDuringBuild(e) {
    this.fastWeightInitDuringBuild = e;
  }
  /**
   * Add losses to the layer.
   *
   * The loss may potentially be conditional on some inputs tensors,
   * for instance activity losses are conditional on the layer's inputs.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addLoss(e) {
    e == null || Array.isArray(e) && e.length === 0 || (e = ht(e), this._losses !== void 0 && this._losses !== null && this.losses.push(...e));
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  computeOutputShape(e) {
    return e;
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(e, t) {
    if (!this.supportsMasking) {
      if (t != null)
        if (Array.isArray(t))
          t.forEach((s) => {
            if (s != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return t;
  }
  /**
   * Internal method to create an inbound node for the layer.
   *
   * @param inputTensors List of input tensors.
   * @param outputTensors List of output tensors.
   * @param inputMasks List of input masks (a mask can be a tensor, or null).
   * @param outputMasks List of output masks (a mask can be a tensor, or null).
   * @param inputShapes List of input shape tuples.
   * @param outputShapes List of output shape tuples.
   * @param kwargs Dictionary of keyword arguments that were passed to the
   *   `call` method of the layer at the call that created the node.
   */
  addInboundNode(e, t, s, r, o, a, i = null) {
    const l = ht(e);
    t = ht(t), s = ht(s), r = ht(r), o = bc(o), a = bc(a);
    const c = [], u = [], h = [];
    for (const d of l)
      c.push(d.sourceLayer), u.push(d.nodeIndex), h.push(d.tensorIndex);
    new Ih({
      outboundLayer: this,
      inboundLayers: c,
      nodeIndices: u,
      tensorIndices: h,
      inputTensors: l,
      outputTensors: t,
      inputMasks: s,
      outputMasks: r,
      inputShapes: o,
      outputShapes: a
    }, i);
    for (let d = 0; d < t.length; d++)
      t[d].sourceLayer = this, t[d].nodeIndex = this.inboundNodes.length - 1, t[d].tensorIndex = d;
  }
  /**
   * Returns the config of the layer.
   *
   * A layer config is a TS dictionary (serializable)
   * containing the configuration of a layer.
   * The same layer can be reinstantiated later
   * (without its trained weights) from this configuration.
   *
   * The config of a layer does not include connectivity
   * information, nor the layer class name.  These are handled
   * by 'Container' (one layer of abstraction above).
   *
   * Porting Note: The TS dictionary follows TS naming standards for
   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
   * should use a helper function to convert to the pythonic storage
   * standard. (see serialization_utils.convertTsToPythonic)
   *
   * @returns TS dictionary of configuration.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getConfig() {
    const e = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (e.batchInputShape = this.batchInputShape), this.dtype != null && (e.dtype = this.dtype), e;
  }
  /**
   * Dispose the weight variables that this Layer instance holds.
   *
   * @returns {number} Number of disposed variables.
   */
  disposeWeights() {
    return this.weights.forEach((e) => e.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose layer's weights.
   *
   * This method decreases the reference count of the Layer object by 1.
   *
   * A Layer is reference-counted. Its reference count is incremented by 1
   * the first item its `apply()` method is called and when it becomes a part
   * of a new `Node` (through calling the `apply()` method on a
   * `tf.SymbolicTensor`).
   *
   * If the reference count of a Layer becomes 0, all the weights will be
   * disposed and the underlying memory (e.g., the textures allocated in WebGL)
   * will be freed.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * weights of the Layer will *not* be disposed.
   *
   * After a Layer is disposed, it cannot be used in calls such as `apply()`,
   * `getWeights()` or `setWeights()` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the Container after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the layer has already
   *   been disposed.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let e = 0;
    return --this._refCount === 0 && (e = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: e };
  }
}
function kF(n) {
  n = ht(n);
  const e = [];
  for (const t of n)
    e.push(t.shape);
  return wn(e);
}
function TF(n) {
  return "float32";
}
function Hx(n, e, t) {
  if ((e == null || t != null && t > 0) && (e = n.sourceLayer, t = n.nodeIndex), e.inboundNodes.length === 0)
    return [n];
  {
    const s = e.inboundNodes[t];
    if (s.inboundLayers.length === 0)
      return s.inputTensors;
    {
      const r = [];
      for (let o = 0; o < s.inboundLayers.length; o++) {
        const a = s.inputTensors[o], i = s.inboundLayers[o], l = s.nodeIndices[o], c = Hx(a, i, l);
        for (const u of c)
          r.indexOf(u) === -1 && r.push(u);
      }
      return r;
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class vl extends je {
  constructor(e) {
    if (super({
      dtype: e.dtype,
      name: e.name != null ? e.name : wh("input").toString()
    }), e.batchSize == null && (e.batchSize = null), e.sparse == null && (e.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = e.sparse, e.inputShape != null && e.batchInputShape != null)
      throw new z("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let t = e.batchInputShape;
    if (t == null) {
      if (e.inputShape == null)
        throw new z("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      t = [e.batchSize].concat(e.inputShape);
    } else if (e.batchSize != null)
      throw new z("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const s = e.dtype || "float32";
    this.batchInputShape = t, this.dtype = s, this.inputSpec = [{ shape: t }];
    const r = new Bs(this.dtype, this.batchInputShape, this, [], {}, this.name);
    r.nodeIndex = 0, r.tensorIndex = 0, new Ih({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: [r],
      outputTensors: [r],
      inputMasks: [null],
      outputMasks: [null],
      inputShapes: [t],
      outputShapes: [t]
    });
  }
  apply(e, t) {
    throw new z(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return {
      batchInputShape: this.batchInputShape,
      dtype: this.dtype,
      sparse: this.sparse,
      name: this.name
    };
  }
}
vl.className = "InputLayer";
re(vl);
function EF(n) {
  if (n.batchShape == null && n.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (n.batchShape != null && n.shape != null)
    throw new z("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let e = n.batchShape;
  n.shape != null && e == null && (e = [null].concat(n.shape));
  let t = n.dtype;
  return t == null && (t = "float32"), new vl({
    batchInputShape: e,
    name: n.name,
    dtype: t,
    sparse: n.sparse
  }).inboundNodes[0].outputTensors[0];
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function DF(n, e) {
  if (n.dtype == null || n.dtype === e.dtype)
    return e;
  try {
    return fe(e, n.dtype);
  } catch {
    throw new z(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`);
  }
}
class gr {
  /**
   * Constructor, optionally does copy-construction.
   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
   *   copy-construction will be performed.
   */
  constructor(e) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, e instanceof gr)
      for (const t in e.id2Value)
        this.id2Value[t] = e.id2Value[t], t in e.id2Mask && (this.id2Mask[t] = e.id2Mask[t]);
    else {
      if (e == null)
        return;
      for (const t of e)
        this.add(t.key, t.value);
    }
  }
  /**
   * Add a key-value pair to the FeedDict.
   *
   * @param key The key of the feed.
   * @param value The value of the tensor feed.
   * @param mask The value of the mask feed (optional).
   * @returns This `FeedDict`.
   * @throws ValueError: If the key `SymbolicTensor` already exists in the
   *   `FeedDict`.
   */
  add(e, t, s) {
    if (this.id2Value[e.id] == null)
      this.id2Value[e.id] = DF(e, t), this.name2Id[e.name] = e.id, s != null && (this.id2Mask[e.id] = s);
    else
      throw new z(`Duplicate key: name=${e.name}, id=${e.id}`);
    return this;
  }
  /**
   * Add a Feed to the FeedDict.
   * @param feed The new `Feed` to add.
   * @returns This `FeedDict`.
   */
  addFeed(e) {
    this.add(e.key, e.value);
  }
  /**
   * Probe whether a key already exists in the FeedDict.
   * @param key
   */
  hasKey(e) {
    return this.id2Value[e.id] != null;
  }
  /**
   * Get all the SymbolicTensor available in this FeedDict.
   */
  names() {
    return Object.keys(this.name2Id);
  }
  /**
   * Get the feed value for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed value.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getValue(e) {
    if (e instanceof Bs) {
      if (this.id2Value[e.id] == null)
        throw new z(`Nonexistent key: ${e.name}`);
      return this.id2Value[e.id];
    } else {
      const t = this.name2Id[e];
      if (t == null)
        throw new z(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Value[t];
    }
  }
  /**
   * Get the feed mask for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed mask.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getMask(e) {
    if (e instanceof Bs) {
      if (this.id2Value[e.id] == null)
        throw new z(`Nonexistent key: ${e.name}`);
      return this.id2Mask[e.id];
    } else {
      const t = this.name2Id[e];
      if (t == null)
        throw new z(`Feed dict has no SymbolicTensor name: ${e}`);
      return this.id2Mask[t];
    }
  }
  /** Dispose all mask Tensors held by this object. */
  disposeMasks() {
    this.id2Mask != null && Be(this.id2Mask);
  }
}
const wc = new Tx(), vc = new Tx();
function AF(n) {
  wc != null && wc.setMaxEntries(n), vc != null && vc.setMaxEntries(n);
}
function Ma(n, e, t, s) {
  const r = t == null ? !1 : t.training, o = Array.isArray(n), a = o ? n : [n], i = a.map((f) => f.name), l = [], c = e.names();
  for (const f of i)
    c.indexOf(f) !== -1 ? l.push(e.getValue(f)) : l.push(null);
  const u = i.join(",") + "|" + e.names().sort().join(",");
  let h = wc.get(u), d;
  if (h == null) {
    const f = RF(a, e);
    h = f.sorted, d = f.recipientCounts, wc.put(u, h), vc.put(u, d);
  }
  d = {}, r || Object.assign(d, vc.get(u));
  const p = new gr(e);
  for (let f = 0; f < h.length; ++f) {
    const m = h[f], g = m.sourceLayer;
    if (g instanceof vl)
      continue;
    const y = [], b = [], w = [];
    let x = !1;
    for (const E of m.inputs) {
      const D = p.getValue(E), O = p.getMask(E);
      y.push(D), b.push(O), O != null && (x = !0), r || (d[E.name]--, d[E.name] === 0 && !e.hasKey(E) && i.indexOf(E.name) === -1 && !D.isDisposed && E.sourceLayer.stateful !== !0 && w.push(D));
    }
    x && (t = t || {}, t.mask = b[0]);
    const v = ht(g.apply(y, t));
    let $ = null;
    g.supportsMasking && ($ = g.computeMask(y, b));
    const C = _F(m), S = Array.isArray(C) ? C : [C];
    for (let E = 0; E < S.length; ++E) {
      p.hasKey(S[E]) || p.add(S[E], v[E], Array.isArray($) ? $[0] : $);
      const D = i.indexOf(S[E].name);
      D !== -1 && (l[D] = v[E]);
    }
    r || Be(w);
  }
  return p.disposeMasks(), o ? l : l[0];
}
function RF(n, e) {
  N(n != null && n.length > 0, () => "Expected at least one fetch, got none");
  let t = [], s = {};
  if (n.length === 1) {
    const r = D0(n[0], e);
    t = r.sorted, s = r.recipientMap;
  } else {
    const r = /* @__PURE__ */ new Set();
    for (const o of n) {
      const { sorted: a, recipientMap: i } = D0(o, e);
      for (const l of a)
        r.has(l.name) || (t.push(l), r.add(l.name));
      for (const l in i)
        s[l] == null && (s[l] = /* @__PURE__ */ new Set()), i[l].forEach((c) => s[l].add(c));
    }
  }
  return {
    sorted: t,
    recipientCounts: FF(s)
  };
}
function FF(n) {
  const e = {};
  for (const t in n)
    e[t] = n[t].size;
  return e;
}
function D0(n, e) {
  const t = /* @__PURE__ */ new Set(), s = [], r = {};
  for (const i of e.names())
    t.add(i);
  const o = [], a = [];
  for (o.push(n); o.length > 0; ) {
    const i = o[o.length - 1];
    if (t.has(i.name)) {
      o.pop();
      continue;
    }
    const l = a[a.length - 1] === o.length - 1;
    if (i.inputs.length === 0 || l)
      o.pop(), s.push(i), t.add(i.name), l && a.pop();
    else {
      a.push(o.length - 1);
      for (const c of i.inputs)
        r[c.name] == null && (r[c.name] = /* @__PURE__ */ new Set()), r[c.name].add(i.name), !t.has(c.name) && o.push(c);
    }
  }
  return { sorted: s, recipientMap: r };
}
function _F(n) {
  let e;
  if (n.sourceLayer.inboundNodes.length === 1)
    e = n.sourceLayer.output;
  else {
    let t = null;
    for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s)
      for (const r of n.sourceLayer.inboundNodes[s].outputTensors)
        if (r.id === n.id) {
          t = s;
          break;
        }
    e = n.sourceLayer.getOutputAt(t);
  }
  return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OF = K();
OF.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, AF);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function cg(n, e) {
  return H(() => rn(Ie(F(n, n), e, !0)));
}
class Il extends ga {
  getConfig() {
    return {};
  }
}
class jx extends Il {
  constructor(e) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return H(() => {
      const t = cg(e, this.axis), s = _n(t, 0, this.maxValue);
      return F(e, be(s, ne(Ft(), t)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
jx.className = "MaxNorm";
re(jx);
class qx extends Il {
  constructor(e) {
    super(), this.defaultAxis = 0, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return H(() => be(e, ne(Ft(), cg(e, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
qx.className = "UnitNorm";
re(qx);
class Kx extends Il {
  apply(e) {
    return Ks(e);
  }
}
Kx.className = "NonNeg";
re(Kx);
class Xx extends Il {
  constructor(e) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = e.minValue != null ? e.minValue : this.defaultMinValue, this.maxValue = e.maxValue != null ? e.maxValue : this.defaultMaxValue, this.rate = e.rate != null ? e.rate : this.defaultRate, this.axis = e.axis != null ? e.axis : this.defaultAxis;
  }
  apply(e) {
    return H(() => {
      const t = cg(e, this.axis), s = ne(F(this.rate, _n(t, this.minValue, this.maxValue)), F(1 - this.rate, t));
      return F(e, be(s, ne(Ft(), t)));
    });
  }
  getConfig() {
    return {
      minValue: this.minValue,
      maxValue: this.maxValue,
      rate: this.rate,
      axis: this.axis
    };
  }
}
Xx.className = "MinMaxNorm";
re(Xx);
const A0 = {
  maxNorm: "MaxNorm",
  minMaxNorm: "MinMaxNorm",
  nonNeg: "NonNeg",
  unitNorm: "UnitNorm"
};
function Ot(n) {
  return Jm(n);
}
function R0(n, e = {}) {
  return gl(n, ns.getMap().classNameMap, e, "constraint");
}
function Lt(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const t = { className: n in A0 ? A0[n] : n, config: {} };
    return R0(t);
  } else return n instanceof Il ? n : R0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function jr(n) {
  if (n == null)
    return;
  const e = [], t = [], s = [];
  for (const r in n) {
    const o = n[r];
    if (typeof o != "number") {
      const a = o;
      e.push(a.data()), t.push(r), s.push(a);
    }
  }
  if (e.length > 0) {
    const r = await Promise.all(e);
    for (let o = 0; o < r.length; ++o)
      n[t[o]] = r[o][0];
    Be(s);
  }
}
function Yx(n) {
  if (n != null)
    for (const e in n) {
      const t = n[e];
      typeof t != "number" && t.dispose();
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var F0;
(function(n) {
  n[n.SILENT = 0] = "SILENT", n[n.VERBOSE = 1] = "VERBOSE";
})(F0 || (F0 = {}));
const LF = 125;
class Xa {
  constructor() {
    this.validationData = null;
  }
  setParams(e) {
    this.params = e;
  }
  async onEpochBegin(e, t) {
  }
  async onEpochEnd(e, t) {
  }
  async onBatchBegin(e, t) {
  }
  async onBatchEnd(e, t) {
  }
  async onTrainBegin(e) {
  }
  async onTrainEnd(e) {
  }
  // LayersModel needs to call Callback.setModel(), but cannot actually depend
  // on Callback because that creates a cyclic dependency.  Providing this no-op
  // method on BaseCallback breaks the cycle: this way LayersModel can depend on
  // BaseCallback but not on Callback.  The argument is typed as `Container`
  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
  // overrides this method and enforces that the argument is really a
  // LayersModel.
  setModel(e) {
  }
}
class PF {
  // TODO(cais): When the need arises, uncomment the following lines and
  // implement the queue for time values.
  // private deltaTBatch: number;
  // private deltaTsBatchBegin: Array<number>;
  // private deltaTsBatchEnd: Array<number>;
  /**
   * Constructor of CallbackList.
   * @param callbacks Array of `Callback` instances.
   * @param queueLength Queue length for keeping running statistics over
   *   callback execution time.
   */
  constructor(e, t = 10) {
    e == null && (e = []), this.callbacks = e, this.queueLength = t;
  }
  append(e) {
    this.callbacks.push(e);
  }
  setParams(e) {
    for (const t of this.callbacks)
      t.setParams(e);
  }
  setModel(e) {
    for (const t of this.callbacks)
      t.setModel(e);
  }
  /**
   * Called at the start of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochBegin(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks)
      await s.onEpochBegin(e, t);
  }
  /**
   * Called at the end of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochEnd(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks)
      await s.onEpochEnd(e, t);
  }
  /**
   * Called  right before processing a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchBegin(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks)
      await s.onBatchBegin(e, t);
  }
  /**
   * Called at the end of a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchEnd(e, t) {
    t == null && (t = {});
    for (const s of this.callbacks)
      await s.onBatchEnd(e, t);
  }
  /**
   * Called at the beginning of training.
   * @param logs Dictionary of logs.
   */
  async onTrainBegin(e) {
    e == null && (e = {});
    for (const t of this.callbacks)
      await t.onTrainBegin(e);
  }
  /**
   * Called at the end of training.
   * @param logs Dictionary of logs.
   */
  async onTrainEnd(e) {
    e == null && (e = {});
    for (const t of this.callbacks)
      await t.onTrainEnd(e);
  }
}
class zF extends Xa {
  constructor() {
    super();
  }
  async onEpochBegin(e) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(e, t) {
    t == null && (t = {});
    const s = t.size == null ? 0 : t.size;
    this.seen += s;
    for (const r in t) {
      const o = t[r];
      if (typeof o == "number")
        this.totals.hasOwnProperty(r) || (this.totals[r] = 0), this.totals[r] = this.totals[r] + o * s;
      else {
        let a;
        r in this.totals ? a = this.totals[r] : this.totals[r] = 0;
        const i = H(() => ne(this.totals[r], F(o, s)));
        this.totals[r] = i, a != null && a.dispose();
      }
    }
  }
  async onEpochEnd(e, t) {
    if (t != null)
      for (const s of this.params.metrics)
        this.totals[s] != null && (typeof this.totals[s] == "number" ? t[s] = this.totals[s] / this.seen : H(() => {
          const r = F(be(1, this.seen), this.totals[s]);
          t[s] = r, this.totals[s].dispose(), Yt(t[s]);
        }));
  }
}
class MF extends Xa {
  async onTrainBegin(e) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(e, t) {
    t == null && (t = {}), this.epoch.push(e);
    for (const s in t)
      this.history[s] == null && (this.history[s] = []), this.history[s].push(t[s]);
  }
  /**
   * Await the values of all losses and metrics.
   */
  async syncData() {
    const e = [], t = [], s = [];
    for (const o in this.history) {
      const a = this.history[o];
      for (let i = 0; i < a.length; ++i)
        if (typeof a[i] != "number") {
          const l = a[i];
          e.push(l.data()), t.push(o), s.push(i);
        }
    }
    const r = await Promise.all(e);
    for (let o = 0; o < r.length; ++o)
      this.history[t[o]][s[o]].dispose(), this.history[t[o]][s[o]] = r[o][0];
  }
}
class BF extends Xa {
  constructor(e, t) {
    if (super(), this.currentEpoch = 0, this.nowFunc = e.nowFunc, this.nextFrameFunc = e.nextFrameFunc || tx, this.yieldEvery = t || "auto", this.yieldEvery === "auto" && (this.yieldEvery = LF), this.yieldEvery === "never" && e.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    bd(this.yieldEvery) && (this.maybeWait = tF(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = e.onTrainBegin, this.trainEnd = e.onTrainEnd, this.epochBegin = e.onEpochBegin, this.epochEnd = e.onEpochEnd, this.batchBegin = e.onBatchBegin, this.batchEnd = e.onBatchEnd, this.yield = e.onYield;
  }
  async maybeWait(e, t, s) {
    const r = [];
    this.yield != null && (await jr(s), r.push(this.yield(e, t, s))), r.push(this.nextFrameFunc()), await Promise.all(r);
  }
  async onEpochBegin(e, t) {
    this.currentEpoch = e, this.epochBegin != null && (await jr(t), await this.epochBegin(e, t));
  }
  async onEpochEnd(e, t) {
    const s = [];
    this.epochEnd != null && (await jr(t), s.push(this.epochEnd(e, t))), this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onBatchBegin(e, t) {
    this.batchBegin != null && (await jr(t), await this.batchBegin(e, t));
  }
  async onBatchEnd(e, t) {
    const s = [];
    this.batchEnd != null && (await jr(t), s.push(this.batchEnd(e, t))), this.yieldEvery === "batch" ? s.push(this.nextFrameFunc()) : bd(this.yieldEvery) && s.push(this.maybeWait(this.currentEpoch, e, t)), await Promise.all(s);
  }
  async onTrainBegin(e) {
    this.trainBegin != null && (await jr(e), await this.trainBegin(e));
  }
  async onTrainEnd(e) {
    this.trainEnd != null && (await jr(e), await this.trainEnd(e));
  }
}
function Zx(n, e) {
  return n == null && (n = {}), n instanceof Xa ? [n] : Array.isArray(n) && n[0] instanceof Xa ? n : ht(n).map((s) => new BF(s, e));
}
class es {
  /**
   * Blocks public access to constructor.
   */
  constructor() {
  }
  /**
   * Register a tf.LayersModel.fit() callback constructor.
   *
   * The registered callback constructor will be used to instantiate
   * callbacks for every tf.LayersModel.fit() call afterwards.
   *
   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
   *   is to be reigstered.
   * @param callbackConstructor A no-arg constructor for `tf.Callback`.
   * @throws Error, if the same callbackConstructor has been registered before,
   *   either at the same or a different `verbosityLevel`.
   */
  static registerCallbackConstructor(e, t) {
    N(e >= 0 && Number.isInteger(e), () => `Verbosity level is expected to be an integer >= 0, but got ${e}`), es.checkForDuplicate(t), es.constructors[e] == null && (es.constructors[e] = []), es.constructors[e].push(t);
  }
  static checkForDuplicate(e) {
    for (const t in es.constructors)
      es.constructors[+t].forEach((r) => {
        if (r === e)
          throw new z("Duplicate callback constructor.");
      });
  }
  /**
   * Clear all registered callback constructors.
   */
  static clear() {
    es.constructors = {};
  }
  /**
   * Create callbacks using the registered callback constructors.
   *
   * Given `verbosityLevel`, all constructors registered at that level or above
   * will be called and the instantiated callbacks will be used.
   *
   * @param verbosityLevel: Level of verbosity.
   */
  static createCallbacks(e) {
    const t = [];
    for (const s in es.constructors) {
      const r = +s;
      e >= r && t.push(...es.constructors[r]);
    }
    return t.map((s) => new s());
  }
}
es.constructors = {};
function Jx(n, e, t, s, r, o, a, i, l) {
  const c = new MF(), u = [
    new zF(),
    ...es.createCallbacks(e)
  ];
  n != null && u.push(...n), u.push(c);
  const h = new PF(u);
  return h.setParams({
    epochs: t,
    initialEpoch: s,
    samples: r,
    steps: o,
    batchSize: a,
    verbose: e,
    doValidation: i,
    metrics: l
  }), { callbackList: h, history: c };
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function tr(n, e = {}, t = !1) {
  return gl(n, ns.getMap().classNameMap, e, "layer", t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ic(n, e) {
  return H(() => {
    n.dtype !== "float32" && (n = fe(n, "float32"));
    const t = Ie(xl(n), e, !0), s = ya(t.shape, Ft()), r = rn(cr(t, s));
    return be(n, r);
  });
}
function $h(n, e) {
  return H(() => vt(xl(ge(e, n)), -1));
}
function ug(n, e) {
  return H(() => vt(At(ge(e, n)), -1));
}
function hg(n, e) {
  return H(() => {
    const t = ge(n, e), s = _n(At(n), Ft(), Number.MAX_VALUE), r = At(be(t, s));
    return F(100, vt(r, -1));
  });
}
function VF(n, e) {
  return H(() => {
    const t = _n(e, Ft(), Number.MAX_VALUE), s = Hn(ne(1, t)), r = _n(n, Ft(), Number.MAX_VALUE), o = Hn(ne(1, r));
    return vt(xl(ge(s, o)), -1);
  });
}
function WF(n, e) {
  return H(() => {
    const t = cr(0, ge(1, F(n, e)));
    return vt(xl(t), -1);
  });
}
function UF(n, e) {
  return H(() => {
    const t = cr(0, ge(1, F(n, e)));
    return vt(t, -1);
  });
}
function GF(n, e) {
  return H(() => {
    const t = Ie(F(n, e), -1), s = Ss(F(ge(1, n), e), -1);
    return cr(0, ne(1, ge(s, t)));
  });
}
function HF(n, e) {
  return H(() => {
    const t = Math.log(2), s = ge(e, n), r = ge(ne(s, ba(F(-2, s))), t);
    return vt(r, -1);
  });
}
function Ya(n, e, t = !1) {
  return H(() => {
    if (t)
      e = ch(e);
    else {
      const s = Ie(e, e.shape.length - 1, !0);
      e = be(e, s);
    }
    return e = _n(e, Ft(), 1 - Ft()), gt(Ie(F(fe(n, "float32"), Hn(e)), e.shape.length - 1));
  });
}
function $c(n, e, t = !1) {
  return H(() => {
    const s = fe(cl(pF(n)), "int32");
    e = _n(e, Ft(), 1 - Ft());
    const r = e.shape, o = P(Af(s, r[r.length - 1]), r);
    return Ya(o, e, t);
  });
}
function jF(n, e) {
  if (!He(n.shape, e.shape))
    throw new z(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(e.shape)}`);
  return H(() => {
    const t = Ks(e), s = gt(At(e));
    return ne(ge(t, F(e, n)), eh(Gn(s)));
  });
}
function Ch(n, e) {
  return H(() => {
    let t;
    return t = _n(e, Ft(), 1 - Ft()), t = Hn(be(t, ge(1, t))), vt(jF(n, t), -1);
  });
}
function qF(n, e) {
  return H(() => {
    const t = _n(n, Ft(), 1), s = _n(e, Ft(), 1);
    return Ie(F(n, Hn(be(t, s))), -1);
  });
}
function KF(n, e) {
  return H(() => {
    const t = Hn(ne(Ft(), e));
    return vt(ge(e, F(n, t)), -1);
  });
}
function Qx(n, e) {
  return H(() => {
    const t = Ic(n, -1), s = Ic(e, -1), r = F(t, s);
    return gt(Ie(r, -1));
  });
}
const Cc = {
  meanSquaredError: $h,
  meanAbsoluteError: ug,
  meanAbsolutePercentageError: hg,
  meanSquaredLogarithmicError: VF,
  squaredHinge: WF,
  hinge: UF,
  categoricalHinge: GF,
  logcosh: HF,
  categoricalCrossentropy: Ya,
  sparseCategoricalCrossentropy: $c,
  binaryCrossentropy: Ch,
  kullbackLeiblerDivergence: qF,
  poisson: KF,
  cosineProximity: Qx
};
function Jh(n) {
  if (typeof n == "string") {
    if (n in Cc)
      return Cc[n];
    let e = `Unknown loss ${n}`;
    throw n.toLowerCase().includes("softmaxcrossentropy") && (e = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new z(e);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ew(n, e) {
  return H(() => {
    const t = F(0.5, jn(e)), s = yl(qn(e, t), n.dtype);
    return vt(ks(n, s), -1);
  });
}
function tw(n, e) {
  return H(() => yl(ks(ea(n, -1), ea(e, -1)), "float32"));
}
function XF(n, e) {
  return H(() => fe(Ie(js(ks(n, 1), ks(e, 1))), "float32"));
}
function YF(n, e) {
  return H(() => fe(Ie(js(ks(n, 0), ks(e, 1))), "float32"));
}
function ZF(n, e) {
  return H(() => {
    const t = XF(n, e), s = YF(n, e), r = ne(t, s);
    return fe(In(qn(r, 0), be(t, r), 0), "float32");
  });
}
function JF(n, e) {
  return Ch(n, e);
}
function QF(n, e) {
  return n.rank === e.rank && (n = An(n, [n.rank - 1])), e = ea(e, -1), e.dtype !== n.dtype && (e = fe(e, n.dtype)), fe(ks(n, e), "float32");
}
const e_ = $h, t_ = $h, n_ = ug, s_ = ug, r_ = hg, o_ = hg, nw = Ya, a_ = Qx, sw = $c, Sc = {
  binaryAccuracy: ew,
  categoricalAccuracy: tw,
  precision: ZF,
  categoricalCrossentropy: nw,
  sparseCategoricalCrossentropy: sw,
  mse: e_,
  MSE: t_,
  mae: n_,
  MAE: s_,
  mape: r_,
  MAPE: o_,
  cosine: a_
};
function i_(n) {
  if (typeof n == "string" && n in Sc)
    return Sc[n];
  if (typeof n != "string" && n != null)
    return n;
  throw new z(`Unknown metric ${n}`);
}
function Bl(n) {
  if (Ps(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == "string")
    return n;
  {
    let e;
    for (const t of Object.keys(Cc))
      if (Cc[t] === n) {
        e = t;
        break;
      }
    if (e !== void 0)
      return e;
    for (const t of Object.keys(Sc))
      if (Sc[t] === n) {
        e = t;
        break;
      }
    return e !== void 0 ? e : n.name;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function l_(n) {
  const e = {
    Adagrad: () => To.adagrad(0.01),
    Adadelta: () => To.adadelta(1, 0.95, Ft()),
    Adam: () => To.adam(1e-3, 0.9, 0.999, Ft()),
    Adamax: () => To.adamax(2e-3, 0.9, 0.999, Ft(), 0),
    RMSProp: () => To.rmsprop(1e-3, 0.9, 0, Ft()),
    SGD: () => To.sgd(0.01)
  };
  if (e.adagrad = e.Adagrad, e.adadelta = e.Adadelta, e.adam = e.Adam, e.adamax = e.Adamax, e.rmsprop = e.RMSProp, e.sgd = e.SGD, n in e)
    return e[n]();
  throw new z(`Unknown Optimizer ${n}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const _0 = 1 * 1024 * 1024;
function O0(n, e, t = !1) {
  if (n == null || typeof n != "object" || Object.getPrototypeOf(n) !== Object.prototype || !qd(n))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (t) {
    const s = JSON.stringify(n);
    s.length > _0 && console.warn(`User-defined metadata of model "${e}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${_0}.`);
  }
}
function qd(n) {
  if (n === null)
    return !0;
  if (typeof n == "object")
    if (Object.getPrototypeOf(n) === Object.prototype) {
      const e = Object.keys(n);
      for (const t of e)
        if (typeof t != "string" || !qd(n[t]))
          return !1;
      return !0;
    } else if (Array.isArray(n)) {
      for (const e of n)
        if (!qd(e))
          return !1;
      return !0;
    } else
      return !1;
  else {
    const e = typeof n;
    return e === "string" || e === "number" || e === "boolean";
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function c_(n, e, t, s = console.log) {
  const r = h_(n), o = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  r ? (e = e || 90, t = t || [0.32, 0.61, 0.89, 1]) : (e = e || 115, t = t || [0.24, 0.48, 0.7, 0.8, 1]), t[t.length - 1] <= 1 && (t = t.map((u) => Math.floor(e * u)));
  let a;
  if (!r) {
    o.push("Receives inputs"), a = [];
    for (const u in n.nodesByDepth)
      a.push(...n.nodesByDepth[u]);
  }
  s("_".repeat(e)), Nc(o, t, s), s("=".repeat(e));
  const i = n.layers;
  for (let u = 0; u < i.length; ++u)
    r ? d_(i[u], t, s) : p_(i[u], t, a, s), s((u === i.length - 1 ? "=" : "_").repeat(e));
  n.checkTrainableWeightsConsistency();
  const l = u_(n), c = xc(n.nonTrainableWeights);
  s(`Total params: ${l + c}`), s(`Trainable params: ${l}`), s(`Non-trainable params: ${c}`), s("_".repeat(e));
}
function u_(n) {
  let e;
  return n.collectedTrainableWeights != null ? e = xc(n.collectedTrainableWeights) : e = xc(n.trainableWeights), e;
}
function h_(n) {
  let e = !0;
  const t = [], s = [];
  for (const r in n.nodesByDepth)
    t.push(n.nodesByDepth[r]);
  for (const r of t) {
    if (r.length > 1 || r.length === 1 && r[0].inboundLayers.length > 1) {
      e = !1;
      break;
    }
    s.push(...r);
  }
  if (e)
    for (const r of n.layers) {
      let o = !1;
      for (const a of r.inboundNodes)
        if (s.indexOf(a) !== -1)
          if (o) {
            e = !1;
            break;
          } else
            o = !0;
      if (!e)
        break;
    }
  return e;
}
function Nc(n, e, t = console.log) {
  let s = "";
  for (let r = 0; r < n.length; ++r)
    r > 0 && (s = s.slice(0, s.length - 1) + " "), s += n[r], s = s.slice(0, e[r]), s += " ".repeat(e[r] - s.length);
  t(s);
}
function d_(n, e, t) {
  let s, r;
  try {
    r = n.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
  } catch {
    r = "multiple";
  }
  try {
    s = JSON.stringify(n.outputShape);
  } catch {
    s = "multiple";
  }
  const o = n.name, a = n.getClassName(), i = [
    `${o} (${a})`,
    r,
    s,
    n.countParams().toString()
  ];
  Nc(i, e, t);
}
function p_(n, e, t, s) {
  let r, o;
  try {
    o = n.inboundNodes.map((h) => JSON.stringify(h.inputShapes)).join(",");
  } catch {
    o = "multiple";
  }
  try {
    r = JSON.stringify(n.outputShape);
  } catch {
    r = "multiple";
  }
  const a = [];
  for (const h of n.inboundNodes)
    if (!(t != null && t.length > 0 && t.indexOf(h) === -1))
      for (let d = 0; d < h.inboundLayers.length; ++d) {
        const p = h.inboundLayers[d].name, f = h.nodeIndices[d], m = h.tensorIndices[d];
        a.push(`${p}[${f}][${m}]`);
      }
  const i = n.name, l = n.getClassName(), c = a.length === 0 ? "" : a[0], u = [
    `${i} (${l})`,
    o,
    r,
    n.countParams().toString(),
    c
  ];
  Nc(u, e, s);
  for (let h = 1; h < a.length; ++h)
    Nc(["", "", "", "", a[h]], e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function rw(n, e, t) {
  return (n === "inboundNodes" || n === "outputLayers" || n === "inputLayers") && e === 0 && typeof t == "string";
}
function Kd(n, e) {
  if (n === null)
    return null;
  if (typeof n == "string")
    return Zr(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const t = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const o = n[r];
      rw(e, r, o) ? t.push(o) : t.push(Kd(o, e));
    }
    return t;
  } else {
    const t = {};
    for (const s of Object.keys(n)) {
      const r = n[s];
      if (s === "name" && typeof r == "string")
        t[s] = r;
      else {
        const o = Zr(s);
        t[o] = Kd(r, o);
      }
    }
    return t;
  }
}
function Xd(n, e) {
  if (n == null)
    return null;
  if (typeof n == "string")
    return Xs(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const t = [], s = n.length;
    for (let r = 0; r < s; ++r) {
      const o = n[r];
      rw(e, r, o) ? t.push(o) : t.push(Xd(o, e));
    }
    return t;
  } else {
    const t = {};
    for (const s of Object.keys(n)) {
      const r = n[s], o = Xs(s);
      (s === "name" || s === "className") && typeof r == "string" ? t[o] = r : t[o] = Xd(r, s);
    }
    return t;
  }
}
/** @license See the LICENSE file. */
const ow = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class xs extends je {
  constructor(e) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = e.name, this.name == null) {
      const b = this.getClassName().toLowerCase();
      this.name = wh(b);
    }
    if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(e.inputs) ? this.inputs = e.inputs.slice() : this.inputs = [e.inputs], Array.isArray(e.outputs) ? this.outputs = e.outputs.slice() : this.outputs = [e.outputs], xr(this.inputs).length !== this.inputs.length)
      throw new z(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((b) => b.name)}`);
    xr(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((b) => b.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const b of this.outputs) {
      const w = b.sourceLayer, x = b.nodeIndex, v = b.tensorIndex;
      this.outputLayers.push(w), this.outputLayersNodeIndices.push(x), this.outputLayersTensorIndices.push(v);
    }
    for (const b of this.inputs) {
      const w = b.sourceLayer, x = b.nodeIndex, v = b.tensorIndex;
      Ps(x === 0, "input layer has >1 nodes"), Ps(v === 0, "input layer has >1 tensors"), this.inputLayers.push(w), this.inputLayersNodeIndices.push(x), this.inputLayersTensorIndices.push(v);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let b = 0; b < this.inputLayers.length; b++) {
      const w = this.inputLayers[b];
      if (!(w instanceof vl))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);
      this.inputNames.push(w.name), this.feedInputShapes.push(w.batchInputShape), this.feedInputNames.push(w.name);
    }
    for (const b of this.outputLayers)
      this.outputNames.push(b.name);
    this.internalInputShapes = this.inputs.map((b) => b.shape), this.internalOutputShapes = this.outputs.map((b) => b.shape);
    const t = {}, s = {}, r = {}, o = {}, a = {}, i = [], l = (b, w, x, v, $, C) => {
      (v == null || $ == null || C == null) && (v = b.sourceLayer, $ = b.nodeIndex, C = b.tensorIndex);
      const S = v.inboundNodes[$];
      if (x.indexOf(S) !== -1)
        throw new ls(`The tensor ${b.name} at layer "${v.name}" is part of a cycle.`);
      if (w.indexOf(S) !== -1)
        return;
      this.containerNodes.add(xs.nodeKey(v, $)), v.id in a || (a[v.id] = Object.keys(a).length), x.indexOf(S) === -1 && x.push(S);
      const E = S.inboundLayers.length;
      for (let D = 0; D < E; D++) {
        const O = S.inputTensors[D], V = S.inboundLayers[D], W = S.nodeIndices[D], U = S.tensorIndices[D];
        l(O, w, x, V, W, U);
      }
      for (w.push(S); x.indexOf(S) >= 0; )
        x.splice(x.indexOf(S), 1);
      i.push(S);
    }, c = [], u = [];
    for (const b of this.outputs)
      l(b, c, u);
    const h = i.slice().reverse();
    for (const b of h) {
      s[b.id] = b, b.id in t || (t[b.id] = 0);
      let w = t[b.id];
      const x = r[b.outboundLayer.id] == null ? 0 : r[b.outboundLayer.id];
      w = Math.max(w, x), r[b.outboundLayer.id] = w, o[b.outboundLayer.id] = b.outboundLayer, t[b.id] = w;
      for (let v = 0; v < b.inboundLayers.length; v++) {
        const $ = b.inboundLayers[v], C = b.nodeIndices[v], S = $.inboundNodes[C], E = t[S.id] == null ? 0 : t[S.id];
        t[S.id] = Math.max(w + 1, E), s[S.id] = S;
      }
    }
    const d = {};
    for (const b in t) {
      const w = t[b];
      w in d || (d[w] = []), d[w].push(s[b]);
    }
    const p = {};
    for (const b in r) {
      const w = r[b];
      w in p || (p[w] = []), p[w].push(o[b]);
    }
    let f = Object.keys(p).map((b) => parseInt(b, 10)).sort(Pl);
    this.layers = [];
    for (const b of f) {
      const w = p[b];
      w.sort((x, v) => {
        const $ = a[x.id], C = a[v.id];
        return $ < C ? -1 : $ > C ? 1 : 0;
      });
      for (const x of w)
        x instanceof xs && this.internalContainerRefs.push(x), this.layers.push(x);
    }
    this.layersByDepth = p, f = Object.keys(d).map((b) => parseInt(b, 10)).sort(Pl);
    const m = this.inputs.slice(), g = [];
    for (const b of f)
      for (const w of d[b]) {
        const x = w.outboundLayer;
        if (x != null) {
          for (const v of w.inputTensors)
            if (m.indexOf(v) === -1)
              throw new ls(`Graph disconnected: cannot obtain value for tensor ${v} at layer "${x.name}". The following previous layers were accessed without issue: ${g}`);
          for (const v of w.outputTensors)
            m.push(v);
          g.push(x.name);
        }
      }
    this.nodesByDepth = d;
    const y = this.layers.map((b) => b.name);
    for (const b of y) {
      const w = y.filter((x) => x === b).length;
      if (w !== 1)
        throw new ls(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(y));
    }
    this.outboundNodes = [], this.inboundNodes = [], new Ih({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: this.inputs,
      outputTensors: this.outputs,
      inputMasks: this.inputs.map((b) => null),
      outputMasks: this.outputs.map((b) => null),
      inputShapes: this.inputs.map((b) => b.shape),
      outputShapes: this.outputs.map((b) => b.shape)
    }), this.built = !0, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose a LayersModel's weights.
   *
   * This method decrease the reference count of the LayersModel object by 1.
   *
   * A LayersModel is reference-counted. Its reference count is incremented by 1
   * when it is first constructed and when it is used as a Layer of another
   * LayersModel.
   *
   * If the reference count of a LayersModel becomes 0, the `dispose` method of
   * all its constituent `Layer`s will be called.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * `dispose` method of its constituent `Layer`s will *not* be called.
   *
   * After a LayersModel is disposed, it cannot be used in calls such as
   * 'predict`, `evaluate` or `fit` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the LayersModel after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the LayersModel has
   *   already been disposed.
   */
  dispose() {
    this.assertNotDisposed();
    const e = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (const t of this.layers)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
      for (const t of this.internalContainerRefs)
        e.numDisposedVariables += t.dispose().numDisposedVariables;
    }
    return e.refCountAfterDispose = this._refCount, e;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(e) {
    this.layers.forEach((t) => {
      t._trainableWeights.forEach((s) => s.trainable = e);
    }), this.trainable_ = e;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new z("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let e = [];
    for (const t of this.layers)
      e = e.concat(t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    const e = [];
    for (const t of this.layers)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      const t = [];
      for (const s of this.layers)
        t.push(...s.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  /**
   * Loads all layer weights from a JSON object.
   *
   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
   *   TypeScript. The utility script at `scripts/pykeras.py` offers means
   *   to convert them into JSON strings compatible with this method.
   * Porting Note: TensorFlow.js Layers supports only loading by name currently.
   *
   * @param weights A JSON mapping weight names to weight values as nested
   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
   *   names to `tf.Tensor` objects.
   * @param strict Require that the provided weights exactly match those
   *   required by the container.  Default: `true`.  Passing `false` means that
   *   extra weights and missing weights will be silently ignored.
   */
  loadWeights(e, t = !0) {
    const s = {};
    let r = 0;
    for (const a of this.layers)
      for (const i of a.weights) {
        if (s[i.originalName] != null)
          throw new z(`Duplicate weight name: ${i.originalName}`);
        s[i.originalName] = i, r++;
      }
    const o = [];
    for (const a in e) {
      let i = a;
      if (s[a] == null) {
        const l = a.split("/");
        i = l.slice(0, -2).concat([l[l.length - 1]]).join("/");
      }
      if (s[i] != null)
        o.push([s[i], e[a]]);
      else if (t)
        throw new z(`Provided weight data has no target variable: ${a}`);
      delete s[i];
    }
    if (t) {
      const a = [];
      for (const i in s)
        a.push(i);
      if (a.length > 0)
        throw new z(`${a.length} of ${r} weights are not set: ${a}`);
    }
    lg(o);
  }
  /**
   * Util shared between different serialization methods.
   * @returns LayersModel config with Keras version information added.
   */
  updatedConfig() {
    const e = this.getConfig(), t = {};
    return t.className = this.getClassName(), t.config = e, t.kerasVersion = `tfjs-layers ${ow}`, t.backend = "TensorFlow.js", t;
  }
  /**
   * Returns a JSON string containing the network configuration.
   *
   * To load a network from a JSON save file, use
   * models.modelFromJSON(jsonString);
   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
   * @param returnString Whether the return value should be stringified
   *    (default: `true`).
   * @returns a JSON string if `returnString` (default), or a JSON object if
   *   `!returnString`.
   */
  // tslint:disable-next-line:no-any
  toJSON(e, t = !0) {
    const s = Xd(this.updatedConfig());
    return t ? JSON.stringify(s) : s;
  }
  /**
   * Call the model on new inputs.
   *
   * In this case `call` just reapplies all ops in the graph to the new inputs
   * (e.g. build a new computational graph from the provided inputs).
   *
   * @param inputs A tensor or list of tensors.
   * @param mask A mask or list of masks. A mask can be either a tensor or null
   *   (no mask).
   *
   * @return A tensor if there is a single output, or a list of tensors if there
   *   are more than one outputs.
   */
  call(e, t) {
    return H(() => {
      e = ht(e);
      const s = new gr();
      for (let r = 0; r < this.inputs.length; ++r)
        s.add(this.inputs[r], e[r]);
      return Ma(this.outputs, s, t);
    });
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(e, t) {
    return H(() => {
      e = ht(e);
      let s;
      return t == null ? s = uo(null, e.length) : s = ht(t), this.runInternalGraph(e, s)[1];
    });
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   */
  computeOutputShape(e) {
    const t = bc(e);
    if (t.length !== this.inputLayers.length)
      throw new z(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);
    const s = {};
    for (let i = 0; i < t.length; i++) {
      const l = this.inputLayers[i], c = t[i], u = l.name + "_0_0";
      s[u] = c;
    }
    const r = Object.keys(this.nodesByDepth).map((i) => parseInt(i, 10)).sort(Pl);
    if (r.length > 1)
      for (const i of r) {
        const l = this.nodesByDepth[i];
        for (const c of l) {
          const u = c.outboundLayer;
          if (this.inputLayers.map((m) => m.id).indexOf(u.id) !== -1)
            continue;
          const h = [];
          for (let m = 0; m < c.inboundLayers.length; m++) {
            const g = c.inboundLayers[m], y = c.nodeIndices[m], b = c.tensorIndices[m], w = `${g.name}_${y}_${b}`, x = s[w];
            h.push(x);
          }
          const d = u.computeOutputShape(wn(h)), p = bc(d), f = u.inboundNodes.indexOf(c);
          for (let m = 0; m < p.length; m++) {
            const g = `${u.name}_${f}_${m}`;
            s[g] = p[m];
          }
        }
      }
    const o = [], a = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const l = this.outputLayers[i], c = this.outputLayersNodeIndices[i], u = this.outputLayersTensorIndices[i], h = `${l.name}_${c}_${u}`;
      a.push(h);
    }
    for (let i = 0; i < a.length; i++) {
      const l = a[i];
      Ps(l in s), o.push(s[l]);
    }
    return wn(o);
  }
  /**
   * Computes output tensors for new inputs.
   *
   * Note:
   *   - Expects `inputs` to be a list (potentially with 1 element).
   *
   * @param inputs List of tensors
   * @param masks List of masks (tensors or null).
   * @return Three lists: outputTensors, outputMasks, outputShapes
   */
  runInternalGraph(e, t) {
    t == null && (t = uo(null, e.length));
    const s = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      const c = this.inputs[l], u = e[l], h = t[l];
      s[c.id] = [u, h];
    }
    const r = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(Pl);
    for (const l of r) {
      const c = this.nodesByDepth[l];
      for (const u of c) {
        const h = u.outboundLayer, d = u.inputTensors, p = u.outputTensors, f = new Array();
        for (const m of d)
          m.id in s && f.push(s[m.id]);
        if (f.length === d.length) {
          let m = {}, g, y, b, w;
          if (u.callArgs != null && (m = u.callArgs), f.length === 1) {
            const [x, v] = f[0];
            m.mask == null && (m.mask = v), b = ht(h.call(x, m)), w = ht(h.computeMask(x, v)), g = [x], y = [v];
          } else
            g = f.map((x) => x[0]), y = f.map((x) => x[1]), m.mask == null && (m.mask = y), b = ht(h.call(g, m)), w = ht(h.computeMask(g, y));
          if (h.activityRegularizer)
            throw new Pe("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let x = 0; x < p.length; ++x) {
            const v = p[x], $ = b[x], C = w[x];
            s[v.id] = [$, C];
          }
        }
      }
    }
    const o = [], a = [], i = [];
    for (const l of this.outputs) {
      Ps(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
      const [c, u] = s[l.id];
      i.push(c.shape), o.push(c), a.push(u);
    }
    return [o, a, i];
  }
  /**
   * Builds a map of internal node keys to node ordering.
   * Used in serializaion a node orderings may change as unused nodes are
   * dropped. Porting Note:  This helper method was pulled out of getConfig to
   * improve readability.
   * @param layers An array of Layers in the model.
   * @returns Map of Node Keys to index order within the layer.
   */
  buildNodeConversionMap(e) {
    const t = {};
    let s;
    for (const r of this.layers) {
      s = r instanceof xs ? 1 : 0;
      for (let o = 0; o < r.inboundNodes.length; o++) {
        const a = xs.nodeKey(r, o);
        this.containerNodes.has(a) && (t[a] = s, s += 1);
      }
    }
    return t;
  }
  /**
   * Retrieves a layer based on either its name (unique) or index.
   *
   * Indices are based on order of horizontal graph traversal (bottom-up).
   *
   * If both `name` and `index` are specified, `index` takes precedence.
   *
   * @param name Name of layer.
   * @param index Index of layer.
   * @returns A Layer instance.
   * @throws ValueError: In case of invalid layer name or index.
   *
   * @doc {
   *    heading: 'Layers',
   *    subheading: 'Classes',
   *    namespace: 'layers',
   *    subclasses: ['LayersModel']
   * }
   */
  getLayer(e, t) {
    if (t != null) {
      if (this.layers.length <= t)
        throw new z(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[t];
    } else if (e == null)
      throw new z("Provide either a layer name or layer index");
    for (const s of this.layers)
      if (s.name === e)
        return s;
    throw new z(`No such layer: ${e}`);
  }
  /**
   * Retrieves the Container's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return H(() => {
      const e = [];
      for (const t of this.layers)
        for (let s = 0; s < t.inboundNodes.length; ++s) {
          const r = xs.nodeKey(t, s);
          this.containerNodes.has(r) && e.push(...t.calculateLosses());
        }
      return e;
    });
  }
  getConfig() {
    const e = { name: this.name }, t = this.buildNodeConversionMap(this.layers), s = [];
    for (const a of this.layers) {
      const i = a.getClassName(), l = a.getConfig(), c = [];
      for (let h = 0; h < a.inboundNodes.length; h++) {
        const d = a.inboundNodes[h], p = xs.nodeKey(a, h);
        let f = {};
        if (this.containerNodes.has(p)) {
          if (d.callArgs)
            try {
              JSON.stringify(d.callArgs), f = d.callArgs;
            } catch {
              console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), f = {};
            }
          if (d.inboundLayers.length > 0) {
            const m = [];
            for (let g = 0; g < d.inboundLayers.length; g++) {
              const y = d.inboundLayers[g], b = d.nodeIndices[g], w = d.tensorIndices[g], x = xs.nodeKey(y, b);
              let v = t[x];
              v == null && (v = 0), m.push([y.name, v, w, f]);
            }
            c.push(m);
          }
        }
      }
      const u = {};
      u.name = a.name, u.className = i, u.config = l, u.inboundNodes = c, s.push(u);
    }
    e.layers = s;
    const r = [];
    for (let a = 0; a < this.inputLayers.length; a++) {
      const i = this.inputLayers[a], l = this.inputLayersNodeIndices[a], c = xs.nodeKey(i, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = t[c];
      u == null && (u = 0);
      const h = this.inputLayersTensorIndices[a];
      r.push([i.name, u, h]);
    }
    e.inputLayers = r;
    const o = [];
    for (let a = 0; a < this.outputLayers.length; a++) {
      const i = this.outputLayers[a], l = this.outputLayersNodeIndices[a], c = xs.nodeKey(i, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = t[c];
      u == null && (u = 0);
      const h = this.outputLayersTensorIndices[a];
      o.push([i.name, u, h]);
    }
    return e.outputLayers = o, e;
  }
  /**
   * Instantiates a LayersModel from its config (output of `get_config()`).
   * @param cls the class to create
   * @param config LayersModel config dictionary.
   * @param customObjects An optional dictionary of custom objects.
   * @param fastWeightInit Optional flag to use fast weight initialization
   *   during deserialization. This is applicable to cases in which
   *   the initialization will be immediately overwritten by loaded weight
   *   values. Default: `false`.
   * @returns A LayersModel instance.
   * @throws ValueError: In case of improperly formatted config dict.
   */
  /** @nocollapse */
  static fromConfig(e, t, s = {}, r = !1) {
    const o = {}, a = {};
    function i(g, y) {
      g.name in a ? a[g.name].push(y) : a[g.name] = [y];
    }
    function l(g, y) {
      const b = [];
      let w;
      for (const x of y) {
        const v = x[0], $ = x[1], C = x[2];
        if (w = x[3] == null ? {} : x[3], !(v in o)) {
          i(g, y);
          return;
        }
        const S = o[v];
        if (S.inboundNodes.length <= $) {
          i(g, y);
          return;
        }
        const E = S.inboundNodes[$];
        b.push(E.outputTensors[C]);
      }
      b.length > 0 && g.apply(wn(b), w);
    }
    function c(g) {
      const y = g.name, b = tr(g, t.customObjects != null ? t.customObjects : {});
      b.setFastWeightInitDuringBuild(r), o[y] = b, g.inboundNodes.forEach((x) => {
        if (!(x instanceof Array))
          throw new z(`Corrupted configuration, expected array for nodeData: ${x}`);
        i(b, x);
      });
    }
    const u = t.name, h = t.layers;
    for (const g of h)
      c(g);
    for (; !eF(a); )
      for (const g of h) {
        const y = o[g.name];
        if (y.name in a) {
          const b = a[y.name];
          delete a[y.name];
          for (const w of b)
            l(y, w);
        }
      }
    const d = [], p = [], f = t.inputLayers;
    for (const g of f) {
      const y = g[0], b = g[1], w = g[2];
      Ps(y in o);
      const v = o[y].inboundNodes[b].outputTensors;
      d.push(v[w]);
    }
    const m = t.outputLayers;
    for (const g of m) {
      const y = g[0], b = g[1], w = g[2];
      Ps(y in o);
      const v = o[y].inboundNodes[b].outputTensors;
      p.push(v[w]);
    }
    return new e({ inputs: d, outputs: p, name: u });
  }
  /**
   * Determine whether the container is stateful.
   *
   * Porting Note: this is the equivalent of the stateful @property of
   *   the Container class in PyKeras.
   */
  get stateful() {
    if (this._stateful)
      throw new z("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const e of this.layers)
      if (e.stateful)
        return !0;
    return !1;
  }
  /**
   * Reset the state of all stateful constituent layers (if any).
   *
   * Examples of stateful layers include RNN layers whose `stateful` property
   * is set as `true`.
   */
  resetStates() {
    H(() => {
      this.layers.forEach((e) => {
        e.stateful && e.resetStates();
      });
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function f_(n, e, t) {
  const s = e.length;
  if (n == null || Array.isArray(n) && n.length === 0)
    return e.map((r) => null);
  if (s === 1)
    return Array.isArray(n) && n.length === 1 ? n : typeof n == "object" && e[0] in n ? [n[e[0]]] : [n];
  if (Array.isArray(n)) {
    if (n.length !== s)
      throw new Error(`Provided ${t} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
    return n;
  } else if (typeof n == "object" && Object.keys(n).length > 0 && typeof n[Object.keys(n)[0]] == "object") {
    const r = [];
    return e.forEach((o) => {
      o in n ? r.push(n[o]) : r.push(null);
    }), r;
  } else
    throw new Error(`The model has multiple (${s}) outputs, so ${t} must be either an array with ${s} elements or an object with ${e} keys. Provided ${t} not understood: ${JSON.stringify(n)}`);
}
function aw(n, e) {
  return f_(n, e, "classWeight");
}
async function iw(n, e, t, s) {
  if (t != null) {
    const r = H(() => {
      if (n.shape.length === 1)
        return Qs(n);
      if (n.shape.length === 2) {
        if (n.shape[1] > 1)
          return ea(n, 1);
        if (n.shape[1] === 1)
          return P(n, [n.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), o = Array.from(await r.data());
    Be(r);
    const a = [];
    return o.forEach((i) => {
      if (t[i] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);
      a.push(t[i]);
    }), Ct(a, "float32");
  } else
    return null;
}
function m_(n, e) {
  return F(n, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const g_ = 32;
function lw(n, e) {
  let t, s;
  const r = e;
  t = r.xs, s = r.ys, N(t != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`);
  const o = L0("input", n.inputNames, t), a = L0("output", n.outputNames, s), i = o[0].shape[0];
  N(o.length === n.inputs.length, () => `LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`), N(a.length === n.outputs.length, () => `LayersModel has ${n.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);
  for (let l = 0; l < o.length; l++)
    N(o[l].shape[0] === i, () => `Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);
  for (let l = 0; l < a.length; l++)
    N(a[l].shape[0] === i, () => `Batch size mismatch: output ${n.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);
  return { xs: o, ys: a };
}
function L0(n, e, t) {
  if (t instanceof Je)
    return [t];
  if (Array.isArray(t))
    return N(t.length === e.length, () => `Received an array of ${t.length} Tensors, but expected ${e.length} to match the ${n} keys ${e}.`), t;
  {
    const s = [];
    for (const r of e) {
      if (t[r] == null)
        throw new z(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);
      s.push(t[r]);
    }
    return s;
  }
}
function y_(n) {
  if (n.length === 3)
    throw new Pe("Validation with sample weights is not implemented yet.");
  return { xs: n[0], ys: n[1] };
}
async function b_(n, e, t) {
  const s = t.batchesPerEpoch != null;
  if (N(n.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), N(t != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), N(t.epochs != null && t.epochs > 0 && Number.isInteger(t.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${t.epochs}`), N(!s || t.batchesPerEpoch > 0 && Number.isInteger(t.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${t.batchesPerEpoch}`), N(
    // tslint:disable-next-line:no-any
    t.validationSplit == null,
    () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
  ), n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  try {
    const r = t.validationData != null;
    let o, a;
    if (r)
      if (P0(t.validationData))
        N(t.validationBatches == null || t.validationBatches > 0 && Number.isInteger(t.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${t.validationBatches}`);
      else {
        const g = y_(t.validationData);
        o = g.xs, a = g.ys;
      }
    const i = n.makeTrainFunction(), l = n.getDedupedMetricsNames();
    let c;
    r ? c = l.slice().concat(l.map((g) => "val_" + g)) : c = l.slice();
    const u = Zx(t.callbacks, t.yieldEvery), h = t.verbose == null ? 1 : t.verbose, { callbackList: d, history: p } = Jx(
      u,
      h,
      t.epochs,
      null,
      null,
      x_(e, t),
      null,
      // Batch size determined by the dataset itself.
      r,
      c
    );
    d.setModel(n), n.history = p, await d.onTrainBegin(), n.stopTraining_ = !1;
    let f = t.initialEpoch == null ? 0 : t.initialEpoch, m = await e.iterator();
    for (; f < t.epochs; ) {
      const g = {};
      await d.onEpochBegin(f);
      let y = 0, b = 0;
      for (s || (m = await e.iterator()); !s || y < t.batchesPerEpoch; ) {
        const w = await m.next();
        if (s && w.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${t.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${t.batchesPerEpoch * t.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (w.value != null) {
          const { xs: x, ys: v } = lw(n, w.value), $ = {};
          $.batch = b, $.size = x[0].shape[0], await d.onBatchBegin(b, $);
          const C = [];
          if (t.classWeight != null) {
            const D = aw(t.classWeight, n.outputNames);
            for (let O = 0; O < D.length; ++O)
              C.push(await iw(v[O], null, D[O]));
          }
          const S = x.concat(v).concat(C), E = i(S);
          Be(S);
          for (let D = 0; D < l.length; ++D) {
            const O = l[D], V = E[D];
            $[O] = V, Yt(V);
          }
          await d.onBatchEnd(b, $), Yx($), b++, y++;
        }
        if (s ? y >= t.batchesPerEpoch : w.done) {
          if (r) {
            let x;
            P0(t.validationData) ? x = ht(await n.evaluateDataset(t.validationData, { batches: t.validationBatches })) : x = ht(n.evaluate(o, a, {
              batchSize: t.validationBatchSize == null ? g_ : t.validationBatchSize,
              verbose: 0
            }));
            for (let v = 0; v < n.metricsNames.length; ++v)
              g[`val_${n.metricsNames[v]}`] = x[v];
          }
          break;
        }
        if (n.stopTraining_)
          break;
      }
      if (await d.onEpochEnd(f, g), f++, n.stopTraining_)
        break;
    }
    return await d.onTrainEnd(), await n.history.syncData(), n.history;
  } finally {
    n.isTraining = !1;
  }
}
function x_(n, e) {
  let t = null;
  return e.batchesPerEpoch != null ? t = e.batchesPerEpoch : Number.isFinite(n.size) && (t = n.size), t;
}
function P0(n) {
  return typeof n.iterator == "function";
}
function w_(n) {
  return typeof n.next == "function";
}
async function v_(n, e, t) {
  t = t || {};
  const s = t.batches != null, r = n.testFunction;
  let o = [];
  if (t.verbose > 0)
    throw new Pe("Verbose mode is not implemented yet.");
  N(!s || t.batches > 0 && Number.isInteger(t.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(t.batches)}`);
  const a = w_(e) ? e : await e.iterator();
  let i = 0, l = 0;
  for (; !s || l < t.batches; ) {
    const c = await a.next();
    if (o = H(() => {
      if (c.value) {
        const { xs: u, ys: h } = lw(n, c.value), d = u.concat(h), p = H(() => r(d));
        if (Be(d), l === 0)
          for (let m = 0; m < p.length; ++m)
            o.push(Te(0));
        const f = d[0].shape[0];
        for (let m = 0; m < p.length; ++m) {
          const g = p[m], y = o[m];
          o[m] = H(() => ne(o[m], F(f, g))), l > 0 && Be(y);
        }
        Be(p), i += f, ++l;
      }
      return o;
    }), c.done) {
      s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${t.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let c = 0; c < o.length; ++c) {
    const u = o[c];
    o[c] = be(o[c], i), Be(u);
  }
  return wn(o);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Yd(n) {
  N(n > 0 && Number.isInteger(n), () => `batchSize is required to be a positive integer, but got ${n}`);
}
function Ba(n, e, t) {
  return n == null ? [null] : Array.isArray(n) ? n.map((s) => ro(s, e, t - e)) : ro(n, e, t - e);
}
function dg(n, e) {
  return H(() => n == null ? null : Array.isArray(n) ? n.map((t) => dg(t, e)) : Lx(n, e.dtype === "int32" ? e : fe(e, "int32")));
}
function Zd(n, e) {
  const t = [];
  let s = 0, r = null;
  for (; s < n; )
    r = s + e, r >= n && (r = n), t.push([s, r]), s = r;
  return t;
}
async function I_(n, e, t, s, r, o, a, i, l, c, u, h, d, p, f) {
  r == null && (r = 32), o == null && (o = 1), u == null && (u = !0), d == null && (d = 0);
  let m = !1;
  l != null && c != null && (m = !0);
  const g = n.checkNumSamples(t, r, p, "steps_per_epoch");
  let y;
  g != null && (y = Es(0, g)), a == null && (a = 1);
  const { callbackList: b, history: w } = Jx(i, a, o, d, g, p, r, m, h);
  b.setModel(n), n.history = w, await b.onTrainBegin(), n.stopTraining_ = !1;
  for (let x = d; x < o; ++x) {
    await b.onEpochBegin(x);
    const v = {};
    {
      if (u === "batch")
        throw new Pe("batch shuffling is not implemneted yet");
      u && G$(y);
      const $ = Ct(y), C = Zd(g, r);
      for (let S = 0; S < C.length; ++S) {
        const E = {};
        if (await b.onBatchBegin(S, E), H(() => {
          const D = C[S][0], O = C[S][1], V = ro($, D, O - D);
          E.batch = S, E.size = O - D;
          const W = dg(t, V), U = e(W);
          for (let j = 0; j < s.length; ++j) {
            const q = s[j], Y = U[j];
            E[q] = Y, Yt(Y);
          }
          if (S === C.length - 1 && m) {
            const j = n.testLoop(l, c, r);
            for (let q = 0; q < s.length; ++q) {
              const Y = s[q], X = j[q];
              Yt(X), v["val_" + Y] = X;
            }
          }
        }), await b.onBatchEnd(S, E), Yx(E), n.stopTraining_)
          break;
      }
      $.dispose();
    }
    if (await b.onEpochEnd(x, v), n.stopTraining_)
      break;
  }
  return await b.onTrainEnd(), await n.history.syncData(), n.history;
}
async function $_(n, e, t, s = {}) {
  if (n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  let r, o, a, i, l, c, u, h, d;
  try {
    const p = s.batchSize == null ? 32 : s.batchSize;
    Yd(p);
    const m = await n.standardizeUserData(e, t, s.sampleWeight, s.classWeight, !1, p);
    r = m[0], o = m[1], d = m[2];
    let g = !1, y;
    if (s.validationData != null && s.validationData.length > 0) {
      if (g = !0, s.validationData.length === 2)
        l = s.validationData[0], c = s.validationData[1];
      else throw s.validationData.length === 3 ? new Pe("validationData including sample weights is not supported yet.") : new z(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
      const D = await n.standardizeUserData(
        l,
        c,
        null,
        /** Unused sample weights. */
        null,
        !0,
        p
      );
      u = D[0], h = D[1], y = u.concat(h);
    } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
      g = !0;
      const E = Math.floor(r[0].shape[0] * (1 - s.validationSplit)), D = r[0].shape[0];
      u = Ba(r, E, D), a = r, r = Ba(r, 0, E), h = Ba(o, E, D), i = o, o = Ba(o, 0, E), y = u.concat(h);
    } else s.validationSteps != null && (g = !0);
    const b = r.concat(o).concat(d);
    n.checkTrainableWeightsConsistency();
    const w = n.makeTrainFunction(), x = n.getDedupedMetricsNames();
    let v, $;
    g ? (n.makeTestFunction(), v = n.testFunction, $ = x.slice().concat(x.map((E) => "val_" + E))) : (v = null, y = [], $ = x.slice());
    const C = Zx(s.callbacks, s.yieldEvery);
    return await I_(n, w, b, x, p, s.epochs, s.verbose, C, v, y, s.shuffle, $, s.initialEpoch, null, null);
  } finally {
    n.isTraining = !1, Is(r, e), Is(o, t), Is(a, e), Is(i, t), Is(u, l), Is(h, c), d != null && Be(d);
  }
}
function cw(n) {
  const e = [];
  n instanceof Je && (n = [n]);
  for (let t = 0; t < n.length; ++t) {
    const s = n[t];
    if (s.rank === 1)
      e.push(bl(s, 1));
    else {
      if (s.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      e.push(s);
    }
  }
  return e;
}
function Is(n, e) {
  if (n == null)
    return;
  const t = [];
  if (e instanceof Je)
    t.push(e.id);
  else if (Array.isArray(e))
    e.forEach((r) => t.push(r.id));
  else if (e != null)
    for (const r in e) {
      const o = e[r];
      t.push(o.id);
    }
  const s = [];
  if (n instanceof Je)
    t.indexOf(n.id) === -1 && s.push(n);
  else if (Array.isArray(n))
    n.forEach((r) => {
      t.indexOf(r.id) === -1 && s.push(r);
    });
  else if (n != null)
    for (const r in n) {
      const o = n[r];
      t.indexOf(o.id) === -1 && s.push(o);
    }
  s.forEach((r) => {
    r.isDisposed || r.dispose();
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function C_(n) {
  return n instanceof Je;
}
function Jd(n) {
  return Array.isArray(n);
}
function z0(n) {
  return !C_(n) && !Jd(n);
}
function M0(n, e, t, s = !0, r = "") {
  if (e == null || e.length === 0) {
    if (n != null) {
      let a = !1;
      if (Jd(n) && n.length > 0)
        a = !0;
      else if (z0(n)) {
        for (const i in n)
          if (n.hasOwnProperty(i)) {
            a = !0;
            break;
          }
      } else
        a = !0;
      if (a)
        throw new z(`Error when checking model ${r} expected no data, but got ${n}`);
    }
    return [];
  }
  if (n == null)
    return e.map((a) => null);
  let o;
  if (z0(n)) {
    n = n, o = [];
    for (const a of e) {
      if (n[a] == null)
        throw new z(`No data provided for "${a}". Need data for each key in: ${e}`);
      o.push(n[a]);
    }
  } else if (Jd(n)) {
    if (n = n, n.length !== e.length)
      throw new z(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);
    o = n;
  } else {
    if (n = n, e.length > 1)
      throw new z(`The model ${r} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);
    o = [n];
  }
  if (o = cw(o), t != null)
    for (let a = 0; a < e.length; ++a) {
      if (t[a] == null)
        continue;
      const i = o[a];
      if (i.shape.length !== t[a].length)
        throw new z(`Error when checking ${r}: expected ${e[a]} to have ${t[a].length} dimension(s). but got array with shape ${i.shape}`);
      for (let l = 0; l < t[a].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = i.shape[l], u = t[a][l];
        if (u != null && u >= 0 && c !== u)
          throw new z(`${r} expected a batch of elements where each example has shape [${t[a].slice(1, t[a].length)}] (i.e.,tensor shape [*,${t[a].slice(1, t[a].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1, i.shape.length)}] (tensor shape [${i.shape}])`);
      }
    }
  return o;
}
function S_(n, e, t) {
  const s = xr(n.map((o) => o.shape[0]));
  s.sort();
  const r = xr(e.map((o) => o.shape[0]));
  if (r.sort(), s.length > 1)
    throw new z(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((o) => o.shape))}`);
  if (r.length > 1)
    throw new z(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((o) => o.shape))}`);
  if (s.length > 0 && r.length > 0 && !He(s, r))
    throw new z(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`);
}
function N_(n, e, t) {
  const s = [
    $h,
    Ch,
    Ya
  ];
  for (let r = 0; r < n.length; ++r) {
    const o = n[r], a = e[r], i = t[r];
    if (a != null) {
      if (a === Ya && o.shape[o.shape.length - 1] === 1)
        throw new z(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (s.indexOf(a) !== -1) {
        const l = o.shape.slice(1), c = i.slice(1);
        for (let u = 0; u < l.length; ++u) {
          const h = l[u], d = c[u];
          if (d != null && h !== d)
            throw new z(`A target Tensor with shape ${o.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function B0(n, e, t, s = !0, r = "") {
  let o;
  if (Array.isArray(n)) {
    if (n.length !== e.length)
      throw new z(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${n.length} Tensors(s).`);
    o = n;
  } else {
    if (e.length > 1)
      throw new z(`The model expects ${e.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);
    o = [n];
  }
  if (t != null)
    for (let a = 0; a < e.length; ++a) {
      if (t[a] == null)
        continue;
      const i = o[a];
      if (i.shape.length !== t[a].length)
        throw new z(`Error when checking ${r}: expected ${e[a]} to have ${t[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);
      for (let l = 0; l < t[a].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = i.shape[l], u = t[a][l];
        if (u != null && u !== c)
          throw new z(`Error when checking ${r}: expected ${e[a]} to have shape ${JSON.stringify(t[a])} but got array with shape ${JSON.stringify(i.shape)}.`);
      }
    }
}
function k_(n, e) {
  if (n == null || Array.isArray(n) && n.length === 0)
    return e.map((s) => []);
  let t;
  if (typeof n == "string" || typeof n == "function")
    t = [n];
  else if (Array.isArray(n) || typeof n == "object")
    t = n;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);
  if (Array.isArray(t))
    return e.map((s) => t);
  {
    const s = [];
    for (const r of e) {
      let o = t.hasOwnProperty(r) ? t[r] : [];
      Array.isArray(o) || (o = [o]), s.push(o);
    }
    return s;
  }
}
const T_ = "layers-model";
class Ho extends xs {
  constructor(e) {
    super(e), this.isTraining = !1;
  }
  /**
   * Print a text summary of the model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - If the model has non-sequential-like topology, the inputs each layer
   *   receives
   * - The total number of trainable and non-trainable parameters of the model.
   *
   * ```js
   * const input1 = tf.input({shape: [10]});
   * const input2 = tf.input({shape: [20]});
   * const dense1 = tf.layers.dense({units: 4}).apply(input1);
   * const dense2 = tf.layers.dense({units: 8}).apply(input2);
   * const concat = tf.layers.concatenate().apply([dense1, dense2]);
   * const output =
   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
   *
   * const model = tf.model({inputs: [input1, input2], outputs: output});
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(e, t, s = console.log) {
    if (!this.built)
      throw new z("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    c_(this, e, t, s);
  }
  /**
   * Configures and prepares the model for training and evaluation.  Compiling
   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
   * or `evaluate` on an un-compiled model will throw an error.
   *
   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
   * metrics to be used for fitting and evaluating this model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  compile(e) {
    if (e.loss == null && (e.loss = []), this.loss = e.loss, typeof e.optimizer == "string")
      this.optimizer_ = l_(e.optimizer), this.isOptimizerOwned = !0;
    else {
      if (!(e.optimizer instanceof Mr))
        throw new z("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = e.optimizer, this.isOptimizerOwned = !1;
    }
    let t = [];
    if (!Array.isArray(e.loss) && typeof e.loss != "string" && typeof e.loss != "function") {
      e.loss = e.loss;
      for (const a in e.loss)
        if (this.outputNames.indexOf(a) === -1)
          throw new z(`Unknown entry in loss dictionary: "${a}". Only expected the following keys: ${this.outputNames}`);
      for (const a of this.outputNames)
        e.loss[a] == null && console.warn(`Output "${a}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${a} during training`), t.push(Jh(e.loss[a]));
    } else if (Array.isArray(e.loss)) {
      if (e.loss.length !== this.outputs.length)
        throw new z(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);
      t = e.loss.map((i) => Jh(i));
    } else {
      const a = Jh(e.loss);
      this.outputs.forEach((i) => {
        t.push(a);
      });
    }
    this.lossFunctions = t, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let a = 0; a < this.outputs.length; ++a) {
      const i = this.internalOutputShapes[a], l = this.outputNames[a];
      this.feedOutputNames.push(l), this.feedOutputShapes.push(i), this.feedLossFns.push(this.lossFunctions[a]);
    }
    const s = [];
    this.metrics = e.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], so("loss", () => {
      for (let a = 0; a < this.outputs.length; ++a) {
        if (s.indexOf(a) !== -1)
          continue;
        const i = this.lossFunctions[a];
        this.outputs.length > 1 && (this.metricsTensors.push([i, a]), this.metricsNames.push(this.outputNames[a] + "_loss"));
      }
    });
    const r = k_(e.metrics, this.outputNames), o = (a, i, l) => {
      this.outputNames.length > 1 && (i = this.outputNames[a] + "_" + i), this.metricsNames.push(i), this.metricsTensors.push([l, a]);
    };
    so("metric", () => {
      for (let a = 0; a < this.outputs.length; ++a) {
        if (s.indexOf(a) !== -1)
          continue;
        const i = r[a];
        ((c) => {
          const u = "";
          let h, d, p;
          for (const f of c) {
            if (typeof f == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(f) !== -1) {
              const g = this.internalOutputShapes[a];
              g[g.length - 1] === 1 || this.lossFunctions[a] === Ch ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = ew : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = JF) : this.lossFunctions[a] === $c ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = QF : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = sw) : ["accuracy", "acc"].indexOf(f) !== -1 ? d = tw : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = nw);
              let y;
              ["accuracy", "acc"].indexOf(f) !== -1 ? y = "acc" : ["crossentropy", "ce"].indexOf(f) !== -1 && (y = "ce"), p = d, h = u + y;
            } else
              p = i_(f), h = u + Bl(f);
            let m;
            so(h, () => {
              m = p;
            }), o(a, h, m);
          }
        })(i);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  /**
   * Check trainable weights count consistency.
   *
   * This will raise a warning if `this.trainableWeights` and
   * `this.collectedTrainableWeights` are inconsistent (i.e., have different
   * numbers of parameters).
   * Inconsistency will typically arise when one modifies `model.trainable`
   * without calling `model.compile()` again.
   */
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(
   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateArgs`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(e, t, s = {}) {
    const r = s.batchSize == null ? 32 : s.batchSize;
    Yd(r);
    const a = this.standardizeUserDataXY(e, t, !0, r);
    try {
      const i = a[0].concat(a[1]);
      this.makeTestFunction();
      const l = this.testFunction, c = this.testLoop(l, i, r, s.verbose, s.steps);
      return wn(c);
    } finally {
      Is(a[0], e), Is(a[1], t);
    }
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(e, t) {
    return this.makeTestFunction(), v_(this, e, t);
  }
  /**
   * Get number of samples provided for training, evaluation or prediction.
   *
   * @param ins Input `tf.Tensor`.
   * @param batchSize Integer batch size, optional.
   * @param steps Total number of steps (batches of samples) before
   * declaring loop finished. Optional.
   * @param stepsName The public API's parameter name for `steps`.
   * @returns Number of samples provided.
   */
  checkNumSamples(e, t, s, r = "steps") {
    let o;
    if (s != null) {
      if (o = null, t != null)
        throw new z(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`);
    } else if (e != null)
      Array.isArray(e) ? o = e[0].shape[0] : o = e.shape[0];
    else
      throw new z(`Either the input data should have a defined shape, or ${r} shoud be specified.`);
    return o;
  }
  /**
   * Execute internal tensors of the model with input data feed.
   * @param inputs Input data feed. Must match the inputs of the model.
   * @param outputs Names of the output tensors to be fetched. Must match
   *   names of the SymbolicTensors that belong to the graph.
   * @returns Fetched values for `outputs`.
   */
  execute(e, t) {
    if (Array.isArray(t) && t.length === 0)
      throw new z("`outputs` is an empty Array, which is not allowed.");
    const s = Array.isArray(t), r = s ? t : [t], o = this.retrieveSymbolicTensors(r), a = new gr();
    if (e instanceof Je && (e = [e]), Array.isArray(e)) {
      if (e.length !== this.inputs.length)
        throw new z(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let l = 0; l < this.inputs.length; ++l)
        a.add(this.inputs[l], e[l]);
    } else
      for (const l of this.inputs) {
        const c = e[l.name];
        if (c == null)
          throw new z(`No value is provided for the model's input ${l.name}`);
        a.add(l, c);
      }
    const i = Ma(o, a);
    return s ? i : i[0];
  }
  /**
   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
   */
  retrieveSymbolicTensors(e) {
    const t = uo(null, e.length);
    let s = e.length;
    for (const r of this.layers) {
      const o = Array.isArray(r.output) ? r.output : [r.output], a = o.map((i) => i.name);
      for (let i = 0; i < e.length; ++i) {
        const l = a.indexOf(e[i]);
        if (l !== -1 && (t[i] = o[l], s--), s === 0)
          break;
      }
      if (s === 0)
        break;
    }
    if (s > 0) {
      const r = [];
      throw t.forEach((o, a) => {
        o == null && r.push(e[a]);
      }), new z(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(r)}`);
    }
    return t;
  }
  /**
   * Helper method to loop over some data in batches.
   *
   * Porting Note: Not using the functional approach in the Python equivalent
   *   due to the imperative backend.
   * Porting Note: Does not support step mode currently.
   *
   * @param ins: input data
   * @param batchSize: integer batch size.
   * @param verbose: verbosity model
   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
   *   `tf.Tensor` (if multipe outputs).
   */
  predictLoop(e, t = 32, s = !1) {
    return H(() => {
      const r = this.checkNumSamples(e);
      if (s)
        throw new Pe("Verbose predictLoop() is not implemented yet.");
      const o = Zd(r, t), a = this.outputs.map((i) => []);
      for (let i = 0; i < o.length; ++i)
        H(() => {
          const c = o[i][0], u = o[i][1], h = Ba(e, c, u), d = [];
          if (Array.isArray(h))
            for (let f = 0; f < h.length; ++f)
              d.push({ key: this.inputs[f], value: h[f] });
          else
            d.push({ key: this.inputs[0], value: h });
          const p = new gr(d);
          return Ma(this.outputs, p);
        }).forEach((c, u) => a[u].push(c));
      return wn(a.map((i) => ft(i, 0)));
    });
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param args A `ModelPredictArgs` object containing optional fields.
   *
   * @return Prediction results as a `tf.Tensor`(s).
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(e, t = {}) {
    const s = cw(e);
    B0(s, this.inputNames, this.feedInputShapes, !1);
    try {
      const r = t.batchSize == null ? 32 : t.batchSize;
      return Yd(r), this.predictLoop(s, r);
    } finally {
      Is(s, e);
    }
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predictOnBatch(tf.ones([8, 10])).print();
   * ```
   * @param x: Input samples, as a Tensor (for models with exactly one
   *   input) or an array of Tensors (for models with more than one input).
   * @return Tensor(s) of predictions
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predictOnBatch(e) {
    B0(e, this.inputNames, this.feedInputShapes, !0);
    const t = (Array.isArray(e) ? e[0] : e).shape[0];
    return this.predictLoop(e, t);
  }
  standardizeUserDataXY(e, t, s = !0, r) {
    if (this.optimizer_ == null)
      throw new ls("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const o = [];
    for (let a = 0; a < this.feedOutputShapes.length; ++a) {
      const i = this.feedOutputShapes[a];
      this.feedLossFns[a] === $c ? o.push(i.slice(0, i.length - 1).concat([1])) : o.push(i);
    }
    if (e = M0(e, this.feedInputNames, this.feedInputShapes, !1, "input"), t = M0(t, this.feedOutputNames, o, !1, "target"), S_(e, t), N_(t, this.feedLossFns, this.feedOutputShapes), this.stateful && r != null && r > 0 && e[0].shape[0] % r !== 0)
      throw new z(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);
    return [e, t];
  }
  async standardizeUserData(e, t, s, r, o = !0, a) {
    const [i, l] = this.standardizeUserDataXY(e, t, o, a);
    if (s != null)
      throw new Error("sample weight is not supported yet.");
    let c = null;
    if (r != null) {
      const u = aw(r, this.outputNames);
      c = [];
      for (let h = 0; h < u.length; ++h)
        c.push(await iw(l[h], null, u[h]));
    }
    return [i, l, c];
  }
  /**
   * Loop over some test data in batches.
   * @param f A Function returning a list of tensors.
   * @param ins Array of tensors to be fed to `f`.
   * @param batchSize Integer batch size or `null` / `undefined`.
   * @param verbose verbosity mode.
   * @param steps Total number of steps (batches of samples) before
   * declaring test finished. Ignored with the default value of `null` /
   * `undefined`.
   * @returns Array of Scalars.
   */
  testLoop(e, t, s, r = 0, o) {
    return H(() => {
      const a = this.checkNumSamples(t, s, o, "steps"), i = [];
      if (r > 0)
        throw new Pe("Verbose mode is not implemented yet.");
      if (o != null)
        throw new Pe("steps mode in testLoop() is not implemented yet");
      {
        const l = Zd(a, s), c = Ct(Es(0, a));
        for (let u = 0; u < l.length; ++u) {
          const h = l[u][0], d = l[u][1], p = ro(c, h, d - h), f = dg(t, p), m = e(f);
          if (u === 0)
            for (let g = 0; g < m.length; ++g)
              i.push(Te(0));
          for (let g = 0; g < m.length; ++g) {
            const y = m[g];
            i[g] = ne(i[g], F(d - h, y));
          }
        }
        for (let u = 0; u < i.length; ++u)
          i[u] = be(i[u], a);
      }
      return i;
    });
  }
  getDedupedMetricsNames() {
    const e = this.metricsNames, t = [];
    for (let s = 0; s < e.length; ++s) {
      const r = e[s];
      let o = r;
      if (C0(e, r) > 1) {
        const a = C0(e.slice(0, s), r);
        o += `_${a}`;
      }
      t.push(o);
    }
    return t;
  }
  /**
   * Creates a function that performs the following actions:
   *
   * 1. computes the losses
   * 2. sums them to get the total loss
   * 3. call the optimizer computes the gradients of the LayersModel's
   *    trainable weights w.r.t. the total loss and update the variables
   * 4. calculates the metrics
   * 5. returns the values of the losses and metrics.
   */
  makeTrainFunction() {
    return (e) => {
      const t = [], s = e.slice(0, this.inputs.length), r = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), o = e.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), a = [], i = () => {
        const h = [];
        for (let m = 0; m < this.inputs.length; ++m)
          h.push({ key: this.inputs[m], value: s[m] });
        const d = new gr(h), p = Ma(this.outputs, d, { training: !0 });
        let f;
        for (let m = 0; m < this.lossFunctions.length; ++m) {
          const g = this.lossFunctions[m];
          let y = g(r[m], p[m]);
          o[m] != null && (y = m_(y, o[m]));
          const b = vt(y);
          t.push(b), m === 0 ? f = y : f = ne(f, y);
        }
        for (let m = 0; m < this.metricsTensors.length; ++m) {
          let g;
          if (this.outputs.length > 1 && m < this.outputs.length)
            g = t[m];
          else {
            const y = this.metricsTensors[m][0], b = this.metricsTensors[m][1];
            g = vt(y(r[b], p[b]));
          }
          Yt(g), a.push(g);
        }
        return f = vt(f), this.calculateLosses().forEach((m) => {
          f = ne(f, m);
        }), f;
      }, l = this.collectedTrainableWeights.map((h) => h.read());
      return [this.optimizer_.minimize(i, !0, l)].concat(a);
    };
  }
  /**
   * Create a function which, when invoked with an array of `tf.Tensor`s as a
   * batch of inputs, returns the prespecified loss and metrics of the model
   * under the batch of input data.
   */
  makeTestFunction() {
    this.testFunction = (e) => H(() => {
      const t = [];
      let s;
      const r = e.slice(0, this.inputs.length), o = e.slice(this.inputs.length, this.inputs.length + this.outputs.length), a = [];
      for (let c = 0; c < this.inputs.length; ++c)
        a.push({ key: this.inputs[c], value: r[c] });
      const i = new gr(a), l = Ma(this.outputs, i);
      for (let c = 0; c < this.lossFunctions.length; ++c) {
        const u = this.lossFunctions[c], h = vt(u(o[c], l[c]));
        c === 0 ? s = h : s = ne(s, h), t.push(s);
      }
      for (let c = 0; c < this.metricsTensors.length; ++c) {
        const u = this.metricsTensors[c][0], h = this.metricsTensors[c][1], d = vt(u(o[h], l[h]));
        t.push(d);
      }
      return t;
    });
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a
   * dataset).
   *
   * ```js
   * const model = tf.sequential({
   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * for (let i = 1; i < 5 ; ++i) {
   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *       batchSize: 4,
   *       epochs: 3
   *   });
   *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
   * }
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you
   * can also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named,
   * you can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args A `ModelFitArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input
   * data and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(e, t, s = {}) {
    return $_(this, e, t, s);
  }
  // TODO(cais): Add code snippet below when it's possible to instantiate
  //   actual dataset objects.
  /**
   * Trains the model using a dataset object.
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for training. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs.
   *   Of the two items in the array, the first is the input feature(s) and
   *   the second is the output target(s).
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fitDataset(e, t) {
    return b_(this, e, t);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(e, t) {
    const s = await this.standardizeUserData(e, t), r = s[0], o = s[1], i = this.makeTrainFunction()(r.concat(o)), l = [];
    for (const c of i) {
      const u = await c.data();
      l.push(u[0]);
    }
    return Be(i), Is(s[0], e), Is(s[1], t), wn(l);
  }
  /**
   * Extract weight values of the model.
   *
   * @param config: An instance of `io.SaveConfig`, which specifies
   * model-saving options such as whether only trainable weights are to be
   * saved.
   * @returns A `NamedTensorMap` mapping original weight names (i.e.,
   *   non-uniqueified weight names) to their values.
   */
  getNamedWeights(e) {
    const t = [], s = e != null && e.trainableOnly, r = s ? this.trainableWeights : this.weights, o = this.getWeights(s);
    for (let a = 0; a < r.length; ++a)
      s && !r[a].trainable || t.push({ name: r[a].originalName, tensor: o[a] });
    return t;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const input = tf.input({shape: [10]});
   * const output = tf.layers.dense({units: 1}).apply(input);
   * const model = tf.model({inputs: [input], outputs: [output]});
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10
   * values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(e) {
    this.stopTraining_ = e;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(e) {
    this.optimizer_ !== e && (this.optimizer_ = e, this.isOptimizerOwned = !1);
  }
  dispose() {
    const e = super.dispose();
    if (e.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const t = d0().numTensors;
      this.optimizer_.dispose(), e.numDisposedVariables += t - d0().numTensors;
    }
    return e;
  }
  getLossIdentifiers() {
    let e;
    if (typeof this.loss == "string")
      e = Xs(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const t of this.loss)
        if (typeof t != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      e = this.loss.map((t) => Xs(t));
    } else {
      const t = Object.keys(this.loss);
      e = {};
      const s = this.loss;
      for (const r of t)
        if (typeof s[r] == "string")
          e[r] = Xs(s[r]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return e;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [Xs(Bl(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((e) => Xs(Bl(e)));
    {
      const e = {};
      for (const t in this.metrics)
        e[t] = Xs(Bl(this.metrics[t]));
      return e;
    }
  }
  getTrainingConfig() {
    return {
      loss: this.getLossIdentifiers(),
      metrics: this.getMetricIdentifiers(),
      optimizer_config: {
        class_name: this.optimizer.getClassName(),
        config: this.optimizer.getConfig()
      }
    };
  }
  loadTrainingConfig(e) {
    if (e.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (e.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (e.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    const t = Kd(e.optimizer_config), s = tr(t);
    let r;
    if (typeof e.loss == "string")
      r = Zr(e.loss);
    else if (Array.isArray(e.loss))
      r = e.loss.map((a) => Zr(a));
    else if (e.loss != null) {
      r = {};
      for (const a in e.loss)
        r[a] = Zr(e.loss[a]);
    }
    let o;
    if (Array.isArray(e.metrics))
      o = e.metrics.map((a) => Zr(a));
    else if (e.metrics != null) {
      o = {};
      for (const a in e.metrics)
        o[a] = Zr(e.metrics[a]);
    }
    this.compile({ loss: r, metrics: o, optimizer: s });
  }
  /**
   * Save the configuration and/or weights of the LayersModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 2. Saving `model`'s topology and weights to browser
   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('indexeddb://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 3. Saving `model`'s topology and weights as two files
   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
   * browser.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('downloads://my-model-1');
   * ```
   *
   * Example 4. Send  `model`'s topology and weights to an HTTP server.
   * See the documentation of `tf.io.http` for more details
   * including specifying request parameters and implementation of the
   * server.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('http://my-server/model/upload');
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async save(e, t) {
    if (typeof e == "string") {
      const c = I1(e);
      if (c.length === 0)
        throw new z(`Cannot find any save handlers for URL '${e}'`);
      if (c.length > 1)
        throw new z(`Found more than one (${c.length}) save handlers for URL '${e}'`);
      e = c[0];
    }
    if (e.save == null)
      throw new z("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const s = await Fd(this.getNamedWeights(t)), i = {
      modelTopology: this.toJSON(null, !1),
      format: T_,
      generatedBy: `TensorFlow.js tfjs-layers v${ow}`,
      convertedBy: null
    };
    if ((t == null ? !1 : t.includeOptimizer) && this.optimizer != null) {
      i.trainingConfig = this.getTrainingConfig();
      const c = "optimizer", { data: u, specs: h } = await Fd(await this.optimizer.getWeights(), c);
      s.specs.push(...h), s.data = ju([s.data, u]);
    }
    return this.userDefinedMetadata != null && (O0(this.userDefinedMetadata, this.name, !0), i.userDefinedMetadata = this.userDefinedMetadata), i.weightData = s.data, i.weightSpecs = s.specs, e.save(i);
  }
  /**
   * Set user-defined metadata.
   *
   * The set metadata will be serialized together with the topology
   * and weights of the model during `save()` calls.
   *
   * @param setUserDefinedMetadata
   */
  setUserDefinedMetadata(e) {
    O0(e, this.name), this.userDefinedMetadata = e;
  }
  /**
   * Get user-defined metadata.
   *
   * The metadata is supplied via one of the two routes:
   *   1. By calling `setUserDefinedMetadata()`.
   *   2. Loaded during model loading (if the model is constructed
   *      via `tf.loadLayersModel()`.)
   *
   * If no user-defined metadata is available from either of the
   * two routes, this function will return `undefined`.
   */
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
Ho.className = "Model";
re(Ho);
class uw extends Ho {
}
uw.className = "Functional";
re(uw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Za extends Ho {
  constructor(e) {
    if (super({ inputs: [], outputs: [] }), e = e || {}, this.trainable = !0, this.built = !1, this.name = e.name != null ? e.name : wh("sequential_"), e.layers != null)
      for (const t of e.layers)
        this.add(t);
  }
  // Helper function to Sequential.add  Throws if the new output shape will be
  // invalid.
  checkShape(e) {
    if (e.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0))
      throw new z(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`);
  }
  /**
   * Adds a layer instance on top of the layer stack.
   *
   * ```js
   *  const model = tf.sequential();
   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
   *  // Note that the untrained model is random at this point.
   *  model.predict(tf.randomNormal([10, 1])).print();
   * ```
   * @param layer Layer instance.
   *
   * @exception ValueError In case the `layer` argument does not know its
   * input shape.
   * @exception ValueError In case the `layer` argument has multiple output
   *   tensors, or is already connected somewhere else (forbidden in
   *   `Sequential` models).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  add(e) {
    const t = e instanceof Za || e instanceof Ho;
    let s;
    if (t) {
      if (s = e, s.outputs.length !== 1)
        throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (s.inputs.length !== 1)
        throw new z("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (e.inboundNodes.length === 0) {
        if (e.batchInputShape == null)
          throw new z("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const r = EF({
          batchShape: e.batchInputShape,
          dtype: e.dtype,
          name: e.name + "_input"
        });
        e.apply(r);
      }
      if (t)
        this.outputs = s.outputs, this.inputs = s.inputs;
      else {
        if (e.inboundNodes.length !== 1)
          throw new z(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);
        if (e.inboundNodes[0].outputTensors.length !== 1)
          throw new z("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(e), this.outputs = [e.inboundNodes[0].outputTensors[0]], this.inputs = Hx(this.outputs[0]);
      }
      this.inboundNodes = [], new Ih({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        // no model-level masking for now
        inputMasks: uo(null, this.inputs.length),
        outputMasks: [null],
        inputShapes: this.inputs.map((r) => r.shape),
        outputShapes: this.outputs[0].shape
      });
    } else {
      const r = e.apply(this.outputs[0]);
      if (Array.isArray(r))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(e), this.outputs = [r], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(e), this.built = !1;
  }
  /**
   * Removes the last layer in the model.
   *
   * @exception TypeError if there are no layers in the model.
   */
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const e = this.layers.length - 1;
      this.layers[e].outboundNodes = [], this.outputs = [this.layers[e].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(e, t) {
    return this.model == null && this.build(), this.model.call(e, t);
  }
  build(e) {
    if (tt(e), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new Ho({
      inputs: this.inputs,
      outputs: this.outputs[0],
      name: this.name + "_model"
    }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  /**
   * Print a text summary of the Sequential model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - The total number of trainable and non-trainable parameters of the
   * model.
   *
   * ```js
   * const model = tf.sequential();
   * model.add(
   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
   *
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(e, t, s = console.log) {
    this.built || this.build(), super.summary(e, t, s);
  }
  /**
   * Sets the weights of the model.
   *
   * @param weights Should be a list of Tensors with shapes and types matching
   *   the output of `model.getWeights()`.
   */
  setWeights(e) {
    this.model == null && this.build(), this.model.setWeights(e);
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   * });
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateConfig`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(e, t, s = {}) {
    if (!this.built)
      throw new ls("The model needs to be compiled before being used.");
    return this.model.evaluate(e, t, s);
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(e, t) {
    if (!this.built)
      throw new ls("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(e, t);
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([2, 10])).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param conifg A `ModelPredictConfig` object containing optional fields.
   *
   * @return `tf.Tensor`(s) of predictions.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(e, t = {}) {
    return this.model == null && this.build(), this.model.predict(e, t);
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * @param x: Input samples, as a Tensor, or list of Tensors (if the model
   *   has multiple inputs).
   * @return Tensor(s) of predictions
   */
  predictOnBatch(e) {
    return this.model == null && this.build(), this.model.predictOnBatch(e);
  }
  /**
   * See `LayersModel.compile`.
   *
   * @param args
   */
  compile(e) {
    this.build(), this.model.compile(e), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(e) {
    this.model.optimizer = e;
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a dataset).
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   *   epochs: 3
   * });
   * console.log(history.history.loss[0]);
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you can
   * also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named, you
   *  can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args  A `ModelFitConfig`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(e, t, s = {}) {
    if (!this.built)
      throw new ls("The model needs to be compiled before being used.");
    return this.model.fit(e, t, s);
  }
  /**
   * Trains the model using a dataset object.
   *
   * ```js
   * const xArray = [
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   * ];
   * const yArray = [1, 1, 1, 1];
   * // Create a dataset from the JavaScript array.
   * const xDataset = tf.data.array(xArray);
   * const yDataset = tf.data.array(yArray);
   * // Zip combines the `x` and `y` Datasets into a single Dataset, the
   * // iterator of which will return an object containing of two tensors,
   * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
   * // four such samples into a single object, with the same keys now pointing
   * // to tensors that hold 4 examples, organized along the batch dimension.
   * // The call to `shuffle(4)` causes each iteration through the dataset to
   * // happen in a different order.  The size of the shuffle window is 4.
   * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
   *     .batch(4)
   *     .shuffle(4);
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fitDataset(xyDataset, {
   *   epochs: 4,
   *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
   * });
   * ```
   *
   * @param dataset A dataset object. Its `iterator()` method is expected to
   *   generate a dataset iterator object, the `next()` method of which is
   *   expected to produce data batches for evaluation. The return value of the
   *   `next()` call ought to contain a boolean `done` field and a `value`
   *   field.
   *
   *   The `value` field is expected to be an object of with fields
   *   `xs` and `ys`, which point to the feature tensor and the target tensor,
   *   respectively. This case is for models with exactly one input and one
   *   output (e.g. a sequential model). For example:
   *   ```js
   *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
   *   ```
   *
   *   If the model has multiple inputs, the `xs` field of `value` should
   *   be an object mapping input names to their respective feature tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: {
   *         input_1: xsTensor1,
   *         input_2: xsTensor2
   *       },
   *       ys: ysTensor
   *     },
   *     done: false
   *   }
   *   ```
   *   If the model has multiple outputs, the `ys` field of `value` should
   *   be an object mapping output names to their respective target tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: xsTensor,
   *       ys: {
   *         output_1: ysTensor1,
   *         output_2: ysTensor2
   *       },
   *     },
   *     done: false
   *   }
   *   ```
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async fitDataset(e, t) {
    if (!this.built)
      throw new ls("The model needs to be compiled before being used.");
    return this.model.fitDataset(e, t);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(e, t) {
    return this.model.trainOnBatch(e, t);
  }
  /* See parent class for JsDoc */
  /** @nocollapse */
  static fromConfig(e, t, s = {}, r = !1) {
    let o, a = {};
    if (t instanceof Array) {
      if (t[0].className == null || t[0].className === "Merge")
        throw new z("Legacy serialization format not supported yet.");
      o = t;
    } else
      N(t.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), o = t.layers, delete t.layers, a = t;
    const i = new e(a);
    if (!(i instanceof Za))
      throw new Pe(`Sequential.fromConfig called on non-Sequential input: ${i}`);
    for (const l of o) {
      const u = tr(l, void 0, r);
      r && u.setFastWeightInitDuringBuild(!0), i.add(u);
    }
    return i;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const model = tf.sequential();
   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10 values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(e) {
    if (this.model == null)
      throw new z("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = e;
  }
  get stopTraining() {
    if (this.model == null)
      throw new z("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  // TODO(cais): Override get trainableWeights() here
  // tslint:disable-next-line:no-any
  getConfig() {
    const e = [];
    for (const t of this.layers) {
      const s = {};
      s.className = t.getClassName(), s.config = t.getConfig(), e.push(s);
    }
    return { name: this.name, layers: e };
  }
}
Za.className = "Sequential";
re(Za);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Cn = class extends ga {
  getConfig() {
    return {};
  }
};
class hw extends Cn {
  /**
   * Calculate the activation function.
   *
   * @param x: Input.
   * @param alpha: Scaling factor the negative section.
   * @return Output of the ELU activation.
   */
  apply(e, t = 1) {
    return mF(e, t);
  }
}
hw.className = "elu";
re(hw);
class dw extends Cn {
  apply(e) {
    return um(e);
  }
}
dw.className = "selu";
re(dw);
class pw extends Cn {
  apply(e) {
    return Ks(e);
  }
}
pw.className = "relu";
re(pw);
class fw extends Cn {
  apply(e) {
    return H(() => hl(6, Ks(e)));
  }
}
fw.className = "relu6";
re(fw);
class mw extends Cn {
  apply(e) {
    return e;
  }
}
mw.className = "linear";
re(mw);
class gw extends Cn {
  apply(e) {
    return Cs(e);
  }
}
gw.className = "sigmoid";
re(gw);
class yw extends Cn {
  apply(e) {
    return yF(e);
  }
}
yw.className = "hardSigmoid";
re(yw);
class bw extends Cn {
  apply(e) {
    return ba(e);
  }
}
bw.className = "softplus";
re(bw);
class xw extends Cn {
  apply(e) {
    return gF(e);
  }
}
xw.className = "softsign";
re(xw);
class ww extends Cn {
  apply(e) {
    return ta(e);
  }
}
ww.className = "tanh";
re(ww);
let pg = class extends Cn {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(e, t = -1) {
    return ch(e, t);
  }
};
pg.className = "softmax";
re(pg);
class vw extends Cn {
  /**
   * Calculate the activation function of log softmax:
   * log( exp(x_i) / sum(exp(x)) )
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(e, t = -1) {
    return Xf(e, t);
  }
}
vw.className = "logSoftmax";
re(vw);
class Iw extends Cn {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param alpha Scaling factor for the sigmoid function.
   * @returns a Tensor of the same shape as x
   */
  apply(e, t = 1) {
    return H(() => F(Cs(F(e, t)), e));
  }
}
Iw.className = "swish";
re(Iw);
class $w extends Cn {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @returns a Tensor of the same shape as x
   */
  apply(e) {
    return H(() => F(e, ta(ba(e))));
  }
}
$w.className = "mish";
re($w);
function kr(n) {
  return n.getClassName();
}
function Qh(n, e = {}) {
  return gl(n, ns.getMap().classNameMap, e, "activation");
}
function Tr(n) {
  if (n == null) {
    const e = {};
    return e.className = "linear", e.config = {}, Qh(e);
  }
  if (typeof n == "string") {
    const e = {};
    return e.className = n, e.config = {}, Qh(e);
  } else return n instanceof Cn ? n : Qh(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function E_(n) {
  if (n != null && typeof n != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`);
}
class Cw extends ga {
}
class Sw extends Cw {
  constructor(e) {
    super(), E_(e), this.l1 = e == null || e.l1 == null ? 0.01 : e.l1, this.l2 = e == null || e.l2 == null ? 0.01 : e.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  /**
   * Porting note: Renamed from __call__.
   * @param x Variable of which to calculate the regularization score.
   */
  apply(e) {
    return H(() => {
      let t = Rt([1]);
      return this.hasL1 && (t = ne(t, Ie(F(this.l1, At(e))))), this.hasL2 && (t = ne(t, Ie(F(this.l2, xl(e))))), P(t, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e({ l1: t.l1, l2: t.l2 });
  }
}
Sw.className = "L1L2";
re(Sw);
const V0 = {
  l1l2: "L1L2"
};
function it(n) {
  return Jm(n);
}
function W0(n, e = {}) {
  return gl(n, ns.getMap().classNameMap, e, "regularizer");
}
function yt(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const t = { className: n in V0 ? V0[n] : n, config: {} };
    return W0(t);
  } else return n instanceof Cw ? n : W0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Nw extends je {
  constructor(e) {
    super(e ?? {}), this.supportsMasking = !0, e != null && (this.maxValue = e.maxValue);
  }
  call(e, t) {
    e = _e(e);
    let s = Ks(e);
    return this.maxValue != null && (s = _n(s, 0, this.maxValue)), s;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { maxValue: this.maxValue }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Nw.className = "ReLU";
re(Nw);
class kw extends je {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_ALPHA = 0.3, e == null && (e = {}), this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    const s = _e(e);
    return Qu(s, this.alpha);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
kw.className = "LeakyReLU";
re(kw);
class Tw extends je {
  constructor(e) {
    if (super(e ?? {}), this.DEFAULT_ALPHA_INITIALIZER = "zeros", e == null && (e = {}), this.supportsMasking = !0, this.alphaInitializer = mt(e.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = yt(e.alphaRegularizer), this.alphaConstraint = Lt(e.alphaConstraint), e.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(e.sharedAxes))
      this.sharedAxes = e.sharedAxes;
    else if (typeof e.sharedAxes == "number")
      this.sharedAxes = [e.sharedAxes];
    else
      throw new z(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);
  }
  build(e) {
    e = tt(e);
    const t = e.slice(1);
    if (this.sharedAxes != null)
      for (const r of this.sharedAxes)
        t[r - 1] = 1;
    this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
    const s = {};
    if (this.sharedAxes != null)
      for (let r = 1; r < e.length; ++r)
        s[r] = e[r];
    this.inputSpec = [new _t({
      ndim: e.length,
      axes: s
    })], this.built = !0;
  }
  call(e, t) {
    return e = _e(e), oh(e, this.alpha.read());
  }
  getConfig() {
    const e = {
      alphaInitializer: xt(this.alphaInitializer),
      alphaRegularizer: it(this.alphaRegularizer),
      alphaConstraint: Ot(this.alphaConstraint),
      sharedAxes: this.sharedAxes
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Tw.className = "PReLU";
re(Tw);
let Ew = class extends je {
  constructor(e) {
    if (super(e ?? {}), this.DEFAULT_ALPHA = 1, e == null && (e = {}), e.alpha != null && e.alpha !== this.DEFAULT_ALPHA)
      throw new Pe(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = e.alpha == null ? this.DEFAULT_ALPHA : e.alpha;
  }
  call(e, t) {
    const s = _e(e);
    return il(s);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { alpha: this.alpha }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
};
Ew.className = "ELU";
re(Ew);
class Dw extends je {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_THETA = 1, e == null && (e = {}), this.theta = e.theta == null ? this.DEFAULT_THETA : e.theta;
  }
  call(e, t) {
    const s = _e(e);
    return F(s, fe(qn(s, this.theta), "float32"));
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { theta: this.theta }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Dw.className = "ThresholdedReLU";
re(Dw);
class Aw extends je {
  constructor(e) {
    super(e ?? {}), this.DEFAULT_AXIS = 1, e == null && (e = {}), this.softmax = new pg().apply, this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis;
  }
  call(e, t) {
    const s = _e(e);
    return this.softmax(s, this.axis);
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = { axis: this.axis }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Aw.className = "Softmax";
re(Aw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function jo(n, e, t) {
  if (typeof n == "number")
    return uo(n, e);
  if (n.length !== e)
    throw new z(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${n.length} elements.`);
  for (let s = 0; s < e; ++s) {
    const r = n[s];
    if (!hF(r))
      throw new z(`The ${t} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`);
  }
  return n;
}
function Ns(n, e, t, s, r = 1) {
  if (n == null)
    return n;
  const o = e + (e - 1) * (r - 1);
  let a;
  return t === "same" ? a = n : a = n - o + 1, Math.floor((a + s - 1) / s);
}
function zs(n, e, t, s) {
  if (n == null)
    return null;
  if (s === "valid")
    n = n * e + Nr([t - e, 0]);
  else if (s === "same")
    n = n * e;
  else
    throw new z(`Unsupport padding mode: ${s}.`);
  return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function fg(n, e) {
  return H(() => (kt(e), e === "channelsFirst" ? We(n, [0, 2, 3, 1]) : n));
}
function Rw(n, e) {
  return H(() => (kt(e), e === "channelsFirst" ? We(n, [0, 2, 3, 4, 1]) : n));
}
function D_(n, e, t, s = 1, r = "valid", o, a = 1) {
  return H(() => {
    if (o == null && (o = Ds()), kt(o), n.shape.length !== 3)
      throw new z(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);
    if (e.shape.length !== 3)
      throw new z(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);
    if (t != null && t.shape.length !== 1)
      throw new z(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);
    if (o === "channelsFirst" && (n = We(n, [0, 2, 1])), r === "causal")
      throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let i = Vf(n, e, s, r === "same" ? "same" : "valid", "NWC", a);
    return t != null && (i = Fs(i, t)), i;
  });
}
function U0(n, e, t, s = [1, 1], r = "valid", o, a, i = null) {
  return H(() => {
    if (o == null && (o = Ds()), kt(o), n.rank !== 3 && n.rank !== 4)
      throw new z(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);
    if (e.rank !== 3 && e.rank !== 4)
      throw new z(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);
    let l = fg(n, o);
    if (r === "causal")
      throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = qb({
      x: l,
      filter: e,
      strides: s,
      pad: r === "same" ? "same" : "valid",
      dilations: a,
      dataFormat: "NHWC",
      bias: t,
      activation: i
    }), o === "channelsFirst" && (l = We(l, [0, 3, 1, 2])), l;
  });
}
function A_(n, e, t, s = [1, 1, 1], r = "valid", o, a) {
  return H(() => {
    if (o == null && (o = Ds()), kt(o), n.rank !== 4 && n.rank !== 5)
      throw new z(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);
    if (e.rank !== 4 && e.rank !== 5)
      throw new z(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);
    let i = Rw(n, o);
    if (r === "causal")
      throw new Pe("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return i = pb(i, e, s, r === "same" ? "same" : "valid", "NDHWC", a), t != null && (i = Fs(i, t)), o === "channelsFirst" && (i = We(i, [0, 4, 1, 2, 3])), i;
  });
}
class Sh extends je {
  constructor(e, t) {
    if (super(t), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", Sh.verifyArgs(t), this.rank = e, Ut(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new Pe(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = jo(t.kernelSize, e, "kernelSize"), this.strides = jo(t.strides == null ? 1 : t.strides, e, "strides"), this.padding = t.padding == null ? "valid" : t.padding, Kn(this.padding), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, kt(this.dataFormat), this.activation = Tr(t.activation), this.useBias = t.useBias == null ? !0 : t.useBias, this.biasInitializer = mt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Lt(t.biasConstraint), this.biasRegularizer = yt(t.biasRegularizer), this.activityRegularizer = yt(t.activityRegularizer), this.dilationRate = jo(t.dilationRate == null ? 1 : t.dilationRate, e, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new z(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new z(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new z(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(e) {
    if (Ps("kernelSize" in e, "required key 'kernelSize' not in config"), typeof e.kernelSize != "number" && !Qm(e.kernelSize, "number", 1, 3))
      throw new z(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`);
  }
  getConfig() {
    const e = {
      kernelSize: this.kernelSize,
      strides: this.strides,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      activation: kr(this.activation),
      useBias: this.useBias,
      biasInitializer: xt(this.biasInitializer),
      biasRegularizer: it(this.biasRegularizer),
      activityRegularizer: it(this.activityRegularizer),
      biasConstraint: Ot(this.biasConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class va extends Sh {
  constructor(e, t) {
    super(e, t), this.kernel = null, va.verifyArgs(t), this.filters = t.filters, Ut(this.filters, "filters"), this.kernelInitializer = mt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Lt(t.kernelConstraint), this.kernelRegularizer = yt(t.kernelRegularizer);
  }
  build(e) {
    e = tt(e);
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new z(`The channel dimension of the input should be defined. Found ${e[t]}`);
    const s = e[t], r = this.kernelSize.concat([s, this.filters]);
    this.kernel = this.addWeight("kernel", r, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [t]: s } }], this.built = !0;
  }
  call(e, t) {
    return H(() => {
      e = _e(e);
      let s;
      const r = this.bias == null ? null : this.bias.read(), o = Dx(this.activation.getClassName());
      if (o != null && this.rank === 2)
        s = U0(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate, o);
      else {
        if (this.rank === 1)
          s = D_(e, this.kernel.read(), r, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          s = U0(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          s = A_(e, this.kernel.read(), r, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new Pe("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (s = this.activation.apply(s));
      }
      return s;
    });
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = [], s = this.dataFormat === "channelsLast" ? e.slice(1, e.length - 1) : e.slice(2);
    for (let o = 0; o < s.length; ++o) {
      const a = Ns(s[o], this.kernelSize[o], this.padding, this.strides[o], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[o]);
      t.push(a);
    }
    let r = [e[0]];
    return this.dataFormat === "channelsLast" ? (r = r.concat(t), r.push(this.filters)) : (r.push(this.filters), r = r.concat(t)), r;
  }
  getConfig() {
    const e = {
      filters: this.filters,
      kernelInitializer: xt(this.kernelInitializer),
      kernelRegularizer: it(this.kernelRegularizer),
      kernelConstraint: Ot(this.kernelConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  static verifyArgs(e) {
    if (!("filters" in e) || typeof e.filters != "number" || e.filters < 1)
      throw new z(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`);
  }
}
class $l extends va {
  constructor(e) {
    super(2, e), $l.verifyArgs(e);
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !Qm(e.kernelSize, "number", 1, 2))
      throw new z(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
$l.className = "Conv2D";
re($l);
class Cl extends va {
  constructor(e) {
    super(3, e), Cl.verifyArgs(e);
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !(Array.isArray(e.kernelSize) && (e.kernelSize.length === 1 || e.kernelSize.length === 3)))
      throw new z(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
Cl.className = "Conv3D";
re(Cl);
class Fw extends $l {
  constructor(e) {
    if (super(e), this.inputSpec = [new _t({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new z(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = tt(e), e.length !== 4)
      throw new z("Input should have rank 4; Received input shape: " + JSON.stringify(e));
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new z("The channel dimension of the inputs should be defined. Found `None`.");
    const s = e[t], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new _t({ ndim: 4, axes: { [t]: s } })], this.built = !0;
  }
  call(e, t) {
    return H(() => {
      let s = _e(e);
      if (s.shape.length !== 4)
        throw new z(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, o = r[0];
      let a, i;
      this.dataFormat === "channelsFirst" ? (a = 2, i = 3) : (a = 1, i = 2);
      const l = r[a], c = r[i], u = this.kernelSize[0], h = this.kernelSize[1], d = this.strides[0], p = this.strides[1], f = zs(l, d, u, this.padding), m = zs(c, p, h, this.padding), g = [o, f, m, this.filters];
      this.dataFormat !== "channelsLast" && (s = We(s, [0, 2, 3, 1]));
      let y = Uf(s, this.kernel.read(), g, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (y = We(y, [0, 3, 1, 2])), this.bias != null && (y = Fs(y, this.bias.read(), this.dataFormat)), this.activation != null && (y = this.activation.apply(y)), y;
    });
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = e.slice();
    let s, r, o;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3) : (s = 3, r = 1, o = 2);
    const a = this.kernelSize[0], i = this.kernelSize[1], l = this.strides[0], c = this.strides[1];
    return t[s] = this.filters, t[r] = zs(t[r], l, a, this.padding), t[o] = zs(t[o], c, i, this.padding), t;
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.dilationRate, e;
  }
}
Fw.className = "Conv2DTranspose";
re(Fw);
class _w extends Cl {
  constructor(e) {
    if (super(e), this.inputSpec = [new _t({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new z(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(e) {
    if (e = tt(e), e.length !== 5)
      throw new z("Input should have rank 5; Received input shape: " + JSON.stringify(e));
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null)
      throw new z("The channel dimension of the inputs should be defined. Found `None`.");
    const s = e[t], r = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", r, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new _t({ ndim: 5, axes: { [t]: s } })], this.built = !0;
  }
  call(e, t) {
    return H(() => {
      let s = _e(e);
      if (s.shape.length !== 5)
        throw new z(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const r = s.shape, o = r[0];
      let a, i, l;
      this.dataFormat === "channelsFirst" ? (l = 2, a = 3, i = 4) : (l = 1, a = 2, i = 3);
      const c = r[l], u = r[a], h = r[i], d = this.kernelSize[0], p = this.kernelSize[1], f = this.kernelSize[2], m = this.strides[0], g = this.strides[1], y = this.strides[2], b = zs(c, m, d, this.padding), w = zs(u, g, p, this.padding), x = zs(h, y, f, this.padding), v = [o, b, w, x, this.filters];
      this.dataFormat !== "channelsLast" && (s = We(s, [0, 2, 3, 4, 1]));
      let $ = mb(s, this.kernel.read(), v, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && ($ = We($, [0, 4, 1, 2, 3])), this.bias !== null && ($ = Fs($, this.bias.read(), this.dataFormat)), this.activation !== null && ($ = this.activation.apply($)), $;
    });
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = e.slice();
    let s, r, o, a;
    this.dataFormat === "channelsFirst" ? (s = 1, r = 2, o = 3, a = 4) : (s = 4, r = 1, o = 2, a = 3);
    const i = this.kernelSize[0], l = this.kernelSize[1], c = this.kernelSize[2], u = this.strides[0], h = this.strides[1], d = this.strides[2];
    return t[s] = this.filters, t[r] = zs(t[r], u, i, this.padding), t[o] = zs(t[o], h, l, this.padding), t[a] = zs(t[a], d, c, this.padding), t;
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.dilationRate, e;
  }
}
_w.className = "Conv3DTranspose";
re(_w);
class Ow extends va {
  constructor(e, t) {
    if (super(e, t), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, t.filters == null)
      throw new z("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (t.kernelInitializer != null || t.kernelRegularizer != null || t.kernelConstraint != null)
      throw new z("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (t.padding != null && t.padding !== "same" && t.padding !== "valid")
      throw new z(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);
    this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = mt(t.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = yt(t.depthwiseRegularizer), this.depthwiseConstraint = Lt(t.depthwiseConstraint), this.pointwiseInitializer = mt(t.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = yt(t.pointwiseRegularizer), this.pointwiseConstraint = Lt(t.pointwiseConstraint);
  }
  build(e) {
    if (e = tt(e), e.length < this.rank + 2)
      throw new z(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(e)}`);
    const t = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[t] == null || e[t] < 0)
      throw new z(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);
    const s = e[t], r = this.kernelSize.concat([s, this.depthMultiplier]), o = [];
    for (let i = 0; i < this.rank; ++i)
      o.push(1);
    o.push(s * this.depthMultiplier, this.filters);
    const a = !0;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, a, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", o, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, a, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, a, this.biasConstraint) : this.bias = null, this.inputSpec = [new _t({ ndim: this.rank + 2, axes: { [t]: s } })], this.built = !0;
  }
  call(e, t) {
    return H(() => {
      e = _e(e);
      let s;
      if (this.rank === 1)
        throw new Pe("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (e = We(e, [0, 2, 3, 1])), s = hm(e, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (s = Fs(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), this.dataFormat === "channelsFirst" && (s = We(s, [0, 3, 1, 2])), s;
    });
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, delete e.kernelInitializer, delete e.kernelRegularizer, delete e.kernelConstraint, e.depthwiseInitializer = xt(this.depthwiseInitializer), e.pointwiseInitializer = xt(this.pointwiseInitializer), e.depthwiseRegularizer = it(this.depthwiseRegularizer), e.pointwiseRegularizer = it(this.pointwiseRegularizer), e.depthwiseConstraint = Ot(this.depthwiseConstraint), e.pointwiseConstraint = Ot(this.pointwiseConstraint), e;
  }
}
Ow.className = "SeparableConv";
class Lw extends Ow {
  constructor(e) {
    super(2, e);
  }
}
Lw.className = "SeparableConv2D";
re(Lw);
class Nh extends va {
  constructor(e) {
    super(1, e), Nh.verifyArgs(e), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const e = super.getConfig();
    return delete e.rank, delete e.dataFormat, e;
  }
  static verifyArgs(e) {
    if (typeof e.kernelSize != "number" && !Qm(e.kernelSize, "number", 1, 1))
      throw new z(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`);
  }
}
Nh.className = "Conv1D";
re(Nh);
class Pw extends je {
  constructor(e) {
    super(e), typeof e.cropping == "number" ? this.cropping = [[e.cropping, e.cropping], [e.cropping, e.cropping]] : typeof e.cropping[0] == "number" ? this.cropping = [
      [e.cropping[0], e.cropping[0]],
      [e.cropping[1], e.cropping[1]]
    ] : this.cropping = e.cropping, this.dataFormat = e.dataFormat === void 0 ? "channelsLast" : e.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(e) {
    return this.dataFormat === "channelsFirst" ? [
      e[0],
      e[1],
      e[2] - this.cropping[0][0] - this.cropping[0][1],
      e[3] - this.cropping[1][0] - this.cropping[1][1]
    ] : [
      e[0],
      e[1] - this.cropping[0][0] - this.cropping[0][1],
      e[2] - this.cropping[1][0] - this.cropping[1][1],
      e[3]
    ];
  }
  call(e, t) {
    return H(() => {
      if (e = _e(e), this.dataFormat === "channelsLast") {
        const s = Ml(e, this.cropping[0][0], e.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return Ml(s, this.cropping[1][0], e.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const s = Ml(e, this.cropping[0][0], e.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return Ml(s, this.cropping[1][0], e.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const e = { cropping: this.cropping, dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Pw.className = "Cropping2D";
re(Pw);
class zw extends je {
  constructor(e) {
    super(e), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = e.size == null ? this.DEFAULT_SIZE : e.size, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, kt(this.dataFormat), this.interpolation = e.interpolation == null ? "nearest" : e.interpolation, lF(this.interpolation);
  }
  computeOutputShape(e) {
    if (this.dataFormat === "channelsFirst") {
      const t = e[2] == null ? null : this.size[0] * e[2], s = e[3] == null ? null : this.size[1] * e[3];
      return [e[0], e[1], t, s];
    } else {
      const t = e[1] == null ? null : this.size[0] * e[1], s = e[2] == null ? null : this.size[1] * e[2];
      return [e[0], t, s, e[3]];
    }
  }
  call(e, t) {
    return H(() => {
      let s = _e(e);
      const r = s.shape;
      if (this.dataFormat === "channelsFirst") {
        s = We(s, [0, 2, 3, 1]);
        const o = this.size[0] * r[2], a = this.size[1] * r[3], i = this.interpolation === "nearest" ? $s.resizeNearestNeighbor(s, [o, a]) : $s.resizeBilinear(s, [o, a]);
        return We(i, [0, 3, 1, 2]);
      } else {
        const o = this.size[0] * r[1], a = this.size[1] * r[2];
        return this.interpolation === "nearest" ? $s.resizeNearestNeighbor(s, [o, a]) : $s.resizeBilinear(s, [o, a]);
      }
    });
  }
  getConfig() {
    const e = {
      size: this.size,
      dataFormat: this.dataFormat,
      interpolation: this.interpolation
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
zw.className = "UpSampling2D";
re(zw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function R_(n, e, t = [1, 1], s = "valid", r, o) {
  return H(() => {
    r == null && (r = Ds()), kt(r);
    let a = fg(n, r);
    if (n.rank !== 4)
      throw new z(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);
    if (e.rank !== 4)
      throw new z(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);
    return a = al(a, e, t, s === "same" ? "same" : "valid", "NHWC", o), r === "channelsFirst" && (a = We(a, [0, 3, 1, 2])), a;
  });
}
class Mw extends Sh {
  constructor(e) {
    super(2, e), this.depthwiseKernel = null, this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = mt(e.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Lt(e.depthwiseConstraint), this.depthwiseRegularizer = yt(e.depthwiseRegularizer);
  }
  build(e) {
    if (e = tt(e), e.length < 4)
      throw new z(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);
    const t = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (e[t] == null || e[t] < 0)
      throw new z(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);
    const s = e[t], r = [
      this.kernelSize[0],
      this.kernelSize[1],
      s,
      this.depthMultiplier
    ];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [s * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(e, t) {
    return H(() => {
      e = _e(e);
      let s = R_(e, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (s = Fs(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), s;
    });
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2], r = this.dataFormat === "channelsFirst" ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, o = Ns(t, this.kernelSize[0], this.padding, this.strides[0]), a = Ns(s, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [e[0], r, o, a] : [e[0], o, a, r];
  }
  getConfig() {
    const e = super.getConfig();
    return e.depthMultiplier = this.depthMultiplier, e.depthwiseInitializer = xt(this.depthwiseInitializer), e.depthwiseRegularizer = it(this.depthwiseRegularizer), e.depthwiseConstraint = Ot(this.depthwiseRegularizer), e;
  }
}
Mw.className = "DepthwiseConv2D";
re(Mw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Bw(n, e, t, s) {
  if (Array.isArray(n)) {
    if (e != null || t != null)
      throw new z("When inputs is an array, neither initialState or constants should be provided");
    s != null && (t = n.slice(n.length - s, n.length), n = n.slice(0, n.length - s)), n.length > 1 && (e = n.slice(1, n.length)), n = n[0];
  }
  function r(o) {
    return o == null || Array.isArray(o) ? o : [o];
  }
  return e = r(e), t = r(t), { inputs: n, initialState: e, constants: t };
}
function Vw(n, e, t, s = !1, r, o, a = !1, i = !1) {
  return H(() => {
    const l = e.shape.length;
    if (l < 3)
      throw new z(`Input should be at least 3D, but is ${l}D.`);
    const c = [1, 0].concat(Es(2, l));
    e = We(e, c), a && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), r != null && (r = fe(fe(r, "bool"), "float32"), r.rank === l - 1 && (r = xn(r, -1)), r = We(r, c)), s && (e = hs(e, 0), r != null && (r = hs(r, 0)));
    const u = [];
    let h, d = t;
    const p = e.shape[0], f = Ts(e);
    let m;
    r != null && (m = Ts(r));
    for (let y = 0; y < p; ++y) {
      const b = f[y], w = H(() => n(b, d));
      if (r == null)
        h = w[0], d = w[1];
      else {
        const x = H(() => {
          const v = m[y], $ = ge(jn(v), v), C = ne(F(w[0], v), F(d[0], $)), S = d.map((E, D) => ne(F(w[1][D], v), F(E, $)));
          return { output: C, newStates: S };
        });
        h = x.output, d = x.newStates;
      }
      i && u.push(h);
    }
    let g;
    return i && (g = ds(u, 1)), [h, g, d];
  });
}
class Br extends je {
  constructor(e) {
    super(e);
    let t;
    if (e.cell == null)
      throw new z("cell property is missing for the constructor of RNN.");
    if (Array.isArray(e.cell) ? t = new yg({ cells: e.cell }) : t = e.cell, t.stateSize == null)
      throw new z("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = t, this.returnSequences = e.returnSequences == null ? !1 : e.returnSequences, this.returnState = e.returnState == null ? !1 : e.returnState, this.goBackwards = e.goBackwards == null ? !1 : e.goBackwards, this._stateful = e.stateful == null ? !1 : e.stateful, this.unroll = e.unroll == null ? !1 : e.unroll, this.supportsMasking = !0, this.inputSpec = [new _t({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  // Porting Note: This is the equivalent of `RNN.states` property getter in
  //   PyKeras.
  getStates() {
    if (this.states_ == null) {
      const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return Es(0, e).map((t) => null);
    } else
      return this.states_;
  }
  // Porting Note: This is the equivalent of the `RNN.states` property setter in
  //   PyKeras.
  setStates(e) {
    this.states_ = e;
  }
  computeOutputShape(e) {
    Hd(e) && (e = e[0]), e = e;
    let t = this.cell.stateSize;
    Array.isArray(t) || (t = [t]);
    const s = t[0];
    let r;
    if (this.returnSequences ? r = [e[0], e[1], s] : r = [e[0], s], this.returnState) {
      const o = [];
      for (const a of t)
        o.push([e[0], a]);
      return [r].concat(o);
    } else
      return r;
  }
  computeMask(e, t) {
    return H(() => {
      Array.isArray(t) && (t = t[0]);
      const s = this.returnSequences ? t : null;
      if (this.returnState) {
        const r = this.states.map((o) => null);
        return [s].concat(r);
      } else
        return s;
    });
  }
  /**
   * Get the current state tensors of the RNN.
   *
   * If the state hasn't been set, return an array of `null`s of the correct
   * length.
   */
  get states() {
    if (this.states_ == null) {
      const e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t = [];
      for (let s = 0; s < e; ++s)
        t.push(null);
      return t;
    } else
      return this.states_;
  }
  set states(e) {
    this.states_ = e;
  }
  build(e) {
    if (this.numConstants != null)
      throw new Pe("Constants support is not implemented in RNN yet.");
    Hd(e) && (e = e[0]), e = e;
    const t = this.stateful ? e[0] : null, s = e.slice(2);
    this.inputSpec[0] = new _t({ shape: [t, null, ...s] });
    const r = [e[0]].concat(e.slice(2));
    this.cell.build(r);
    let o;
    if (Array.isArray(this.cell.stateSize) ? o = this.cell.stateSize : o = [this.cell.stateSize], this.stateSpec != null) {
      if (!He(this.stateSpec.map((a) => a.shape[a.shape.length - 1]), o))
        throw new z(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = o.map((a) => new _t({ shape: [null, a] }));
    this.stateful && this.resetStates();
  }
  /**
   * Reset the state tensors of the RNN.
   *
   * If the `states` argument is `undefined` or `null`, will set the
   * state tensor(s) of the RNN to all-zero tensors of the appropriate
   * shape(s).
   *
   * If `states` is provided, will set the state tensors of the RNN to its
   * value.
   *
   * @param states Optional externally-provided initial states.
   * @param training Whether this call is done during training. For stateful
   *   RNNs, this affects whether the old states are kept or discarded. In
   *   particular, if `training` is `true`, the old states will be kept so
   *   that subsequent backpropgataion through time (BPTT) may work properly.
   *   Else, the old states will be discarded.
   */
  resetStates(e, t = !1) {
    H(() => {
      if (!this.stateful)
        throw new Ls("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape[0];
      if (s == null)
        throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Rt([s, r])) : this.states_ = [Rt([s, this.cell.stateSize])];
      else if (e == null)
        Be(this.states_), this.keptStates != null && (Be(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((r) => Rt([s, r])) : this.states_[0] = Rt([s, this.cell.stateSize]);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t === !0 ? this.keptStates.push(this.states_.slice()) : Be(this.states_);
        for (let r = 0; r < this.states_.length; ++r) {
          const o = e[r], a = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[r] : this.cell.stateSize, i = [s, a];
          if (!He(o.shape, i))
            throw new z(`State ${r} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${o.shape}`);
          this.states_[r] = o;
        }
      }
      this.states_ = this.states_.map((r) => Yt(r.clone()));
    });
  }
  apply(e, t) {
    let s = t == null ? null : t.initialState, r = t == null ? null : t.constants;
    t == null && (t = {});
    const o = Bw(e, s, r, this.numConstants);
    e = o.inputs, s = o.initialState, r = o.constants;
    let a = [], i = [];
    if (s != null) {
      t.initialState = s, a = a.concat(s), this.stateSpec = [];
      for (const c of s)
        this.stateSpec.push(new _t({ shape: c.shape }));
      i = i.concat(this.stateSpec);
    }
    if (r != null && (t.constants = r, a = a.concat(r), this.numConstants = r.length), a[0] instanceof Bs) {
      const c = [e].concat(a), u = this.inputSpec.concat(i), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, t);
      return this.inputSpec = h, d;
    } else
      return super.apply(e, t);
  }
  // tslint:disable-next-line:no-any
  call(e, t) {
    return H(() => {
      const s = t == null ? null : t.mask, r = t == null ? null : t.training;
      let o = t == null ? null : t.initialState;
      e = _e(e), o == null && (this.stateful ? o = this.states_ : o = this.getInitialState(e));
      const a = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (o.length !== a)
        throw new z(`RNN Layer has ${a} state(s) but was passed ${o.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const i = { training: r }, c = Vw((f, m) => {
        const g = this.cell.call([f].concat(m), i);
        return [g[0], g.slice(1)];
      }, e, o, this.goBackwards, s, null, this.unroll, this.returnSequences), u = c[0], h = c[1], d = c[2];
      this.stateful && this.resetStates(d, r);
      const p = this.returnSequences ? h : u;
      return this.returnState ? [p].concat(d) : p;
    });
  }
  getInitialState(e) {
    return H(() => {
      let t = Rt(e.shape);
      return t = Ie(t, [1, 2]), t = bl(t), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((s) => s > 1 ? Ud(t, [1, s]) : t) : this.cell.stateSize > 1 ? [Ud(t, [1, this.cell.stateSize])] : [t];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.cell != null && this.cell.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    const e = super.getConfig(), t = {
      returnSequences: this.returnSequences,
      returnState: this.returnState,
      goBackwards: this.goBackwards,
      stateful: this.stateful,
      unroll: this.unroll
    };
    this.numConstants != null && (t.numConstants = this.numConstants);
    const s = this.cell.getConfig();
    return this.getClassName() === Br.className && (t.cell = {
      className: this.cell.getClassName(),
      config: s
    }), Object.assign({}, s, e, t);
  }
  /** @nocollapse */
  static fromConfig(e, t, s = {}) {
    const r = t.cell, o = tr(r, s);
    return new e(Object.assign(t, { cell: o }));
  }
}
Br.className = "RNN";
re(Br);
class kh extends je {
}
class mg extends kh {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Ut(this.units, "units"), this.activation = Tr(e.activation == null ? this.DEFAULT_ACTIVATION : e.activation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = mt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = yt(e.kernelRegularizer), this.recurrentRegularizer = yt(e.recurrentRegularizer), this.biasRegularizer = yt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = sa([1, Nr([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = sa([
      1,
      Nr([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])
    ]), this.dropoutFunc = e.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = tt(e), this.kernel = this.addWeight("kernel", [e[e.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
  //   `inputs` and `states`. Here, the two tensors are combined into an
  //   `Tensor[]` Array as the first input argument.
  //   Similarly, PyKeras' equivalent of this method returns two values:
  //    `output` and `[output]`. Here the two are combined into one length-2
  //    `Tensor[]`, consisting of `output` repeated.
  call(e, t) {
    return H(() => {
      if (e = e, e.length !== 2)
        throw new z(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);
      let s = e[1];
      e = e[0];
      const r = t.training == null ? !1 : t.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Er({
        ones: () => jn(e),
        rate: this.dropout,
        training: r,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Er({
        ones: () => jn(s),
        rate: this.recurrentDropout,
        training: r,
        dropoutFunc: this.dropoutFunc
      }));
      let o;
      const a = this.dropoutMask, i = this.recurrentDropoutMask;
      a != null ? o = Gs(F(e, a), this.kernel.read()) : o = Gs(e, this.kernel.read()), this.bias != null && (o = Fs(o, this.bias.read())), i != null && (s = F(s, i));
      let l = ne(o, Gs(s, this.recurrentKernel.read()));
      return this.activation != null && (l = this.activation.apply(l)), [l, l];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = {
      units: this.units,
      activation: kr(this.activation),
      useBias: this.useBias,
      kernelInitializer: xt(this.kernelInitializer),
      recurrentInitializer: xt(this.recurrentInitializer),
      biasInitializer: xt(this.biasInitializer),
      kernelRegularizer: it(this.kernelRegularizer),
      recurrentRegularizer: it(this.recurrentRegularizer),
      biasRegularizer: it(this.biasRegularizer),
      activityRegularizer: it(this.activityRegularizer),
      kernelConstraint: Ot(this.kernelConstraint),
      recurrentConstraint: Ot(this.recurrentConstraint),
      biasConstraint: Ot(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout
    };
    return Object.assign({}, e, t);
  }
}
mg.className = "SimpleRNNCell";
re(mg);
class Ww extends Br {
  constructor(e) {
    e.cell = new mg(e), super(e);
  }
  call(e, t) {
    return H(() => {
      this.cell.dropoutMask != null && (Be(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Be(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, o = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: o });
    });
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t);
  }
}
Ww.className = "SimpleRNN";
re(Ww);
class gg extends kh {
  constructor(e) {
    if (super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.resetAfter)
      throw new z("GRUCell does not support reset_after parameter set to true.");
    this.units = e.units, Ut(this.units, "units"), this.activation = Tr(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = Tr(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = mt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = yt(e.kernelRegularizer), this.recurrentRegularizer = yt(e.recurrentRegularizer), this.biasRegularizer = yt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = sa([1, Nr([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = sa([
      1,
      Nr([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])
    ]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    e = tt(e);
    const t = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [t, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(e, t) {
    return H(() => {
      if (e = e, e.length !== 2)
        throw new z(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);
      const s = t.training == null ? !1 : t.training;
      let r = e[1];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Er({
        ones: () => jn(e),
        rate: this.dropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Er({
        ones: () => jn(r),
        rate: this.recurrentDropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      }));
      const o = this.dropoutMask, a = this.recurrentDropoutMask;
      let i, l, c;
      0 < this.dropout && this.dropout < 1 && (e = F(e, o[0]));
      let u = Gs(e, this.kernel.read());
      this.useBias && (u = Fs(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = F(r, a[0]));
      const h = this.recurrentKernel.read(), [d, p] = Dn(h, [2 * this.units, this.units], h.rank - 1), f = Gs(r, d), [m, g, y] = Dn(u, 3, u.rank - 1), [b, w] = Dn(f, 2, f.rank - 1);
      i = this.recurrentActivation.apply(ne(m, b)), l = this.recurrentActivation.apply(ne(g, w));
      const x = Gs(F(l, r), p);
      c = this.activation.apply(ne(y, x));
      const v = ne(F(i, r), F(ne(1, gt(i)), c));
      return [v, v];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = {
      units: this.units,
      activation: kr(this.activation),
      recurrentActivation: kr(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: xt(this.kernelInitializer),
      recurrentInitializer: xt(this.recurrentInitializer),
      biasInitializer: xt(this.biasInitializer),
      kernelRegularizer: it(this.kernelRegularizer),
      recurrentRegularizer: it(this.recurrentRegularizer),
      biasRegularizer: it(this.biasRegularizer),
      activityRegularizer: it(this.activityRegularizer),
      kernelConstraint: Ot(this.kernelConstraint),
      recurrentConstraint: Ot(this.recurrentConstraint),
      biasConstraint: Ot(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation,
      resetAfter: !1
    };
    return Object.assign({}, e, t);
  }
}
gg.className = "GRUCell";
re(gg);
class Uw extends Br {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new gg(e), super(e);
  }
  call(e, t) {
    return H(() => {
      this.cell.dropoutMask != null && (Be(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Be(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, o = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: o });
    });
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
}
Uw.className = "GRU";
re(Uw);
class Th extends kh {
  constructor(e) {
    super(e), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = e.units, Ut(this.units, "units"), this.activation = Tr(e.activation === void 0 ? this.DEFAULT_ACTIVATION : e.activation), this.recurrentActivation = Tr(e.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : e.recurrentActivation), this.useBias = e.useBias == null ? !0 : e.useBias, this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = mt(e.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = e.unitForgetBias, this.kernelRegularizer = yt(e.kernelRegularizer), this.recurrentRegularizer = yt(e.recurrentRegularizer), this.biasRegularizer = yt(e.biasRegularizer), this.kernelConstraint = Lt(e.kernelConstraint), this.recurrentConstraint = Lt(e.recurrentConstraint), this.biasConstraint = Lt(e.biasConstraint), this.dropout = sa([1, Nr([0, e.dropout == null ? 0 : e.dropout])]), this.recurrentDropout = sa([
      1,
      Nr([0, e.recurrentDropout == null ? 0 : e.recurrentDropout])
    ]), this.dropoutFunc = e.dropoutFunc, this.implementation = e.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(e) {
    var t;
    e = tt(e);
    const s = e[e.length - 1];
    this.kernel = this.addWeight("kernel", [s, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint);
    let r;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const o = this.biasInitializer, a = this.units;
        r = new (t = class extends fs {
          apply(l, c) {
            const u = o.apply([a]), h = new tg().apply([a]), d = o.apply([a * 2]);
            return N0(N0(u, h), d);
          }
        }, /** @nocollapse */
        t.className = "CustomInit", t)();
      } else
        r = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, r, this.biasRegularizer, !0, this.biasConstraint);
    } else
      this.bias = null;
    this.built = !0;
  }
  call(e, t) {
    return H(() => {
      const s = t.training == null ? !1 : t.training;
      if (e = e, e.length !== 3)
        throw new z(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      let r = e[1];
      const o = e[2];
      e = e[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Er({
        ones: () => jn(e),
        rate: this.dropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Er({
        ones: () => jn(r),
        rate: this.recurrentDropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      }));
      const a = this.dropoutMask, i = this.recurrentDropoutMask;
      let l, c, u, h;
      0 < this.dropout && this.dropout < 1 && (e = F(e, a[0]));
      let d = Gs(e, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (r = F(r, i[0])), d = ne(d, Gs(r, this.recurrentKernel.read())), this.useBias && (d = Fs(d, this.bias.read()));
      const [p, f, m, g] = Dn(d, 4, d.rank - 1);
      l = this.recurrentActivation.apply(p), c = this.recurrentActivation.apply(f), u = ne(F(c, o), F(l, this.activation.apply(m))), h = this.recurrentActivation.apply(g);
      const y = F(h, this.activation.apply(u));
      return [y, y, u];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = {
      units: this.units,
      activation: kr(this.activation),
      recurrentActivation: kr(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: xt(this.kernelInitializer),
      recurrentInitializer: xt(this.recurrentInitializer),
      biasInitializer: xt(this.biasInitializer),
      unitForgetBias: this.unitForgetBias,
      kernelRegularizer: it(this.kernelRegularizer),
      recurrentRegularizer: it(this.recurrentRegularizer),
      biasRegularizer: it(this.biasRegularizer),
      activityRegularizer: it(this.activityRegularizer),
      kernelConstraint: Ot(this.kernelConstraint),
      recurrentConstraint: Ot(this.recurrentConstraint),
      biasConstraint: Ot(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation
    };
    return Object.assign({}, e, t);
  }
}
Th.className = "LSTMCell";
re(Th);
class Gw extends Br {
  constructor(e) {
    e.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), e.cell = new Th(e), super(e);
  }
  call(e, t) {
    return H(() => {
      this.cell.dropoutMask != null && (Be(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Be(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, o = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: o });
    });
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return t.implmentation === 0 && (t.implementation = 1), new e(t);
  }
}
Gw.className = "LSTM";
re(Gw);
class yg extends kh {
  constructor(e) {
    super(e), this.cells = e.cells;
  }
  get stateSize() {
    const e = [];
    for (const t of this.cells.slice().reverse())
      Array.isArray(t.stateSize) ? e.push(...t.stateSize) : e.push(t.stateSize);
    return e;
  }
  call(e, t) {
    return H(() => {
      e = e;
      let s = e.slice(1);
      const r = [];
      for (const i of this.cells.slice().reverse())
        Array.isArray(i.stateSize) ? r.push(s.splice(0, i.stateSize.length)) : r.push(s.splice(0, 1));
      r.reverse();
      const o = [];
      let a;
      for (let i = 0; i < this.cells.length; ++i) {
        const l = this.cells[i];
        s = r[i], i === 0 ? a = [e[0]].concat(s) : a = [a[0]].concat(s), a = l.call(a, t), o.push(a.slice(1));
      }
      s = [];
      for (const i of o.slice().reverse())
        s.push(...i);
      return [a[0]].concat(s);
    });
  }
  build(e) {
    Hd(e) && (e = e[0]), e = e;
    let t;
    this.cells.forEach((s, r) => {
      so(`RNNCell_${r}`, () => {
        s.build(e), Array.isArray(s.stateSize) ? t = s.stateSize[0] : t = s.stateSize, e = [e[0], t];
      });
    }), this.built = !0;
  }
  getConfig() {
    const e = super.getConfig(), t = (o) => ({
      className: o.getClassName(),
      config: o.getConfig()
    }), r = { cells: this.cells.map(t) };
    return Object.assign({}, e, r);
  }
  /** @nocollapse */
  static fromConfig(e, t, s = {}) {
    const r = [];
    for (const o of t.cells)
      r.push(tr(o, s));
    return new e({ cells: r });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    const e = [];
    for (const t of this.cells)
      e.push(...t.trainableWeights);
    return e;
  }
  get nonTrainableWeights() {
    const e = [];
    for (const t of this.cells)
      e.push(...t.nonTrainableWeights);
    if (!this.trainable) {
      const t = [];
      for (const s of this.cells)
        t.push(...s.trainableWeights);
      return t.concat(e);
    }
    return e;
  }
  /**
   * Retrieve the weights of a the model.
   *
   * @returns A flat `Array` of `tf.Tensor`s.
   */
  getWeights() {
    const e = [];
    for (const t of this.cells)
      e.push(...t.weights);
    return jd(e);
  }
  /**
   * Set the weights of the model.
   *
   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
   *     the output of `getWeights()`.
   */
  setWeights(e) {
    const t = [];
    for (const s of this.cells) {
      const r = s.weights.length, o = e.splice(r);
      for (let a = 0; a < s.weights.length; ++a)
        t.push([s.weights[a], o[a]]);
    }
    lg(t);
  }
}
yg.className = "StackedRNNCells";
re(yg);
function Er(n) {
  const { ones: e, rate: t, training: s = !1, count: r = 1, dropoutFunc: o } = n, a = () => o != null ? o(e(), t) : Px(e(), t), i = () => wl(a, e, s);
  return !r || r <= 1 ? Yt(i().clone()) : Array(r).fill(void 0).map(i).map((c) => Yt(c.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var F_ = function(n, e) {
  var t = {};
  for (var s in n) Object.prototype.hasOwnProperty.call(n, s) && e.indexOf(s) < 0 && (t[s] = n[s]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var r = 0, s = Object.getOwnPropertySymbols(n); r < s.length; r++)
      e.indexOf(s[r]) < 0 && Object.prototype.propertyIsEnumerable.call(n, s[r]) && (t[s[r]] = n[s[r]]);
  return t;
};
class Hw extends Br {
  constructor(e) {
    if (e.unroll)
      throw new Pe("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(e.cell))
      throw new Pe("It is not possible at the moment to stack convolutional cells.");
    super(e), this.inputSpec = [new _t({ ndim: 5 })];
  }
  call(e, t) {
    return H(() => {
      if (this.cell.dropoutMask != null && (Be(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Be(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), t && t.constants)
        throw new z("ConvRNN2D cell does not support constants");
      const s = t == null ? null : t.mask, r = t == null ? null : t.training, o = t == null ? null : t.initialState;
      return super.call(e, { mask: s, training: r, initialState: o });
    });
  }
  computeOutputShape(e) {
    let t = this.computeSingleOutputShape(e);
    return this.returnSequences || (t = [t[0], ...t.slice(2)]), this.returnState && (t = [t, ...Array(2).fill([e[0], ...t.slice(-3)])]), t;
  }
  getInitialState(e) {
    return H(() => {
      const { stateSize: t } = this.cell, s = e.shape, r = this.computeSingleOutputShape(s), o = [r[0], ...r.slice(2)], a = Rt(o);
      return Array.isArray(t) ? Array(t.length).fill(a) : [a];
    });
  }
  resetStates(e, t = !1) {
    H(() => {
      if (!this.stateful)
        throw new Ls("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape, r = this.computeSingleOutputShape(s), o = [r[0], ...r.slice(2)];
      if (s[0] == null)
        throw new z("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Rt(o)) : this.states_ = [Rt(o)];
      else if (e == null)
        Be(this.states_), this.keptStates != null && (Be(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Rt(o)) : this.states_[0] = Rt(o);
      else {
        if (Array.isArray(e) || (e = [e]), e.length !== this.states_.length)
          throw new z(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);
        t ? this.keptStates.push(this.states_.slice()) : Be(this.states_);
        for (let i = 0; i < this.states_.length; ++i) {
          const l = e[i], c = o;
          if (!He(l.shape, c))
            throw new z(`State ${i} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`);
          this.states_[i] = l;
        }
      }
      this.states_ = this.states_.map((i) => Yt(i.clone()));
    });
  }
  computeSingleOutputShape(e) {
    const { dataFormat: t, filters: s, kernelSize: r, padding: o, strides: a, dilationRate: i } = this.cell, l = t === "channelsFirst", c = e[l ? 3 : 2], u = e[l ? 4 : 3], h = Ns(c, r[0], o, a[0], i[0]), d = Ns(u, r[1], o, a[1], i[1]);
    return [
      ...e.slice(0, 2),
      ...l ? [s, h, d] : [h, d, s]
    ];
  }
}
Hw.className = "ConvRNN2D";
class bg extends Th {
  constructor(e) {
    const { filters: t, kernelSize: s, strides: r, padding: o, dataFormat: a, dilationRate: i } = e;
    super(Object.assign({}, e, { units: t })), this.filters = t, Ut(this.filters, "filters"), this.kernelSize = jo(s, 2, "kernelSize"), this.kernelSize.forEach((l) => Ut(l, "kernelSize")), this.strides = jo(r || 1, 2, "strides"), this.strides.forEach((l) => Ut(l, "strides")), this.padding = o || "valid", Kn(this.padding), this.dataFormat = a || "channelsLast", kt(this.dataFormat), this.dilationRate = jo(i || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => Ut(l, "dilationRate"));
  }
  build(e) {
    var t;
    e = tt(e);
    const s = this.dataFormat === "channelsFirst" ? 1 : e.length - 1;
    if (e[s] == null)
      throw new z(`The channel dimension of the input should be defined. Found ${e[s]}`);
    const r = e[s], o = 4, a = this.kernelSize.concat([r, this.filters * o]);
    this.kernel = this.addWeight("kernel", a, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint);
    const i = this.kernelSize.concat([this.filters, this.filters * o]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", i, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      let l;
      if (this.unitForgetBias) {
        const c = this.biasInitializer, u = this.filters;
        l = new (t = class extends fs {
          apply(d, p) {
            const f = c.apply([u]), m = Wn([u]), g = c.apply([u * 2]);
            return eg([f, m, g]);
          }
        }, /** @nocollapse */
        t.className = "CustomInit", t)();
      } else
        l = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * o], null, l, this.biasRegularizer, !0, this.biasConstraint);
    }
    this.built = !0;
  }
  call(e, t) {
    return H(() => {
      if (e.length !== 3)
        throw new z(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);
      const s = t.training || !1, r = e[0], o = e[1], a = e[2], i = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Er({
        ones: () => jn(r),
        rate: this.dropout,
        training: s,
        count: i,
        dropoutFunc: this.dropoutFunc
      }));
      const l = this.dropoutMask, c = (se, ee, ie) => !ee || !ee[ie] ? se : F(ee[ie], se);
      let u = c(r, l, 0), h = c(r, l, 1), d = c(r, l, 2), p = c(r, l, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Er({
        ones: () => jn(o),
        rate: this.recurrentDropout,
        training: s,
        count: i,
        dropoutFunc: this.dropoutFunc
      }));
      const f = this.recurrentDropoutMask;
      let m = c(o, f, 0), g = c(o, f, 1), y = c(o, f, 2), b = c(o, f, 3);
      const w = 3, [x, v, $, C] = Dn(this.kernel.read(), i, w), [S, E, D, O] = this.useBias ? Dn(this.bias.read(), i) : [null, null, null, null];
      u = this.inputConv(u, x, S, this.padding), h = this.inputConv(h, v, E, this.padding), d = this.inputConv(d, $, D, this.padding), p = this.inputConv(p, C, O, this.padding);
      const [V, W, U, j] = Dn(this.recurrentKernel.read(), i, w);
      m = this.recurrentConv(m, V), g = this.recurrentConv(g, W), y = this.recurrentConv(y, U), b = this.recurrentConv(b, j);
      const q = this.recurrentActivation.apply(ne(u, m)), Y = this.recurrentActivation.apply(ne(h, g)), X = ne(F(Y, a), F(q, this.activation.apply(ne(d, y)))), Q = F(this.recurrentActivation.apply(ne(p, b)), this.activation.apply(X));
      return [Q, Q, X];
    });
  }
  getConfig() {
    const e = super.getConfig(), t = F_(e, ["units"]), s = {
      filters: this.filters,
      kernelSize: this.kernelSize,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      strides: this.strides
    };
    return Object.assign({}, t, s);
  }
  inputConv(e, t, s, r) {
    const o = Cr(e, t, this.strides, r || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return s ? Fs(o, s, this.dataFormat) : o;
  }
  recurrentConv(e, t) {
    return Cr(e, t, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
bg.className = "ConvLSTM2DCell";
re(bg);
class jw extends Hw {
  constructor(e) {
    const t = new bg(e);
    super(Object.assign({}, e, { cell: t }));
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    return new e(t);
  }
}
jw.className = "ConvLSTM2D";
re(jw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class xg extends je {
  constructor(e) {
    super(e), this.rate = Math.max(Math.min(e.rate, 1), 0), this.noiseShape = e.noiseShape, this.seed = e.seed, this.supportsMasking = !0;
  }
  getNoiseShape(e) {
    if (this.noiseShape == null)
      return this.noiseShape;
    const t = e.shape, s = [];
    for (let r = 0; r < this.noiseShape.length; ++r)
      s.push(this.noiseShape[r] == null ? t[r] : this.noiseShape[r]);
    return s;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = _e(e);
      if (0 < this.rate && this.rate < 1) {
        const r = t.training == null ? !1 : t.training, o = this.getNoiseShape(s);
        return wl(() => Px(s, this.rate, o, this.seed), () => s, r);
      }
      return e;
    });
  }
  getConfig() {
    const e = {
      rate: this.rate,
      noiseShape: this.noiseShape,
      seed: this.seed
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  dispose() {
    return super.dispose();
  }
}
xg.className = "Dropout";
re(xg);
class qw extends xg {
  constructor(e) {
    super(e), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(e) {
    const t = e.shape;
    return [t[0], 1, t[2]];
  }
}
qw.className = "SpatialDropout1D";
re(qw);
class Kw extends je {
  constructor(e) {
    if (super(e), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", e.batchInputShape == null && e.inputShape == null && e.inputDim != null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), this.batchInputShape = [t, e.inputDim];
    }
    this.units = e.units, Ut(this.units, "units"), this.activation = Tr(e.activation), e.useBias != null && (this.useBias = e.useBias), this.kernelInitializer = mt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = mt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Lt(e.kernelConstraint), this.biasConstraint = Lt(e.biasConstraint), this.kernelRegularizer = yt(e.kernelRegularizer), this.biasRegularizer = yt(e.biasRegularizer), this.activityRegularizer = yt(e.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }];
  }
  build(e) {
    e = tt(e);
    const t = e[e.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [t, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: t } }], this.built = !0;
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = e.slice();
    return t[t.length - 1] = this.units, t;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = _e(e), r = Dx(this.activation.getClassName());
      let o;
      return r != null ? o = Gs(s, this.kernel.read(), r, this.bias ? this.bias.read() : null) : (o = Gs(s, this.kernel.read()), this.bias != null && (o = Fs(o, this.bias.read())), this.activation != null && (o = this.activation.apply(o))), o;
    });
  }
  getConfig() {
    const e = {
      units: this.units,
      activation: kr(this.activation),
      useBias: this.useBias,
      kernelInitializer: xt(this.kernelInitializer),
      biasInitializer: xt(this.biasInitializer),
      kernelRegularizer: it(this.kernelRegularizer),
      biasRegularizer: it(this.biasRegularizer),
      activityRegularizer: it(this.activityRegularizer),
      kernelConstraint: Ot(this.kernelConstraint),
      biasConstraint: Ot(this.biasConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Kw.className = "Dense";
re(Kw);
class Xw extends je {
  constructor(e) {
    e = e || {}, super(e), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = e.dataFormat;
  }
  computeOutputShape(e) {
    e = tt(e);
    for (const t of e.slice(1))
      if (t == null)
        throw new z(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [e[0], wr(e, 1)];
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      let s = _e(e);
      if (this.dataFormat === "channelsFirst" && s.rank > 1) {
        const r = [0];
        for (let o = 2; o < s.rank; ++o)
          r.push(o);
        r.push(1), s = We(s, r);
      }
      return fF(s);
    });
  }
  getConfig() {
    const e = {};
    this.dataFormat != null && (e.dataFormat = this.dataFormat);
    const t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Xw.className = "Flatten";
re(Xw);
class Yw extends je {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.activation = Tr(e.activation);
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = _e(e);
      return this.activation.apply(s);
    });
  }
  getConfig() {
    const e = { activation: kr(this.activation) }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Yw.className = "Activation";
re(Yw);
class Zw extends je {
  constructor(e) {
    super(e), this.n = e.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(e) {
    return [e[0], this.n, e[1]];
  }
  call(e, t) {
    return H(() => (e = _e(e), dF(e, this.n)));
  }
  getConfig() {
    const e = {
      n: this.n
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Zw.className = "RepeatVector";
re(Zw);
class Jw extends je {
  constructor(e) {
    super(e), this.targetShape = e.targetShape;
    for (let t = 0; t < this.targetShape.length; ++t)
      this.isUnknown(this.targetShape[t]) && (this.targetShape[t] = null);
  }
  isUnknown(e) {
    return e < 0 || e == null;
  }
  /**
   * Finds and replaces a missing dimension in output shape.
   *
   * This is a near direct port of the internal Numpy function
   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
   *
   * @param inputShape: Original shape of array begin reshape.
   * @param outputShape: Target shape of the array, with at most a single
   * `null` or negative number, which indicates an underdetermined dimension
   * that should be derived from `inputShape` and the known dimensions of
   *   `outputShape`.
   * @returns: The output shape with `null` replaced with its computed value.
   * @throws: ValueError: If `inputShape` and `outputShape` do not match.
   */
  fixUnknownDimension(e, t) {
    const s = "Total size of new array must be unchanged.", r = t.slice();
    let o = 1, a = null;
    for (let l = 0; l < r.length; ++l) {
      const c = r[l];
      if (this.isUnknown(c))
        if (a === null)
          a = l;
        else
          throw new z("Can only specifiy one unknown dimension.");
      else
        o *= c;
    }
    const i = wr(e);
    if (a !== null) {
      if (o === 0 || i % o !== 0)
        throw new z(s);
      r[a] = i / o;
    } else if (i !== o)
      throw new z(s);
    return r;
  }
  computeOutputShape(e) {
    let t = !1;
    for (let s = 0; s < e.length; ++s)
      if (this.isUnknown(e[s])) {
        t = !0;
        break;
      }
    return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = _e(e), r = s.shape, o = r.slice(0, 1).concat(this.fixUnknownDimension(r.slice(1), this.targetShape));
      return P(s, o);
    });
  }
  getConfig() {
    const e = {
      targetShape: this.targetShape
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Jw.className = "Reshape";
re(Jw);
class Qw extends je {
  constructor(e) {
    if (super(e), e.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(e.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);
    const t = Es(1, e.dims.length + 1);
    if (!He(e.dims.slice().sort(), t))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(e.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = e.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new _t({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = e.slice();
    return this.dims.forEach((s, r) => {
      t[r + 1] = e[s];
    }), t;
  }
  call(e, t) {
    return We(_e(e), this.dimsIncludingBatch);
  }
  getConfig() {
    const e = {
      dims: this.dims
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
Qw.className = "Permute";
re(Qw);
class e2 extends je {
  constructor(e) {
    super(e ?? {}), this.supportsMasking = !0, e != null ? this.maskValue = e.maskValue == null ? 0 : e.maskValue : this.maskValue = 0;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { maskValue: this.maskValue };
    return Object.assign(t, e), t;
  }
  computeMask(e, t) {
    const s = _e(e);
    return fc(na(s, this.maskValue), -1);
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = _e(e), a = fc(na(s, this.maskValue), -1, !0);
      return F(s, fe(a, s.dtype));
    });
  }
}
e2.className = "Masking";
re(e2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class t2 extends je {
  constructor(e) {
    if (super(e), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", e.batchInputShape == null && e.inputShape == null) {
      let t = null;
      e.batchSize != null && (t = e.batchSize), e.inputLength == null ? this.batchInputShape = [t, null] : this.batchInputShape = [t].concat(ht(e.inputLength));
    }
    this.inputDim = e.inputDim, Ut(this.inputDim, "inputDim"), this.outputDim = e.outputDim, Ut(this.outputDim, "outputDim"), this.embeddingsInitializer = mt(e.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = yt(e.embeddingsRegularizer), this.activityRegularizer = yt(e.activityRegularizer), this.embeddingsConstraint = Lt(e.embeddingsConstraint), this.maskZero = e.maskZero, this.supportsMasking = e.maskZero, this.inputLength = e.inputLength;
  }
  build(e) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
  }
  // Override warnOnIncompatibleInputShape because an embedding layer allows
  // the input to have varying ranks.
  warnOnIncompatibleInputShape(e) {
  }
  computeMask(e, t) {
    return H(() => this.maskZero ? (e = _e(e), na(e, Ge(e))) : null);
  }
  computeOutputShape(e) {
    if (e = tt(e), this.inputLength == null)
      return [...e, this.outputDim];
    const t = ht(this.inputLength);
    if (t.length !== e.length - 1)
      throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
    {
      let s = 0;
      for (let r = 0; r < t.length; ++r) {
        const o = t[r], a = e[r + 1];
        if (o != null && a != null && o !== a)
          throw new z(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);
        o == null && (t[s] = a), s++;
      }
    }
    return [e[0], ...t, this.outputDim];
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      let s = _e(e);
      s.dtype !== "int32" && (s = yl(s, "int32"));
      const r = Lx(this.embeddings.read(), P(s, [s.size]));
      return P(r, tt(this.computeOutputShape(s.shape)));
    });
  }
  getConfig() {
    const e = {
      inputDim: this.inputDim,
      outputDim: this.outputDim,
      embeddingsInitializer: xt(this.embeddingsInitializer),
      embeddingsRegularizer: it(this.embeddingsRegularizer),
      activityRegularizer: it(this.activityRegularizer),
      embeddingsConstraint: Ot(this.embeddingsConstraint),
      maskZero: this.maskZero,
      inputLength: this.inputLength
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
t2.className = "Embedding";
re(t2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class vo extends je {
  constructor(e) {
    super(e || {}), this.supportsMasking = !0;
  }
  /**
   * Logic for merging multiple tensors, to be overridden by subclasses.
   * @param inputs
   */
  mergeFunction(e) {
    throw new Pe();
  }
  /**
   * Computes the shape of the result of an elementwise operation.
   *
   * @param shape1: Shape of the first tensor.
   * @param shape2: Shape of the second tensor.
   * @returns Expected output shape when an elementwise operation is carried
   *   out on 2 tensors with shapes `shape1` and `shape2`.
   * @throws ValueError: If `shape1` and `shape2` are not compatible for
   *   element-wise operations.
   */
  computeElementwiseOpOutputShape(e, t) {
    if (e == null || t == null)
      return null;
    if (e.length < t.length)
      return this.computeElementwiseOpOutputShape(t, e);
    if (t.length === 0)
      return e;
    const s = e.slice(0, e.length - t.length);
    for (let r = 0; r < t.length; ++r) {
      const o = e[e.length - t.length + r], a = t[r];
      if (o == null || a == null || o < 0 || a < 0)
        s.push(null);
      else if (o === 1)
        s.push(a);
      else if (a === 1)
        s.push(o);
      else {
        if (o !== a)
          throw new z("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));
        s.push(o);
      }
    }
    return s;
  }
  build(e) {
    if (Array.isArray(e) && !Array.isArray(e[0]) && (e = [tt(e)]), e = e, e.length < 2)
      throw new z(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);
    let t = [];
    for (const o of e)
      o != null && o[0] !== null && t.push(o[0]);
    if (t = xr(t), t.length > 1)
      throw new z(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);
    let s = e[0] == null ? null : e[0].slice(1);
    for (let o = 1; o < e.length; ++o) {
      const a = e[o] == null ? null : e[o].slice(1);
      s = this.computeElementwiseOpOutputShape(s, a);
    }
    const r = e.map((o) => o.length);
    e.indexOf(null) === -1 && xr(r).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
  }
  call(e, t) {
    return H(() => {
      if (e = e, this.reshapeRequired) {
        const s = [], r = e.map((o) => o.rank);
        if (r.indexOf(null) === -1) {
          const o = Nr(r);
          for (let a of e) {
            const i = a.rank;
            for (let l = 0; l < o - i; ++l)
              a = bl(a, 1);
            s.push(a);
          }
          return this.mergeFunction(s);
        } else {
          let o = !1;
          for (const l of e) {
            const c = l.rank;
            if (c == null) {
              const u = l.shape, h = u[0], d = u.slice(1).concat([h]);
              let p = P(l, [h].concat(wr(u.slice(1))));
              p = We(p, [1, 0]), p = P(p, d), s.push(p), o = !0;
            } else if (c > 1) {
              const u = Es(1, c).concat([0]);
              s.push(We(l, u)), o = !0;
            } else
              s.push(l);
          }
          let a = this.mergeFunction(s);
          const i = a.rank;
          if (o) {
            if (i == null) {
              const l = a.shape, c = l.length, u = l[c - 1], h = [u].concat(l.slice(0, l.length - 1));
              a = P(We(P(a, [-1, u]), [1, 0]), h);
            } else if (i > 1) {
              const l = [i - 1].concat(Es(0, i - 1));
              a = We(a, l);
            }
          }
          return a;
        }
      } else
        return this.mergeFunction(e);
    });
  }
  computeOutputShape(e) {
    e = e;
    let t;
    e[0] == null ? t = null : t = e[0].slice(1);
    for (let r = 1; r < e.length; ++r) {
      const o = e[r] == null ? null : e[r].slice(1);
      t = this.computeElementwiseOpOutputShape(t, o);
    }
    let s = [];
    for (const r of e)
      r != null && r[0] !== null && s.push(r[0]);
    return s = xr(s), s.length === 1 ? t = s.concat(t) : t = [null].concat(t), t;
  }
  computeMask(e, t) {
    return H(() => {
      if (t == null)
        return null;
      if (!Array.isArray(t))
        throw new z("`mask` should be an Array");
      if (!Array.isArray(e))
        throw new z("`inputs` should be an Array");
      if (t.length !== e.length)
        throw new z(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);
      if (t.every((r) => r == null))
        return null;
      t = t.map((r) => r == null ? r : xn(r, 0));
      let s = t[0];
      for (let r = 1; r < t.length - 1; ++r)
        s = js(s, t[r]);
      return s;
    });
  }
}
class n2 extends vo {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0].clone();
      for (let s = 1; s < e.length; ++s)
        t = ne(t, e[s]);
      return t;
    });
  }
}
n2.className = "Add";
re(n2);
class s2 extends vo {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0].clone();
      for (let s = 1; s < e.length; ++s)
        t = F(t, e[s]);
      return t;
    });
  }
}
s2.className = "Multiply";
re(s2);
class r2 extends vo {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0].clone();
      for (let s = 1; s < e.length; ++s)
        t = ne(t, e[s]);
      return F(1 / e.length, t);
    });
  }
}
r2.className = "Average";
re(r2);
class o2 extends vo {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0];
      for (let s = 1; s < e.length; ++s)
        t = cr(t, e[s]);
      return t;
    });
  }
}
o2.className = "Maximum";
re(o2);
class a2 extends vo {
  constructor(e) {
    super(e);
  }
  mergeFunction(e) {
    return H(() => {
      let t = e[0];
      for (let s = 1; s < e.length; ++s)
        t = hl(t, e[s]);
      return t;
    });
  }
}
a2.className = "Minimum";
re(a2);
class i2 extends vo {
  constructor(e) {
    super(e), this.DEFAULT_AXIS = -1, e == null && (e = {}), this.axis = e.axis == null ? this.DEFAULT_AXIS : e.axis, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])) || e.length === 1)
      throw new z("A `Concatenate` layer should be called on a list of at least 2 inputs");
    e = e;
    let t = !0;
    for (const r of e)
      if (r != null) {
        t = !1;
        break;
      }
    if (t)
      return;
    const s = [];
    for (let r = 0; r < e.length; ++r) {
      const o = e[r].slice();
      o.splice(this.axis, 1);
      let a = !1;
      for (const i of s)
        if (He(i, o)) {
          a = !0;
          break;
        }
      a || s.push(o);
    }
    if (s.length > 1)
      throw new z("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
  }
  mergeFunction(e) {
    return H(() => eg(e, this.axis));
  }
  computeOutputShape(e) {
    if (!(Array.isArray(e) && Array.isArray(e[0])))
      throw new z("A `Concatenate` layer should be called on a list of inputs.");
    const t = e, s = t[0].slice(), r = this.axis < 0 ? s.length + this.axis : this.axis;
    for (const o of t.slice(1)) {
      if (s[r] == null || o[r] == null) {
        s[r] = null;
        break;
      }
      s[r] += o[r];
    }
    return s;
  }
  computeMask(e, t) {
    if (t == null)
      return null;
    if (!Array.isArray(t))
      throw new z("`mask` should be an array for Concatenate");
    if (!Array.isArray(e))
      throw new z("`inputs` should be an array for Concatenate");
    if (t.length !== e.length)
      throw new z(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);
    return H(() => {
      let s = !0;
      if (t.forEach((a) => {
        if (a != null) {
          s = !1;
          return;
        }
      }), s)
        return null;
      const r = [];
      for (let a = 0; a < e.length; ++a)
        t[a] == null ? r.push(fe(jn(e[a]), "bool")) : t[a].rank < e[a].rank ? r.push(xn(t[a], -1)) : r.push(t[a]);
      const o = ft(r, this.axis);
      return Mf(o, -1, !1);
    });
  }
  getConfig() {
    const e = {
      axis: this.axis
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
i2.className = "Concatenate";
re(i2);
function _a(n, e) {
  for (; n < 0; )
    n += e;
  return n;
}
function __(n, e, t) {
  if (n.shape.length > 3 || e.shape.length > 3)
    throw new Pe("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (N(n.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`), N(n.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`), typeof t == "number" && (t = [t, t]), n.dtype === "complex64" || e.dtype === "complex64")
    throw new Pe("batchDot is not implemented for complex64-type Tensors yet.");
  const s = n.shape.length, r = e.shape.length;
  t == null && (t = [s - 1, r - 2]);
  const o = t;
  return H(() => {
    let a;
    if (s > r) {
      a = s - r;
      const l = [];
      for (let c = 0; c < a; ++c)
        l.push(1);
      e = P(e, e.shape.concat(l));
    } else if (r > s) {
      a = r - s;
      const l = [];
      for (let c = 0; c < a; ++c)
        l.push(1);
      n = P(n, n.shape.concat(l));
    } else
      a = 0;
    let i;
    if (n.shape.length === 2 && e.shape.length === 2)
      o[0] === o[1] ? i = Ie(F(n, e), o[0]) : i = Ie(F(We(n, [1, 0]), e), o[1]);
    else {
      const l = o[0] !== n.shape.length - 1, c = o[1] === e.shape.length - 1;
      i = Me(n, e, l, c);
    }
    if (a > 0) {
      let l;
      s > r ? l = s + r - 3 : l = s - 1;
      const c = [];
      for (let u = l; u < l + a; ++u)
        c.push(u);
      i = An(i, c);
    }
    return i.shape.length === 1 && (i = xn(i, 1)), i;
  });
}
class l2 extends vo {
  constructor(e) {
    super(e), this.axes = e.axes, this.normalize = e.normalize == null ? !1 : e.normalize, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(e) {
    N(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const t = e[0], s = e[1];
    if (t.length > 3 || s.length > 3)
      throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(t, s);
    if (t[r[0]] !== s[r[1]])
      throw new z(`Dimension incompatibility: ${t[r[0]]} !== ${s[r[1]]}`);
  }
  mergeFunction(e) {
    if (e.length !== 2)
      throw new z(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);
    let t = e[0], s = e[1], r;
    return Array.isArray(this.axes) ? r = this.axes.map((o, a) => _a(o, e[a].shape.length)) : r = [
      _a(this.axes, t.shape.length),
      _a(this.axes, s.shape.length)
    ], this.normalize && (t = Ic(t, r[0]), s = Ic(s, r[1])), __(t, s, r);
  }
  interpretAxes(e, t) {
    let s;
    return Array.isArray(this.axes) ? s = this.axes : s = [
      _a(this.axes, e.length),
      _a(this.axes, t.length)
    ], s;
  }
  computeOutputShape(e) {
    N(Array.isArray(e) && e.length === 2 && Array.isArray(e[0]) && Array.isArray(e[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const t = e[0].slice(), s = e[1].slice();
    if (t.length > 3 || s.length > 3)
      throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");
    const r = this.interpretAxes(t, s);
    t.splice(r[0], 1), s.splice(r[1], 1), s.splice(0, 1);
    const o = t.concat(s);
    return o.length === 1 && o.push(1), o;
  }
  computeMask(e, t) {
    return null;
  }
  getConfig() {
    const e = {
      axes: this.axes,
      normalize: this.normalize
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
l2.className = "Dot";
re(l2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class c2 extends je {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.stddev = e.stddev;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { stddev: this.stddev };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = _e(e);
      return wl(() => ne(vh(s.shape, 0, this.stddev), s), () => s, t.training || !1);
    });
  }
}
c2.className = "GaussianNoise";
re(c2);
class u2 extends je {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.rate = e.rate;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t);
      const s = _e(e);
      return this.rate > 0 && this.rate < 1 ? wl(() => {
        const o = Math.sqrt(this.rate / (1 - this.rate));
        return F(s, vh(s.shape, 1, o));
      }, () => s, t.training || !1) : s;
    });
  }
}
u2.className = "GaussianDropout";
re(u2);
class h2 extends je {
  constructor(e) {
    super(e), this.supportsMasking = !0, this.rate = e.rate, this.noiseShape = e.noiseShape;
  }
  _getNoiseShape(e) {
    return this.noiseShape || _e(e).shape;
  }
  computeOutputShape(e) {
    return e;
  }
  getConfig() {
    const e = super.getConfig(), t = { rate: this.rate };
    return Object.assign(t, e), t;
  }
  call(e, t) {
    return H(() => {
      if (this.rate < 1 && this.rate > 0) {
        const s = this._getNoiseShape(e);
        return wl(() => {
          const o = _e(e), l = -1.6732632423543772 * 1.0507009873554805;
          let c = yo(dl(s), this.rate);
          c = yl(c, "float32");
          const u = ((1 - this.rate) * (1 + this.rate * l ** 2)) ** -0.5, h = -u * l * this.rate, d = ne(F(o, c), F(ne(c, -1), l));
          return ne(F(d, u), h);
        }, () => _e(e), t.training || !1);
      }
      return e;
    });
  }
}
h2.className = "AlphaDropout";
re(h2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Ja(n, e, t, s, r, o = 1e-3) {
  let a;
  if (n.rank === 2)
    a = ob(n, e, t, s, r, o);
  else if (n.rank === 3)
    a = ab(n, e, t, s, r, o);
  else if (n.rank === 4)
    a = ib(n, e, t, s, r, o);
  else
    throw new Pe(`batchNormalization is not implemented for array of rank ${n.rank} yet`);
  return a;
}
function O_(n, e, t, s, r = 1e-3) {
  return H(() => {
    const o = sh(n, s), a = o.mean, i = o.variance;
    return [Ja(n, a, i, t, e, r), a, i];
  });
}
function L_(n, e, t, s, r = 1e-3) {
  return H(() => {
    const o = sh(n, s), a = o.mean, i = o.variance, l = [];
    for (const f of Es(0, n.rank))
      s.indexOf(f) !== -1 ? l.push(1) : l.push(n.shape[f]);
    const c = P(a, l), u = P(i, l), h = e == null ? null : P(e, l), d = t == null ? null : P(t, l);
    return [Ja(n, c, u, d, h, r), a, i];
  });
}
function P_(n, e, t, s, r = 1e-3) {
  return He(s.slice().sort(), Es(0, n.rank - 1)) ? O_(n, e, t, s, r) : L_(n, e, t, s, r);
}
class d2 extends je {
  constructor(e) {
    e == null && (e = {}), super(e), this.supportsMasking = !0, this.axis = e.axis == null ? -1 : e.axis, this.momentum = e.momentum == null ? 0.99 : e.momentum, this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? !0 : e.center, this.scale = e.scale == null ? !0 : e.scale, this.betaInitializer = mt(e.betaInitializer || "zeros"), this.gammaInitializer = mt(e.gammaInitializer || "ones"), this.movingMeanInitializer = mt(e.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = mt(e.movingVarianceInitializer || "ones"), this.betaConstraint = Lt(e.betaConstraint), this.gammaConstraint = Lt(e.gammaConstraint), this.betaRegularizer = yt(e.betaRegularizer), this.gammaRegularizer = yt(e.gammaRegularizer);
  }
  build(e) {
    e = tt(e);
    const t = this.axis >= 0 ? this.axis : this.axis + e.length, s = e[t];
    if (s == null)
      throw new z(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);
    this.inputSpec = [new _t({ ndim: e.length, axes: { [t]: s } })];
    const r = [s];
    this.scale && (this.gamma = this.addWeight("gamma", r, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", r, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", r, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", r, null, this.movingVarianceInitializer, null, !1), this.built = !0;
  }
  call(e, t) {
    return H(() => {
      const s = t.training == null ? !1 : t.training, r = _e(e), o = r.shape, a = o.length, i = Es(0, a), l = this.axis >= 0 ? this.axis : this.axis + a;
      i.splice(l, 1);
      const c = uo(1, a);
      c[l] = o[l];
      const u = i.slice();
      u.sort();
      const h = !He(u, Es(0, a).slice(0, a - 1)), d = () => {
        if (h) {
          const b = P(this.movingMean.read(), c), w = P(this.movingVariance.read(), c), x = this.center ? P(this.beta.read(), c) : null, v = this.scale ? P(this.gamma.read(), c) : null;
          return Ja(r, b, w, x, v, this.epsilon);
        } else
          return Ja(r, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!s)
        return d();
      const [p, f, m] = P_(r, this.gamma.read(), this.beta.read(), i, this.epsilon), g = (b, w, x) => {
        H(() => {
          const v = 1 - x, $ = b.read(), C = F(ge($, w), v);
          b.write(ge($, C));
        });
      };
      return (() => {
        g(this.movingMean, f, this.momentum), g(this.movingVariance, m, this.momentum);
      })(), p;
    });
  }
  getConfig() {
    const e = {
      axis: this.axis,
      momentum: this.momentum,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: xt(this.betaInitializer),
      gammaInitializer: xt(this.gammaInitializer),
      movingMeanInitializer: xt(this.movingMeanInitializer),
      movingVarianceInitializer: xt(this.movingVarianceInitializer),
      betaRegularizer: it(this.betaRegularizer),
      gammaRegularizer: it(this.gammaRegularizer),
      betaConstraint: Ot(this.betaConstraint),
      gammaConstraint: Ot(this.gammaConstraint)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
d2.className = "BatchNormalization";
re(d2);
class p2 extends je {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.axis = e.axis == null ? -1 : e.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (const t of this.axis)
        if (!Number.isInteger(t))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = e.epsilon == null ? 1e-3 : e.epsilon, this.center = e.center == null ? !0 : e.center, this.scale = e.scale == null ? !0 : e.scale, this.betaInitializer = mt(e.betaInitializer || "zeros"), this.gammaInitializer = mt(e.gammaInitializer || "ones"), this.betaRegularizer = yt(e.betaRegularizer), this.gammaRegularizer = yt(e.gammaRegularizer), this.supportsMasking = !0;
  }
  build(e) {
    e = tt(e);
    const t = e.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let o = 0; o < this.axis.length; ++o)
      this.axis[o] < 0 && (this.axis[o] += t);
    for (const o of this.axis)
      if (o < 0 || o >= t)
        throw new Error(`Invalid axis: ${o}`);
    if (this.axis.length !== xr(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    const s = this.axis.map((o) => e[o]), r = !0;
    this.scale ? this.gamma = this.addWeight("gamma", s, "float32", this.gammaInitializer, this.gammaRegularizer, r) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", s, "float32", this.betaInitializer, this.betaRegularizer, r) : this.beta = null, this.built = !0;
  }
  call(e, t) {
    const s = _e(e), r = s.shape, o = r.length;
    return H(() => {
      let { mean: i, variance: l } = sh(s, this.axis, !0);
      const c = uo(1, o);
      for (const m of this.axis)
        c[m] = r[m];
      const u = (m) => m != null && m.shape.length !== o ? P(m, c) : m;
      let h = this.scale ? u(this.gamma.read()) : null, d = this.center ? u(this.beta.read()) : null;
      const p = [], f = [];
      for (let m = 0; m < o; ++m)
        this.axis.indexOf(m) !== -1 ? (p.push(r[m]), f.push(1)) : (p.push(1), f.push(r[m]));
      return i = is(i, p), l = is(l, p), h != null && (h = is(h, f)), d != null && (d = is(d, f)), Ja(s, i, l, d, h, this.epsilon);
    });
  }
  getConfig() {
    const e = {
      axis: this.axis,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: xt(this.betaInitializer),
      gammaInitializer: xt(this.gammaInitializer),
      betaRegularizer: it(this.betaRegularizer),
      gammaRegularizer: it(this.gammaRegularizer)
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
p2.className = "LayerNormalization";
re(p2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function z_(n, e, t) {
  return H(() => {
    if (n.rank !== 4)
      throw new z(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);
    if (e == null && (e = [[1, 1], [1, 1]]), e.length !== 2 || e[0].length !== 2 || e[1].length !== 2)
      throw new z("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (t == null && (t = Ds()), t !== "channelsLast" && t !== "channelsFirst")
      throw new z(`Unknown data format: ${t}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let s;
    return t === "channelsFirst" ? s = [[0, 0], [0, 0], e[0], e[1]] : s = [[0, 0], e[0], e[1], [0, 0]], zr(n, s);
  });
}
class f2 extends je {
  constructor(e) {
    if (e == null && (e = {}), super(e), this.dataFormat = e.dataFormat == null ? Ds() : e.dataFormat, e.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof e.padding == "number")
      this.padding = [[e.padding, e.padding], [e.padding, e.padding]];
    else {
      if (e.padding = e.padding, e.padding.length !== 2)
        throw new z(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);
      let t, s;
      if (typeof e.padding[0] == "number")
        t = [e.padding[0], e.padding[0]], s = [e.padding[1], e.padding[1]];
      else {
        if (e.padding = e.padding, e.padding[0].length !== 2)
          throw new z(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);
        if (t = e.padding[0], e.padding[1].length !== 2)
          throw new z(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);
        s = e.padding[1];
      }
      this.padding = [t, s];
    }
    this.inputSpec = [new _t({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = tt(e);
    let t, s;
    return this.dataFormat === "channelsFirst" ? (e[2] != null && e[2] >= 0 ? t = e[2] + this.padding[0][0] + this.padding[0][1] : t = null, e[3] != null && e[3] >= 0 ? s = e[3] + this.padding[1][0] + this.padding[1][1] : s = null, [e[0], e[1], t, s]) : (e[1] != null && e[1] >= 0 ? t = e[1] + this.padding[0][0] + this.padding[0][1] : t = null, e[2] != null && e[2] >= 0 ? s = e[2] + this.padding[1][0] + this.padding[1][1] : s = null, [e[0], t, s, e[3]]);
  }
  call(e, t) {
    return H(() => z_(_e(e), this.padding, this.dataFormat));
  }
  getConfig() {
    const e = {
      padding: this.padding,
      dataFormat: this.dataFormat
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
f2.className = "ZeroPadding2D";
re(f2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Eh(n, e, t, s, r, o) {
  return H(() => {
    kt(r), Rx(o), Kn(s), t == null && (t = [1, 1]), s == null && (s = "valid"), r == null && (r = Ds()), o == null && (o = "max"), n = fg(n, r);
    let a;
    const i = s === "same" ? "same" : "valid";
    return o === "max" ? a = nh(n, e, t, i) : a = Xu(
      // TODO(cais): Rank check?
      n,
      e,
      t,
      i
    ), r === "channelsFirst" && (a = We(a, [0, 3, 1, 2])), a;
  });
}
function m2(n, e, t, s, r, o) {
  return H(() => {
    kt(r), Rx(o), Kn(s), t == null && (t = [1, 1, 1]), s == null && (s = "valid"), r == null && (r = Ds()), o == null && (o = "max"), n = Rw(n, r);
    let a;
    const i = s === "same" ? "same" : "valid";
    return o === "max" ? a = Ab(n, e, t, i) : a = rb(n, e, t, i), r === "channelsFirst" && (a = We(a, [0, 4, 1, 2, 3])), a;
  });
}
class g2 extends je {
  /**
   *
   * @param args Parameters for the Pooling layer.
   *
   * config.poolSize defaults to 2.
   */
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = 2), super(e), typeof e.poolSize == "number")
      this.poolSize = [e.poolSize];
    else if (Array.isArray(e.poolSize) && e.poolSize.length === 1 && typeof e.poolSize[0] == "number")
      this.poolSize = e.poolSize;
    else
      throw new z(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);
    if (Ut(this.poolSize, "poolSize"), e.strides == null)
      this.strides = this.poolSize;
    else if (typeof e.strides == "number")
      this.strides = [e.strides];
    else if (Array.isArray(e.strides) && e.strides.length === 1 && typeof e.strides[0] == "number")
      this.strides = e.strides;
    else
      throw new z(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);
    Ut(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, Kn(this.padding), this.inputSpec = [new _t({ ndim: 3 })];
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = Ns(e[1], this.poolSize[0], this.padding, this.strides[0]);
    return [e[0], t, e[2]];
  }
  call(e, t) {
    return H(() => {
      this.invokeCallHook(e, t), e = bl(_e(e), 2);
      const s = this.poolingFunction(_e(e), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return An(s, [2]);
    });
  }
  getConfig() {
    const e = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class y2 extends g2 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, o) {
    return kt(o), Kn(r), Eh(e, t, s, r, o, "max");
  }
}
y2.className = "MaxPooling1D";
re(y2);
class b2 extends g2 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, o) {
    return kt(o), Kn(r), Eh(e, t, s, r, o, "avg");
  }
}
b2.className = "AveragePooling1D";
re(b2);
class x2 extends je {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 2)
        throw new z(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides];
    Ut(this.poolSize, "poolSize"), Ut(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, kt(this.dataFormat), Kn(this.padding), this.inputSpec = [new _t({ ndim: 4 })];
  }
  computeOutputShape(e) {
    e = tt(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2];
    return t = Ns(t, this.poolSize[0], this.padding, this.strides[0]), s = Ns(s, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, s] : [e[0], t, s, e[3]];
  }
  call(e, t) {
    return H(() => (this.invokeCallHook(e, t), this.poolingFunction(_e(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const e = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class w2 extends x2 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, o) {
    return kt(o), Kn(r), Eh(e, t, s, r, o, "max");
  }
}
w2.className = "MaxPooling2D";
re(w2);
class v2 extends x2 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, o) {
    return kt(o), Kn(r), Eh(e, t, s, r, o, "avg");
  }
}
v2.className = "AveragePooling2D";
re(v2);
class I2 extends je {
  constructor(e) {
    if (e.poolSize == null && (e.poolSize = [2, 2, 2]), super(e), this.poolSize = Array.isArray(e.poolSize) ? e.poolSize : [e.poolSize, e.poolSize, e.poolSize], e.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(e.strides)) {
      if (e.strides.length !== 3)
        throw new z(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);
      this.strides = e.strides;
    } else
      this.strides = [e.strides, e.strides, e.strides];
    Ut(this.poolSize, "poolSize"), Ut(this.strides, "strides"), this.padding = e.padding == null ? "valid" : e.padding, this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, kt(this.dataFormat), Kn(this.padding), this.inputSpec = [new _t({ ndim: 5 })];
  }
  computeOutputShape(e) {
    e = tt(e);
    let t = this.dataFormat === "channelsFirst" ? e[2] : e[1], s = this.dataFormat === "channelsFirst" ? e[3] : e[2], r = this.dataFormat === "channelsFirst" ? e[4] : e[3];
    return t = Ns(t, this.poolSize[0], this.padding, this.strides[0]), s = Ns(s, this.poolSize[1], this.padding, this.strides[1]), r = Ns(r, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [e[0], e[1], t, s, r] : [e[0], t, s, r, e[4]];
  }
  call(e, t) {
    return H(() => (this.invokeCallHook(e, t), this.poolingFunction(_e(e), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const e = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class $2 extends I2 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, o) {
    return kt(o), Kn(r), m2(e, t, s, r, o, "max");
  }
}
$2.className = "MaxPooling3D";
re($2);
class C2 extends I2 {
  constructor(e) {
    super(e);
  }
  poolingFunction(e, t, s, r, o) {
    return kt(o), Kn(r), m2(e, t, s, r, o, "avg");
  }
}
C2.className = "AveragePooling3D";
re(C2);
class S2 extends je {
  constructor(e) {
    super(e), this.inputSpec = [new _t({ ndim: 3 })];
  }
  computeOutputShape(e) {
    return [e[0], e[2]];
  }
  call(e, t) {
    throw new Pe();
  }
}
class N2 extends S2 {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return H(() => {
      const s = _e(e);
      return vt(s, 1);
    });
  }
}
N2.className = "GlobalAveragePooling1D";
re(N2);
class k2 extends S2 {
  constructor(e) {
    super(e || {});
  }
  call(e, t) {
    return H(() => {
      const s = _e(e);
      return Ss(s, 1);
    });
  }
}
k2.className = "GlobalMaxPooling1D";
re(k2);
class T2 extends je {
  constructor(e) {
    super(e), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, kt(this.dataFormat), this.inputSpec = [new _t({ ndim: 4 })];
  }
  computeOutputShape(e) {
    return e = e, this.dataFormat === "channelsLast" ? [e[0], e[3]] : [e[0], e[1]];
  }
  call(e, t) {
    throw new Pe();
  }
  getConfig() {
    const e = { dataFormat: this.dataFormat }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
}
class E2 extends T2 {
  call(e, t) {
    return H(() => {
      const s = _e(e);
      return this.dataFormat === "channelsLast" ? vt(s, [1, 2]) : vt(s, [2, 3]);
    });
  }
}
E2.className = "GlobalAveragePooling2D";
re(E2);
class D2 extends T2 {
  call(e, t) {
    return H(() => {
      const s = _e(e);
      return this.dataFormat === "channelsLast" ? Ss(s, [1, 2]) : Ss(s, [2, 3]);
    });
  }
}
D2.className = "GlobalMaxPooling2D";
re(D2);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class A2 extends je {
  constructor(e) {
    super(e), this.layer = e.layer;
  }
  build(e) {
    this.built = !0;
  }
  // TODO(cais): Implement activityRegularizer getter.
  get trainable() {
    return this.layer != null ? this.layer.trainable : !1;
  }
  set trainable(e) {
    this.layer != null && (this.layer.trainable = e);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  // TODO(cais): Implement setter for trainableWeights.
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  // TODO(cais): Implement setter for nonTrainableWeights.
  get updates() {
    return this.layer._updates;
  }
  // TODO(cais): Implement getUpdatesFor().
  get losses() {
    return this.layer.losses;
  }
  // TODO(cais): Implement getLossesFor().
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(e) {
    this.layer.setWeights(e);
  }
  getConfig() {
    const e = {
      layer: {
        className: this.layer.getClassName(),
        config: this.layer.getConfig()
      }
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.layer != null && this.layer.setFastWeightInitDuringBuild(e);
  }
  /** @nocollapse */
  static fromConfig(e, t, s = {}) {
    const r = t.layer, o = tr(r, s);
    delete t.layer;
    const a = { layer: o };
    return Object.assign(a, t), new e(a);
  }
}
class R2 extends A2 {
  constructor(e) {
    super(e), this.supportsMasking = !0;
  }
  build(e) {
    if (e = tt(e), e.length < 3)
      throw new z(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);
    this.inputSpec = [{ shape: e }];
    const t = [e[0]].concat(e.slice(2));
    this.layer.built || (this.layer.build(t), this.layer.built = !0), super.build(e);
  }
  computeOutputShape(e) {
    e = tt(e);
    const t = [e[0]].concat(e.slice(2)), s = this.layer.computeOutputShape(t), r = e[1];
    return [s[0], r].concat(s.slice(1));
  }
  call(e, t) {
    return H(() => (e = _e(e), Vw(
      (a, i) => [_e(this.layer.call(a, t)), []],
      e,
      [],
      !1,
      null,
      null,
      !1,
      !0
      /* needPerStepOutputs */
    )[1]));
  }
}
R2.className = "TimeDistributed";
re(R2);
function M_(n) {
  wo(iF, "BidirectionalMergeMode", n);
}
const B_ = "concat";
class F2 extends A2 {
  constructor(e) {
    super(e);
    const t = e.layer.getConfig(), s = {};
    s.className = e.layer.getClassName(), s.config = t, this.forwardLayer = tr(s), t.goBackwards = t.goBackwards !== !0;
    const r = {};
    if (r.className = e.layer.getClassName(), r.config = t, this.backwardLayer = tr(r), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = e.mergeMode === void 0 ? B_ : e.mergeMode, M_(this.mergeMode), e.weights)
      throw new Pe("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = e.layer.stateful, this.returnSequences = e.layer.returnSequences, this.returnState = e.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = e.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(e) {
    this._trainable = e, this.forwardLayer != null && (this.forwardLayer.trainable = e), this.backwardLayer != null && (this.backwardLayer.trainable = e);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(e) {
    const t = e.length, s = Math.floor(t / 2);
    this.forwardLayer.setWeights(e.slice(0, s)), this.backwardLayer.setWeights(e.slice(s));
  }
  computeOutputShape(e) {
    let t = this.forwardLayer.computeOutputShape(e);
    Array.isArray(t) && Array.isArray(t[0]) || (t = [t]), t = t;
    let s, r, o;
    return this.returnState && (o = t.slice(1)), s = t[0], s = s, this.mergeMode === "concat" ? (s[s.length - 1] *= 2, r = [s]) : this.mergeMode == null ? r = [s, s.slice()] : r = [s], this.returnState ? this.mergeMode == null ? r.concat(o).concat(o.slice()) : [s].concat(o).concat(o.slice()) : wn(r);
  }
  apply(e, t) {
    let s = t == null ? null : t.initialState, r = t == null ? null : t.constants;
    t == null && (t = {});
    const o = Bw(e, s, r, this.numConstants);
    if (e = o.inputs, s = o.initialState, r = o.constants, Array.isArray(e) && (s = e.slice(1), e = e[0]), (s == null || s.length === 0) && r == null)
      return super.apply(e, t);
    const a = [], i = [];
    if (s != null) {
      const c = s.length;
      if (c % 2 > 0)
        throw new z("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      t.initialState = s, a.push(...s);
      const u = s.map((h) => new _t({ shape: h.shape }));
      this.forwardLayer.stateSpec = u.slice(0, c / 2), this.backwardLayer.stateSpec = u.slice(c / 2), i.push(...u);
    }
    if (r != null)
      throw new Pe("Support for constants in Bidirectional layers is not implemented yet.");
    const l = a[0] instanceof Bs;
    for (const c of a)
      if (c instanceof Bs !== l)
        throw new z("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (l) {
      const c = [e].concat(a), u = this.inputSpec.concat(i), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, t);
      return this.inputSpec = h, d;
    } else
      return super.apply(e, t);
  }
  call(e, t) {
    return H(() => {
      const s = t.initialState;
      let r, o;
      if (s == null)
        r = this.forwardLayer.call(e, t), o = this.backwardLayer.call(e, t);
      else {
        const l = s.slice(0, s.length / 2), c = s.slice(s.length / 2);
        r = this.forwardLayer.call(e, Object.assign(t, { initialState: l })), o = this.backwardLayer.call(e, Object.assign(t, { initialState: c }));
      }
      let a;
      this.returnState && (Array.isArray(r) && (a = r.slice(1).concat(o.slice(1))), r = r[0], o = o[0]), this.returnSequences && (o = hs(o, 1));
      let i;
      return this.mergeMode === "concat" ? i = eg([r, o]) : this.mergeMode === "sum" ? i = ne(r, o) : this.mergeMode === "ave" ? i = F(0.5, ne(r, o)) : this.mergeMode === "mul" ? i = F(r, o) : this.mergeMode == null && (i = [r, o]), this.returnState ? this.mergeMode == null ? i.concat(a) : [i].concat(a) : i;
    });
  }
  resetStates(e) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(e) {
    so(this.forwardLayer.name, () => {
      this.forwardLayer.build(e);
    }), so(this.backwardLayer.name, () => {
      this.backwardLayer.build(e);
    }), this.built = !0;
  }
  computeMask(e, t) {
    Array.isArray(t) && (t = t[0]);
    let s;
    if (this.returnSequences ? this.mergeMode == null ? s = [t, t] : s = t : this.mergeMode == null ? s = [null, null] : s = null, this.returnState) {
      const o = this.forwardLayer.states.map((a) => null);
      return Array.isArray(s) ? s.concat(o).concat(o) : [s].concat(o).concat(o);
    } else
      return s;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  // TODO(cais): Implement constraints().
  setFastWeightInitDuringBuild(e) {
    super.setFastWeightInitDuringBuild(e), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(e), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(e);
  }
  getConfig() {
    const e = {
      mergeMode: this.mergeMode
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  /** @nocollapse */
  static fromConfig(e, t) {
    const s = tr(t.layer);
    if (delete t.layer, t.numConstants != null)
      throw new Pe("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const r = t;
    return r.layer = s, new e(r);
  }
}
F2.className = "Bidirectional";
re(F2);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class _2 extends je {
  constructor(e) {
    super(e), this.scale = e.scale, e.offset ? this.offset = e.offset : this.offset = 0;
  }
  getConfig() {
    const e = {
      scale: this.scale,
      offset: this.offset
    }, t = super.getConfig();
    return Object.assign(e, t), e;
  }
  call(e, t) {
    return H(() => (e = _e(e), e.dtype !== "float32" && (e = yl(e, "float32")), ne(F(e, this.scale), this.offset)));
  }
}
_2.className = "Rescaling";
re(_2);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const V_ = K();
V_.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, (n) => {
  n && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var Qn;
(function(n) {
  n[n.DT_INVALID = 0] = "DT_INVALID", n[n.DT_FLOAT = 1] = "DT_FLOAT", n[n.DT_DOUBLE = 2] = "DT_DOUBLE", n[n.DT_INT32 = 3] = "DT_INT32", n[n.DT_UINT8 = 4] = "DT_UINT8", n[n.DT_INT16 = 5] = "DT_INT16", n[n.DT_INT8 = 6] = "DT_INT8", n[n.DT_STRING = 7] = "DT_STRING", n[n.DT_COMPLEX64 = 8] = "DT_COMPLEX64", n[n.DT_INT64 = 9] = "DT_INT64", n[n.DT_BOOL = 10] = "DT_BOOL", n[n.DT_QINT8 = 11] = "DT_QINT8", n[n.DT_QUINT8 = 12] = "DT_QUINT8", n[n.DT_QINT32 = 13] = "DT_QINT32", n[n.DT_BFLOAT16 = 14] = "DT_BFLOAT16", n[n.DT_QINT16 = 15] = "DT_QINT16", n[n.DT_QUINT16 = 16] = "DT_QUINT16", n[n.DT_UINT16 = 17] = "DT_UINT16", n[n.DT_COMPLEX128 = 18] = "DT_COMPLEX128", n[n.DT_HALF = 19] = "DT_HALF", n[n.DT_RESOURCE = 20] = "DT_RESOURCE", n[n.DT_VARIANT = 21] = "DT_VARIANT", n[n.DT_UINT32 = 22] = "DT_UINT32", n[n.DT_UINT64 = 23] = "DT_UINT64", n[n.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", n[n.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", n[n.DT_INT32_REF = 103] = "DT_INT32_REF", n[n.DT_UINT8_REF = 104] = "DT_UINT8_REF", n[n.DT_INT16_REF = 105] = "DT_INT16_REF", n[n.DT_INT8_REF = 106] = "DT_INT8_REF", n[n.DT_STRING_REF = 107] = "DT_STRING_REF", n[n.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", n[n.DT_INT64_REF = 109] = "DT_INT64_REF", n[n.DT_BOOL_REF = 110] = "DT_BOOL_REF", n[n.DT_QINT8_REF = 111] = "DT_QINT8_REF", n[n.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", n[n.DT_QINT32_REF = 113] = "DT_QINT32_REF", n[n.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", n[n.DT_QINT16_REF = 115] = "DT_QINT16_REF", n[n.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", n[n.DT_UINT16_REF = 117] = "DT_UINT16_REF", n[n.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", n[n.DT_HALF_REF = 119] = "DT_HALF_REF", n[n.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", n[n.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", n[n.DT_UINT32_REF = 122] = "DT_UINT32_REF", n[n.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(Qn || (Qn = {}));
var G0;
(function(n) {
  (function(e) {
    e[e.LEGACY = 0] = "LEGACY", e[e.V1 = 1] = "V1", e[e.V2 = 2] = "V2";
  })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(G0 || (G0 = {}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W_ = {};
function O2(n) {
  return W_[n];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function I(n, e, t, s, r) {
  const o = e.inputParams[n];
  if (o && o.inputIndexStart !== void 0) {
    const i = o.inputIndexStart, l = o.inputIndexEnd === 0 ? void 0 : o.inputIndexEnd === void 0 ? i + 1 : o.inputIndexEnd;
    if (o.type === "tensor")
      return un(e.inputNames[o.inputIndexStart], t, s, r);
    if (o.type === "tensors")
      return e.inputNames.slice(i, l).map((d) => un(d, t, s, r));
    const c = un(e.inputNames.slice(i)[0], t, s, r), u = c.dataSync();
    return o.type === "number" ? u[0] : us(c.shape, u);
  }
  const a = e.attrParams[n];
  return a && a.value;
}
function un(n, e, t, s) {
  const [r, o] = kn(n);
  if (s != null) {
    const i = s.getHashTableHandleByName(r);
    if (i != null)
      return i;
  }
  const a = t.currentContextIds.find((i) => !!e[kc(r, i)]);
  return a !== void 0 ? e[kc(r, a)][o] : void 0;
}
function U_(n, e, t) {
  return e[kc(n, t.currentContextId)];
}
function Ms(n, e) {
  const [t, s, r] = kn(n);
  return [
    kc(t, e && e.currentContextId),
    s,
    r
  ];
}
function kc(n, e) {
  return e ? `${n}-${e}` : n;
}
function kn(n) {
  const e = n.split(":");
  if (e.length === 1)
    return [n, 0, void 0];
  const t = e[0], s = e.length === 3 ? e[1] : void 0, r = Number(e[e.length - 1]);
  return [t, r, s];
}
function nc(n, e, t) {
  let s = I("pad", n, e, t);
  if (s === "explicit") {
    s = I("explicitPaddings", n, e, t);
    const r = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let o = 0; o < 4; o++)
      r[o][0] = s[o * 2], r[o][1] = s[o * 2 + 1];
    return r;
  }
  return s;
}
function Ys(n) {
  return n.kept ? n : Qs(n);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G_ = [
  {
    tfOpName: "Add",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddV2",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AddN",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "BiasAdd",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sub",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RealDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Div",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DivNoNan",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorDiv",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mul",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Maximum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Minimum",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Pow",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SquaredDifference",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Mod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FloorMod",
    category: "arithmetic",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], H_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: G_
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j_ = [
  {
    tfOpName: "Abs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atan2",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Ceil",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ClipByValue",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "clipValueMin",
        type: "number"
      },
      {
        start: 2,
        name: "clipValueMax",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Complex",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "real",
        type: "tensor"
      },
      {
        start: 1,
        name: "imag",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ComplexAbs",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cos",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Cosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Elu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Exp",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Floor",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Imag",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Neg",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Real",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "outputType",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Prelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "alpha",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Relu6",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Selu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sigmoid",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sin",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Rsqrt",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Square",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Sign",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Round",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Expm1",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Log1p",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reciprocal",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Softplus",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Asinh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Acosh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Atanh",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Erf",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Prod",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axes",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool",
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LeakyRelu",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IsNan",
    category: "basic_math",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], q_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: j_
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const K_ = [
  {
    tfOpName: "EmptyTensorList",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "maxNumElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LoopCond",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Switch",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "pred",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Merge",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Enter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "frame_name",
        name: "frameName",
        type: "string"
      },
      {
        tfName: "is_constant",
        name: "isConstant",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Exit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NextIteration",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "size",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "dynamic_size",
        name: "dynamicSize",
        type: "bool"
      },
      {
        tfName: "clear_after_read",
        name: "clearAfterRead",
        type: "bool"
      },
      {
        tfName: "identical_element_shapes",
        name: "identicalElementShapes",
        type: "bool"
      },
      {
        tfName: "tensor_array_name",
        name: "name",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "TensorArrayWriteV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayReadV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArrayGatherV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      }
    ]
  },
  {
    tfOpName: "TensorArrayScatterV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArrayConcatV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "element_shape_except0",
        name: "elementShapeExcept0",
        type: "shape",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "TensorArraySplitV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      },
      {
        start: 3,
        name: "flowIn",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorArraySizeV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      },
      {
        start: 1,
        name: "flowIn",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "TensorArrayCloseV3",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorArrayId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "StatelessIf",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "If",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "cond",
        type: "tensor"
      },
      {
        start: 1,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "then_branch",
        name: "thenBranch",
        type: "func"
      },
      {
        tfName: "else_branch",
        name: "elseBranch",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "StatelessWhile",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "While",
    category: "control",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "cond",
        name: "cond",
        type: "func"
      },
      {
        tfName: "body",
        name: "body",
        type: "func"
      }
    ]
  },
  {
    tfOpName: "TensorListScatter",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListScatterV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 3,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGather",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "number[]"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListGetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSetItem",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "index",
        type: "number"
      },
      {
        start: 2,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListReserve",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 1,
        name: "numElements",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListFromTensor",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListStack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      },
      {
        tfName: "num_elements",
        name: "numElements",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListSplit",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      },
      {
        start: 2,
        name: "lengths",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcat",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListConcatV2",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_shape",
        name: "elementShape",
        type: "shape"
      },
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPopBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "elementShape",
        type: "shape"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListPushBack",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "element_dtype",
        name: "elementDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TensorListLength",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TensorListResize",
    category: "control",
    inputs: [
      {
        start: 0,
        name: "tensorListId",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      }
    ]
  }
], X_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: K_
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y_ = [
  {
    tfOpName: "AvgPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: [],
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPoolWithArgmax",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "include_batch_in_index",
        name: "includeBatchInIndex",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "AvgPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MaxPool3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "ksize",
        name: "kernelSize",
        type: "number[]"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Conv1D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "stride",
        name: "stride",
        type: "number"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NWC"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "dilation",
        name: "dilation",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "Conv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "useCudnnOnGpu",
        name: "useCudnnOnGpu",
        type: "bool"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "_FusedConv2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "use_cudnn_on_gpu",
        name: "useCudnnOnGpu",
        type: "bool",
        defaultValue: !0
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      }
    ]
  },
  {
    tfOpName: "Conv2DBackpropInput",
    category: "convolution",
    inputs: [
      {
        start: 2,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 0,
        name: "outputShape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2d",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "FusedDepthwiseConv2dNative",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]",
        defaultValue: [
          1,
          1,
          1,
          1
        ]
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "explicit_paddings",
        name: "explicitPaddings",
        type: "number[]",
        defaultValue: []
      }
    ]
  },
  {
    tfOpName: "Conv3D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        defaultValue: "NHWC"
      },
      {
        tfName: "dilations",
        name: "dilations",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Dilation2D",
    category: "convolution",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "filter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "strides",
        name: "strides",
        type: "number[]"
      },
      {
        tfName: "rates",
        name: "dilations",
        type: "number[]"
      },
      {
        tfName: "padding",
        name: "pad",
        type: "string"
      }
    ]
  }
], Z_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: Y_
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J_ = [
  {
    tfOpName: "Fill",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      },
      {
        start: 1,
        name: "value",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LinSpace",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "num",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "OneHot",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "depth",
        type: "number"
      },
      {
        start: 2,
        name: "onValue",
        type: "number",
        defaultValue: 1
      },
      {
        start: 3,
        name: "offValue",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Ones",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "OnesLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "RandomStandardNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "RandomUniform",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "minval",
        name: "minval",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "maxval",
        name: "maxval",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Range",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "start",
        type: "number"
      },
      {
        start: 1,
        name: "stop",
        type: "number"
      },
      {
        start: 2,
        name: "step",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "Tidx",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "TruncatedNormal",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "means",
        name: "mean",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "stddev",
        name: "stdDev",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "T",
        name: "T",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Zeros",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ZerosLike",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Multinomial",
    category: "creation",
    inputs: [
      {
        start: 0,
        name: "logits",
        type: "tensor"
      },
      {
        start: 1,
        name: "numSamples",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "seed",
        name: "seed",
        type: "number"
      },
      {
        tfName: "seed2",
        name: "seed2",
        type: "number"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      },
      {
        tfName: "output_dtype",
        name: "output_dtype",
        type: "dtype"
      }
    ]
  }
], Q_ = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: J_
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eO = [
  {
    tfOpName: "NonMaxSuppressionV2",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV3",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV4",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "T_threshold",
        name: "threshold",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "pad_to_max_output_size",
        name: "padToMaxOutputSize",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "NonMaxSuppressionV5",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 1,
        name: "scores",
        type: "tensor"
      },
      {
        start: 2,
        name: "maxOutputSize",
        type: "number"
      },
      {
        start: 3,
        name: "iouThreshold",
        type: "number"
      },
      {
        start: 4,
        name: "scoreThreshold",
        type: "number"
      },
      {
        start: 5,
        name: "softNmsSigma",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Where",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ListDiff",
    category: "dynamic",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "y",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], tO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: eO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nO = [
  {
    tfOpName: "LowerBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "TopKV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "k",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "sorted",
        name: "sorted",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "UpperBound",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "sortedSequence",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Unique",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "UniqueV2",
    category: "evaluation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  }
], sO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: nO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rO = [
  {
    tfOpName: "PlaceholderWithDefault",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "default",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Placeholder",
    category: "graph",
    attrs: [
      {
        tfName: "shape",
        name: "shape",
        type: "shape"
      },
      {
        tfName: "dtype",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "Const",
    category: "graph"
  },
  {
    tfOpName: "Identity",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IdentityN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Snapshot",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Rank",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Size",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "Shape",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "ShapeN",
    category: "graph",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "x",
        type: "tensors"
      }
    ]
  },
  {
    tfOpName: "Print",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "data",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "message",
        name: "message",
        type: "string"
      },
      {
        tfName: "first_n",
        name: "firstN",
        type: "number",
        notSupported: !0
      },
      {
        tfName: "summarize",
        name: "summarize",
        type: "number",
        defaultValue: 3
      }
    ]
  },
  {
    tfOpName: "NoOp",
    category: "graph",
    inputs: []
  },
  {
    tfOpName: "StopGradient",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "FakeQuantWithMinMaxVars",
    category: "graph",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "min",
        name: "min",
        type: "number"
      },
      {
        tfName: "max",
        name: "max",
        type: "number"
      }
    ]
  }
], oO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: rO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aO = [
  {
    tfOpName: "HashTable",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "HashTableV2",
    category: "hash_table",
    inputs: [],
    attrs: [
      {
        tfName: "shared_name",
        name: "sharedName",
        type: "string"
      },
      {
        tfName: "use_node_name_sharing",
        name: "useNodeNameSharing",
        type: "bool"
      },
      {
        tfName: "key_dtype",
        name: "keyDType",
        type: "dtype"
      },
      {
        tfName: "value_dtype",
        name: "valueDType",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "LookupTableImport",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableImportV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "values",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFind",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableFindV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      },
      {
        start: 1,
        name: "keys",
        type: "tensor"
      },
      {
        start: 2,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "Tin",
        name: "tIn",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "Tout",
        name: "tOut",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LookupTableSize",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LookupTableSizeV2",
    category: "hash_table",
    inputs: [
      {
        start: 0,
        name: "tableHandle",
        type: "tensor"
      }
    ]
  }
], iO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: aO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lO = [
  {
    tfOpName: "ResizeBilinear",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "ResizeNearestNeighbor",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "align_corners",
        name: "alignCorners",
        type: "bool"
      },
      {
        tfName: "half_pixel_centers",
        name: "halfPixelCenters",
        type: "bool"
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "CropAndResize",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "image",
        type: "tensor"
      },
      {
        start: 1,
        name: "boxes",
        type: "tensor"
      },
      {
        start: 2,
        name: "boxInd",
        type: "tensor"
      },
      {
        start: 3,
        name: "cropSize",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "method",
        name: "method",
        type: "string"
      },
      {
        tfName: "extrapolation_value",
        name: "extrapolationValue",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ImageProjectiveTransformV3",
    category: "image",
    inputs: [
      {
        start: 0,
        name: "images",
        type: "tensor"
      },
      {
        start: 1,
        name: "transforms",
        type: "tensor"
      },
      {
        start: 2,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 3,
        name: "fillValue",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "interpolation",
        name: "interpolation",
        type: "string"
      },
      {
        tfName: "fill_mode",
        name: "fillMode",
        type: "string"
      }
    ]
  }
], cO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: lO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uO = [
  {
    tfOpName: "Equal",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "NotEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Greater",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "GreaterEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Less",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LessEqual",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalAnd",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalNot",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LogicalOr",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Select",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SelectV2",
    category: "logical",
    inputs: [
      {
        start: 0,
        name: "condition",
        type: "tensor"
      },
      {
        start: 1,
        name: "a",
        type: "tensor"
      },
      {
        start: 2,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  }
], hO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: uO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dO = [
  {
    tfOpName: "_FusedMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      },
      {
        start: 2,
        end: 0,
        name: "args",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "num_args",
        name: "numArgs",
        type: "number"
      },
      {
        tfName: "fused_ops",
        name: "fusedOps",
        type: "string[]",
        defaultValue: []
      },
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-4
      },
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "leakyrelu_alpha",
        name: "leakyreluAlpha",
        type: "number",
        defaultValue: 0.2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "MatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "transpose_a",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "transpose_b",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMul",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "BatchMatMulV2",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "a",
        type: "tensor"
      },
      {
        start: 1,
        name: "b",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "adj_x",
        name: "transposeA",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "adj_y",
        name: "transposeB",
        type: "bool",
        defaultValue: !1
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Transpose",
    category: "matrices",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "perm",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Einsum",
    category: "matrices",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "equation",
        name: "equation",
        type: "string"
      },
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      },
      {
        tfName: "T",
        name: "dtype",
        type: "dtype"
      }
    ]
  }
], pO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: dO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fO = [
  {
    tfOpName: "EuclideanNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool",
        defaultValue: !1
      }
    ]
  },
  {
    tfOpName: "FusedBatchNorm",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV2",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "FusedBatchNormV3",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "scale",
        type: "tensor"
      },
      {
        start: 2,
        name: "offset",
        type: "tensor"
      },
      {
        start: 3,
        name: "mean",
        type: "tensor"
      },
      {
        start: 4,
        name: "variance",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "epsilon",
        name: "epsilon",
        type: "number",
        defaultValue: 1e-3
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "LRN",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "depth_radius",
        name: "radius",
        type: "number",
        defaultValue: 5
      },
      {
        tfName: "bias",
        name: "bias",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "alpha",
        name: "alpha",
        type: "number",
        defaultValue: 1
      },
      {
        tfName: "beta",
        name: "beta",
        type: "number",
        defaultValue: 0.5
      }
    ]
  },
  {
    tfOpName: "Softmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "LogSoftmax",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseToDense",
    category: "normalization",
    inputs: [
      {
        start: 0,
        name: "sparseIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "sparseValues",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        defaultValue: !0,
        notSupported: !0
      }
    ]
  }
], mO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: fO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gO = [
  {
    tfOpName: "Bincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "DenseBincount",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "size",
        type: "number"
      },
      {
        start: 2,
        name: "weights",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "binary_output",
        name: "binaryOutput",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Max",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Mean",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Min",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Sum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "All",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Any",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "ArgMax",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "ArgMin",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "Prod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "keep_dims",
        name: "keepDims",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Cumprod",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  },
  {
    tfOpName: "Cumsum",
    category: "reduction",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "exclusive",
        name: "exclusive",
        type: "bool"
      },
      {
        tfName: "reverse",
        name: "reverse",
        type: "bool"
      }
    ]
  }
], yO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: gO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bO = [
  {
    tfOpName: "ConcatV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: -1,
        name: "tensors",
        type: "tensors"
      },
      {
        start: -1,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "Concat",
    category: "slice_join",
    inputs: [
      {
        start: 1,
        end: 0,
        name: "tensors",
        type: "tensors"
      },
      {
        start: 0,
        name: "axis",
        type: "number"
      }
    ],
    attrs: [
      {
        tfName: "N",
        name: "n",
        type: "number",
        defaultValue: 2
      }
    ]
  },
  {
    tfOpName: "GatherV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ],
    attrs: [
      {
        tfName: "batch_dims",
        name: "batchDims",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Gather",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Reverse",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "dims",
        type: "bool[]"
      }
    ]
  },
  {
    tfOpName: "ReverseV2",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Slice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "size",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "StridedSlice",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "begin",
        type: "number[]"
      },
      {
        start: 2,
        name: "end",
        type: "number[]"
      },
      {
        start: 3,
        name: "strides",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "begin_mask",
        name: "beginMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "end_mask",
        name: "endMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "new_axis_mask",
        name: "newAxisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "ellipsis_mask",
        name: "ellipsisMask",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "shrink_axis_mask",
        name: "shrinkAxisMask",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Pack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        end: 0,
        name: "tensors",
        type: "tensors"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Unpack",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "tensor",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        tfName: "num",
        name: "num",
        type: "number",
        defaultValue: 0,
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "Tile",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "reps",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Split",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "axis",
        type: "number",
        defaultValue: 0
      },
      {
        start: 1,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_split",
        name: "numOrSizeSplits",
        type: "number",
        defaultValue: 1
      }
    ]
  },
  {
    tfOpName: "SplitV",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "numOrSizeSplits",
        type: "number[]"
      },
      {
        start: 2,
        name: "axis",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "ScatterNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "GatherNd",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseToDense",
    category: "slice_join",
    inputs: [
      {
        start: 0,
        name: "sparseIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "outputShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "sparseValues",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "validate_indices",
        name: "validateIndices",
        type: "bool",
        defaultValue: !1,
        notSupported: !0
      }
    ]
  }
], xO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: bO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wO = [
  {
    tfOpName: "SparseFillEmptyRows",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "indices",
        type: "tensor"
      },
      {
        start: 1,
        name: "values",
        type: "tensor"
      },
      {
        start: 2,
        name: "denseShape",
        type: "tensor"
      },
      {
        start: 3,
        name: "defaultValue",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseReshape",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "inputIndices",
        type: "tensor"
      },
      {
        start: 1,
        name: "inputShape",
        type: "tensor"
      },
      {
        start: 2,
        name: "newShape",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "T",
        name: "dtype",
        type: "dtype",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "SparseSegmentMean",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "SparseSegmentSum",
    category: "sparse",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "indices",
        type: "tensor"
      },
      {
        start: 2,
        name: "segmentIds",
        type: "tensor"
      }
    ]
  }
], vO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: wO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IO = [
  {
    tfOpName: "FFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "IFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ]
  },
  {
    tfOpName: "RFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  },
  {
    tfOpName: "IRFFT",
    category: "spectral",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "fft_length",
        type: "number",
        notSupported: !0
      }
    ]
  }
], $O = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: IO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CO = [
  {
    tfOpName: "StringNGrams",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "data",
        type: "tensor"
      },
      {
        start: 1,
        name: "dataSplits",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "separator",
        name: "separator",
        type: "string"
      },
      {
        tfName: "ngram_widths",
        name: "nGramWidths",
        type: "number[]"
      },
      {
        tfName: "left_pad",
        name: "leftPad",
        type: "string"
      },
      {
        tfName: "right_pad",
        name: "rightPad",
        type: "string"
      },
      {
        tfName: "pad_width",
        name: "padWidth",
        type: "number"
      },
      {
        tfName: "preserve_short_sequences",
        name: "preserveShortSequences",
        type: "bool"
      }
    ],
    outputs: [
      "ngrams",
      "ngrams_splits"
    ]
  },
  {
    tfOpName: "StringSplit",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      },
      {
        start: 1,
        name: "delimiter",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "skip_empty",
        name: "skipEmpty",
        type: "bool"
      }
    ],
    outputs: [
      "indices",
      "values",
      "shape"
    ]
  },
  {
    tfOpName: "StringToHashBucketFast",
    category: "string",
    inputs: [
      {
        start: 0,
        name: "input",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "num_buckets",
        name: "numBuckets",
        type: "number"
      }
    ]
  }
], SO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: CO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NO = [
  {
    tfOpName: "Cast",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "SrcT",
        name: "sdtype",
        type: "dtype",
        notSupported: !0
      },
      {
        tfName: "DstT",
        name: "dtype",
        type: "dtype"
      }
    ]
  },
  {
    tfOpName: "ExpandDims",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "axis",
        type: "number"
      }
    ]
  },
  {
    tfOpName: "MirrorPad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "mode",
        name: "mode",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "Pad",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      }
    ],
    attrs: [
      {
        tfName: "constant_value",
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "PadV2",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "padding",
        type: "number[]"
      },
      {
        start: 2,
        name: "constantValue",
        type: "number",
        defaultValue: 0
      }
    ]
  },
  {
    tfOpName: "Reshape",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "Squeeze",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "axis",
        tfDeprecatedName: "squeeze_dims",
        name: "axis",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "SpaceToBatchND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "paddings",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "BatchToSpaceND",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "blockShape",
        type: "number[]"
      },
      {
        start: 2,
        name: "crops",
        type: "number[]"
      }
    ]
  },
  {
    tfOpName: "DepthToSpace",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      }
    ],
    attrs: [
      {
        tfName: "block_size",
        name: "blockSize",
        type: "number"
      },
      {
        tfName: "data_format",
        name: "dataFormat",
        type: "string"
      }
    ]
  },
  {
    tfOpName: "BroadcastTo",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "x",
        type: "tensor"
      },
      {
        start: 1,
        name: "shape",
        type: "number[]"
      }
    ],
    attrs: []
  },
  {
    tfOpName: "BroadcastArgs",
    category: "transformation",
    inputs: [
      {
        start: 0,
        name: "s0",
        type: "tensor"
      },
      {
        start: 1,
        name: "s1",
        type: "tensor"
      }
    ],
    attrs: []
  }
], kO = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  json: NO
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class H0 {
  // Singleton instance for the mapper
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  // Loads the op mapping from the JSON file.
  constructor() {
    const e = [
      H_,
      q_,
      X_,
      Z_,
      Q_,
      tO,
      sO,
      oO,
      iO,
      cO,
      hO,
      pO,
      mO,
      yO,
      xO,
      vO,
      $O,
      SO,
      kO
    ], t = [].concat(...e.map((s) => s.json));
    this.opMappers = t.reduce((s, r) => (s[r.tfOpName] = r, s), {});
  }
  // Converts the model inference graph from Tensorflow GraphDef to local
  // representation for TensorFlow.js API
  transformGraph(e, t = {}) {
    const s = e.node, r = [], o = [], a = [], i = s.reduce((m, g) => (m[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? r.push(m[g.name]) : g.op === "Const" ? o.push(m[g.name]) : (g.input == null || g.input.length === 0) && a.push(m[g.name]), m), {});
    let l = [];
    const c = [];
    let u = {}, h = {};
    t != null && (u = this.mapSignatureEntries(t.inputs), h = this.mapSignatureEntries(t.outputs));
    const d = Object.keys(i);
    d.forEach((m) => {
      const g = i[m];
      g.inputNames.forEach((y, b) => {
        const [w, , x] = Ms(y), v = i[w];
        if (v.outputs != null) {
          const $ = v.outputs.indexOf(x);
          if ($ !== -1) {
            const C = `${w}:${$}`;
            g.inputNames[b] = C;
          }
        }
        g.inputs.push(v), v.children.push(g);
      });
    }), Object.keys(h).length === 0 ? d.forEach((m) => {
      const g = i[m];
      g.children.length === 0 && c.push(g);
    }) : Object.keys(h).forEach((m) => {
      const [g] = Ms(m), y = i[g];
      y != null && (y.signatureKey = h[m], c.push(y));
    }), Object.keys(u).length > 0 ? Object.keys(u).forEach((m) => {
      const [g] = Ms(m), y = i[g];
      y && (y.signatureKey = u[m], l.push(y));
    }) : l = r;
    let p = {};
    e.library != null && e.library.function != null && (p = e.library.function.reduce((m, g) => (m[g.signature.name] = this.mapFunction(g), m), {}));
    const f = { nodes: i, inputs: l, outputs: c, weights: o, placeholders: r, signature: t, functions: p };
    return a.length > 0 && (f.initNodes = a), f;
  }
  mapSignatureEntries(e) {
    return Object.keys(e || {}).reduce((t, s) => (t[e[s].name] = s, t), {});
  }
  mapNode(e) {
    const t = O2(e.op) || this.opMappers[e.op] || {};
    e.attr == null && (e.attr = {});
    const s = {
      name: e.name,
      op: e.op,
      category: t.category,
      inputNames: (e.input || []).map((r) => r.startsWith("^") ? r.slice(1) : r),
      inputs: [],
      children: [],
      inputParams: {},
      attrParams: {},
      rawAttrs: e.attr,
      outputs: t.outputs
    };
    return t.inputs != null && (s.inputParams = t.inputs.reduce((r, o) => (r[o.name] = {
      type: o.type,
      inputIndexStart: o.start,
      inputIndexEnd: o.end
    }, r), {})), t.attrs != null && (s.attrParams = t.attrs.reduce((r, o) => {
      const a = o.type;
      let i;
      switch (o.type) {
        case "string":
          i = Qd(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = Qd(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "string[]":
          i = ap(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = ap(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "number":
          i = tp(e.attr, o.tfName, o.defaultValue || 0), i === void 0 && o.tfDeprecatedName && (i = tp(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "number[]":
          i = op(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = op(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "bool":
          i = ep(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = ep(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "bool[]":
          i = lp(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = lp(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "shape":
          i = rp(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = rp(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "shape[]":
          i = ip(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = ip(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "dtype":
          i = np(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = np(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "dtype[]":
          i = sp(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = sp(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "func":
          i = j0(e.attr, o.tfName, o.defaultValue), i === void 0 && o.tfDeprecatedName && (i = j0(e.attr, o.tfDeprecatedName, o.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${o.type} for op: ${e.op}`);
      }
      return r[o.name] = { value: i, type: a }, r;
    }, {})), s;
  }
  // map the TFunctionDef to TFJS graph object
  mapFunction(e) {
    const t = e.nodeDef, s = [], r = [];
    let o = {};
    t != null && (o = t.reduce((h, d) => (h[d.name] = this.mapNode(d), d.op === "Const" && r.push(h[d.name]), h), {}));
    const a = [], i = [];
    e.signature.inputArg.forEach((h) => {
      const [d] = Ms(h.name), p = {
        name: d,
        op: "Placeholder",
        inputs: [],
        inputNames: [],
        category: "graph",
        inputParams: {},
        attrParams: { dtype: { value: wg(h.type), type: "dtype" } },
        children: []
      };
      p.signatureKey = h.name, a.push(p), o[d] = p;
    }), Object.keys(o).forEach((h) => {
      const d = o[h];
      d.inputNames.forEach((p, f) => {
        const [m, , g] = Ms(p), y = o[m];
        if (y.outputs != null) {
          const b = y.outputs.indexOf(g);
          if (b !== -1) {
            const w = `${m}:${b}`;
            d.inputNames[f] = w;
          }
        }
        d.inputs.push(y), y.children.push(d);
      });
    });
    const c = e.ret;
    e.signature.outputArg.forEach((h) => {
      const [d, p] = Ms(c[h.name]), f = o[d];
      f != null && (f.defaultOutput = p, i.push(f));
    });
    const u = this.mapArgsToSignature(e);
    return { nodes: o, inputs: a, outputs: i, weights: r, placeholders: s, signature: u };
  }
  mapArgsToSignature(e) {
    return {
      methodName: e.signature.name,
      inputs: e.signature.inputArg.reduce((t, s) => (t[s.name] = this.mapArgToTensorInfo(s), t), {}),
      outputs: e.signature.outputArg.reduce((t, s) => (t[s.name] = this.mapArgToTensorInfo(s, e.ret), t), {})
    };
  }
  mapArgToTensorInfo(e, t) {
    let s = e.name;
    return t != null && (s = t[s]), { name: s, dtype: e.type };
  }
}
function TO(n) {
  const e = K().global;
  if (typeof e.atob < "u")
    return e.atob(n);
  if (typeof Buffer < "u")
    return new Buffer(n, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function L2(n, e) {
  const t = Array.isArray(n) ? String.fromCharCode.apply(null, n) : TO(n);
  return e ? t : t.toLowerCase();
}
function Qd(n, e, t, s = !1) {
  const r = n[e];
  return r != null ? L2(r.s, s) : t;
}
function ep(n, e, t) {
  const s = n[e];
  return s ? s.b : t;
}
function tp(n, e, t) {
  const s = n[e] || {}, r = s.i != null ? s.i : s.f != null ? s.f : t;
  return typeof r == "number" ? r : parseInt(r, 10);
}
function wg(n) {
  switch (typeof n == "string" && (n = Qn[n]), n) {
    case Qn.DT_FLOAT:
    case Qn.DT_HALF:
      return "float32";
    case Qn.DT_INT32:
    case Qn.DT_INT64:
    case Qn.DT_INT8:
    case Qn.DT_UINT8:
      return "int32";
    case Qn.DT_BOOL:
      return "bool";
    case Qn.DT_DOUBLE:
      return "float32";
    case Qn.DT_STRING:
      return "string";
    default:
      return null;
  }
}
function j0(n, e, t) {
  const s = n[e];
  return s && s.func ? s.func.name : t;
}
function np(n, e, t) {
  const s = n[e];
  return s && s.type ? wg(s.type) : t;
}
function sp(n, e, t) {
  const s = n[e];
  return s && s.list && s.list.type ? s.list.type.map((r) => wg(r)) : t;
}
function P2(n) {
  if (!n.unknownRank)
    return n.dim != null ? n.dim.map((e) => typeof e.size == "number" ? e.size : parseInt(e.size, 10)) : [];
}
function rp(n, e, t) {
  const s = n[e];
  return s && s.shape ? P2(s.shape) : t;
}
function op(n, e, t) {
  const s = n[e];
  return s ? ((s.list.f && s.list.f.length ? s.list.f : s.list.i) || []).map((r) => typeof r == "number" ? r : parseInt(r, 10)) : t;
}
function ap(n, e, t, s = !1) {
  const r = n[e];
  return r && r.list && r.list.s ? r.list.s.map((o) => L2(o, s)) : t;
}
function ip(n, e, t) {
  const s = n[e];
  return s && s.list && s.list.shape ? s.list.shape.map((r) => P2(r)) : t;
}
function lp(n, e, t) {
  const s = n[e];
  return s && s.list && s.list.b ? s.list.b : t;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EO {
  constructor(e, t, s) {
    this.node = e, this.tensorMap = t, this.context = s, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map((r) => this.getInput(r)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((r, o) => (r[o] = this.getAttr(o), r), {}));
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */
  getInput(e) {
    return un(e, this.tensorMap, this.context);
  }
  /**
   * Return the value of the attribute or input param.
   * @param name String: name of attribute or input param.
   */
  getAttr(e, t) {
    const s = this.node.rawAttrs[e];
    if (s.tensor != null)
      return un(e, this.tensorMap, this.context);
    if (s.i != null || s.f != null)
      return tp(this.node.rawAttrs, e, t);
    if (s.s != null)
      return Qd(this.node.rawAttrs, e, t);
    if (s.b != null)
      return ep(this.node.rawAttrs, e, t);
    if (s.shape != null)
      return rp(this.node.rawAttrs, e, t);
    if (s.type != null)
      return np(this.node.rawAttrs, e, t);
    if (s.list != null) {
      if (s.list.i != null || s.list.f != null)
        return op(this.node.rawAttrs, e, t);
      if (s.list.s != null)
        return ap(this.node.rawAttrs, e, t);
      if (s.list.shape != null)
        return ip(this.node.rawAttrs, e, t);
      if (s.list.b != null)
        return lp(this.node.rawAttrs, e, t);
      if (s.list.type != null)
        return sp(this.node.rawAttrs, e, t);
    }
    return t;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const on = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  OP_SCOPE_SUFFIX: y1,
  abs: At,
  acos: Y1,
  acosh: Z1,
  add: ne,
  addN: jS,
  all: Mf,
  any: fc,
  argMax: ea,
  argMin: J1,
  asin: Q1,
  asinh: eb,
  atan: tb,
  atan2: nb,
  atanh: sb,
  avgPool: Xu,
  avgPool3d: rb,
  basicLSTMCell: fN,
  batchNorm: ol,
  batchNorm2d: ob,
  batchNorm3d: ab,
  batchNorm4d: ib,
  batchToSpaceND: Yu,
  bincount: lb,
  booleanMaskAsync: qE,
  broadcastArgs: $N,
  broadcastTo: Go,
  buffer: Le,
  cast: fe,
  ceil: cb,
  clipByValue: _n,
  clone: Qs,
  complex: Ir,
  concat: ft,
  concat1d: ub,
  concat2d: Zu,
  concat3d: hb,
  concat4d: db,
  conv1d: Vf,
  conv2d: Cr,
  conv2dTranspose: Uf,
  conv3d: pb,
  conv3dTranspose: mb,
  cos: Ju,
  cosh: Gf,
  cosineWindow: wm,
  cumprod: gc,
  cumsum: Hf,
  denseBincount: UN,
  depthToSpace: gb,
  depthwiseConv2d: al,
  diag: qN,
  dilation2d: yb,
  div: be,
  divNoNan: bb,
  dot: xb,
  dropout: Hb,
  einsum: tk,
  elu: il,
  enclosingPowerOfTwo: jb,
  equal: ks,
  erf: wb,
  euclideanNorm: $b,
  exp: Gn,
  expandDims: xn,
  expm1: Cb,
  eye: qf,
  fft: uh,
  fill: ya,
  floor: cl,
  floorDiv: zf,
  fused: f3,
  gather: ul,
  gatherND: n3,
  greater: qn,
  greaterEqual: yo,
  ifft: Ka,
  imag: qu,
  image: $s,
  inTopKAsync: a3,
  irfft: mm,
  isFinite: Sb,
  isInf: Nb,
  isNaN: kb,
  leakyRelu: Qu,
  less: Kf,
  lessEqual: bo,
  linalg: ex,
  linspace: kk,
  localResponseNormalization: Tb,
  log: Hn,
  log1p: eh,
  logSigmoid: Eb,
  logSoftmax: Xf,
  logSumExp: Yf,
  logicalAnd: js,
  logicalNot: th,
  logicalOr: Zf,
  logicalXor: Db,
  losses: VD,
  lowerBound: Wk,
  matMul: Me,
  max: Ss,
  maxPool: nh,
  maxPool3d: Ab,
  maxPoolWithArgmax: jk,
  maximum: cr,
  mean: vt,
  meshgrid: Xk,
  min: yc,
  minimum: hl,
  mirrorPad: Rb,
  mod: Fb,
  moments: sh,
  movingAverage: XE,
  mul: F,
  multiRNNCell: tT,
  multinomial: sT,
  neg: gt,
  norm: ll,
  notEqual: na,
  oneHot: Af,
  ones: Wn,
  onesLike: jn,
  op: R,
  outerProduct: iT,
  pad: zr,
  pad1d: uT,
  pad2d: dT,
  pad3d: fT,
  pad4d: gT,
  pool: _b,
  pow: Sr,
  prelu: oh,
  print: D1,
  prod: Ob,
  raggedGather: CT,
  raggedTensorToTensor: NT,
  rand: TT,
  randomGamma: KT,
  randomNormal: am,
  randomStandardNormal: ZT,
  randomUniform: dl,
  range: ja,
  real: Ha,
  reciprocal: Pb,
  relu: Ks,
  relu6: im,
  reshape: P,
  reverse: hs,
  reverse1d: rE,
  reverse2d: aE,
  reverse3d: lE,
  reverse4d: uE,
  rfft: hh,
  round: lm,
  rsqrt: cm,
  scalar: Te,
  scatterND: ZE,
  searchSorted: Jf,
  selu: um,
  separableConv2d: hm,
  setdiff1dAsync: gE,
  sigmoid: Cs,
  sign: zb,
  signal: BD,
  sin: dm,
  sinh: pm,
  slice: Ee,
  slice1d: ih,
  slice2d: fm,
  slice3d: lh,
  slice4d: qa,
  softmax: ch,
  softplus: ba,
  spaceToBatchND: rh,
  sparse: WD,
  sparseToDense: e3,
  spectral: MD,
  split: Dn,
  sqrt: rn,
  square: at,
  squaredDifference: gm,
  squeeze: An,
  stack: ds,
  step: xa,
  stridedSlice: Mb,
  string: UD,
  sub: ge,
  sum: Ie,
  tan: Bb,
  tanh: ta,
  tensor: Ws,
  tensor1d: Ct,
  tensor2d: er,
  tensor3d: z1,
  tensor4d: LE,
  tensor5d: PE,
  tensor6d: zE,
  tile: is,
  topk: Vb,
  transpose: We,
  truncatedNormal: ym,
  unique: Wb,
  unsortedSegmentSum: bm,
  unstack: Ts,
  upperBound: GE,
  variable: Ub,
  where: In,
  whereAsync: Gb,
  zeros: Rt,
  zerosLike: Ge
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DO = (n, e, t, s = on) => {
  switch (n.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [s.add(I("a", n, e, t), I("b", n, e, t))];
    case "AddN":
      return [s.addN(I("tensors", n, e, t))];
    case "FloorMod":
    case "Mod":
      return [s.mod(I("a", n, e, t), I("b", n, e, t))];
    case "Mul":
      return [s.mul(I("a", n, e, t), I("b", n, e, t))];
    case "RealDiv":
    case "Div":
      return [s.div(I("a", n, e, t), I("b", n, e, t))];
    case "DivNoNan":
      return [s.divNoNan(I("a", n, e, t), I("b", n, e, t))];
    case "FloorDiv":
      return [s.floorDiv(I("a", n, e, t), I("b", n, e, t))];
    case "Sub":
      return [s.sub(I("a", n, e, t), I("b", n, e, t))];
    case "Minimum":
      return [s.minimum(I("a", n, e, t), I("b", n, e, t))];
    case "Maximum":
      return [s.maximum(I("a", n, e, t), I("b", n, e, t))];
    case "Pow":
      return [s.pow(I("a", n, e, t), I("b", n, e, t))];
    case "SquaredDifference":
      return [s.squaredDifference(I("a", n, e, t), I("b", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AO = (n, e, t, s = on) => {
  switch (n.op) {
    case "Abs":
    case "ComplexAbs":
      return [s.abs(I("x", n, e, t))];
    case "Acos":
      return [s.acos(I("x", n, e, t))];
    case "Acosh":
      return [s.acosh(I("x", n, e, t))];
    case "Asin":
      return [s.asin(I("x", n, e, t))];
    case "Asinh":
      return [s.asinh(I("x", n, e, t))];
    case "Atan":
      return [s.atan(I("x", n, e, t))];
    case "Atan2":
      return [s.atan2(I("x", n, e, t), I("y", n, e, t))];
    case "Atanh":
      return [s.atanh(I("x", n, e, t))];
    case "Ceil":
      return [s.ceil(I("x", n, e, t))];
    case "Complex":
      return [s.complex(I("real", n, e, t), I("imag", n, e, t))];
    case "Cos":
      return [s.cos(I("x", n, e, t))];
    case "Cosh":
      return [s.cosh(I("x", n, e, t))];
    case "Elu":
      return [s.elu(I("x", n, e, t))];
    case "Erf":
      return [s.erf(I("x", n, e, t))];
    case "Exp":
      return [s.exp(I("x", n, e, t))];
    case "Expm1":
      return [s.expm1(I("x", n, e, t))];
    case "Floor":
      return [s.floor(I("x", n, e, t))];
    case "Log":
      return [s.log(I("x", n, e, t))];
    case "Log1p":
      return [s.log1p(I("x", n, e, t))];
    case "Imag":
      return [s.imag(I("x", n, e, t))];
    case "Neg":
      return [s.neg(I("x", n, e, t))];
    case "Reciprocal":
      return [s.reciprocal(I("x", n, e, t))];
    case "Real":
      return [s.real(I("x", n, e, t))];
    case "Relu":
      return [s.relu(I("x", n, e, t))];
    case "Round":
      return [s.round(I("x", n, e, t))];
    case "Selu":
      return [s.selu(I("x", n, e, t))];
    case "Sigmoid":
      return [s.sigmoid(I("x", n, e, t))];
    case "Sin":
      return [s.sin(I("x", n, e, t))];
    case "Sign":
      return [s.sign(I("x", n, e, t))];
    case "Sinh":
      return [s.sinh(I("x", n, e, t))];
    case "Softplus":
      return [s.softplus(I("x", n, e, t))];
    case "Sqrt":
      return [s.sqrt(I("x", n, e, t))];
    case "Square":
      return [s.square(I("x", n, e, t))];
    case "Tanh":
      return [s.tanh(I("x", n, e, t))];
    case "Tan":
      return [s.tan(I("x", n, e, t))];
    case "ClipByValue":
      return [s.clipByValue(I("x", n, e, t), I("clipValueMin", n, e, t), I("clipValueMax", n, e, t))];
    case "Relu6":
      return [s.relu6(I("x", n, e, t))];
    case "Rsqrt":
      return [s.rsqrt(un(n.inputNames[0], e, t))];
    case "Prod":
      return [s.prod(I("x", n, e, t), I("axes", n, e, t))];
    case "LeakyRelu":
      return [s.leakyRelu(I("x", n, e, t), I("alpha", n, e, t))];
    case "Prelu":
      return [s.prelu(I("x", n, e, t), I("alpha", n, e, t))];
    case "IsNan":
      return [s.isNaN(un(n.inputNames[0], e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ts(n, e, t = "") {
  if (!(typeof n == "number" || typeof e == "number")) {
    N(n.length === e.length, () => t + ` Shapes ${n} and ${e} must match`);
    for (let s = 0; s < n.length; s++) {
      const r = n[s], o = e[s];
      N(r < 0 || o < 0 || r === o, () => t + ` Shapes ${n} and ${e} must match`);
    }
  }
}
function q0(n) {
  return !(typeof n == "number" || n.some((e) => e < 0));
}
function Oa(n, e, t) {
  let s = cp(n, t);
  const r = !q0(s);
  if (r && e.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);
  if (r && e.forEach((o) => {
    s = cp(o.shape, s);
  }), !q0(s))
    throw new Error(`Non-fully-defined elementShape: ${s}`);
  return s;
}
function cp(n, e) {
  if (typeof n == "number")
    return e;
  if (typeof e == "number")
    return n;
  if (n.length !== e.length)
    throw new Error(`Incompatible ranks during merge: ${n} vs. ${e}`);
  const t = [];
  for (let s = 0; s < n.length; ++s) {
    const r = n[s], o = e[s];
    if (r >= 0 && o >= 0 && r !== o)
      throw new Error(`Incompatible shape during merge: ${n} vs. ${e}`);
    t[s] = r >= 0 ? r : o;
  }
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RO {
  constructor(e, t, s, r, o, a, i) {
    this.name = e, this.dtype = t, this.maxSize = s, this.elementShape = r, this.identicalElementShapes = o, this.dynamicSize = a, this.clearAfterRead = i, this.tensors = [], this.closed_ = !1, this.idTensor = Te(0), Yt(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  /**
   * Dispose the tensors and idTensor and mark the TensoryArray as closed.
   */
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.tensor.id)) && t.tensor.dispose();
    }), this.tensors = [], this.closed_ = !0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  /**
   * Read the value at location index in the TensorArray.
   * @param index Number the index to read from.
   */
  read(e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || e >= this.size())
      throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
    const t = this.tensors[e];
    if (t.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;
  }
  /**
   * Helper method to read multiple tensors from the specified indices.
   */
  readMany(e) {
    return e.map((t) => this.read(t));
  }
  /**
   * Write value into the index of the TensorArray.
   * @param index number the index to write to.
   * @param tensor
   */
  write(e, t) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || !this.dynamicSize && e >= this.maxSize)
      throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);
    const s = this.tensors[e] || {};
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t.shape), ts(this.elementShape, t.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), s.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);
    if (s.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);
    s.tensor = t, Yt(t), s.written = !0, this.tensors[e] = s;
  }
  /**
   * Helper method to write multiple tensors to the specified indices.
   */
  writeMany(e, t) {
    if (e.length !== t.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);
    e.forEach((s, r) => this.write(s, t[r]));
  }
  /**
   * Return selected values in the TensorArray as a packed Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param [indices] number[] Optional. Taking values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size(). If not specified returns
   *    all tensors in the original order.
   * @param [dtype]
   */
  gather(e, t) {
    if (t && t !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);
    if (e)
      e = e.slice(0, this.size());
    else {
      e = [];
      for (let r = 0; r < this.size(); r++)
        e.push(r);
    }
    if (e.length === 0)
      return Ws([], [0].concat(this.elementShape));
    const s = this.readMany(e);
    return ts(this.elementShape, s[0].shape, "TensorArray shape mismatch: "), ds(s, 0);
  }
  /**
   * Return the values in the TensorArray as a concatenated Tensor.
   */
  concat(e) {
    if (e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
    if (this.size() === 0)
      return Ws([], [0].concat(this.elementShape));
    const t = [];
    for (let r = 0; r < this.size(); r++)
      t.push(r);
    const s = this.readMany(t);
    return ts(this.elementShape, s[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`), ft(s, 0);
  }
  /**
   * Scatter the values of a Tensor in specific indices of a TensorArray.
   * @param indices nummber[] values in [0, max_value). If the
   *    TensorArray is not dynamic, max_value=size().
   * @param tensor Tensor input tensor.
   */
  scatter(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    if (e.length !== t.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);
    const s = Math.max(...e);
    if (!this.dynamicSize && s >= this.maxSize)
      throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);
    this.writeMany(e, Ts(t, 0));
  }
  /**
   * Split the values of a Tensor into the TensorArray.
   * @param length number[] with the lengths to use when splitting value along
   *    its first dimension.
   * @param tensor Tensor, the tensor to split.
   */
  split(e, t) {
    if (t.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);
    let s = 0;
    const r = e.map((l) => (s += l, s));
    if (s !== t.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${t.shape}`);
    if (!this.dynamicSize && e.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);
    const o = s === 0 ? 0 : t.size / s, a = [];
    H(() => {
      t = P(t, [1, s, o]);
      for (let l = 0; l < e.length; ++l) {
        const u = [0, l === 0 ? 0 : r[l - 1], 0], h = [1, e[l], o];
        a[l] = P(Ee(t, u, h), this.elementShape);
      }
      return a;
    });
    const i = [];
    for (let l = 0; l < e.length; l++)
      i[l] = l;
    this.writeMany(i, a);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ho {
  /**
   *
   * @param tensors list of tensors
   * @param elementShape shape of each tensor, this can be a single number (any
   * shape is allowed) or partial shape (dim = -1).
   * @param elementDtype data type of each tensor
   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1
   *   meaning that the size of `tensors` is unbounded.
   */
  constructor(e, t, s, r = -1) {
    this.tensors = e, this.elementShape = t, this.elementDtype = s, e != null && e.forEach((o) => {
      if (s !== o.dtype)
        throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);
      ts(t, o.shape, "TensorList shape mismatch: "), Yt(o);
    }), this.idTensor = Te(0), this.maxNumElements = r, Yt(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  /**
   * Get a new TensorList containing a copy of the underlying tensor container.
   */
  copy() {
    return new ho([...this.tensors], this.elementShape, this.elementDtype);
  }
  /**
   * Dispose the tensors and idTensor and clear the tensor list.
   */
  clearAndClose(e) {
    this.tensors.forEach((t) => {
      (e == null || !e.has(t.id)) && t.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  /**
   * The size of the tensors in the tensor list.
   */
  size() {
    return this.tensors.length;
  }
  /**
   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)
   * tf.Tensor.
   * @param elementShape shape of each tensor
   * @param elementDtype data type of each tensor
   * @param numElements the number of elements to stack
   */
  stack(e, t, s = -1) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (s !== -1 && this.tensors.length !== s)
      throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);
    ts(e, this.elementShape, "TensorList shape mismatch: ");
    const r = Oa(this.elementShape, this.tensors, e);
    return H(() => {
      const o = this.tensors.map((a) => P(a, r));
      return ds(o, 0);
    });
  }
  /**
   * Pop a tensor from the end of the list.
   * @param elementShape shape of the tensor
   * @param elementDtype data type of the tensor
   */
  popBack(e, t) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    const s = Oa(this.elementShape, this.tensors, e), r = this.tensors.pop();
    return r.kept = !1, ts(r.shape, e, "TensorList shape mismatch: "), P(r, s);
  }
  /**
   * Push a tensor to the end of the list.
   * @param tensor Tensor to be pushed.
   */
  pushBack(e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (ts(e.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    Yt(e), this.tensors.push(e);
  }
  /**
   * Update the size of the list.
   * @param size the new size of the list.
   */
  resize(e) {
    if (e < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
    if (this.maxNumElements !== -1 && e > this.maxNumElements)
      throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);
    const t = new ho([], this.elementShape, this.elementDtype, this.maxNumElements);
    t.tensors.length = e;
    for (let s = 0; s < Math.min(this.tensors.length, e); ++s)
      t.tensors[s] = this.tensors[s];
    return t;
  }
  /**
   * Retrieve the element at the provided index
   * @param elementShape shape of the tensor
   * @param elementDtype dtype of the tensor
   * @param elementIndex index of the tensor
   */
  getItem(e, t, s) {
    if (s !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);
    if (e < 0 || e > this.tensors.length)
      throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[e] == null)
      throw new Error(`element at index ${e} is null.`);
    ts(this.tensors[e].shape, t, "TensorList shape mismatch: ");
    const r = Oa(this.elementShape, this.tensors, t);
    return P(this.tensors[e], r);
  }
  /**
   * Set the tensor at the index
   * @param elementIndex index of the tensor
   * @param tensor the tensor to be inserted into the list
   */
  setItem(e, t) {
    if (t.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);
    if (e < 0 || this.maxNumElements !== -1 && e >= this.maxNumElements)
      throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);
    ts(this.elementShape, t.shape, "TensorList shape mismatch: "), Yt(t), this.tensors[e] != null && (this.tensors[e].kept = !1), this.tensors[e] = t;
  }
  /**
   * Return selected values in the TensorList as a stacked Tensor. All of
   * selected values must have been written and their shapes must all match.
   * @param indices indices of tensors to gather
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */
  gather(e, t, s) {
    if (t !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);
    ts(this.elementShape, s, "TensorList shape mismatch: "), e = e.slice(0, this.size());
    const r = Oa(this.elementShape, this.tensors, s);
    return e.length === 0 ? Ws([], [0].concat(r)) : H(() => {
      const o = e.map((a) => P(this.tensors[a], r));
      return ds(o, 0);
    });
  }
  /**
   * Return the values in the TensorList as a concatenated Tensor.
   * @param elementDtype output tensor dtype
   * @param elementShape output tensor element shape
   */
  concat(e, t) {
    if (e && e !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
    ts(this.elementShape, t, "TensorList shape mismatch: ");
    const s = Oa(this.elementShape, this.tensors, t);
    return this.size() === 0 ? Ws([], [0].concat(s)) : H(() => {
      const r = this.tensors.map((o) => P(o, s));
      return ft(r, 0);
    });
  }
}
function FO(n, e, t) {
  const s = n.dtype;
  if (n.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);
  if (n.dtype !== t)
    throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${t}`);
  const r = n.shape.slice(1);
  ts(r, e, "TensorList shape mismatch: ");
  const o = Ts(n);
  return new ho(o, e, s);
}
function _O(n, e, t, s) {
  return new ho([], n, e, s);
}
function OO(n, e, t, s) {
  if (e.length !== n.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${n.shape[0]}`);
  const r = Math.max(...e);
  if (s != null && s !== -1 && r >= s)
    throw new Error(`Max index must be < array size (${r}  vs. ${s})`);
  const o = new ho([], t, n.dtype, s), a = Ts(n, 0);
  return e.forEach((i, l) => {
    o.setItem(i, a[l]);
  }), o;
}
function LO(n, e, t) {
  let s = 0;
  const r = e.map((u) => (s += u, s));
  if (s !== n.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${s}, and tensor's shape is: ${n.shape}`);
  const o = n.shape.slice(1), a = cp(o, t), i = s === 0 ? 0 : n.size / s, l = H(() => {
    const u = [];
    n = P(n, [1, s, i]);
    for (let h = 0; h < e.length; ++h) {
      const p = [0, h === 0 ? 0 : r[h - 1], 0], f = [1, e[h], i];
      u[h] = P(Ee(n, p, f), a);
    }
    return n.dispose(), u;
  }), c = new ho([], t, n.dtype, e.length);
  for (let u = 0; u < l.length; u++)
    c.setItem(u, l[u]);
  return c;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PO = async (n, e, t) => {
  switch (n.op) {
    case "If":
    case "StatelessIf": {
      const s = I("thenBranch", n, e, t), r = I("elseBranch", n, e, t), o = I("cond", n, e, t), a = I("args", n, e, t);
      return (await o.data())[0] ? t.functionMap[s].executeFunctionAsync(a, t.tensorArrayMap, t.tensorListMap) : t.functionMap[r].executeFunctionAsync(a, t.tensorArrayMap, t.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      const s = I("body", n, e, t), r = I("cond", n, e, t), o = I("args", n, e, t), a = await t.functionMap[r].executeFunctionAsync(o, t.tensorArrayMap, t.tensorListMap), i = o.map((u) => u.id);
      let l = await a[0].data();
      a.forEach((u) => {
        !u.kept && i.indexOf(u.id) === -1 && u.dispose();
      });
      let c = o;
      for (; l[0]; ) {
        const u = c;
        c = await t.functionMap[s].executeFunctionAsync(c, t.tensorArrayMap, t.tensorListMap);
        const h = c.map((p) => p.id);
        u.forEach((p) => {
          !p.kept && i.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
        });
        const d = await t.functionMap[r].executeFunctionAsync(c, t.tensorArrayMap, t.tensorListMap);
        l = await d[0].data(), d.forEach((p) => {
          !p.kept && i.indexOf(p.id) === -1 && h.indexOf(p.id) === -1 && p.dispose();
        });
      }
      return c;
    }
    case "LoopCond": {
      const s = I("pred", n, e, t);
      return [Ys(s)];
    }
    case "Switch": {
      const s = I("pred", n, e, t);
      let r = I("data", n, e, t);
      return r.kept || (r = Ys(r)), (await s.data())[0] ? [void 0, r] : [r, void 0];
    }
    case "Merge": {
      const s = n.inputNames.find((r) => un(r, e, t) !== void 0);
      if (s) {
        const r = un(s, e, t);
        return [Ys(r)];
      }
      return;
    }
    case "Enter": {
      const s = I("frameName", n, e, t), r = I("tensor", n, e, t);
      return t.enterFrame(s), [Ys(r)];
    }
    case "Exit": {
      const s = I("tensor", n, e, t);
      return t.exitFrame(), [Ys(s)];
    }
    case "NextIteration": {
      const s = I("tensor", n, e, t);
      return t.nextIteration(), [Ys(s)];
    }
    case "TensorArrayV3": {
      const s = I("size", n, e, t), r = I("dtype", n, e, t), o = I("elementShape", n, e, t), a = I("dynamicSize", n, e, t), i = I("clearAfterRead", n, e, t), l = I("identicalElementShapes", n, e, t), c = I("name", n, e, t), u = new RO(c, r, s, o, l, a, i);
      return t.addTensorArray(u), [u.idTensor, Te(1)];
    }
    case "TensorArrayWriteV3": {
      const s = I("tensorArrayId", n, e, t), r = I("index", n, e, t), o = I("tensor", n, e, t), a = t.getTensorArray(s.id);
      return a.write(r, o), [a.idTensor];
    }
    case "TensorArrayReadV3": {
      const s = I("tensorArrayId", n, e, t), r = I("index", n, e, t);
      return [t.getTensorArray(s.id).read(r)];
    }
    case "TensorArrayGatherV3": {
      const s = I("tensorArrayId", n, e, t), r = I("indices", n, e, t), o = I("dtype", n, e, t);
      return [t.getTensorArray(s.id).gather(r, o)];
    }
    case "TensorArrayScatterV3": {
      const s = I("tensorArrayId", n, e, t), r = I("indices", n, e, t), o = I("tensor", n, e, t), a = t.getTensorArray(s.id);
      return a.scatter(r, o), [a.idTensor];
    }
    case "TensorArrayConcatV3": {
      const s = I("tensorArrayId", n, e, t), r = t.getTensorArray(s.id), o = I("dtype", n, e, t);
      return [r.concat(o)];
    }
    case "TensorArraySplitV3": {
      const s = I("tensorArrayId", n, e, t), r = I("tensor", n, e, t), o = I("lengths", n, e, t), a = t.getTensorArray(s.id);
      return a.split(o, r), [a.idTensor];
    }
    case "TensorArraySizeV3": {
      const s = I("tensorArrayId", n, e, t), r = t.getTensorArray(s.id);
      return [Te(r.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      const s = I("tensorArrayId", n, e, t), r = t.getTensorArray(s.id);
      return r.clearAndClose(), [r.idTensor];
    }
    case "TensorListSetItem": {
      const s = I("tensorListId", n, e, t), r = I("index", n, e, t), o = I("tensor", n, e, t), a = t.getTensorList(s.id);
      return a.setItem(r, o), [a.idTensor];
    }
    case "TensorListGetItem": {
      const s = I("tensorListId", n, e, t), r = I("index", n, e, t), o = I("elementShape", n, e, t), a = I("elementDType", n, e, t);
      return [t.getTensorList(s.id).getItem(r, o, a)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      const s = I("indices", n, e, t), r = I("tensor", n, e, t), o = I("elementShape", n, e, t), a = I("numElements", n, e, t), i = OO(r, s, o, a);
      return t.addTensorList(i), [i.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      const s = I("elementShape", n, e, t), r = I("elementDType", n, e, t);
      let o;
      n.op === "TensorListReserve" ? o = "numElements" : o = "maxNumElements";
      const a = I(o, n, e, t), i = n.op === "TensorListReserve" ? -1 : a, l = _O(s, r, a, i);
      return t.addTensorList(l), [l.idTensor];
    }
    case "TensorListGather": {
      const s = I("tensorListId", n, e, t), r = I("indices", n, e, t), o = I("elementShape", n, e, t), a = I("elementDType", n, e, t);
      return [t.getTensorList(s.id).gather(r, a, o)];
    }
    case "TensorListStack": {
      const s = I("tensorListId", n, e, t), r = I("elementShape", n, e, t), o = I("elementDType", n, e, t), a = I("numElements", n, e, t);
      return [t.getTensorList(s.id).stack(r, o, a)];
    }
    case "TensorListFromTensor": {
      const s = I("tensor", n, e, t), r = I("elementShape", n, e, t), o = I("elementDType", n, e, t), a = FO(s, r, o);
      return t.addTensorList(a), [a.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      const s = I("tensorListId", n, e, t), r = t.getTensorList(s.id), o = I("dtype", n, e, t), a = I("elementShape", n, e, t);
      return [r.concat(o, a)];
    }
    case "TensorListPushBack": {
      const s = I("tensorListId", n, e, t), r = I("tensor", n, e, t), o = t.getTensorList(s.id);
      return o.pushBack(r), [o.idTensor];
    }
    case "TensorListPopBack": {
      const s = I("tensorListId", n, e, t), r = I("elementShape", n, e, t), o = I("elementDType", n, e, t);
      return [t.getTensorList(s.id).popBack(r, o)];
    }
    case "TensorListSplit": {
      const s = I("tensor", n, e, t), r = I("elementShape", n, e, t), o = I("lengths", n, e, t), a = LO(s, o, r);
      return t.addTensorList(a), [a.idTensor];
    }
    case "TensorListLength": {
      const s = I("tensorListId", n, e, t), r = t.getTensorList(s.id);
      return [Te(r.size(), "int32")];
    }
    case "TensorListResize": {
      const s = I("tensorListId", n, e, t), r = I("size", n, e, t), a = t.getTensorList(s.id).resize(r);
      return t.addTensorList(a), [a.idTensor];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K0(n, e, t) {
  const [s, r] = I("fusedOps", n, e, t), o = s === "biasadd", a = !o, i = r === "prelu", l = s === "fusedbatchnorm", c = I("numArgs", n, e, t);
  if (o) {
    if (i && c !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!i && o && c !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (l)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  const u = I("strides", n, e, t), h = nc(n, e, t), d = I("dataFormat", n, e, t).toUpperCase(), p = I("dilations", n, e, t);
  let [f, m] = I("args", n, e, t);
  a && (m = f, f = void 0);
  const g = I("leakyreluAlpha", n, e, t);
  return {
    stride: u,
    pad: h,
    dataFormat: d,
    dilations: p,
    biasArg: f,
    preluArg: m,
    activationFunc: r,
    leakyreluAlpha: g
  };
}
const zO = (n, e, t, s = on) => {
  switch (n.op) {
    case "Conv1D": {
      const r = I("stride", n, e, t), o = I("pad", n, e, t), a = I("dataFormat", n, e, t).toUpperCase(), i = I("dilation", n, e, t);
      return [s.conv1d(I("x", n, e, t), I("filter", n, e, t), r, o, a, i)];
    }
    case "Conv2D": {
      const r = I("strides", n, e, t), o = nc(n, e, t), a = I("dataFormat", n, e, t).toUpperCase(), i = I("dilations", n, e, t);
      return [s.conv2d(I("x", n, e, t), I("filter", n, e, t), [r[1], r[2]], o, a, [i[1], i[2]])];
    }
    case "_FusedConv2D": {
      const { stride: r, pad: o, dataFormat: a, dilations: i, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = K0(n, e, t);
      return [s.fused.conv2d({
        x: I("x", n, e, t),
        filter: I("filter", n, e, t),
        strides: [r[1], r[2]],
        pad: o,
        dataFormat: a,
        dilations: [i[1], i[2]],
        bias: l,
        activation: u,
        preluActivationWeights: c,
        leakyreluAlpha: h
      })];
    }
    case "FusedDepthwiseConv2dNative": {
      const { stride: r, pad: o, dataFormat: a, dilations: i, biasArg: l, preluArg: c, activationFunc: u, leakyreluAlpha: h } = K0(n, e, t);
      return [s.fused.depthwiseConv2d({
        x: I("x", n, e, t),
        filter: I("filter", n, e, t),
        strides: [r[1], r[2]],
        pad: o,
        dataFormat: a,
        dilations: [i[1], i[2]],
        bias: l,
        activation: u,
        preluActivationWeights: c,
        leakyreluAlpha: h
      })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      const r = I("outputShape", n, e, t), o = I("strides", n, e, t), a = nc(n, e, t);
      return [s.conv2dTranspose(I("x", n, e, t), I("filter", n, e, t), r, [o[1], o[2]], a)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      const r = I("strides", n, e, t), o = nc(n, e, t), a = I("dilations", n, e, t), i = I("dataFormat", n, e, t).toUpperCase();
      return [s.depthwiseConv2d(I("input", n, e, t), I("filter", n, e, t), [r[1], r[2]], o, i, [a[1], a[2]])];
    }
    case "Conv3D": {
      const r = I("strides", n, e, t), o = I("pad", n, e, t), a = I("dataFormat", n, e, t).toUpperCase(), i = I("dilations", n, e, t);
      return [s.conv3d(I("x", n, e, t), I("filter", n, e, t), [r[1], r[2], r[3]], o, a, [i[1], i[2], i[3]])];
    }
    case "AvgPool": {
      const r = I("strides", n, e, t), o = I("pad", n, e, t), a = I("kernelSize", n, e, t);
      return [s.avgPool(I("x", n, e, t), [a[1], a[2]], [r[1], r[2]], o)];
    }
    case "MaxPool": {
      const r = I("strides", n, e, t), o = I("pad", n, e, t), a = I("kernelSize", n, e, t);
      return [s.maxPool(I("x", n, e, t), [a[1], a[2]], [r[1], r[2]], o)];
    }
    case "MaxPoolWithArgmax": {
      const r = I("strides", n, e, t), o = I("pad", n, e, t), a = I("kernelSize", n, e, t), i = I("includeBatchInIndex", n, e, t), { result: l, indexes: c } = s.maxPoolWithArgmax(I("x", n, e, t), [a[1], a[2]], [r[1], r[2]], o, i);
      return [l, c];
    }
    case "AvgPool3D": {
      const r = I("strides", n, e, t), o = I("pad", n, e, t), a = I("kernelSize", n, e, t);
      return [s.avgPool3d(I("x", n, e, t), [a[1], a[2], a[3]], [r[1], r[2], r[3]], o)];
    }
    case "MaxPool3D": {
      const r = I("strides", n, e, t), o = I("pad", n, e, t), a = I("kernelSize", n, e, t);
      return [s.maxPool3d(I("x", n, e, t), [a[1], a[2], a[3]], [r[1], r[2], r[3]], o)];
    }
    case "Dilation2D": {
      const r = I("strides", n, e, t), o = I("pad", n, e, t), a = I("dilations", n, e, t), i = r[1], l = r[2], c = a[1], u = a[2];
      return [s.dilation2d(
        I("x", n, e, t),
        I("filter", n, e, t),
        [i, l],
        o,
        [c, u],
        "NHWC"
        /* dataFormat */
      )];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MO = (n, e, t, s = on) => {
  switch (n.op) {
    case "Fill": {
      const r = I("shape", n, e, t), o = I("dtype", n, e, t), a = I("value", n, e, t);
      return [s.fill(r, a, o)];
    }
    case "LinSpace": {
      const r = I("start", n, e, t), o = I("stop", n, e, t), a = I("num", n, e, t);
      return [s.linspace(r, o, a)];
    }
    case "Multinomial": {
      const r = I("logits", n, e, t), o = I("numSamples", n, e, t), a = I("seed", n, e, t);
      return [s.multinomial(r, o, a)];
    }
    case "OneHot": {
      const r = I("indices", n, e, t), o = I("depth", n, e, t), a = I("onValue", n, e, t), i = I("offValue", n, e, t), l = I("dtype", n, e, t);
      return [s.oneHot(r, o, a, i, l)];
    }
    case "Ones":
      return [s.ones(I("shape", n, e, t), I("dtype", n, e, t))];
    case "OnesLike":
      return [s.onesLike(I("x", n, e, t))];
    case "RandomStandardNormal":
      return [s.randomStandardNormal(I("shape", n, e, t), I("dtype", n, e, t), I("seed", n, e, t))];
    case "RandomUniform":
      return [s.randomUniform(
        // tslint:disable-next-line:no-any
        I("shape", n, e, t),
        I("minval", n, e, t),
        I("maxval", n, e, t),
        I("dtype", n, e, t)
      )];
    case "Range": {
      const r = I("start", n, e, t), o = I("stop", n, e, t), a = I("step", n, e, t);
      return [s.range(r, o, a, I("dtype", n, e, t))];
    }
    case "TruncatedNormal": {
      const r = I("shape", n, e, t), o = I("mean", n, e, t), a = I("stdDev", n, e, t), i = I("seed", n, e, t);
      return [s.truncatedNormal(r, o, a, I("dtype", n, e, t), i)];
    }
    case "Zeros":
      return [s.zeros(I("shape", n, e, t), I("dtype", n, e, t))];
    case "ZerosLike":
      return [s.zerosLike(I("x", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ed(n, e, t) {
  const s = I("boxes", n, e, t), r = I("scores", n, e, t), o = I("maxOutputSize", n, e, t), a = I("iouThreshold", n, e, t), i = I("scoreThreshold", n, e, t), l = I("softNmsSigma", n, e, t);
  return {
    boxes: s,
    scores: r,
    maxOutputSize: o,
    iouThreshold: a,
    scoreThreshold: i,
    softNmsSigma: l
  };
}
const BO = async (n, e, t, s, r = on) => {
  switch (n.op) {
    case "NonMaxSuppressionV5": {
      const { boxes: o, scores: a, maxOutputSize: i, iouThreshold: l, scoreThreshold: c, softNmsSigma: u } = ed(n, e, t), h = await r.image.nonMaxSuppressionWithScoreAsync(o, a, i, l, c, u);
      return [h.selectedIndices, h.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      const { boxes: o, scores: a, maxOutputSize: i, iouThreshold: l, scoreThreshold: c } = ed(n, e, t), u = I("padToMaxOutputSize", n, e, t), h = await r.image.nonMaxSuppressionPaddedAsync(o, a, i, l, c, u);
      return [h.selectedIndices, h.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      const { boxes: o, scores: a, maxOutputSize: i, iouThreshold: l, scoreThreshold: c } = ed(n, e, t);
      return [await r.image.nonMaxSuppressionAsync(o, a, i, l, c)];
    }
    case "Where": {
      const o = r.cast(I("condition", n, e, t), "bool"), a = [await r.whereAsync(o)];
      return o.dispose(), a;
    }
    case "ListDiff":
      return r.setdiff1dAsync(I("x", n, e, t), I("y", n, e, t));
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VO = (n, e, t, s = on) => {
  switch (n.op) {
    case "LowerBound": {
      const r = I("sortedSequence", n, e, t), o = I("values", n, e, t);
      return [s.lowerBound(r, o)];
    }
    case "TopKV2": {
      const r = I("x", n, e, t), o = I("k", n, e, t), a = I("sorted", n, e, t), i = s.topk(r, o, a);
      return [i.values, i.indices];
    }
    case "UpperBound": {
      const r = I("sortedSequence", n, e, t), o = I("values", n, e, t);
      return [s.upperBound(r, o)];
    }
    case "Unique": {
      const r = I("x", n, e, t), o = s.unique(r);
      return [o.values, o.indices];
    }
    case "UniqueV2": {
      const r = I("x", n, e, t), o = I("axis", n, e, t), a = s.unique(r, o);
      return [a.values, a.indices];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WO = (n, e, t, s = on) => {
  switch (n.op) {
    case "Const":
      return e[n.name];
    case "PlaceholderWithDefault":
      const r = I("default", n, e, t);
      return [un(n.name, e, t) || r];
    case "Placeholder":
      return [un(n.name, e, t)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      const u = I("x", n, e, t);
      return [Ys(u)];
    }
    case "IdentityN":
      return I("x", n, e, t).map((u) => Ys(u));
    case "Snapshot":
      const o = I("x", n, e, t);
      return [Ys(o)];
    case "Shape":
      return [s.tensor1d(I("x", n, e, t).shape, "int32")];
    case "ShapeN":
      return I("x", n, e, t).map((u) => s.tensor1d(u.shape));
    case "Size":
      return [s.scalar(I("x", n, e, t).size, "int32")];
    case "Rank":
      return [s.scalar(I("x", n, e, t).rank, "int32")];
    case "NoOp":
      return [s.scalar(1)];
    case "Print":
      const a = I("x", n, e, t), i = I("data", n, e, t), l = I("message", n, e, t), c = I("summarize", n, e, t);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(l);
      for (let u = 0; u < i.length; u++)
        console.log(Array.prototype.slice.call(i[u].dataSync()).slice(0, c));
      return [a];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UO {
  /**
   * Constructor of HashTable. Creates a hash table.
   *
   * @param keyDType `dtype` of the table keys.
   * @param valueDType `dtype` of the table values.
   */
  constructor(e, t) {
    this.keyDType = e, this.valueDType = t, this.handle = Te(0), this.tensorMap = /* @__PURE__ */ new Map(), Yt(this.handle);
  }
  get id() {
    return this.handle.id;
  }
  /**
   * Dispose the tensors and handle and clear the hashtable.
   */
  clearAndClose() {
    this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  /**
   * The number of items in the hash table.
   */
  size() {
    return this.tensorMap.size;
  }
  /**
   * The number of items in the hash table as a rank-0 tensor.
   */
  tensorSize() {
    return Te(this.size(), "int32");
  }
  /**
   * Replaces the contents of the table with the specified keys and values.
   * @param keys Keys to store in the hashtable.
   * @param values Values to store in the hashtable.
   */
  async import(e, t) {
    this.checkKeyAndValueTensor(e, t);
    const s = await e.data();
    return this.tensorMap.forEach((r) => r.dispose()), this.tensorMap.clear(), H(() => {
      const r = Ts(t), o = s.length, a = r.length;
      N(o === a, () => `The number of elements doesn't match, keys has ${o} elements, the values has ${a} elements.`);
      for (let i = 0; i < o; i++) {
        const l = s[i], c = r[i];
        Yt(c), this.tensorMap.set(l, c);
      }
      return this.handle;
    });
  }
  /**
   * Looks up keys in a hash table, outputs the corresponding values.
   *
   * Performs batch lookups, for every element in the key tensor, `find`
   * stacks the corresponding value into the return tensor.
   *
   * If an element is not present in the table, the given `defaultValue` is
   * used.
   *
   * @param keys Keys to look up. Must have the same type as the keys of the
   *     table.
   * @param defaultValue The scalar `defaultValue` is the value output for keys
   *     not present in the table. It must also be of the same type as the
   *     table values.
   */
  async find(e, t) {
    this.checkKeyAndValueTensor(e, t);
    const s = await e.data();
    return H(() => {
      const r = [];
      for (let o = 0; o < s.length; o++) {
        const a = s[o], i = this.findWithDefault(a, t);
        r.push(i);
      }
      return ds(r);
    });
  }
  // tslint:disable-next-line: no-any
  findWithDefault(e, t) {
    const s = this.tensorMap.get(e);
    return s ?? t;
  }
  checkKeyAndValueTensor(e, t) {
    if (e.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
    if (t.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GO = async (n, e, t, s) => {
  switch (n.op) {
    case "HashTable":
    case "HashTableV2": {
      const r = I("keyDType", n, e, t), o = I("valueDType", n, e, t), a = new UO(r, o);
      return s.addHashTable(n.name, a), [a.handle];
    }
    case "LookupTableImport":
    case "LookupTableImportV2": {
      const r = I("tableHandle", n, e, t, s), o = I("keys", n, e, t), a = I("values", n, e, t);
      return [await s.getHashTableById(r.id).import(o, a)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      const r = I("tableHandle", n, e, t, s), o = I("keys", n, e, t), a = I("defaultValue", n, e, t);
      return [await s.getHashTableById(r.id).find(o, a)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      const r = I("tableHandle", n, e, t, s);
      return [s.getHashTableById(r.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HO = (n, e, t, s = on) => {
  switch (n.op) {
    case "ResizeBilinear": {
      const r = I("images", n, e, t), o = I("size", n, e, t), a = I("alignCorners", n, e, t), i = I("halfPixelCenters", n, e, t);
      return [s.image.resizeBilinear(r, [o[0], o[1]], a, i)];
    }
    case "ResizeNearestNeighbor": {
      const r = I("images", n, e, t), o = I("size", n, e, t), a = I("alignCorners", n, e, t), i = I("halfPixelCenters", n, e, t);
      return [s.image.resizeNearestNeighbor(r, [o[0], o[1]], a, i)];
    }
    case "CropAndResize": {
      const r = I("image", n, e, t), o = I("boxes", n, e, t), a = I("boxInd", n, e, t), i = I("cropSize", n, e, t), l = I("method", n, e, t), c = I("extrapolationValue", n, e, t);
      return [s.image.cropAndResize(r, o, a, i, l, c)];
    }
    case "ImageProjectiveTransformV3": {
      const r = I("images", n, e, t), o = I("transforms", n, e, t), a = I("outputShape", n, e, t), i = I("fillValue", n, e, t), l = I("interpolation", n, e, t), c = I("fillMode", n, e, t);
      return [s.image.transform(r, o, l.toLowerCase(), c.toLowerCase(), i, a)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jO = (n, e, t, s = on) => {
  switch (n.op) {
    case "Equal":
      return [s.equal(I("a", n, e, t), I("b", n, e, t))];
    case "NotEqual":
      return [s.notEqual(I("a", n, e, t), I("b", n, e, t))];
    case "Greater":
      return [s.greater(I("a", n, e, t), I("b", n, e, t))];
    case "GreaterEqual":
      return [s.greaterEqual(I("a", n, e, t), I("b", n, e, t))];
    case "Less":
      return [s.less(I("a", n, e, t), I("b", n, e, t))];
    case "LessEqual":
      return [s.lessEqual(I("a", n, e, t), I("b", n, e, t))];
    case "LogicalAnd":
      return [s.logicalAnd(I("a", n, e, t), I("b", n, e, t))];
    case "LogicalNot":
      return [s.logicalNot(I("a", n, e, t))];
    case "LogicalOr":
      return [s.logicalOr(I("a", n, e, t), I("b", n, e, t))];
    case "Select":
    case "SelectV2":
      return [s.where(I("condition", n, e, t), I("a", n, e, t), I("b", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qO = (n, e, t, s = on) => {
  switch (n.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [s.matMul(I("a", n, e, t), I("b", n, e, t), I("transposeA", n, e, t), I("transposeB", n, e, t))];
    case "Einsum":
      return [s.einsum(I("equation", n, e, t), ...I("tensors", n, e, t))];
    case "Transpose":
      return [s.transpose(I("x", n, e, t), I("perm", n, e, t))];
    case "_FusedMatMul":
      const [r, o] = I("fusedOps", n, e, t), a = r === "biasadd", i = o === "prelu", l = I("numArgs", n, e, t), c = I("leakyreluAlpha", n, e, t);
      if (a) {
        if (i && l !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!i && l !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      const [u, h] = I("args", n, e, t);
      return [s.fused.matMul({
        a: I("a", n, e, t),
        b: I("b", n, e, t),
        transposeA: I("transposeA", n, e, t),
        transposeB: I("transposeB", n, e, t),
        bias: u,
        activation: o,
        preluActivationWeights: h,
        leakyreluAlpha: c
      })];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KO = (n, e, t, s = on) => {
  switch (n.op) {
    case "EuclideanNorm":
      return [s.euclideanNorm(I("x", n, e, t), I("axis", n, e, t), I("keepDims", n, e, t))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [s.batchNorm(I("x", n, e, t), I("mean", n, e, t), I("variance", n, e, t), I("offset", n, e, t), I("scale", n, e, t), I("epsilon", n, e, t))];
    case "FusedBatchNormV3":
      return [s.batchNorm(I("x", n, e, t), I("mean", n, e, t), I("variance", n, e, t), I("offset", n, e, t), I("scale", n, e, t), I("epsilon", n, e, t))];
    case "LRN":
      return [s.localResponseNormalization(I("x", n, e, t), I("radius", n, e, t), I("bias", n, e, t), I("alpha", n, e, t), I("beta", n, e, t))];
    case "Softmax":
      return [s.softmax(I("x", n, e, t))];
    case "LogSoftmax":
      return [s.logSoftmax(I("x", n, e, t))];
    case "SparseToDense":
      return [s.sparseToDense(I("sparseIndices", n, e, t), I("outputShape", n, e, t), I("sparseValues", n, e, t), I("defaultValue", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XO = (n, e, t, s = on) => {
  switch (n.op) {
    case "Max": {
      const i = I("axis", n, e, t), l = I("keepDims", n, e, t);
      return [s.max(I("x", n, e, t), i, l)];
    }
    case "Mean": {
      const i = I("axis", n, e, t), l = I("keepDims", n, e, t);
      return [s.mean(I("x", n, e, t), i, l)];
    }
    case "Min": {
      const i = I("axis", n, e, t), l = I("keepDims", n, e, t);
      return [s.min(I("x", n, e, t), i, l)];
    }
    case "Sum": {
      const i = I("axis", n, e, t), l = I("keepDims", n, e, t);
      return [s.sum(I("x", n, e, t), i, l)];
    }
    case "All": {
      const i = I("axis", n, e, t), l = I("keepDims", n, e, t);
      return [s.all(I("x", n, e, t), i, l)];
    }
    case "Any": {
      const i = I("axis", n, e, t), l = I("keepDims", n, e, t);
      return [s.any(I("x", n, e, t), i, l)];
    }
    case "ArgMax": {
      const i = I("axis", n, e, t);
      return [s.argMax(I("x", n, e, t), i)];
    }
    case "ArgMin": {
      const i = I("axis", n, e, t);
      return [s.argMin(I("x", n, e, t), i)];
    }
    case "Prod": {
      const i = I("axis", n, e, t), l = I("keepDims", n, e, t);
      return [s.prod(I("x", n, e, t), i, l)];
    }
    case "Cumprod": {
      const i = I("axis", n, e, t), l = I("exclusive", n, e, t), c = I("reverse", n, e, t);
      return [s.cumprod(I("x", n, e, t), i, l, c)];
    }
    case "Cumsum": {
      const i = I("axis", n, e, t), l = I("exclusive", n, e, t), c = I("reverse", n, e, t);
      return [s.cumsum(I("x", n, e, t), i, l, c)];
    }
    case "Bincount":
      const r = I("x", n, e, t), o = I("weights", n, e, t), a = I("size", n, e, t);
      return [s.bincount(r, o, a)];
    case "DenseBincount": {
      const i = I("x", n, e, t), l = I("weights", n, e, t), c = I("size", n, e, t), u = I("binaryOutput", n, e, t);
      return [s.denseBincount(i, l, c, u)];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YO = (n, e, t, s = on) => {
  switch (n.op) {
    case "ConcatV2":
    case "Concat": {
      const r = I("n", n, e, t), o = I("axis", n, e, t);
      let a = I("tensors", n, e, t);
      return a = a.slice(0, r), [s.concat(a, o)];
    }
    case "Gather": {
      const r = I("x", n, e, t), o = I("indices", n, e, t);
      return [s.gather(r, s.cast(o, "int32"), 0)];
    }
    case "GatherV2": {
      const r = I("axis", n, e, t), o = I("batchDims", n, e, t), a = I("x", n, e, t), i = I("indices", n, e, t);
      return [s.gather(a, s.cast(i, "int32"), r, o)];
    }
    case "Reverse": {
      const r = I("dims", n, e, t), o = [];
      for (let i = 0; i < r.length; i++)
        r[i] && o.push(i);
      const a = I("x", n, e, t);
      return [s.reverse(a, o)];
    }
    case "ReverseV2": {
      const r = I("axis", n, e, t), o = I("x", n, e, t);
      return [s.reverse(o, r)];
    }
    case "Slice": {
      const r = I("begin", n, e, t), o = I("size", n, e, t);
      return [s.slice(I("x", n, e, t), r, o)];
    }
    case "StridedSlice": {
      const r = I("begin", n, e, t), o = I("end", n, e, t), a = I("strides", n, e, t), i = I("beginMask", n, e, t), l = I("endMask", n, e, t), c = I("ellipsisMask", n, e, t), u = I("newAxisMask", n, e, t), h = I("shrinkAxisMask", n, e, t), d = I("x", n, e, t);
      return [s.stridedSlice(d, r, o, a, i, l, c, u, h)];
    }
    case "Pack":
      return H(() => {
        const r = I("axis", n, e, t), o = I("tensors", n, e, t), a = o[0].shape, i = s.squeeze(o[0]).shape, l = o.map((c) => {
          const u = He(c.shape, a);
          if (!u && !He(s.squeeze(c).shape, i))
            throw new Error("the input tensors shape does not match");
          return u ? c : s.reshape(c, a);
        });
        return [s.stack(l, r)];
      });
    case "Unpack": {
      const r = I("axis", n, e, t), o = I("tensor", n, e, t);
      return s.unstack(o, r);
    }
    case "Tile": {
      const r = I("reps", n, e, t);
      return [s.tile(I("x", n, e, t), r)];
    }
    case "Split":
    case "SplitV": {
      const r = I("axis", n, e, t), o = I("numOrSizeSplits", n, e, t), a = I("x", n, e, t);
      return s.split(a, o, r);
    }
    case "ScatterNd": {
      const r = I("indices", n, e, t), o = I("values", n, e, t), a = I("shape", n, e, t);
      return [s.scatterND(r, o, a)];
    }
    case "GatherNd": {
      const r = I("x", n, e, t), o = I("indices", n, e, t);
      return [s.gatherND(r, o)];
    }
    case "SparseToDense": {
      const r = I("sparseIndices", n, e, t), o = I("outputShape", n, e, t), a = I("sparseValues", n, e, t), i = I("defaultValue", n, e, t);
      return [s.sparseToDense(r, a, o, a.dtype === i.dtype ? i : s.cast(i, a.dtype))];
    }
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZO = (n, e, t, s = on) => {
  switch (n.op) {
    case "SparseFillEmptyRows": {
      const { outputIndices: r, outputValues: o, emptyRowIndicator: a, reverseIndexMap: i } = s.sparse.sparseFillEmptyRows(I("indices", n, e, t), I("values", n, e, t), I("denseShape", n, e, t), I("defaultValue", n, e, t));
      return [
        r,
        o,
        a,
        i
      ];
    }
    case "SparseReshape": {
      const { outputIndices: r, outputShape: o } = s.sparse.sparseReshape(I("inputIndices", n, e, t), I("inputShape", n, e, t), I("newShape", n, e, t));
      return [r, o];
    }
    case "SparseSegmentMean":
      return [s.sparse.sparseSegmentMean(I("data", n, e, t), I("indices", n, e, t), I("segmentIds", n, e, t))];
    case "SparseSegmentSum":
      return [s.sparse.sparseSegmentSum(I("data", n, e, t), I("indices", n, e, t), I("segmentIds", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JO = (n, e, t, s = on) => {
  switch (n.op) {
    case "FFT":
      return [s.fft(I("x", n, e, t))];
    case "IFFT":
      return [s.ifft(I("x", n, e, t))];
    case "RFFT":
      return [s.rfft(I("x", n, e, t))];
    case "IRFFT":
      return [s.irfft(I("x", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QO = (n, e, t, s = on) => {
  switch (n.op) {
    case "StringNGrams": {
      const { nGrams: r, nGramsSplits: o } = s.string.stringNGrams(I("data", n, e, t), I("dataSplits", n, e, t), I("separator", n, e, t), I("nGramWidths", n, e, t), I("leftPad", n, e, t), I("rightPad", n, e, t), I("padWidth", n, e, t), I("preserveShortSequences", n, e, t));
      return [r, o];
    }
    case "StringSplit": {
      const { indices: r, values: o, shape: a } = s.string.stringSplit(I("input", n, e, t), I("delimiter", n, e, t), I("skipEmpty", n, e, t));
      return [r, o, a];
    }
    case "StringToHashBucketFast":
      return [s.string.stringToHashBucketFast(I("input", n, e, t), I("numBuckets", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const e4 = (n, e, t, s = on) => {
  switch (n.op) {
    case "Cast":
      return [s.cast(I("x", n, e, t), I("dtype", n, e, t))];
    case "ExpandDims": {
      const r = I("axis", n, e, t);
      return [s.expandDims(I("x", n, e, t), r)];
    }
    case "Squeeze": {
      const r = I("axis", n, e, t);
      return [s.squeeze(I("x", n, e, t), r)];
    }
    case "Reshape":
      return [s.reshape(I("x", n, e, t), I("shape", n, e, t))];
    case "MirrorPad":
      return [s.mirrorPad(I("x", n, e, t), I("padding", n, e, t), I("mode", n, e, t))];
    case "PadV2":
    case "Pad":
      return [s.pad(I("x", n, e, t), I("padding", n, e, t), I("constantValue", n, e, t))];
    case "SpaceToBatchND": {
      const r = I("blockShape", n, e, t), o = I("paddings", n, e, t);
      return [s.spaceToBatchND(I("x", n, e, t), r, o)];
    }
    case "BatchToSpaceND": {
      const r = I("blockShape", n, e, t), o = I("crops", n, e, t);
      return [s.batchToSpaceND(I("x", n, e, t), r, o)];
    }
    case "DepthToSpace": {
      const r = I("blockSize", n, e, t), o = I("dataFormat", n, e, t).toUpperCase();
      return [s.depthToSpace(I("x", n, e, t), r, o)];
    }
    case "BroadcastTo":
      return [s.broadcastTo(I("x", n, e, t), I("shape", n, e, t))];
    case "BroadcastArgs":
      return [s.broadcastArgs(I("s0", n, e, t), I("s1", n, e, t))];
    default:
      throw TypeError(`Node type ${n.op} is not implemented`);
  }
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X0(n, e, t, s, r = H) {
  const o = ((a, i, l) => {
    switch (a.category) {
      case "arithmetic":
        return r(() => DO(a, i, l));
      case "basic_math":
        return r(() => AO(a, i, l));
      case "control":
        return PO(a, i, l);
      case "convolution":
        return r(() => zO(a, i, l));
      case "creation":
        return r(() => MO(a, i, l));
      case "dynamic":
        return BO(a, i, l);
      case "evaluation":
        return r(() => VO(a, i, l));
      case "image":
        return r(() => HO(a, i, l));
      case "graph":
        return r(() => WO(a, i, l));
      case "logical":
        return r(() => jO(a, i, l));
      case "matrices":
        return r(() => qO(a, i, l));
      case "normalization":
        return r(() => KO(a, i, l));
      case "reduction":
        return r(() => XO(a, i, l));
      case "slice_join":
        return r(() => YO(a, i, l));
      case "sparse":
        return r(() => ZO(a, i, l));
      case "spectral":
        return r(() => JO(a, i, l));
      case "string":
        return r(() => QO(a, i, l));
      case "transformation":
        return r(() => e4(a, i, l));
      case "hash_table":
        return GO(a, i, l, s);
      case "custom":
        const c = O2(a.op);
        if (c && c.customExecutor)
          return c.customExecutor(new EO(a, i, l));
        throw TypeError(`Custom op ${a.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(n, e, t);
  return Yo(o) ? o.then((a) => [].concat(a)) : [].concat(o);
}
class Y0 {
  constructor(e = {}, t = {}, s = {}, r = {}) {
    this.weightMap = e, this.tensorArrayMap = t, this.tensorListMap = s, this.functionMap = r, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(e, t) {
    return { id: e, frameName: t, iterationId: 0 };
  }
  /**
   * Set the current context
   * @param contexts: ExecutionContextInfo[] the current path of execution
   * frames
   */
  set currentContext(e) {
    this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  /**
   * Returns the current context in string format.
   */
  get currentContextId() {
    return this._currentContextIds[0];
  }
  /**
   * Returns the current context and all parent contexts in string format.
   * This allow access to the nodes in the current and parent frames.
   */
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    const e = [];
    for (let t = 0; t < this.contexts.length - 1; t++) {
      const s = this.contexts.slice(0, this.contexts.length - t);
      e.push(this.contextIdforContexts(s));
    }
    e.push(""), this._currentContextIds = e;
  }
  contextIdforContexts(e) {
    return e ? e.map((t) => t.id === 0 && t.iterationId === 0 ? "" : `${t.frameName}-${t.iterationId}`).join("/") : "";
  }
  /**
   * Enter a new frame, a new context is pushed on the current context list.
   * @param frameId new frame id
   */
  enterFrame(e) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  /**
   * Exit the current frame, the last context is removed from the current
   * context list.
   */
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  /**
   * Enter the next iteration of a loop, the iteration id of last context is
   * increased.
   */
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      const e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(e) {
    return this.weightMap[e];
  }
  addTensorArray(e) {
    this.tensorArrayMap[e.id] = e;
  }
  getTensorArray(e) {
    return this.tensorArrayMap[e];
  }
  addTensorList(e) {
    this.tensorListMap[e.id] = e;
  }
  getTensorList(e) {
    return this.tensorListMap[e];
  }
  dispose(e) {
    for (const t in this.tensorArrayMap)
      this.tensorArrayMap[t].clearAndClose(e);
    for (const t in this.tensorListMap)
      this.tensorListMap[t].clearAndClose(e);
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z0(n, e, t, s) {
  const r = /* @__PURE__ */ new Set(), o = [];
  let a = null, i = null;
  const l = /* @__PURE__ */ new Set(), c = Object.keys(n).map((d) => kn(d)[0]);
  let u = [];
  s != null && (u = s.map((d) => kn(d.name)[0]));
  const h = [...e];
  for (; h.length > 0; ) {
    const d = h.pop();
    if ((z2(d) || o4(d) || a4(d)) && a == null && (a = d, i = a.children.map((p) => p.name).filter((p) => r.has(p))), r.add(d.name), t[d.name] == null && c.indexOf(d.name) === -1 && u.indexOf(d.name) === -1) {
      if (d.inputs.length === 0) {
        o.push(d.name);
        continue;
      }
      d.inputs.forEach((p) => {
        l.has(p.name) || (l.add(p.name), h.push(p));
      });
    }
  }
  return { inputs: n, outputs: e, usedNodes: r, missingInputs: o, dynamicNode: a, syncInputs: i };
}
function t4(n, e, t) {
  const { usedNodes: s, inputs: r } = t, o = [], a = Object.keys(r).map((u) => kn(u)[0]).map((u) => n.nodes[u]), i = n.initNodes;
  a.forEach((u) => {
    s.has(u.name) && o.push(u);
  }), n.weights.forEach((u) => {
    s.has(u.name) && o.push(u);
  }), i != null && i.forEach((u) => {
    s.has(u.name) && o.push(u);
  });
  const l = /* @__PURE__ */ new Set(), c = [];
  for (; o.length > 0; ) {
    const u = o.pop();
    l.add(u.name), e[u.name] || c.push(u), u.children.forEach((h) => {
      !l.has(h.name) && s.has(h.name) && h.inputs.every((d) => l.has(d.name)) && o.push(h);
    });
  }
  return c;
}
const n4 = [
  "Switch",
  "Merge",
  "Enter",
  "Exit",
  "NextIteration",
  "StatelessIf",
  "StatelessWhile",
  "if",
  "While"
], s4 = [
  "NonMaxSuppressionV2",
  "NonMaxSuppressionV3",
  "NonMaxSuppressionV5",
  "Where"
], r4 = [
  "HashTable",
  "HashTableV2",
  "LookupTableImport",
  "LookupTableImportV2",
  "LookupTableFind",
  "LookupTableFindV2",
  "LookupTableSize",
  "LookupTableSizeV2"
];
function z2(n) {
  return n4.indexOf(n.op) >= 0;
}
function o4(n) {
  return s4.indexOf(n.op) >= 0;
}
function a4(n) {
  return r4.indexOf(n.op) >= 0;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Tc {
  /**
   *
   * @param graph Graph the model or function graph to be executed.
   * @param parent When building function exector you need to set the parent
   * executor. Since the weights and function executor maps are set at parant
   * level, that function executor can access the function maps and weight maps
   * through the parent.
   */
  constructor(e, t) {
    this.graph = e, this.parent = t, this.compiledMap = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPERATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.intermediateTensors = {}, this.keepTensorForDebug = !1, this._outputs = e.outputs, this._inputs = e.inputs, this._initNodes = e.initNodes, this._signature = e.signature, this._functions = e.functions, e.functions != null && Object.keys(e.functions).forEach((s) => {
      this._functionExecutorMap[s] = new Tc(e.functions[s], this);
    });
  }
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(e) {
    const t = Object.keys(e).map((s) => e[s].map((r) => r.id));
    this._weightIds = [].concat(...t), this._weightMap = e;
  }
  /**
   * Set `ResourceManager` shared by executors of a model.
   * @param resourceManager: `ResourceManager` of the `GraphModel`.
   */
  set resourceManager(e) {
    this._resourceManager = e;
  }
  get inputs() {
    return this._inputs.map((e) => ({
      name: e.name,
      shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
      dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
    }));
  }
  get outputs() {
    return this._outputs.map((e) => ({
      name: e.name,
      shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,
      dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0
    }));
  }
  get inputNodes() {
    return this._inputs.map((e) => e.signatureKey || e.name);
  }
  get outputNodes() {
    return this._outputs.map((e) => {
      const t = e.signatureKey || e.name;
      return e.defaultOutput ? `${t}:${e.defaultOutput}` : t;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((e, t) => (e[t] = this._functions[t].signature, e), {});
  }
  getCompilationKey(e, t) {
    const s = e.map((o) => o.name).sort(), r = t.map((o) => o.name).sort();
    return s.join(this.SEPERATOR) + "--" + r.join(this.SEPERATOR);
  }
  /**
   * Compiles the inference graph and returns the minimal set of nodes that are
   * required for execution, in the correct execution order.
   */
  compile(e, t) {
    const s = Z0(e, t, this.weightMap, this._initNodes), { missingInputs: r, dynamicNode: o, syncInputs: a } = s;
    if (o != null)
      throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);
    if (r.length > 0) {
      const i = t.map((c) => c.name), l = Object.keys(e);
      throw new Error(`Cannot compute the outputs [${i}] from the provided inputs [${l}]. Missing the following inputs: [${r}]`);
    }
    return t4(this.graph, this.weightMap, s);
  }
  /**
   * Executes the inference for given input tensors.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model, if
   * no outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   */
  execute(e, t) {
    e = this.mapInputs(e);
    const s = Object.keys(e).sort();
    this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);
    const r = s.map((h) => this.graph.nodes[kn(h)[0]]), o = t.map((h) => kn(h)[0]);
    let a = o.map((h) => this.graph.nodes[h]);
    this.resetIntermediateTensors(), a.length === 0 && (a = this._outputs);
    const i = this.getCompilationKey(r, a);
    let l = this.compiledMap.get(i);
    l == null && (l = this.compile(e, a), this.compiledMap.set(i, l));
    const c = {}, u = {};
    return H(() => {
      const h = new Y0(this.weightMap, c, u, this.functionExecutorMap), d = Object.assign({}, this.weightMap);
      Object.keys(e).forEach((m) => {
        const [g, y] = kn(m), b = [];
        b[y] = e[m], d[g] = b;
      });
      const p = this.getFrozenTensorIds(d), f = {};
      for (let m = 0; m < l.length; m++) {
        const g = l[m];
        if (!d[g.name]) {
          const y = X0(g, d, h, this._resourceManager);
          if (Yo(y))
            throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);
          d[g.name] = y, this.checkTensorForDisposal(g.name, g, d, h, p, o, f);
        }
      }
      return this.parent == null && h.dispose(p), t.map((m) => un(m, d, h));
    });
  }
  getFrozenTensorIds(e) {
    const t = [].concat.apply([], Object.keys(e).map((s) => e[s]).map((s) => s.map((r) => r.id)));
    return new Set(t);
  }
  checkTensorForDisposal(e, t, s, r, o, a, i) {
    t.category === "control" || a.indexOf(e) !== -1 || (s[e].forEach((l) => {
      l != null && (i[l.id] = (i[l.id] || 0) + t.children.length);
    }), t.inputs.forEach((l) => {
      if (l.category !== "control") {
        const c = U_(l.name, s, r);
        c != null && c.forEach((u) => {
          if (u && !u.kept && !o.has(u.id)) {
            const h = i[u.id];
            if (h === 1) {
              if (!this.keepTensorForDebug)
                u.dispose();
              else {
                const [d, p] = Ms(t.name, r);
                this.intermediateTensors[d] ? this.intermediateTensors[d][p] = u : (this.intermediateTensors[d] = [], this.intermediateTensors[d][p] = u);
              }
              delete i[u.id];
            } else h != null && i[u.id]--;
          }
        });
      }
    }));
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs output node name from the Tensorflow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   */
  async executeAsync(e, t) {
    return this._executeAsync(e, t);
  }
  disposeIntermediateTensors() {
    this.intermediateTensors && (Object.keys(this.intermediateTensors).forEach((e) => this.intermediateTensors[e].forEach((t) => t.dispose())), this.disposeTensorsMap());
  }
  disposeTensorsMap() {
    this.tensorsMap && Object.keys(this.tensorsMap).forEach((e) => {
      this.tensorsMap[e].forEach((s) => {
        s && !s.kept && !s.isDisposed && !this.keepIds.has(s.id) && s.dispose();
      });
    });
  }
  getIntermediateTensors() {
    return this.tensorsMap;
  }
  resetIntermediateTensors() {
    for (const e in this.intermediateTensors)
      this.intermediateTensors[e].forEach((t) => t.dispose()), delete this.intermediateTensors[e];
  }
  /**
   * Executes the inference for given input tensors in Async fashion.
   * @param inputs Tensor map for the model inputs, keyed by the input node
   * names.
   * @param outputs Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   * @param isFunctionExecution Optional. Flag for executing a function.
   * @param tensorArrayMap Optional, global TensorArray map by id. Used for
   * function execution.
   * @param tensorArrayMap Optinal global TensorList map by id. Used for
   * function execution.
   */
  async _executeAsync(e, t, s = !1, r = {}, o = {}) {
    s || (e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t));
    try {
      this.keepTensorForDebug = K().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (u) {
      console.warn(u.message);
    }
    this.resetIntermediateTensors();
    const a = new Y0(this.weightMap, r, o, this.functionExecutorMap);
    this.tensorsMap = await this.executeWithControlFlow(e, a, t, s);
    const i = t.map((u) => un(u, this.tensorsMap, a)), l = i.map((u) => u.id), c = Object.keys(e).map((u) => e[u].id);
    return this.keepIds = /* @__PURE__ */ new Set([...l, ...c, ...this.weightIds]), this.keepTensorForDebug || this.disposeTensorsMap(), this.parent == null && a.dispose(this.keepIds), i;
  }
  async executeFunctionAsync(e, t, s) {
    const r = e.reduce((o, a, i) => (o[this.inputs[i].name] = a, o), {});
    return this._executeAsync(r, this.outputNodes, !0, t, s);
  }
  /**
   * When there are control flow nodes in the graph, the graph execution use
   * ExecutionContext to keep track of the frames and loop iterators.
   * @param inputs placeholder tensors for the graph.
   * @param context the execution context object for current execution.
   * @param outputNames Optional. output node name from the Tensorflow model,
   * if no outputs are specified, the default outputs of the model would be
   * used. You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   * @param isFunctionExecution Flag for executing a function.
   */
  async executeWithControlFlow(e, t, s, r) {
    const o = Object.keys(e), a = o.map((w) => this.graph.nodes[kn(w)[0]]), i = s.map((w) => kn(w)[0]);
    let l = i.map((w) => this.graph.nodes[w]);
    l.length === 0 && (l = this._outputs);
    const { usedNodes: c, missingInputs: u, dynamicNode: h, syncInputs: d } = Z0(e, l, this.weightMap, this._initNodes), p = [
      ...a,
      ...this.graph.weights,
      ...this._initNodes || []
    ].map((w) => ({ node: w, contexts: t.currentContext })), f = Object.assign({}, this.weightMap);
    Object.keys(e).forEach((w) => {
      const [x, v] = kn(w), $ = [];
      $[v] = e[w], f[x] = $;
    });
    const m = {}, g = this.getFrozenTensorIds(f), y = {};
    for (; p.length > 0; ) {
      const w = this.processStack(a, p, t, f, y, g, i, m, c);
      await Promise.all(w);
    }
    h == null && !r && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    const b = l.filter((w) => !z2(w) && !un(w.name, f, t)).map((w) => w.name);
    if (b.length > 0) {
      let w = "";
      throw h != null && (w = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`), new Error(`Cannot compute the outputs [${b}] from the provided inputs [${o}]. Consider providing the following inputs: [${u}]. ${w}`);
    }
    return f;
  }
  processStack(e, t, s, r, o, a, i, l, c) {
    const u = [];
    for (; t.length > 0; ) {
      const h = t.pop();
      s.currentContext = h.contexts;
      let d = "";
      if (h.node.op === "Enter" && I("isConstant", h.node, r, s) && ([d] = Ms(h.node.name, s)), r[h.node.name] == null) {
        const p = X0(h.node, r, s, this._resourceManager);
        d || ([d] = Ms(h.node.name, s));
        const f = s.currentContext;
        Yo(p) ? u.push(p.then((m) => (r[d] = m, s.currentContext = f, this.checkTensorForDisposal(d, h.node, r, s, a, i, l), this.processChildNodes(h.node, t, s, r, o, c), m))) : (r[d] = p, this.checkTensorForDisposal(d, h.node, r, s, a, i, l), this.processChildNodes(h.node, t, s, r, o, c));
      } else
        this.processChildNodes(h.node, t, s, r, o, c);
    }
    return u;
  }
  processChildNodes(e, t, s, r, o, a) {
    e.children.forEach((i) => {
      const [l] = Ms(i.name, s);
      o[l] || !a.has(i.name) || (i.op === "Merge" ? i.inputNames.some((c) => !!un(c, r, s)) && (o[l] = !0, t.push({ contexts: s.currentContext, node: i })) : i.inputNames.every((c) => !!un(c, r, s)) && (o[l] = !0, t.push({ contexts: s.currentContext, node: i })));
    });
  }
  /**
   * Releases the memory used by the weight tensors.
   */
  dispose() {
    Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((t) => t.dispose()));
  }
  checkInputShapeAndType(e) {
    Object.keys(e).forEach((t) => {
      const s = e[t], [r] = kn(t), o = this.graph.nodes[r];
      if (o.attrParams.shape && o.attrParams.shape.value) {
        const a = o.attrParams.shape.value, i = a.length === s.shape.length && s.shape.every((l, c) => a[c] === -1 || a[c] === l);
        N(i, () => `The shape of dict['${o.name}'] provided in model.execute(dict) must be [${a}], but was [${s.shape}]`);
      }
      o.attrParams.dtype && o.attrParams.dtype.value && N(s.dtype === o.attrParams.dtype.value, () => `The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`);
    });
  }
  mapInputs(e) {
    const t = {};
    for (const s in e)
      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[s] != null) {
        const r = this._signature.inputs[s];
        t[r.name] = e[s];
      } else
        t[s] = e[s];
    return t;
  }
  checkInputs(e) {
    const t = Object.keys(e).filter((s) => {
      const [r] = kn(s);
      return this.graph.nodes[r] == null;
    });
    if (t.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`);
  }
  mapOutputs(e) {
    return e.map((t) => this._signature != null && this._signature.outputs != null && this._signature.outputs[t] != null ? this._signature.outputs[t].name : t, {});
  }
  checkOutputs(e) {
    e.forEach((t) => {
      const [s] = kn(t);
      if (!this.graph.nodes[s])
        throw new Error(`The output '${t}' is not found in the graph`);
    });
  }
}
class i4 {
  constructor(e = {}, t = {}) {
    this.hashTableNameToHandle = e, this.hashTableMap = t;
  }
  /**
   * Register a `HashTable` in the resource manager.
   *
   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,
   * where id is the table handle tensor's id.
   *
   * @param name Op node name that creates the `HashTable`.
   * @param hashTable The `HashTable` to be added to resource manager.
   */
  addHashTable(e, t) {
    this.hashTableNameToHandle[e] = t.handle, this.hashTableMap[t.id] = t;
  }
  /**
   * Get the table handle by node name.
   * @param name Op node name that creates the `HashTable`. This name is also
   *     used in the inputs list of lookup and import `HashTable` ops.
   */
  getHashTableHandleByName(e) {
    return this.hashTableNameToHandle[e];
  }
  /**
   * Get the actual `HashTable` by its handle tensor's id.
   * @param id The id of the handle tensor.
   */
  getHashTableById(e) {
    return this.hashTableMap[e];
  }
  /**
   * Dispose `ResourceManager`, including its hashTables and tensors in them.
   */
  dispose() {
    for (const e in this.hashTableMap)
      this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
    for (const e in this.hashTableNameToHandle)
      this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l4 = "?tfjs-format=file", c4 = "model.json";
class u4 {
  /**
   * @param modelUrl url for the model, or an `io.IOHandler`.
   * @param weightManifestUrl url for the weight file generated by
   * scripts/convert.py script.
   * @param requestOption options for Request, which allows to send credentials
   * and custom headers.
   * @param onProgress Optional, progress callback function, fired periodically
   * before the load is completed.
   */
  constructor(e, t = {}, s = L1) {
    this.modelUrl = e, this.loadOptions = t, this.version = "n/a", this.io = s, t == null && (this.loadOptions = {}), this.resourceManager = new i4();
  }
  // Returns the version information for the tensorflow model GraphDef.
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  findIOHandler() {
    const e = this.modelUrl;
    if (e.load != null)
      this.handler = e;
    else if (this.loadOptions.requestInit != null)
      this.handler = this.io.browserHTTPRequest(e, this.loadOptions);
    else {
      const t = this.io.getLoadHandlers(e, this.loadOptions);
      if (t.length === 0)
        t.push(this.io.browserHTTPRequest(e, this.loadOptions));
      else if (t.length > 1)
        throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);
      this.handler = t[0];
    }
  }
  /**
   * Loads the model and weight files, construct the in memory weight map and
   * compile the inference graph.
   */
  load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    const e = this.handler.load();
    return Yo(e) ? e.then((t) => this.loadSync(t)) : this.loadSync(e);
  }
  /**
   * Synchronously construct the in memory weight map and
   * compile the inference graph. Also initialize hashtable if any.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  loadSync(e) {
    this.artifacts = e;
    const t = this.artifacts.modelTopology;
    let s = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      const o = this.artifacts.userDefinedMetadata;
      o.signature != null && (s = o.signature), o.structuredOutputKeys != null && (this.structuredOutputKeys = o.structuredOutputKeys);
    }
    this.signature = s, this.version = `${t.versions.producer}.${t.versions.minConsumer}`;
    const r = this.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    if (this.executor = new Tc(H0.Instance.transformGraph(t, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) {
      const o = H0.Instance.transformGraph(e.modelInitializer);
      this.initializer = new Tc(o), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializer.executeAsync({}, []);
    }
    return !0;
  }
  /**
   * Save the configuration and/or weights of the GraphModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const modelUrl =
   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';
   * const model = await tf.loadGraphModel(modelUrl);
   * const zeros = tf.zeros([1, 224, 224, 3]);
   * model.predict(zeros).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * model.predict(zeros).print();
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async save(e, t) {
    if (typeof e == "string") {
      const s = this.io.getSaveHandlers(e);
      if (s.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${e}'`);
      if (s.length > 1)
        throw new Error(`Found more than one (${s.length}) save handlers for URL '${e}'`);
      e = s[0];
    }
    if (e.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return e.save(this.artifacts);
  }
  /**
   * Execute the inference for the input tensors.
   *
   * @param input The input tensors, when there is single input for the model,
   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,
   * inputs params should be in either `tf.Tensor`[] if the input order is
   * fixed, or otherwise NamedTensorMap format.
   *
   * For model with multiple inputs, we recommend you use NamedTensorMap as the
   * input type, if you use `tf.Tensor`[], the order of the array needs to
   * follow the
   * order of inputNodes array. @see {@link GraphModel.inputNodes}
   *
   * You can also feed any intermediate nodes using the NamedTensorMap as the
   * input type. For example, given the graph
   *    InputNode => Intermediate => OutputNode,
   * you can execute the subgraph Intermediate => OutputNode by calling
   *    model.execute('IntermediateNode' : tf.tensor(...));
   *
   * This is useful for models that uses tf.dynamic_rnn, where the intermediate
   * state needs to be fed manually.
   *
   * For batch inference execution, the tensors for each input need to be
   * concatenated together. For example with mobilenet, the required input shape
   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].
   * If we are provide a batched data of 100 images, the input tensor should be
   * in the shape of [100, 244, 244, 3].
   *
   * @param config Prediction configuration for specifying the batch size.
   * Currently the batch size option is ignored for graph model.
   *
   * @returns Inference result tensors. If the model is converted and it
   * originally had structured_outputs in tensorflow, then a NamedTensorMap
   * will be returned matching the structured_outputs. If no structured_outputs
   * are present, the output will be single `tf.Tensor` if the model has single
   * output node, otherwise Tensor[].
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(e, t) {
    const s = this.execute(e, this.outputNodes);
    if (this.structuredOutputKeys) {
      const r = s instanceof Je ? [s] : s, o = {};
      return r.forEach((a, i) => o[this.structuredOutputKeys[i]] = a), o;
    }
    return s;
  }
  normalizeInputs(e) {
    if (!(e instanceof Je) && !Array.isArray(e))
      return e;
    if (e = Array.isArray(e) ? e : [e], e.length !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);
    return this.inputNodes.reduce((t, s, r) => (t[s] = e[r], t), {});
  }
  normalizeOutputs(e) {
    return e = e || this.outputNodes, Array.isArray(e) ? e : [e];
  }
  /**
   * Executes inference for the model for given input tensors.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the TensorFlow model, if no
   * outputs are specified, the default outputs of the model would be used.
   * You can inspect intermediate nodes of the model by adding them to the
   * outputs array.
   *
   * @returns A single tensor if provided with a single output or no outputs
   * are provided and there is only one default output, otherwise return a
   * tensor array. The order of the tensor array is the same as the outputs
   * if provided, otherwise the order of outputNodes attribute of the model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  execute(e, t) {
    e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    const s = this.executor.execute(e, t);
    return s.length > 1 ? s : s[0];
  }
  /**
   * Executes inference for the model for given input tensors in async
   * fashion, use this method when your model contains control flow ops.
   * @param inputs tensor, tensor array or tensor map of the inputs for the
   * model, keyed by the input node names.
   * @param outputs output node name from the TensorFlow model, if no outputs
   * are specified, the default outputs of the model would be used. You can
   * inspect intermediate nodes of the model by adding them to the outputs
   * array.
   *
   * @returns A Promise of single tensor if provided with a single output or
   * no outputs are provided and there is only one default output, otherwise
   * return a tensor map.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async executeAsync(e, t) {
    e = this.normalizeInputs(e), t = this.normalizeOutputs(t);
    const s = await this.executor.executeAsync(e, t);
    return s.length > 1 ? s : s[0];
  }
  /**
   * Get intermediate tensors for model debugging mode (flag
   * KEEP_INTERMEDIATE_TENSORS is true).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  /**
   * Dispose intermediate tensors for model debugging mode (flag
   * KEEP_INTERMEDIATE_TENSORS is true).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(e) {
    return Object.keys(e).reduce((t, s) => (t[s] = [e[s]], t), {});
  }
  /**
   * Releases the memory used by the weight tensors and resourceManager.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  dispose() {
    this.executor.dispose(), this.initializer && this.initializer.dispose(), this.resourceManager.dispose();
  }
}
async function ra(n, e = {}, t = L1) {
  if (n == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  e == null && (e = {}), e.fromTFHub && typeof n == "string" && (n = h4(n));
  const s = new u4(n, e, t);
  return await s.load(), s;
}
function h4(n) {
  return n.endsWith("/") || (n = n + "/"), `${n}${c4}${l4}`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var J0;
(function(n) {
  n[n.FAIL = 0] = "FAIL", n[n.SHORTEST = 1] = "SHORTEST", n[n.LONGEST = 2] = "LONGEST";
})(J0 || (J0 = {}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xe(n, e) {
  Array.isArray(n) || (n = [n]), n.forEach((t) => {
    t != null && N(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the CPU backend.`);
  });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d4 = xm;
class Dh extends bp {
  constructor() {
    super(), this.blockSize = 48, this.firstUse = !0, this.data = new Hy(this, fr());
  }
  nextDataId() {
    return Dh.nextDataId++;
  }
  write(e, t, s) {
    this.firstUse && (this.firstUse = !1, K().get("IS_NODE") && Vn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    const r = { id: this.nextDataId() };
    return this.data.set(r, { values: e, dtype: s, refCount: 1 }), r;
  }
  /**
   * Create a data bucket in cpu backend.
   * @param shape Shape of the `TensorInfo`.
   * @param dtype DType of the `TensorInfo`.
   * @param values The value of the `TensorInfo` stored as a flattened array.
   */
  makeTensorInfo(e, t, s) {
    let r;
    if (t === "string" && s != null && s.length > 0 && oi(s[0])) {
      const o = s.map((a) => br(a));
      r = this.write(o, e, t);
    } else
      r = this.write(s, e, t);
    return { dataId: r, shape: e, dtype: t };
  }
  /** Return refCount of a `TensorData`. */
  refCount(e) {
    return this.data.has(e) ? this.data.get(e).refCount : 0;
  }
  /** Increase refCount of a `TensorData`. */
  incRef(e) {
    const t = this.data.get(e);
    t.refCount++;
  }
  /** Decrease refCount of a `TensorData`. */
  decRef(e) {
    if (this.data.has(e)) {
      const t = this.data.get(e);
      t.refCount--;
    }
  }
  move(e, t, s, r, o) {
    this.data.set(e, { values: t, dtype: r, refCount: o });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e) {
    const { dtype: t, complexTensorInfos: s } = this.data.get(e);
    if (t === "complex64") {
      const r = this.readSync(s.real.dataId), o = this.readSync(s.imag.dataId);
      return ar(r, o);
    }
    return this.data.get(e).values;
  }
  bufferSync(e) {
    const t = this.readSync(e.dataId);
    if (e.dtype === "string")
      try {
        const s = t.map((r) => vr(r));
        return Le(e.shape, e.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Le(e.shape, e.dtype, t);
  }
  makeOutput(e, t, s) {
    return fr().makeTensorFromTensorInfo(this.makeTensorInfo(t, s, e), this);
  }
  /**
   * Dispose the memory if the dataId has 0 refCount. Return true if the memory
   * is released or memory is not managed in this backend, false if memory is
   * not cleared.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(e, t = !1) {
    if (this.data.has(e)) {
      if (this.data.get(e).refCount--, !t && this.data.get(e).refCount > 0)
        return !1;
      const { complexTensorInfos: s } = this.data.get(e);
      s != null && (this.disposeData(s.real.dataId, !0), this.disposeData(s.imag.dataId, !0)), this.data.delete(e);
    }
    return !0;
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  async time(e) {
    const t = bn();
    return e(), { kernelMs: bn() - t };
  }
  memory() {
    return {
      // Unreliable due to automatic gc. The numbers above are cumulative.
      unreliable: !0,
      reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]
    };
  }
  where(e) {
    xe([e], "where");
    const t = this.readSync(e.dataId);
    return d4(e.shape, t);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return super.epsilon();
  }
}
Dh.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function M2(n) {
  const e = new Float32Array(n.length);
  for (let t = 0; t < n.length; ++t)
    e[t] = Math.abs(n[t]);
  return e;
}
const p4 = (n) => {
  const { x: e } = n.inputs, t = n.backend;
  xe(e, "abs");
  let s = new Float32Array(Z(e.shape));
  const r = t.data.get(e.dataId).values;
  return s = M2(r), t.makeOutput(s, e.shape, e.dtype);
}, f4 = {
  kernelName: Gc,
  backendName: "cpu",
  kernelFunc: p4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tt(n) {
  return (e, t, s, r, o) => {
    const a = Fe(e, t), i = a.length, l = ke(a), c = Z(a), u = Ht(o, c), h = e.length, d = t.length, p = ke(e), f = ke(t), m = Qo(e, a), g = Qo(t, a);
    if (m.length + g.length === 0)
      for (let y = 0; y < u.length; ++y)
        u[y] = n(s[y % s.length], r[y % r.length]);
    else
      for (let y = 0; y < u.length; ++y) {
        const b = fa(y, i, l), w = b.slice(-h);
        m.forEach((C) => w[C] = 0);
        const x = Vs(w, h, p), v = b.slice(-d);
        g.forEach((C) => v[C] = 0);
        const $ = Vs(v, d, f);
        u[y] = n(s[x], r[$]);
      }
    return [u, a];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tn(n) {
  const { inputs: e, backend: t } = n, { real: s, imag: r } = e, o = t.data.get(s.dataId).values, a = t.data.get(r.dataId).values, i = t.makeTensorInfo(s.shape, "complex64"), l = t.data.get(i.dataId);
  return l.complexTensorInfos = {
    real: t.makeTensorInfo(s.shape, "float32", o),
    imag: t.makeTensorInfo(r.shape, "float32", a)
  }, i;
}
const m4 = {
  kernelName: Tp,
  backendName: "cpu",
  kernelFunc: Tn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ec(n, e, t = "float32") {
  if (t === "complex64") {
    const r = Ec(n, e, "float32"), o = Ec(n, e, "float32");
    return Tn({ inputs: { real: r, imag: o }, backend: n });
  }
  const s = sn(Z(e), t);
  return n.makeTensorInfo(e, t, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qs(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  return t.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const g4 = {
  kernelName: ki,
  backendName: "cpu",
  kernelFunc: qs
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function po(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.data.get(s.dataId).complexTensorInfos.real, o = t.data.get(r.dataId).values;
  return t.makeTensorInfo(r.shape, r.dtype, o);
}
const y4 = {
  kernelName: of,
  backendName: "cpu",
  kernelFunc: po
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B2(n, e, t, s) {
  if (s === "int32") {
    const r = Int32Array.from(n);
    return [e, "int32", r];
  }
  if (s === "bool") {
    const r = go([0], t), [o, a] = Tt((i, l) => i !== l ? 1 : 0)(e, [], n, r, "bool");
    return [a, "bool", o];
  }
  throw new Error(`Error in Cast: failed to cast ${t} to ${s}`);
}
function Dr(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dtype: o } = s;
  if (o === "complex64") {
    if (r.dtype === "complex64")
      return qs({ inputs: { x: r }, backend: t });
    const u = Ec(t, r.shape, r.dtype), h = Dr({ inputs: { x: r }, backend: t, attrs: { dtype: "float32" } }), d = Tn({ inputs: { real: h, imag: u }, backend: t });
    return t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(h), d;
  }
  if (r.dtype === "complex64") {
    const u = po({ inputs: { input: r }, backend: t }), h = Dr({ inputs: { x: u }, backend: t, attrs: { dtype: o } });
    return t.disposeIntermediateTensorInfo(u), h;
  }
  if (!qy(r.dtype, o)) {
    const u = qs({ inputs: { x: r }, backend: t });
    return { dataId: u.dataId, shape: u.shape, dtype: o };
  }
  const a = t.data.get(r.dataId).values, [i, l, c] = B2(a, r.shape, r.dtype, o);
  return t.makeTensorInfo(i, l, c);
}
const b4 = {
  kernelName: fi,
  backendName: "cpu",
  kernelFunc: Dr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kt(n, e, t, s) {
  return t == null ? ({ inputs: r, backend: o }) => {
    const { a, b: i } = r, l = o;
    xe([a, i], n);
    const c = l.data.get(a.dataId).values, u = l.data.get(i.dataId).values, h = a.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      co(c)
    ) : c, d = a.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      co(u)
    ) : u, p = s || a.dtype, [f, m] = e(a.shape, i.shape, h, d, p);
    return l.makeTensorInfo(m, p, f);
  } : ({ inputs: r, backend: o }) => {
    const { a, b: i } = r, l = o;
    if (a.dtype === "complex64" || i.dtype === "complex64") {
      const c = Dr({ inputs: { x: a }, backend: l, attrs: { dtype: "complex64" } }), u = l.data.get(c.dataId), h = u.complexTensorInfos.real, d = u.complexTensorInfos.imag, p = l.data.get(h.dataId).values, f = l.data.get(d.dataId).values, m = Dr({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), g = l.data.get(m.dataId), y = g.complexTensorInfos.real, b = g.complexTensorInfos.imag, w = l.data.get(y.dataId).values, x = l.data.get(b.dataId).values, [v, $, C] = t(a.shape, i.shape, p, f, w, x), S = l.makeTensorInfo(C, "float32", v), E = l.makeTensorInfo(C, "float32", $), D = Tn({ inputs: { real: S, imag: E }, backend: l });
      return l.disposeIntermediateTensorInfo(c), l.disposeIntermediateTensorInfo(m), l.disposeIntermediateTensorInfo(S), l.disposeIntermediateTensorInfo(E), D;
    } else {
      const c = l.data.get(a.dataId).values, u = l.data.get(i.dataId).values, h = s || a.dtype, [d, p] = e(a.shape, i.shape, c, u, h);
      return l.makeTensorInfo(p, h, d);
    }
  };
}
function vg(n) {
  return (e, t, s, r, o, a) => {
    const i = Fe(e, t), l = Z(i), c = i.length, u = ke(i), h = Ht("float32", l), d = Ht("float32", l), p = Qo(e, i), f = Qo(t, i), m = ar(s, r), g = ar(o, a), y = e.length, b = ke(e), w = t.length, x = ke(t);
    if (p.length + f.length === 0)
      for (let v = 0; v < h.length; v++) {
        const $ = v % m.length, C = v % g.length, S = n(m[$ * 2], m[$ * 2 + 1], g[C * 2], g[C * 2 + 1]);
        h[v] = S.real, d[v] = S.imag;
      }
    else
      for (let v = 0; v < h.length; v++) {
        const $ = fa(v, c, u), C = $.slice(-y);
        p.forEach((V) => C[V] = 0);
        const S = Vs(C, y, b), E = $.slice(-w);
        f.forEach((V) => E[V] = 0);
        const D = Vs(E, w, x), O = n(m[S * 2], m[S * 2 + 1], g[D * 2], g[D * 2 + 1]);
        h[v] = O.real, d[v] = O.imag;
      }
    return [h, d, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const V2 = Tt((n, e) => n + e), x4 = vg((n, e, t, s) => ({ real: n + t, imag: e + s })), oa = Kt(ma, V2, x4), w4 = {
  kernelName: ma,
  backendName: "cpu",
  kernelFunc: oa
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ig(n, e, t, s, r) {
  const o = Z(s), a = sn(r, t);
  for (let i = 0; i < n.length; i++) {
    const l = n[i];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= r || (o > 0 ? a[l] += e[i] : a[l] += 1);
  }
  return a;
}
function W2(n, e, t, s = !1) {
  const r = n.shape[0], o = n.shape[1], a = Le([r, t], e.dtype);
  for (let i = 0; i < r; i++)
    for (let l = 0; l < o; l++) {
      const c = n.get(i, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= t || (s ? a.set(1, i, c) : e.size > 0 ? a.set(a.get(i, c) + e.get(i, l), i, c) : a.set(a.get(i, c) + 1, i, c));
    }
  return a;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vr(n) {
  return (e, t, s) => {
    const r = Ht(t, e.length);
    for (let o = 0; o < e.length; ++o)
      r[o] = n(e[o], s);
    return r;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nt(n, e, t) {
  return ({ inputs: s, attrs: r, backend: o }) => {
    const { x: a } = s;
    if (xe(a, n), a.dtype === "string" || t === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const i = o, l = i.data.get(a.dataId).values, c = Z(a.shape), u = t || a.dtype, h = Wt(u, c);
    for (let d = 0; d < c; ++d)
      h[d] = e(l[d], r);
    return i.makeTensorInfo(a.shape, u, h);
  };
}
function Ia(n, e, t) {
  return ({ inputs: s, attrs: r, backend: o }) => {
    const { x: a } = s;
    if (xe(a, n), a.dtype === "string" || t === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const i = o, l = i.data.get(a.dataId).values, c = t || a.dtype, u = e(l, c, r);
    return i.makeTensorInfo(a.shape, c, u);
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const U2 = Vr((n) => Math.ceil(n)), v4 = Ia(mi, U2), I4 = {
  kernelName: mi,
  backendName: "cpu",
  kernelFunc: v4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G2(n, e, t, s) {
  const r = Wt(t, Z(e));
  if (s && t !== "string") {
    let o = 0;
    n.forEach((a) => {
      const i = Z(a.shape);
      r.set(a.vals, o), o += i;
    });
  } else {
    let o = 0;
    n.forEach((a) => {
      const i = t === "string" ? co(a.vals) : a.vals;
      let l = 0;
      for (let c = 0; c < a.shape[0]; ++c) {
        const u = c * e[1] + o;
        for (let h = 0; h < a.shape[1]; ++h)
          r[u + h] = i[l++];
      }
      o += a.shape[1];
    });
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const H2 = Tt((n, e) => n === e ? 1 : 0), j2 = Kt(au, H2, null, "bool"), $4 = {
  kernelName: au,
  backendName: "cpu",
  kernelFunc: j2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q2 = Vr((n) => Math.exp(n)), K2 = Ia(Ii, q2, "float32"), C4 = {
  kernelName: Ii,
  backendName: "cpu",
  kernelFunc: K2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const X2 = Vr((n) => Math.expm1(n)), S4 = Ia($i, X2), N4 = {
  kernelName: $i,
  backendName: "cpu",
  kernelFunc: S4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y2 = Vr((n) => Math.floor(n)), k4 = Ia(Ci, Y2), T4 = {
  kernelName: Ci,
  backendName: "cpu",
  kernelFunc: k4
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z2(n, e, t, s, r, o, a, i, l) {
  const c = Le([s, o], t);
  for (let u = 0; u < s; u++) {
    const h = [];
    let d = 0;
    for (let p = 0; p < r; p++) {
      const f = n[u * r + p];
      d += f * a[p], h.push(f);
    }
    if (d < 0 || d >= l / o)
      throw new Error(`Invalid indices: ${h} does not index into ${i}`);
    for (let p = 0; p < o; p++)
      c.values[u * o + p] = e.get(...e.indexToLoc(d * o + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J2(n, e, t) {
  const s = Le(t, n.dtype);
  for (let r = 0; r < s.size; ++r) {
    const a = s.indexToLoc(r).slice(), i = a[0], l = a[2], c = e.locToIndex([i, l]);
    a[2] = e.values[c];
    const u = n.locToIndex(a);
    0 <= u && u < n.values.length && (s.values[r] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q2 = Tt((n, e) => n > e ? 1 : 0), E4 = Kt(uu, Q2, null, "bool"), D4 = {
  kernelName: uu,
  backendName: "cpu",
  kernelFunc: E4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ev = Tt((n, e) => n >= e ? 1 : 0), A4 = Kt(Ni, ev, null, "bool"), R4 = {
  kernelName: Ni,
  backendName: "cpu",
  kernelFunc: A4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tv = Tt((n, e) => n < e ? 1 : 0), F4 = Kt(du, tv, null, "bool"), _4 = {
  kernelName: du,
  backendName: "cpu",
  kernelFunc: F4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nv = Tt((n, e) => n <= e ? 1 : 0), O4 = Kt(pu, nv, null, "bool"), L4 = {
  kernelName: pu,
  backendName: "cpu",
  kernelFunc: O4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sv(n, e, t) {
  const s = (e - n) / (t - 1), r = sn(t, "float32");
  r[0] = n;
  for (let o = 1; o < r.length; o++)
    r[o] = r[o - 1] + s;
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rv = Vr((n) => Math.log(n)), P4 = Ia(Ai, rv), z4 = {
  kernelName: Ai,
  backendName: "cpu",
  kernelFunc: P4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ov(n, e, t, s) {
  const r = Ht(s, Z(t));
  for (let o = 0; o < r.length; ++o) {
    const a = o * e;
    let i = n[a];
    for (let l = 0; l < e; ++l) {
      const c = n[a + l];
      (Number.isNaN(c) || c > i) && (i = c);
    }
    r[o] = i;
  }
  return r;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const av = Tt((n, e) => Math.max(n, e)), M4 = Kt(Fi, av), B4 = {
  kernelName: Fi,
  backendName: "cpu",
  kernelFunc: M4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iv = Tt((n, e) => Math.min(n, e)), V4 = Kt(_i, iv), W4 = {
  kernelName: _i,
  backendName: "cpu",
  kernelFunc: V4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $g = Tt((n, e) => n * e), U4 = vg((n, e, t, s) => ({
  real: n * t - e * s,
  imag: n * s + e * t
})), Ah = Kt(Li, $g, U4), G4 = {
  kernelName: Li,
  backendName: "cpu",
  kernelFunc: Ah
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lv(n, e, t) {
  const s = Fr(-1, t);
  return $g([], e, s, n, t);
}
function H4(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  xe(s, "neg");
  const r = t.data.get(s.dataId).values, [o, a] = lv(r, s.shape, s.dtype);
  return t.makeTensorInfo(a, s.dtype, o);
}
const j4 = {
  kernelName: Cu,
  backendName: "cpu",
  kernelFunc: H4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cv = Tt((n, e) => n !== e ? 1 : 0), q4 = Kt(Su, cv, null, "bool"), K4 = {
  kernelName: Su,
  backendName: "cpu",
  kernelFunc: q4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Cg(n, e, t, s, r) {
  const o = e.length, a = Z(e), i = ke(e), l = ke(r), c = Ht(t, Z(r));
  for (let u = 0; u < a; ++u) {
    const h = fa(u, o, i), d = new Array(h.length);
    for (let f = 0; f < d.length; f++)
      d[f] = h[s[f]];
    const p = Vs(d, o, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $n(n) {
  const { inputs: e, attrs: t, backend: s } = n, { x: r } = e, { perm: o } = t;
  xe(r, "transpose");
  const a = r.shape.length, i = new Array(a);
  for (let h = 0; h < i.length; h++)
    i[h] = r.shape[o[h]];
  const l = s.data.get(r.dataId).values, c = Cg(l, r.shape, r.dtype, o, i);
  return { dataId: s.write(c, i, r.dtype), shape: i, dtype: r.dtype };
}
const X4 = {
  kernelName: Vo,
  backendName: "cpu",
  kernelFunc: $n
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uv(n, e, t, s) {
  const [r, o] = qt(n, s), a = Rn(e, "int32"), i = sn(Z(r), a), l = Z(o);
  for (let c = 0; c < i.length; ++c) {
    const u = c * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= t[u + d];
    i[c] = h;
  }
  return { outVals: i, outShape: r, outDtype: a };
}
function Y4(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s;
  xe(r, "prod");
  const i = r.shape.length, l = ze(o, r.shape), c = wt(l, i);
  let u = l, h = r;
  const d = [];
  c != null && (h = $n({ inputs: { x: r }, backend: t, attrs: { perm: c } }), d.push(h), u = Nt(u.length, i));
  const p = t.data.get(h.dataId).values, { outVals: f, outShape: m, outDtype: g } = uv(h.shape, h.dtype, p, u);
  let y = m;
  return a && (y = St(m, l)), d.forEach((b) => t.disposeIntermediateTensorInfo(b)), t.makeTensorInfo(y, g, f);
}
const Z4 = {
  kernelName: Au,
  backendName: "cpu",
  kernelFunc: Y4
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J4(n, e, t) {
  n.forEach((s, r) => {
    if (s < 0 || s >= t) {
      const o = fa(r, e.length, ke(e)).join(",");
      throw new Error(`indices[${o}] = ${s} is not in [0, ${t})`);
    }
  });
}
function Q4(n, e) {
  for (let t = 0; t < n.length; ++t) {
    const s = n[t], r = t === n.length - 1 ? e : n[t + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > r)
      throw new Error("Ragged splits must not point past values");
    for (let o = 1; o < s.length; ++o)
      if (s[o - 1] > s[o])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function eL(n, e, t, s) {
  const r = [];
  let o = 0;
  const a = e.length - 1 + t.length, i = new Array(a).fill(null).map(() => [0]);
  Q4(t, s);
  let l = 1;
  for (let c = 0; c < e.length - 1; ++c) {
    l *= e[c];
    const u = e[c + 1];
    for (let h = 1; h < l + 1; ++h)
      i[c].push(h * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], h = n[c] + 1;
    for (let d = 0; d < t.length; ++d) {
      const p = t[d], f = d + e.length - 1;
      if (f >= 0) {
        const m = i[f], g = m[m.length - 1] - p[u];
        for (let y = u; y < h; ++y)
          i[f].push(p[y + 1] + g);
      }
      u = p[u], h = p[h];
    }
    h !== u && (r.push([u, h]), o += h - u);
  }
  return { outSplits: i, valueSlices: r, numValues: o };
}
function tL(n) {
  const e = [];
  for (let t = 0; t < n.length; ++t) {
    const s = n[t].length, r = Wt("int32", s);
    e.push(r), n[t].forEach((o, a) => r[a] = o);
  }
  return e;
}
function Q0(n, e) {
  const t = n.slice(0, e);
  for (; t.length < e; )
    t.push(1);
  for (let s = e; s < n.length; s++)
    t[e - 1] *= n[s];
  return t;
}
function nL(n, e, t, s, r, o) {
  const a = Q0(e, 2)[1], i = Q0(o, 2)[1];
  let l = 0;
  for (const c of t)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h)
        r[l * i + h] = n[u * a + h];
      ++l;
    }
}
function sL(n, e, t, s, r) {
  const o = e.slice();
  o[0] = r;
  const a = Wt(t, Z(o)), i = n.length, l = i === 0 ? 0 : i / e[0];
  return nL(n, e, s, l, a, o), [a, o];
}
function hv(n, e, t, s, r, o, a, i) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (e[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = e[0][0] - 1;
  if (J4(o, a, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = eL(o, a, n, c), p = tL(u), f = sL(t, s, r, h, d);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Jn = vs;
class Dc {
  constructor(e, t, s, r, o, a, i, l, c, u) {
    this.shape = e, this.shapeShape = t, this.values = s, this.valuesShape = r, this.valuesDType = o, this.defaultValue = a, this.defaultValueShape = i, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = sx(u), this.raggedRank = rx(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(e) {
    return this.rowPartitionTypes[0] === Jn.FIRST_DIM_SIZE ? this.rowPartitionTypes[e + 1] : this.rowPartitionTypes[e];
  }
  // Returns the relationship between dimension and dimension + 1.
  getRowPartitionTensor(e) {
    return this.rowPartitionTypes[0] === Jn.FIRST_DIM_SIZE ? this.rowPartitionValues[e + 1] : this.rowPartitionValues[e];
  }
  getMaxWidth(e) {
    const t = this.getRowPartitionTensor(e - 1);
    switch (this.getRowPartitionTypeByDimension(e - 1)) {
      case Jn.VALUE_ROWIDS:
        return Dc.getMaxWidthValueRowID(t);
      case Jn.ROW_SPLITS:
        return Dc.getMaxWidthRowSplit(t);
      default:
        throw new Error(`Cannot handle partition type ${Jn[this.getRowPartitionTypeByDimension(e - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(e) {
    const t = e.length;
    if (t === 0 || t === 1)
      return 0;
    let s = 0;
    for (let r = 0; r < t - 1; ++r) {
      const o = e[r + 1] - e[r];
      o > s && (s = o);
    }
    return s;
  }
  static getMaxWidthValueRowID(e) {
    const t = e.length;
    if (t === 0)
      return 0;
    let s = 0, r = e[0], o = 0;
    for (let a = 1; a < t; ++a) {
      const i = e[a];
      i !== r && (r = i, o = Math.max(a - s, o), s = a);
    }
    return Math.max(t - s, o);
  }
  tensorShapeFromTensor(e, t, s = !0) {
    if (t.length === 0) {
      if (e[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return ty(e, s);
  }
  calculateOutputSize(e) {
    const t = this.valuesShape, s = this.defaultValueShape;
    ox(s, t);
    const r = this.tensorShapeFromTensor(this.shape, this.shapeShape), a = nx(this.raggedRank, r, t);
    a[0] < 0 && (a[0] = e);
    for (let i = 1; i <= this.raggedRank; ++i)
      a[i] < 0 && (a[i] = this.getMaxWidth(i));
    return a;
  }
  /**
   * The outputIndex represents the index in the output tensor
   * where the first element of a particular dimension would be written.
   * If it is -1, it indicates that the index is out of scope.
   * Example, given firstDimension = 10, firstDimensionOutput = 6,
   * and outputIndexMultiplier = 100:
   * result = [0 100 200 300 400 500 -1 -1 -1 -1]
   * If firstDimensionOutput = 11 instead, then:
   * result = [0 100 200 300 400 500 600 700 800 900]
   */
  calculateFirstParentOutputIndex(e, t, s) {
    const r = Math.min(e, s), o = [];
    let a = 0;
    for (let i = 0; i < r; ++i, a += t)
      o.push(a);
    for (let i = r; i < e; ++i)
      o.push(-1);
    return N(o.length === e, () => "Final length of result must be equal to firstDimension."), o;
  }
  calculateOutputIndexRowSplit(e, t, s, r) {
    const o = e.length, a = [];
    for (let i = 0; i < o - 1; ++i) {
      const l = e[i + 1] - e[i];
      let c = Math.min(r, l), u = t[i];
      u === -1 && (c = 0);
      for (let h = 0; h < c; ++h)
        a.push(u), u += s;
      for (let h = 0; h < l - c; ++h)
        a.push(-1);
    }
    if (o > 0 && a.length !== e[o - 1])
      throw new Error("Invalid row split size.");
    return a;
  }
  // Calculate the output index of the first element of a list.
  // The parentOutputIndex is the same computation for the previous list.
  // -1 indicates an element or list that is out of range.
  // The outputIndexMultiplier is the number of output indices one moves
  // forward for each column.
  // E.g., given:
  // valueRowIds:[0 1 2 2 2 3 5 5 6]
  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
  // outputIndexMultiplier: 10
  // outputSize: 2
  // You get:
  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
  // result[0] = parentOutputIndex[valueRowIds[0]]
  // result[1] = parentOutputIndex[valueRowIds[1]]
  // result[2] = parentOutputIndex[valueRowIds[2]]
  // result[3] = parentOutputIndex[valueRowIds[2] + 10]
  // result[4] = -1 because it is the third element the size is 2.
  // result[5] = parentOutputIndex[valueRowIds[3]]
  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[8] = parentOutputIndex[valueRowIds[7]]
  calculateOutputIndexValueRowID(e, t, s, r) {
    const o = e.length, a = [];
    if (o === 0)
      return [];
    let i = 0, l = e[0];
    if (l >= t.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${t.length}`);
    let c = t[l];
    a.push(c);
    for (let u = 1; u < o; ++u) {
      const h = e[u];
      if (h === l)
        c >= 0 && (++i, i < r ? c += s : c = -1);
      else {
        if (i = 0, l = h, h >= t.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${t.length}`);
        c = t[h];
      }
      a.push(c);
    }
    if (a.length !== e.length)
      throw new Error("Invalid row ids.");
    return a;
  }
  calculateOutputIndex(e, t, s, r) {
    const o = this.getRowPartitionTensor(e), a = this.getRowPartitionTypeByDimension(e);
    switch (a) {
      case Jn.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(o, t, s, r);
      case Jn.ROW_SPLITS:
        if (o.length - 1 > t.length)
          throw new Error(`Row partition size is greater than output size: ${o.length - 1} > ${t.length}`);
        return this.calculateOutputIndexRowSplit(o, t, s, r);
      default:
        throw new Error(`Unsupported partition type: ${Jn[a]}`);
    }
  }
  getFirstDimensionSize() {
    const e = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const t = this.rowPartitionTypes[0];
    switch (t) {
      case Jn.FIRST_DIM_SIZE:
        return e[0];
      case Jn.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case Jn.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${Jn[t]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const t = this.getFirstDimensionSize(), s = this.calculateOutputSize(t), r = new Array(this.raggedRank + 1);
    r[r.length - 1] = 1;
    for (let l = r.length - 2; l >= 0; --l)
      r[l] = r[l + 1] * s[l + 1];
    const o = ty(s, !1), a = Wt(this.valuesDType, Z(o));
    if (r[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(t, r[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, r[c], s[c]);
      this.setOutput(this.raggedRank, l, a, o);
    }
    return [o, a];
  }
  setOutput(e, t, s, r) {
    if (s.length === 0)
      return;
    const o = this.values, a = s;
    let i = r.slice();
    i = i.slice(e + 1);
    const l = Z(i), c = t.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      H(() => {
        const m = P(u, f);
        u = Go(m, i).dataSync();
      });
    }
    let h = 0, d = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let m = f < c ? t[f] : -1;
      if (m === p) {
        ++p;
        continue;
      }
      if (d < p) {
        const g = o.subarray(h * l), y = a.subarray(d * l), b = (p - d) * l;
        ey(y, g, b);
      }
      if (f >= c) {
        const g = s.length;
        m = Math.floor(g / l);
      }
      if (m > p)
        if (this.defaultValue.length === 1)
          a.subarray(p * l, m * l).fill(this.defaultValue[0]), p = m;
        else
          for (; m > p; ) {
            const g = a.slice(p * l);
            ey(g, u, l), ++p;
          }
      m < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
    }
  }
}
function ey(n, e, t) {
  for (let s = 0; s < t; s++)
    n[s] = e[s];
}
function ty(n, e) {
  const t = [];
  for (let s of n) {
    if (s < 0) {
      if (!e)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    t.push(s);
  }
  return t;
}
function dv(n, e, t, s, r, o, a, i, l, c) {
  return new Dc(n, e, t, s, r, o, a, i, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pv(n, e, t, s) {
  const r = n === e, o = n < e && t < 0, a = e < n && t > 1;
  if (r || o || a)
    return sn(0, s);
  const i = Math.abs(Math.ceil((e - n) / t)), l = sn(i, s);
  e < n && t === 1 && (t = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + t;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fv = Vr((n) => 1 / Math.sqrt(n)), rL = Ia(Wi, fv), oL = {
  kernelName: Wi,
  backendName: "cpu",
  kernelFunc: rL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mo(n, e, t, s, r, o, a, i, l, c) {
  const u = [s / r, r], h = n.values, d = e.values;
  if (s === 0)
    return Le(t, e.dtype);
  const p = Le(u, e.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < o; f++) {
    const m = [];
    let g = 0;
    for (let y = 0; y < a; y++) {
      const b = h[f * a + y];
      m.push(b), g += b * i[y];
    }
    if (g < 0 || g >= s / r)
      throw new Error(`Invalid indices: ${m} does not index into ${t}`);
    for (let y = 0; y < r; y++)
      c ? p.values[g * r + y] += d[f * r + y] : p.values[g * r + y] = e.rank === 0 ? d[0] : d[f * r + y];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aL = Vr((n) => 1 / (1 + Math.exp(-n))), mv = nt(qi, (n) => 1 / (1 + Math.exp(-n))), iL = {
  kernelName: qi,
  backendName: "cpu",
  kernelFunc: mv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gv(n, e, t, s, r) {
  const o = Of(s, e, t), a = Z(t), i = ke(s);
  if (o) {
    const h = Lf(e, i);
    return r === "string" ? n.slice(h, h + a) : n.subarray(h, h + a);
  }
  const l = r === "string" ? co(n) : n, c = Le(s, r, l), u = Le(t, r);
  for (let h = 0; h < u.size; ++h) {
    const d = u.indexToLoc(h), p = d.map((f, m) => f + e[m]);
    u.set(c.get(...p), ...d);
  }
  return r === "string" ? Sx(u.values) : u.values;
}
function fo(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: o, size: a } = s;
  xe(r, "slice");
  const [i, l] = Ku(r, o, a);
  Ff(r, i, l);
  const c = t.data.get(r.dataId).values, u = gv(c, i, l, r.shape, r.dtype);
  return t.makeTensorInfo(l, r.dtype, u);
}
const lL = {
  kernelName: Pu,
  backendName: "cpu",
  kernelFunc: fo
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yv(n, e, t, s, r, o, a) {
  const i = e[0], l = o[0], c = new Array(l), u = new Array(i), h = e[1];
  if (l === 0) {
    if (i !== 0)
      throw new Error(dx(i));
    const g = Wt(t, 0), y = Wt(r, 0);
    return [
      g,
      [0, h],
      y,
      c,
      u
    ];
  }
  let d = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let g = 0; g < i; ++g) {
    const y = n[g * h];
    if (y < 0)
      throw new Error(px(g, y));
    if (y >= l)
      throw new Error(fx(g, y, l));
    ++f[y], d = d && y >= p, p = y;
  }
  let m = !0;
  for (let g = 0; g < l; ++g) {
    const y = f[g] === 0;
    c[g] = y, m = m && !y, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && d) {
    const g = n, y = s;
    for (let b = 0; b < i; ++b)
      u[b] = b;
    return [
      g,
      [i, h],
      y,
      c,
      u
    ];
  } else {
    const g = f[l - 1], y = Wt(t, g * h), b = Wt(r, g), w = new Array(l).fill(0);
    for (let x = 0; x < i; ++x) {
      const v = n[x * h], $ = w[v], C = (v === 0 ? 0 : f[v - 1]) + $;
      w[v]++;
      for (let S = 0; S < h; ++S)
        y[C * h + S] = n[x * h + S];
      b[C] = s[x], u[x] = C;
    }
    for (let x = 0; x < l; ++x)
      if (w[x] === 0) {
        const $ = x === 0 ? 0 : f[x - 1];
        y[$ * h + 0] = x;
        for (let C = 1; C < h; ++C)
          y[$ * h + C] = 0;
        b[$] = a;
      }
    return [
      y,
      [g, h],
      b,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bv(n, e, t, s, r) {
  const o = Z(s), a = e[0], i = r.length, l = [];
  let c = 1, u = -1;
  for (let g = 0; g < i; ++g) {
    const y = r[g];
    if (y === -1) {
      if (u !== -1)
        throw new Error(mx(u, g));
      u = g, l.push(1);
    } else {
      if (y < 0)
        throw new Error(gx(g, y));
      c *= y, l.push(y);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(yx());
    const g = Math.trunc(o / c);
    if (c * g !== o)
      throw new Error(bx(s, l));
    l[u] = g;
  }
  if (Z(l) !== o)
    throw new Error(xx(s, l));
  const d = s.length, p = [];
  if (d > 0) {
    p[d - 1] = 1;
    for (let g = d - 2; g >= 0; --g)
      p[g] = p[g + 1] * s[g + 1];
  }
  const f = [];
  if (i > 0) {
    f[i - 1] = 1;
    for (let g = i - 2; g >= 0; --g)
      f[g] = f[g + 1] * l[g + 1];
  }
  const m = Wt(t, a * i);
  for (let g = 0; g < a; ++g) {
    let y = 0;
    for (let b = 0; b < d; ++b)
      y += n[g * d + b] * p[b];
    for (let b = 0; b < i; ++b)
      m[g * i + b] = Math.trunc(y / f[b]), y %= f[b];
  }
  return [m, [a, i], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sg(n, e, t, s, r, o = !1, a = 0) {
  const i = s.length, l = [e[0], n.length / e[0]], c = l[1], h = i > 0 ? r[i - 1] + 1 : 0;
  if (h < 0)
    throw new Error(Vd());
  const d = e.slice();
  d[0] = h;
  const p = d.reduce((w, x) => w * x, 1), f = Wt(t, p);
  if (i === 0)
    return h > 0 && f.fill(a), [f, d];
  if (h <= 0)
    throw new Error(Vd());
  let m = 0, g = 1, y = 0, b = r[m];
  for (; ; ) {
    let w = 0;
    if (g < i) {
      if (w = r[g], b === w) {
        ++g;
        continue;
      }
      if (b >= w)
        throw new Error(wx());
    }
    if (b < 0 || b >= h)
      throw new Error(vx(b, h));
    b > y && f.fill(a, y * c, b * c);
    for (let x = m; x < g; ++x) {
      const v = s[x];
      if (v < 0 || v >= l[0])
        throw new Error(Ix(x, s[x], l[0]));
      for (let $ = 0; $ < c; $++)
        f[b * c + $] += n[v * c + $];
    }
    if (o)
      for (let x = 0; x < c; x++)
        f[b * c + x] /= g - m;
    if (m = g, ++g, y = b + 1, b = w, g > i)
      break;
  }
  return y < h && f.fill(a, y * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cL = Vr((n) => Math.sqrt(n)), uL = nt(Xi, (n) => Math.sqrt(n)), hL = {
  kernelName: Xi,
  backendName: "cpu",
  kernelFunc: uL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xv = Tt((n, e) => {
  const t = n - e;
  return t * t;
}), dL = Kt(Yi, xv), pL = {
  kernelName: Yi,
  backendName: "cpu",
  kernelFunc: dL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wv(n, e, t, s) {
  const r = Le(n, e.dtype);
  for (let o = 0; o < r.size; o++) {
    const a = r.indexToLoc(o), i = new Array(a.length);
    for (let l = 0; l < i.length; l++)
      i[l] = a[l] * t[l] + s[l];
    r.set(e.get(...i), ...a);
  }
  return r;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class fL {
  constructor(e, t, s, r, o, a) {
    this.separator = br(e), this.nGramWidths = t, this.leftPad = br(s), this.rightPad = br(r), this.padWidth = o, this.preserveShort = a;
  }
  getPadWidth(e) {
    return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1);
  }
  getNumNGrams(e, t) {
    const s = this.getPadWidth(t);
    return Math.max(0, e + 2 * s - t + 1);
  }
  createNGrams(e, t, s, r, o, a) {
    for (let i = 0; i < o; ++i) {
      const l = this.getPadWidth(a), c = Math.max(0, l - i), u = Math.max(0, l - (o - (i + 1))), h = a - (c + u), d = t + (c > 0 ? 0 : i - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let b = 0; b < h; ++b)
        p += e[d + b].length;
      p += u * this.rightPad.length;
      const f = c + u + h - 1;
      p += f * this.separator.length, s[r + i] = new Uint8Array(p);
      const m = s[r + i];
      let g = 0;
      const y = (b) => b.forEach((w) => m[g++] = w);
      for (let b = 0; b < c; ++b)
        y(this.leftPad), y(this.separator);
      for (let b = 0; b < h - 1; ++b)
        y(e[d + b]), y(this.separator);
      if (h > 0) {
        y(e[d + h - 1]);
        for (let b = 0; b < u; ++b)
          y(this.separator), y(this.rightPad);
      } else {
        for (let b = 0; b < u - 1; ++b)
          y(this.rightPad), y(this.separator);
        y(this.rightPad);
      }
    }
  }
  // Data and splits together form the definition of the ragged tensor,
  // where data is 1 dimensional and contains the values of the tensor
  // and splits denotes the indices at which each row starts.
  compute(e, t) {
    const s = e.length, r = t.length;
    if (r > 0) {
      let l = t[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < r; ++c) {
        let u = t[c] >= l;
        if (u = u && t[c] <= s, !u)
          throw new Error(`Invalid split value ${t[c]}, must be in [${l}, ${s}]`);
        l = t[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const o = r - 1, a = Wt("int32", r);
    if (s === 0 || r === 0) {
      const l = new Array(s);
      for (let c = 0; c <= o; ++c)
        a[c] = 0;
      return [l, a];
    }
    a[0] = 0;
    for (let l = 1; l <= o; ++l) {
      const c = t[l] - t[l - 1];
      let u = 0;
      this.nGramWidths.forEach((h) => {
        u += this.getNumNGrams(c, h);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), a[l] = a[l - 1] + u;
    }
    const i = new Array(a[o]);
    for (let l = 0; l < o; ++l) {
      const c = t[l];
      let u = a[l];
      if (this.nGramWidths.forEach((h) => {
        const d = t[l + 1] - t[l], p = this.getNumNGrams(d, h);
        this.createNGrams(e, c, i, u, p, h), u += p;
      }), this.preserveShort && u === a[l]) {
        const h = t[l + 1] - t[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth;
        this.createNGrams(e, c, i, u, 1, d);
      }
    }
    return [i, a];
  }
}
function vv(n, e, t, s, r, o, a, i) {
  return new fL(t, s, r, o, a, i).compute(n, e);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mL(n, e, t, s) {
  if (!n.length)
    return;
  if (e.length === 0) {
    for (let o = 0; o < n.length; ++o)
      s.push(n.subarray(o, o + 1));
    return;
  }
  if (e.length === 1) {
    const o = e[0];
    let a = n.indexOf(o);
    for (; a !== -1; ) {
      const i = n.subarray(0, a);
      (!t || i.length !== 0) && s.push(i), n = n.subarray(a + 1), a = n.indexOf(o);
    }
    (!t || n.length !== 0) && s.push(n);
    return;
  }
  let r = 0;
  for (let o = 0; o < n.length + 1; o++)
    if (o === n.length || e.indexOf(n[o]) !== -1) {
      const a = n.subarray(r, o);
      (!t || a.length !== 0) && s.push(a), r = o + 1;
    }
}
function Iv(n, e, t) {
  const s = n.length, r = [];
  let o = 0, a = 0;
  const i = new Array(s);
  for (let d = 0; d < s; ++d) {
    const p = r.length;
    mL(n[d], e, t, r);
    const f = r.length - p;
    i[d] = f, o += f, a = Math.max(a, f);
  }
  const l = Wt("int32", o * 2), c = new Array(o), u = [s, a];
  let h = 0;
  for (let d = 0; d < s; ++d)
    for (let p = 0; p < i[d]; ++p)
      l[h * 2] = d, l[h * 2 + 1] = p, c[h] = r[h], ++h;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $v(n, e) {
  const t = Wt("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    t[s] = pC(n[s]).modulo(e).getLowBitsUnsigned();
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Cv = Tt((n, e) => n - e), gL = vg((n, e, t, s) => ({ real: n - t, imag: e - s })), Ng = Kt(Zi, Cv, gL), yL = {
  kernelName: Zi,
  backendName: "cpu",
  kernelFunc: Ng
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sv(n, e) {
  const t = new Array(n.rank);
  for (let r = 0; r < t.length; r++)
    t[r] = n.shape[r] * e[r];
  const s = Le(t, n.dtype);
  for (let r = 0; r < s.values.length; ++r) {
    const o = s.indexToLoc(r), a = new Array(n.rank);
    for (let l = 0; l < a.length; l++)
      a[l] = o[l] % n.shape[l];
    const i = n.locToIndex(a);
    s.values[r] = n.values[i];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Va = (n, e) => {
  const t = e.value - n.value;
  return t === 0 ? n.index - e.index : t;
};
function Nv(n, e, t = 0, s = n.length - 1) {
  for (; s > t; ) {
    if (s - t > 600) {
      const i = s - t + 1, l = e - t + 1, c = Math.log(i), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (i - u) / i) * Math.sign(l - i / 2), d = Math.max(t, Math.floor(e - l * u / i + h)), p = Math.min(s, Math.floor(e + (i - l) * u / i + h));
      Nv(n, e, d, p);
    }
    const r = n[e];
    let o = t, a = s;
    for (Ro(n, t, e), Va(n[s], r) > 0 && Ro(n, t, s); o < a; ) {
      for (Ro(n, o, a), o++, a--; Va(n[o], r) < 0; )
        o = o + 1;
      for (; Va(n[a], r) > 0; )
        a = a - 1;
    }
    Va(n[t], r) === 0 ? Ro(n, t, a) : (a = a + 1, Ro(n, a, s)), a <= e && (t = a + 1), e <= a && (s = a - 1);
  }
}
function kv(n, e, t, s, r) {
  const o = e[e.length - 1], [a, i] = [n.length / o, o], l = Ht(t, a * s), c = Ht("int32", a * s);
  for (let h = 0; h < a; h++) {
    const d = h * i, p = n.subarray(d, d + i);
    let f = new Array(p.length);
    p.forEach((b, w) => f[w] = { value: b, index: w }), s < f.length && (Nv(f, s), f = f.slice(0, s)), r && f.sort(Va);
    const m = h * s, g = l.subarray(m, m + s), y = c.subarray(m, m + s);
    for (let b = 0; b < s; b++)
      g[b] = f[b].value, y[b] = f[b].index;
  }
  const u = e.slice();
  return u[u.length - 1] = s, [
    Le(u, t, l),
    Le(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tv(n, e, t, s) {
  const r = ze(e, t)[0], o = [1, t[0], 1];
  for (let f = 0; f < r; f++)
    o[0] *= t[f];
  o[1] = t[r];
  for (let f = r + 1; f < t.length; f++)
    o[2] *= t[f];
  const a = {}, i = new Int32Array(t[r]), l = new Gt(o, s, n), c = [], u = o[0] === 1 && o[2] === 1;
  for (let f = 0; f < t[r]; f++) {
    let m;
    if (u)
      m = n[f].toString();
    else {
      const g = [];
      for (let y = 0; y < o[0]; y++)
        for (let b = 0; b < o[2]; b++)
          g.push(l.get(y, f, b));
      m = g.join(",");
    }
    if (a[m] !== void 0)
      i[f] = a[m];
    else {
      const g = Object.keys(a).length;
      a[m] = g, i[f] = g, c.push(f);
    }
  }
  const h = o.slice();
  h[1] = Object.keys(a).length;
  const d = new Gt(h, s);
  c.forEach((f, m) => {
    for (let g = 0; g < o[0]; g++)
      for (let y = 0; y < o[2]; y++)
        d.set(l.get(g, f, y), g, m, y);
  });
  const p = t.slice();
  return p[r] = h[1], {
    outputValues: d.values,
    outputShape: p,
    indices: i
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bL = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  addImpl: V2,
  bincountImpl: Ig,
  bincountReduceImpl: W2,
  castImpl: B2,
  ceilImpl: U2,
  concatImpl: G2,
  equalImpl: H2,
  expImpl: q2,
  expm1Impl: X2,
  floorImpl: Y2,
  gatherNdImpl: Z2,
  gatherV2Impl: J2,
  greaterEqualImpl: ev,
  greaterImpl: Q2,
  lessEqualImpl: nv,
  lessImpl: tv,
  linSpaceImpl: sv,
  logImpl: rv,
  maxImpl: ov,
  maximumImpl: av,
  minimumImpl: iv,
  multiplyImpl: $g,
  negImpl: lv,
  notEqualImpl: cv,
  prodImpl: uv,
  raggedGatherImpl: hv,
  raggedTensorToTensorImpl: dv,
  rangeImpl: pv,
  rsqrtImpl: fv,
  scatterImpl: Mo,
  sigmoidImpl: aL,
  simpleAbsImpl: M2,
  sliceImpl: gv,
  sparseFillEmptyRowsImpl: yv,
  sparseReshapeImpl: bv,
  sparseSegmentReductionImpl: Sg,
  sqrtImpl: cL,
  squaredDifferenceImpl: xv,
  stridedSliceImpl: wv,
  stringNGramsImpl: vv,
  stringSplitImpl: Iv,
  stringToHashBucketFastImpl: $v,
  subImpl: Cv,
  tileImpl: Sv,
  topKImpl: kv,
  transposeImpl: Cg,
  uniqueImpl: Tv
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P1(
  "cpu",
  () => new Dh(),
  1
  /* priority */
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ev = nt(wi, (n) => n >= 0 ? n : Math.exp(n) - 1), xL = {
  kernelName: wi,
  backendName: "cpu",
  kernelFunc: Ev
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dv(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { alpha: o } = s;
  xe([r], "leakyRelu");
  const a = Z(r.shape), i = t.data.get(r.dataId).values, l = Ht("float32", a);
  for (let c = 0; c < i.length; c++)
    l[c] = i[c] < 0 ? o * i[c] : i[c];
  return t.makeTensorInfo(r.shape, "float32", l);
}
const wL = {
  kernelName: hu,
  backendName: "cpu",
  kernelFunc: Dv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vL = Tt((n, e) => n < 0 ? e * n : n);
function Av(n) {
  const { inputs: e, backend: t } = n, { x: s, alpha: r } = e;
  xe([s, r], "prelu");
  const o = t.data.get(s.dataId).values, a = t.data.get(r.dataId).values, [i, l] = vL(s.shape, r.shape, o, a, "float32");
  return t.makeTensorInfo(l, "float32", i);
}
const IL = {
  kernelName: Du,
  backendName: "cpu",
  kernelFunc: Av
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rv = nt(Mi, (n) => Math.max(0, n)), $L = {
  kernelName: Mi,
  backendName: "cpu",
  kernelFunc: Rv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fv = nt(Bi, (n) => Math.min(Math.max(0, n), 6)), CL = {
  kernelName: Bi,
  backendName: "cpu",
  kernelFunc: Fv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ac(n, e, t, s, r) {
  if (t === "linear")
    return qs({ inputs: { x: e }, backend: n });
  if (t === "relu")
    return Rv({ inputs: { x: e }, backend: n });
  if (t === "elu")
    return Ev({ inputs: { x: e }, backend: n });
  if (t === "relu6")
    return Fv({ inputs: { x: e }, backend: n });
  if (t === "prelu")
    return Av({ inputs: { x: e, alpha: s }, backend: n });
  if (t === "leakyrelu")
    return Dv({ inputs: { x: e }, backend: n, attrs: { alpha: r } });
  if (t === "sigmoid")
    return mv({ inputs: { x: e }, backend: n });
  throw new Error(`Activation ${t} has not been implemented for the CPU backend.`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ct(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { shape: o } = s, a = Z(r.shape), i = jy(o, a), l = Z(i);
  N(a === l, () => `The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`), t.incRef(r.dataId);
  const c = t.data.get(r.dataId);
  if (c.complexTensorInfos != null) {
    const u = c.complexTensorInfos.real, h = c.complexTensorInfos.imag;
    u.shape = i, h.shape = i;
  }
  return { dataId: r.dataId, shape: i, dtype: r.dtype };
}
const SL = {
  kernelName: Ru,
  backendName: "cpu",
  kernelFunc: ct
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _v(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: o } = e, { transposeA: a, transposeB: i } = s;
  xe([r, o], "matMul");
  const l = r.shape.length, c = o.shape.length, u = a ? r.shape[l - 2] : r.shape[l - 1], h = i ? o.shape[c - 1] : o.shape[c - 2], d = a ? r.shape[l - 1] : r.shape[l - 2], p = i ? o.shape[c - 2] : o.shape[c - 1], f = r.shape.slice(0, -2), m = o.shape.slice(0, -2), g = Z(f), y = Z(m), w = Fe(r.shape.slice(0, -2), o.shape.slice(0, -2)).concat([d, p]);
  N(u === h, () => `Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${a} and transposeB=${i} must match.`);
  const x = a ? [g, u, d] : [g, d, u], v = i ? [y, p, h] : [y, h, p], $ = ct({ inputs: { x: r }, backend: t, attrs: { shape: x } }), C = ct({ inputs: { x: o }, backend: t, attrs: { shape: v } }), S = a ? $.shape[1] : $.shape[2], E = a ? $.shape[2] : $.shape[1], D = i ? C.shape[1] : C.shape[2], O = Math.max(g, y), V = t.data.get($.dataId).values, W = t.data.get(C.dataId).values, U = ke($.shape), j = ke(C.shape), [q, Y, X] = a ? [U[0], 1, U[1]] : [U[0], U[1], 1], [Q, se, ee] = i ? [1, j[1], j[0]] : [j[1], 1, j[0]], ie = E * D, oe = Le([O, E, D], $.dtype), de = oe.values, ce = t.blockSize;
  for (let ye = 0; ye < O; ye++)
    for (let we = 0; we < E; we += ce)
      for (let Se = 0; Se < D; Se += ce)
        for (let Ne = 0; Ne < S; Ne += ce) {
          const Ae = Math.min(we + ce, E), Oe = Math.min(Se + ce, D), Ke = Math.min(Ne + ce, S);
          for (let Xe = we; Xe < Ae; Xe++)
            for (let Qe = Se; Qe < Oe; Qe++) {
              let Ue = 0;
              for (let Ye = Ne; Ye < Ke; Ye++) {
                const st = Math.min(ye, g - 1) * q, rt = Math.min(ye, y - 1) * ee, Mn = V[st + Xe * Y + Ye * X], $t = W[Ye * Q + Qe * se + rt];
                Ue += Mn * $t;
              }
              de[ye * ie + (Xe * D + Qe)] += Ue;
            }
        }
  return t.disposeIntermediateTensorInfo($), t.disposeIntermediateTensorInfo(C), t.makeTensorInfo(w, oe.dtype, oe.values);
}
const NL = {
  kernelName: Yc,
  backendName: "cpu",
  kernelFunc: _v
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kL(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: o, bias: a, preluActivationWeights: i } = e, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  let d, p, f;
  const m = [];
  d = _v({ inputs: { a: r, b: o }, attrs: { transposeA: l, transposeB: c }, backend: t }), a && (p = oa({ inputs: { a: d, b: a }, backend: t }), m.push(d), d = p), u && (f = Ac(t, d, u, i, h), m.push(d), d = f);
  for (const y of m)
    t.disposeIntermediateTensorInfo(y);
  return d;
}
const TL = {
  kernelName: ac,
  backendName: "cpu",
  kernelFunc: kL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EL = nt(ii, (n) => Math.acos(n)), DL = {
  kernelName: ii,
  backendName: "cpu",
  kernelFunc: EL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AL = nt(li, (n) => Math.acosh(n)), RL = {
  kernelName: li,
  backendName: "cpu",
  kernelFunc: AL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FL(n) {
  const { inputs: e, backend: t } = n, s = e;
  xe(e, "addN");
  const r = s.map((i) => t.data.get(i.dataId).values), o = Le(s[0].shape, s[0].dtype), a = o.values;
  for (let i = 0; i < s.length; i++) {
    const l = r[i];
    for (let c = 0; c < a.length; c++)
      a[c] += l[c];
  }
  return t.makeTensorInfo(o.shape, o.dtype, o.values);
}
const _L = {
  kernelName: Hc,
  backendName: "cpu",
  kernelFunc: FL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OL(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s;
  xe(r, "all");
  const i = ze(o, r.shape);
  let l = i;
  const c = wt(l, r.shape.length);
  let u = r;
  c != null && (u = $n({ inputs: { x: r }, backend: t, attrs: { perm: c } }), l = Nt(l.length, r.shape.length)), en("all", l, u.shape.length);
  const [h, d] = qt(u.shape, l), p = Z(d), f = sn(Z(h), u.dtype), m = t.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const v = m[b + x];
      w = w && v;
    }
    f[y] = w;
  }
  c != null && t.disposeIntermediateTensorInfo(u);
  const g = t.makeTensorInfo(h, u.dtype, f);
  if (a) {
    const y = St(h, i), b = ct({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const LL = {
  kernelName: Ip,
  backendName: "cpu",
  kernelFunc: OL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PL(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s;
  xe(r, "any");
  const i = ze(o, r.shape);
  let l = i;
  const c = wt(l, r.shape.length);
  let u = r;
  c != null && (u = $n({ inputs: { x: r }, backend: t, attrs: { perm: c } }), l = Nt(l.length, r.shape.length)), en("any", l, u.shape.length);
  const [h, d] = qt(u.shape, l), p = Z(d), f = sn(Z(h), u.dtype), m = t.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const v = m[b + x];
      w = w || v;
    }
    f[y] = w;
  }
  c != null && t.disposeIntermediateTensorInfo(u);
  const g = t.makeTensorInfo(h, u.dtype, f);
  if (a) {
    const y = St(h, i), b = ct({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const zL = {
  kernelName: $p,
  backendName: "cpu",
  kernelFunc: PL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ML(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o } = s;
  xe(r, "argMax");
  let a = ze(o, r.shape);
  const i = wt(a, r.shape.length);
  let l = r;
  const c = [];
  i != null && (l = $n({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(l), a = Nt(a.length, l.shape.length)), a = [a[0]], en("argMax", a, l.shape.length);
  const [u, h] = qt(l.shape, a), d = Z(u), p = sn(d, "int32"), f = Z(h), m = t.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], w = 0;
    for (let x = 0; x < f; ++x) {
      const v = m[y + x];
      v > b && (b = v, w = x);
    }
    p[g] = w;
  }
  return c.forEach((g) => t.disposeIntermediateTensorInfo(g)), t.makeTensorInfo(u, "int32", p);
}
const BL = {
  kernelName: jc,
  backendName: "cpu",
  kernelFunc: ML
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VL(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o } = s;
  xe(r, "argMin");
  let a = ze(o, r.shape);
  const i = wt(a, r.shape.length);
  let l = r;
  const c = [];
  i != null && (l = $n({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(l), a = Nt(a.length, l.shape.length)), a = [a[0]], en("argMin", a, l.shape.length);
  const [u, h] = qt(l.shape, a), d = Z(u), p = sn(d, "int32"), f = Z(h), m = t.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const y = g * f;
    let b = m[y], w = 0;
    for (let x = 0; x < f; ++x) {
      const v = m[y + x];
      v < b && (b = v, w = x);
    }
    p[g] = w;
  }
  return c.forEach((g) => t.disposeIntermediateTensorInfo(g)), t.makeTensorInfo(u, "int32", p);
}
const WL = {
  kernelName: qc,
  backendName: "cpu",
  kernelFunc: VL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UL = nt(ci, (n) => Math.asin(n)), GL = {
  kernelName: ci,
  backendName: "cpu",
  kernelFunc: UL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HL = nt(ui, (n) => Math.asinh(n)), jL = {
  kernelName: ui,
  backendName: "cpu",
  kernelFunc: HL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qL = nt(hi, (n) => Math.atan(n)), KL = {
  kernelName: hi,
  backendName: "cpu",
  kernelFunc: qL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XL = Tt((n, e) => Math.atan2(n, e)), YL = Kt(pi, XL), ZL = {
  kernelName: pi,
  backendName: "cpu",
  kernelFunc: YL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JL = nt(di, (n) => Math.atanh(n)), QL = {
  kernelName: di,
  backendName: "cpu",
  kernelFunc: JL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kg(n, e, t, s, r, o) {
  const a = r.strideHeight, i = r.strideWidth, l = r.dilationHeight, c = r.dilationWidth, u = r.effectiveFilterHeight, h = r.effectiveFilterWidth, d = r.padInfo.top, p = r.padInfo.left, f = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = Le(r.outShape, t), g = m.values, y = r.outShape[1] * r.outShape[2] * r.outShape[3], b = r.outShape[2] * r.outShape[3], w = r.outShape[3];
  for (let x = 0; x < r.batchSize; ++x) {
    const v = x * y, $ = x * s[0];
    for (let C = 0; C < r.inChannels; ++C)
      for (let S = 0; S < r.outHeight; ++S) {
        const E = S * a - d, D = Math.max(0, E), O = Math.min(r.inHeight, u + E), V = v + S * b;
        for (let W = 0; W < r.outWidth; ++W) {
          const U = W * i - p, j = Math.max(0, U), q = Math.min(r.inWidth, h + U);
          let Y = f, X = 0, Q = 0;
          for (let ee = D; ee < O; ee += l) {
            const ie = $ + ee * s[1];
            for (let oe = j; oe < q; oe += c) {
              const de = ie + oe * s[2], ce = n[de + C];
              o === "max" && ce > Y ? Y = ce : o === "avg" && (X += ce, Q++);
            }
            if (isNaN(Y))
              break;
          }
          const se = V + W * w + C;
          g[se] = o === "avg" ? X / Q : Y;
        }
      }
  }
  return m;
}
function Ov(n, e, t, s, r = !1, o = !1) {
  const a = Le(s.outShape, "int32"), i = s.strideHeight, l = s.strideWidth, c = s.dilationHeight, u = s.dilationWidth, h = s.effectiveFilterHeight, d = s.effectiveFilterWidth, p = s.padInfo.top, f = s.padInfo.left, m = Le(e, t, n);
  for (let g = 0; g < s.batchSize; ++g)
    for (let y = 0; y < s.inChannels; ++y)
      for (let b = 0; b < s.outHeight; ++b) {
        const w = b * i - p;
        let x = w;
        for (; x < 0; )
          x += c;
        const v = Math.min(s.inHeight, h + w);
        for (let $ = 0; $ < s.outWidth; ++$) {
          const C = $ * l - f;
          let S = C;
          for (; S < 0; )
            S += u;
          const E = Math.min(s.inWidth, d + C);
          let D = Number.NEGATIVE_INFINITY, O = -1;
          for (let V = x; V < v; V += c) {
            const W = V - w;
            for (let U = S; U < E; U += u) {
              const j = U - C, q = m.get(g, V, U, y);
              q > D && (D = q, r ? O = o ? ((g * s.inHeight + V) * s.inWidth + U) * s.inChannels + y : (V * s.inWidth + U) * s.inChannels + y : O = W * d + j);
            }
          }
          a.set(O, g, b, $, y);
        }
      }
  return a;
}
function Lv(n, e, t, s, r, o) {
  const a = r.strideDepth, i = r.strideHeight, l = r.strideWidth, c = r.dilationDepth, u = r.dilationHeight, h = r.dilationWidth, d = r.effectiveFilterDepth, p = r.effectiveFilterHeight, f = r.effectiveFilterWidth, m = r.padInfo.front, g = r.padInfo.top, y = r.padInfo.left, b = o === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, w = Le(r.outShape, t), x = w.values, v = r.outShape[1] * r.outShape[2] * r.outShape[3] * r.outShape[4], $ = r.outShape[2] * r.outShape[3] * r.outShape[4], C = r.outShape[3] * r.outShape[4], S = r.outShape[4];
  for (let E = 0; E < r.batchSize; ++E) {
    const D = E * v, O = E * s[0];
    for (let V = 0; V < r.inChannels; ++V)
      for (let W = 0; W < r.outDepth; ++W) {
        const U = W * a - m;
        let j = U;
        for (; j < 0; )
          j += c;
        const q = Math.min(r.inDepth, d + U), Y = D + W * $;
        for (let X = 0; X < r.outHeight; ++X) {
          const Q = X * i - g;
          let se = Q;
          for (; se < 0; )
            se += u;
          const ee = Math.min(r.inHeight, p + Q), ie = Y + X * C;
          for (let oe = 0; oe < r.outWidth; ++oe) {
            const de = oe * l - y;
            let ce = de;
            for (; ce < 0; )
              ce += h;
            const ye = Math.min(r.inWidth, f + de), we = ie + oe * S;
            let Se = b, Ne = 0, Ae = 0;
            for (let Ke = j; Ke < q; Ke += c) {
              const Xe = O + Ke * s[1];
              for (let Qe = se; Qe < ee; Qe += u) {
                const Ue = Xe + Qe * s[2];
                for (let Ye = ce; Ye < ye; Ye += h) {
                  const st = Ue + Ye * s[3], rt = n[st + V];
                  if (o === "max" && rt > Se ? Se = rt : o === "avg" && (Ne += rt, Ae++), isNaN(Se))
                    break;
                }
                if (isNaN(Se))
                  break;
              }
              if (isNaN(Se))
                break;
            }
            const Oe = we + V;
            x[Oe] = o === "avg" ? Ne / Ae : Se;
          }
        }
      }
  }
  return w;
}
function eP(n, e) {
  const t = Le(e.outShape, "int32"), s = e.strideDepth, r = e.strideHeight, o = e.strideWidth, a = e.dilationDepth, i = e.dilationHeight, l = e.dilationWidth, c = e.effectiveFilterDepth, u = e.effectiveFilterHeight, h = e.effectiveFilterWidth, d = e.padInfo.front, p = e.padInfo.top, f = e.padInfo.left;
  for (let m = 0; m < e.batchSize; ++m)
    for (let g = 0; g < e.inChannels; ++g)
      for (let y = 0; y < e.outDepth; ++y) {
        const b = y * s - d;
        let w = b;
        for (; w < 0; )
          w += a;
        const x = Math.min(e.inDepth, c + b);
        for (let v = 0; v < e.outHeight; ++v) {
          const $ = v * r - p;
          let C = $;
          for (; C < 0; )
            C += i;
          const S = Math.min(e.inHeight, u + $);
          for (let E = 0; E < e.outWidth; ++E) {
            const D = E * o - f;
            let O = D;
            for (; O < 0; )
              O += l;
            const V = Math.min(e.inWidth, h + D);
            let W = Number.NEGATIVE_INFINITY, U = -1;
            for (let j = w; j < x; j += a) {
              const q = j - b;
              for (let Y = C; Y < S; Y += i) {
                const X = Y - $;
                for (let Q = O; Q < V; Q += l) {
                  const se = Q - D, ee = n.get(m, j, Y, Q, g);
                  ee >= W && (W = ee, U = q * u * h + X * u + se);
                }
              }
            }
            t.set(U, m, y, v, E, g);
          }
        }
      }
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  xe(r, "avgPool");
  const { filterSize: o, strides: a, pad: i, dimRoundingMode: l } = s, c = 1;
  N(Qt(a, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  const u = ps(r.shape, o, a, c, i, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && He(u.inShape, u.outShape))
    h = qs({ inputs: { x: r }, backend: t });
  else {
    const d = t.data.get(r.dataId).values, p = ke(r.shape), f = kg(d, r.shape, r.dtype, p, u, "avg");
    h = t.makeTensorInfo(u.outShape, r.dtype, f.values);
  }
  return h;
}
const nP = {
  kernelName: Kc,
  backendName: "cpu",
  kernelFunc: tP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: o, strides: a, pad: i, dimRoundingMode: l, dataFormat: c } = s;
  xe(r, "avgPool3d");
  const u = ir(r.shape, o, a, 1, i, l, c), h = t.data.get(r.dataId).values, d = Lv(h, r.shape, r.dtype, ke(r.shape), u, "avg");
  return t.makeTensorInfo(d.shape, "float32", d.values);
}
const rP = {
  kernelName: Xc,
  backendName: "cpu",
  kernelFunc: sP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o } = e, { filterSize: a, strides: i, pad: l, dimRoundingMode: c } = s;
  xe([r, o], "avgPool3DGrad");
  const u = ir(o.shape, a, i, 1, l, c), h = u.strideDepth, d = u.strideHeight, p = u.strideWidth, f = u.filterDepth, m = u.filterHeight, g = u.filterWidth, y = u.dilationDepth, b = u.dilationHeight, w = u.dilationWidth, x = u.effectiveFilterDepth, v = u.effectiveFilterHeight, $ = u.effectiveFilterWidth, C = x - 1 - u.padInfo.front, S = $ - 1 - u.padInfo.left, E = v - 1 - u.padInfo.top, D = Le(o.shape, "float32"), O = 1 / (f * m * g), V = t.bufferSync(r);
  for (let W = 0; W < u.batchSize; ++W)
    for (let U = 0; U < u.inChannels; ++U)
      for (let j = 0; j < u.inDepth; ++j)
        for (let q = 0; q < u.inHeight; ++q)
          for (let Y = 0; Y < u.inWidth; ++Y) {
            const X = j - C, Q = q - E, se = Y - S;
            let ee = 0;
            for (let ie = 0; ie < x; ie += y) {
              const oe = (X + ie) / h;
              if (!(oe < 0 || oe >= u.outDepth || Math.floor(oe) !== oe))
                for (let de = 0; de < v; de += b) {
                  const ce = (Q + de) / d;
                  if (!(ce < 0 || ce >= u.outHeight || Math.floor(ce) !== ce))
                    for (let ye = 0; ye < $; ye += w) {
                      const we = (se + ye) / p;
                      if (we < 0 || we >= u.outWidth || Math.floor(we) !== we)
                        continue;
                      const Se = V.get(W, oe, ce, we, U);
                      ee += Se;
                    }
                }
            }
            D.set(ee * O, W, j, q, Y, U);
          }
  return t.makeTensorInfo(D.shape, D.dtype, D.values);
}
const aP = {
  kernelName: Sp,
  backendName: "cpu",
  kernelFunc: oP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o } = e, a = o;
  xe([r, o], "avgPoolGrad");
  const { filterSize: i, strides: l, pad: c } = s, u = ps(a.shape, i, l, 1, c), h = u.strideHeight, d = u.strideWidth, p = u.filterHeight, f = u.filterWidth, m = u.dilationHeight, g = u.dilationWidth, y = u.effectiveFilterHeight, b = u.effectiveFilterWidth, w = b - 1 - u.padInfo.left, x = y - 1 - u.padInfo.top, v = Le(a.shape, "float32"), $ = 1 / (p * f), C = t.data.get(r.dataId).values, S = Le(r.shape, "float32", C);
  for (let E = 0; E < u.batchSize; ++E)
    for (let D = 0; D < u.inChannels; ++D)
      for (let O = 0; O < u.inHeight; ++O)
        for (let V = 0; V < u.inWidth; ++V) {
          const W = O - x, U = V - w;
          let j = 0;
          for (let q = 0; q < y; q += m) {
            const Y = (W + q) / h;
            if (!(Y < 0 || Y >= u.outHeight || Math.floor(Y) !== Y))
              for (let X = 0; X < b; X += g) {
                const Q = (U + X) / d;
                if (Q < 0 || Q >= u.outWidth || Math.floor(Q) !== Q)
                  continue;
                const se = S.get(E, Y, Q, D);
                j += se;
              }
          }
          v.set(j * $, E, O, V, D);
        }
  return t.makeTensorInfo(v.shape, v.dtype, v.values);
}
const lP = {
  kernelName: Cp,
  backendName: "cpu",
  kernelFunc: iP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, scale: o, offset: a, mean: i, variance: l } = e;
  N(i.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), N(a == null || i.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), N(o == null || i.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), xe([r, i, l, o, a], "batchNorm");
  let { varianceEpsilon: c } = s;
  c == null && (c = 1e-3);
  const u = t.data.get(r.dataId).values, h = t.data.get(i.dataId).values, d = t.data.get(l.dataId).values, p = o ? t.data.get(o.dataId).values : new Float32Array([1]), f = a ? t.data.get(a.dataId).values : new Float32Array([0]), m = new Float32Array(u.length), g = f.length, y = p.length, b = d.length, w = h.length;
  let x = 0, v = 0, $ = 0, C = 0;
  for (let S = 0; S < u.length; ++S)
    m[S] = f[x++] + (u[S] - h[v++]) * p[$++] / Math.sqrt(d[C++] + c), x >= g && (x = 0), v >= w && (v = 0), $ >= y && ($ = 0), C >= b && (C = 0);
  return t.makeTensorInfo(r.shape, r.dtype, m);
}
const uP = {
  kernelName: lu,
  backendName: "cpu",
  kernelFunc: cP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: o, crops: a } = s;
  xe([r], "batchToSpaceND");
  const i = o.reduce((y, b) => y * b), l = pl(r.shape, o, i), c = fl(l.length, o.length), u = ml(r.shape, o, i), h = Om(a, o.length), d = Lm(u, a, o.length), p = ct({ inputs: { x: r }, backend: t, attrs: { shape: l } }), f = $n({ inputs: { x: p }, backend: t, attrs: { perm: c } }), m = ct({ inputs: { x: f }, backend: t, attrs: { shape: u } }), g = fo({
    inputs: { x: m },
    backend: t,
    attrs: { begin: h, size: d }
  });
  return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(m), g;
}
const dP = {
  kernelName: Zc,
  backendName: "cpu",
  kernelFunc: hP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: o } = e, { size: a } = s, i = t.data.get(r.dataId).values, l = t.data.get(o.dataId).values, c = Ig(i, l, o.dtype, o.shape, a);
  return t.makeTensorInfo([a], o.dtype, c);
}
const fP = {
  kernelName: Np,
  backendName: "cpu",
  kernelFunc: pP
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mP(n) {
  const { inputs: e, backend: t } = n, { s0: s, s1: r } = e, o = t.data.get(s.dataId).values, a = t.data.get(r.dataId).values, i = Fe(Array.from(o), Array.from(a));
  return t.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
const gP = {
  kernelName: kp,
  backendName: "cpu",
  kernelFunc: mP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yP = nt(gi, (n, e) => {
  const t = e;
  return n > t.clipValueMax ? t.clipValueMax : n < t.clipValueMin ? t.clipValueMin : n;
}), bP = {
  kernelName: gi,
  backendName: "cpu",
  kernelFunc: yP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xP = (n) => {
  const { x: e } = n.inputs, t = n.backend, s = new Float32Array(Z(e.shape)), r = t.data.get(e.dataId), o = r.complexTensorInfos.real, a = r.complexTensorInfos.imag, i = t.data.get(o.dataId).values, l = t.data.get(a.dataId).values;
  for (let c = 0; c < i.length; c++) {
    const u = i[c], h = l[c];
    s[c] = Math.hypot(u, h);
  }
  return t.makeOutput(s, e.shape, "float32");
}, wP = {
  kernelName: Jc,
  backendName: "cpu",
  kernelFunc: xP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aa(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.data.get(s.dataId).complexTensorInfos.imag, o = t.data.get(r.dataId).values;
  return t.makeTensorInfo(r.shape, r.dtype, o);
}
const vP = {
  kernelName: jp,
  backendName: "cpu",
  kernelFunc: aa
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ia(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s, o = ze(r, e[0].shape)[0], a = e.map((m) => m.shape);
  Rm(a, o);
  let i = Us(e.map((m) => m.shape), o);
  if (Z(i) === 0)
    return t.makeTensorInfo(i, e[0].dtype, []);
  const l = e.filter((m) => Z(m.shape) > 0);
  if (l.length === 1)
    return qs({ inputs: { x: l[0] }, backend: t });
  if (l[0].dtype === "complex64") {
    const m = l.map((x) => po({ inputs: { input: x }, backend: t })), g = l.map((x) => aa({ inputs: { input: x }, backend: t })), y = ia({ inputs: m, backend: t, attrs: { axis: o } }), b = ia({ inputs: g, backend: t, attrs: { axis: o } }), w = Tn({ inputs: { real: y, imag: b }, backend: t });
    return m.forEach((x) => t.disposeIntermediateTensorInfo(x)), g.forEach((x) => t.disposeIntermediateTensorInfo(x)), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), w;
  }
  const c = l.map((m) => {
    const y = [-1, Z(m.shape.slice(o))];
    return ct({ inputs: { x: m }, backend: t, attrs: { shape: y } });
  }), u = c.map((m) => ({ vals: t.data.get(m.dataId).values, shape: m.shape }));
  i = Us(
    c.map((m) => m.shape),
    1
    /* axis */
  );
  const h = c[0].shape[0] === 1, d = G2(u, i, e[0].dtype, h), p = Us(l.map((m) => m.shape), o), f = t.makeTensorInfo(p, e[0].dtype, d);
  return c.forEach((m) => t.disposeIntermediateTensorInfo(m)), f;
}
const IP = {
  kernelName: Qc,
  backendName: "cpu",
  kernelFunc: ia
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pv(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o } = e, { strides: a, pad: i, dataFormat: l, dilations: c, dimRoundingMode: u } = s;
  xe([r, o], "conv2d");
  const h = lr(l), d = jt(r.shape, o.shape, a, c, i, u, !1, h), p = d.filterHeight, f = d.filterWidth, m = d.dilationHeight, g = d.dilationWidth, y = d.padInfo.left, b = d.padInfo.top, w = d.dataFormat === "channelsLast", x = new Gt(d.outShape, r.dtype), v = ke(r.shape), $ = ke(o.shape), C = v[0], S = w ? v[1] : v[2], E = w ? v[2] : 1, D = w ? 1 : v[1], O = x.strides[0], V = w ? x.strides[1] : x.strides[2], W = w ? x.strides[2] : 1, U = w ? 1 : x.strides[1], j = t.data.get(r.dataId).values, q = t.data.get(o.dataId).values, Y = x.values;
  for (let X = 0; X < d.batchSize; ++X) {
    const Q = X * C, se = X * O;
    for (let ee = 0; ee < d.outHeight; ++ee) {
      const ie = se + ee * V, oe = ee * d.strideHeight - b;
      for (let de = 0; de < p; ++de) {
        const ce = oe + de * m;
        if (ce < 0 || ce >= d.inHeight)
          continue;
        const ye = de * $[0], we = Q + ce * S;
        for (let Se = 0; Se < d.outWidth; ++Se) {
          const Ne = ie + Se * W, Ae = Se * d.strideWidth - y;
          for (let Oe = 0; Oe < f; ++Oe) {
            const Ke = Ae + Oe * g;
            if (Ke < 0 || Ke >= d.inWidth)
              continue;
            const Xe = ye + Oe * $[1], Qe = we + Ke * E;
            let Ue = Xe;
            for (let Ye = 0; Ye < d.inChannels; ++Ye) {
              const st = j[Qe + Ye * D];
              for (let rt = 0; rt < d.outChannels; ++rt)
                Y[Ne + rt * U] += st * q[Ue + rt];
              Ue += d.outChannels;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(x.shape, x.dtype, Y);
}
const $P = {
  kernelName: eu,
  backendName: "cpu",
  kernelFunc: Pv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: o } = e, { strides: a, pad: i, dataFormat: l, dimRoundingMode: c, filterShape: u } = s;
  xe([r, o], "conv2dBackpropFilter");
  const h = lr(l), d = jt(r.shape, u, a, 1, i, c, !1, h), { strideHeight: p, strideWidth: f, filterHeight: m, filterWidth: g } = d, y = d.dataFormat === "channelsLast", b = new Gt(d.filterShape, "float32"), w = d.padInfo.left, x = d.padInfo.top, v = t.data.get(r.dataId).values, $ = t.data.get(o.dataId).values, C = new Gt(r.shape, r.dtype, v), S = new Gt(o.shape, o.dtype, $);
  for (let E = 0; E < m; ++E) {
    const D = Math.max(0, Math.ceil((x - E) / p)), O = Math.min(d.outHeight, (d.inHeight + x - E) / p);
    for (let V = 0; V < g; ++V) {
      const W = Math.max(0, Math.ceil((w - V) / f)), U = Math.min(d.outWidth, (d.inWidth + w - V) / f);
      for (let j = 0; j < d.inChannels; ++j)
        for (let q = 0; q < d.outChannels; ++q) {
          let Y = 0;
          for (let X = 0; X < d.batchSize; ++X)
            for (let Q = D; Q < O; ++Q) {
              const se = E + Q * p - x;
              for (let ee = W; ee < U; ++ee) {
                const ie = V + ee * f - w;
                y ? Y += C.get(X, se, ie, j) * S.get(X, Q, ee, q) : Y += C.get(X, j, se, ie) * S.get(X, q, Q, ee);
              }
            }
          b.set(Y, E, V, j, q);
        }
    }
  }
  return t.makeTensorInfo(b.shape, b.dtype, b.values);
}
const SP = {
  kernelName: Ep,
  backendName: "cpu",
  kernelFunc: CP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: o } = e, { inputShape: a, strides: i, pad: l, dataFormat: c, dimRoundingMode: u } = s;
  xe([r, o], "conv2dBackpropInput");
  const h = ke(o.shape), d = ke(r.shape);
  let p = lr(c);
  const f = jt(a, o.shape, i, 1, l, u, !1, p), m = new Gt(f.inShape, "float32"), g = m.values, y = t.data.get(r.dataId).values, b = t.data.get(o.dataId).values, [w, x, v] = h, { batchSize: $, filterHeight: C, filterWidth: S, inChannels: E, inHeight: D, inWidth: O, outChannels: V, outHeight: W, outWidth: U, strideHeight: j, strideWidth: q } = f;
  p = f.dataFormat;
  const Y = C - 1 - f.padInfo.top, X = S - 1 - f.padInfo.left, Q = p === "channelsLast", se = m.strides[0], ee = Q ? m.strides[1] : m.strides[2], ie = Q ? m.strides[2] : 1, oe = Q ? 1 : m.strides[1], de = d[0], ce = Q ? d[1] : d[2], ye = Q ? d[2] : 1, we = Q ? 1 : d[1];
  for (let Se = 0; Se < $; ++Se)
    for (let Ne = 0; Ne < E; ++Ne)
      for (let Ae = 0; Ae < D; ++Ae) {
        const Oe = Ae - Y, Ke = Math.max(0, Math.ceil(Oe / j)), Xe = Math.min(W, (C + Oe) / j);
        for (let Qe = 0; Qe < O; ++Qe) {
          const Ue = Qe - X, Ye = Math.max(0, Math.ceil(Ue / q)), st = Math.min(U, (S + Ue) / q);
          let rt = 0;
          for (let $t = Ke; $t < Xe; ++$t) {
            const Xn = $t * j - Oe;
            for (let an = Ye; an < st; ++an) {
              const _s = an * q - Ue, Sn = de * Se + ce * $t + ye * an, Yn = w * (C - 1 - Xn) + x * (S - 1 - _s) + v * Ne;
              for (let gs = 0; gs < V; ++gs) {
                const ys = y[Sn + we * gs], bs = b[Yn + gs];
                rt += ys * bs;
              }
            }
          }
          const Mn = se * Se + ee * Ae + ie * Qe + oe * Ne;
          g[Mn] = rt;
        }
      }
  return t.makeTensorInfo(m.shape, m.dtype, m.values);
}
const kP = {
  kernelName: tu,
  backendName: "cpu",
  kernelFunc: NP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o } = e, { strides: a, pad: i, dilations: l } = s;
  xe([r, o], "conv3d");
  const c = Lr(r.shape, o.shape, a, l, i), { filterDepth: u, filterHeight: h, filterWidth: d, dilationDepth: p, dilationHeight: f, dilationWidth: m, padInfo: g } = c, y = g.front, b = g.left, w = g.top, x = new Gt(c.outShape, r.dtype), v = t.data.get(r.dataId).values, $ = t.data.get(o.dataId).values, C = x.values, S = ke(r.shape), E = ke(o.shape);
  for (let D = 0; D < c.batchSize; ++D) {
    const O = D * S[0], V = D * x.strides[0];
    for (let W = 0; W < c.outDepth; ++W) {
      const U = V + W * x.strides[1], j = W * c.strideDepth - y;
      for (let q = 0; q < u; ++q) {
        const Y = j + q * p;
        if (Y < 0 || Y >= c.inDepth)
          continue;
        const X = q * E[0], Q = O + Y * S[1];
        for (let se = 0; se < c.outHeight; ++se) {
          const ee = U + se * x.strides[2], ie = se * c.strideHeight - w;
          for (let oe = 0; oe < h; ++oe) {
            const de = ie + oe * f;
            if (de < 0 || de >= c.inHeight)
              continue;
            const ce = X + oe * E[1], ye = Q + de * S[2];
            for (let we = 0; we < c.outWidth; ++we) {
              const Se = ee + we * c.outChannels, Ne = we * c.strideWidth - b;
              for (let Ae = 0; Ae < d; ++Ae) {
                const Oe = Ne + Ae * m;
                if (Oe < 0 || Oe >= c.inWidth)
                  continue;
                const Ke = ce + Ae * E[2], Xe = ye + Oe * c.inChannels;
                let Qe = Ke;
                for (let Ue = 0; Ue < c.inChannels; ++Ue) {
                  const Ye = v[Xe + Ue];
                  for (let st = 0; st < c.outChannels; ++st)
                    C[Se + st] += Ye * $[Qe + st];
                  Qe += c.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo(x.shape, x.dtype, x.values);
}
const EP = {
  kernelName: nu,
  backendName: "cpu",
  kernelFunc: TP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: o } = e, { strides: a, pad: i, filterShape: l } = s;
  xe([r, o], "conv3dBackpropFilterV2");
  const c = ke(r.shape), u = ke(o.shape), h = Lr(r.shape, l, a, 1, i), d = h.strideDepth, p = h.strideHeight, f = h.strideWidth, m = h.filterDepth, g = h.filterHeight, y = h.filterWidth, b = new Gt(h.filterShape, "float32"), w = b.values, [x, v, $, C] = b.strides, S = t.data.get(o.dataId).values, [E, D, O, V] = u, W = t.data.get(r.dataId).values, [U, j, q, Y] = c, X = h.padInfo.front, Q = h.padInfo.left, se = h.padInfo.top;
  for (let ee = 0; ee < m; ++ee) {
    const ie = Math.max(0, Math.ceil((X - ee) / d)), oe = Math.min(h.outDepth, (h.inDepth + X - ee) / d), de = ee * x;
    for (let ce = 0; ce < g; ++ce) {
      const ye = Math.max(0, Math.ceil((se - ce) / p)), we = Math.min(h.outHeight, (h.inHeight + se - ce) / p), Se = ce * v + de;
      for (let Ne = 0; Ne < y; ++Ne) {
        const Ae = Math.max(0, Math.ceil((Q - Ne) / f)), Oe = Math.min(h.outWidth, (h.inWidth + Q - Ne) / f), Ke = Ne * $ + Se;
        for (let Xe = 0; Xe < h.inChannels; ++Xe) {
          const Qe = Xe * C + Ke;
          for (let Ue = 0; Ue < h.outChannels; ++Ue) {
            let Ye = 0;
            for (let st = 0; st < h.batchSize; ++st) {
              const rt = st * U, Mn = st * E;
              for (let $t = ie; $t < oe; ++$t) {
                const an = (ee + $t * d - X) * j + rt, _s = $t * D + Mn;
                for (let Sn = ye; Sn < we; ++Sn) {
                  const gs = (ce + Sn * p - se) * q + an, ys = Sn * O + _s;
                  for (let bs = Ae; bs < Oe; ++bs) {
                    const So = (Ne + bs * f - Q) * Y + gs, No = bs * V + ys;
                    Ye += W[So + Xe] * S[No + Ue];
                  }
                }
              }
            }
            w[Qe + Ue] = Ye;
          }
        }
      }
    }
  }
  return t.makeTensorInfo(b.shape, b.dtype, b.values);
}
const AP = {
  kernelName: Dp,
  backendName: "cpu",
  kernelFunc: DP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: o } = e, { pad: a, strides: i, inputShape: l } = s;
  xe([r], "conv3dBackpropInputV2");
  const c = ke(r.shape), u = ke(o.shape), h = Lr(l, o.shape, i, 1, a), d = new Gt(h.inShape, "float32"), p = d.values, [f, m, g, y] = d.strides, b = t.data.get(r.dataId).values, [w, x, v, $] = c, C = t.data.get(o.dataId).values, [S, E, D, O] = u, { batchSize: V, filterDepth: W, filterHeight: U, filterWidth: j, inChannels: q, inDepth: Y, inHeight: X, inWidth: Q, outChannels: se, outDepth: ee, outHeight: ie, outWidth: oe, strideDepth: de, strideHeight: ce, strideWidth: ye } = h, we = W - 1 - h.padInfo.front, Se = U - 1 - h.padInfo.top, Ne = j - 1 - h.padInfo.left;
  for (let Ae = 0; Ae < V; ++Ae)
    for (let Oe = 0; Oe < q; ++Oe)
      for (let Ke = 0; Ke < Y; ++Ke) {
        const Xe = Ke - we, Qe = Math.max(0, Math.ceil(Xe / de)), Ue = Math.min(ee, (W + Xe) / de);
        for (let Ye = 0; Ye < X; ++Ye) {
          const st = Ye - Se, rt = Math.max(0, Math.ceil(st / ce)), Mn = Math.min(ie, (U + st) / ce);
          for (let $t = 0; $t < Q; ++$t) {
            const Xn = $t - Ne, an = Math.max(0, Math.ceil(Xn / ye)), _s = Math.min(oe, (j + Xn) / ye);
            let Sn = 0;
            for (let Yn = Qe; Yn < Ue; ++Yn) {
              const gs = Yn * de - Xe;
              for (let ys = rt; ys < Mn; ++ys) {
                const bs = ys * ce - st;
                for (let dr = an; dr < _s; ++dr) {
                  const So = dr * ye - Xn, No = w * Ae + x * Yn + v * ys + $ * dr, Fl = S * (W - 1 - gs) + E * (U - 1 - bs) + D * (j - 1 - So) + O * Oe;
                  for (let Ur = 0; Ur < se; ++Ur) {
                    const Da = b[No + Ur], zh = C[Fl + Ur];
                    Sn += Da * zh;
                  }
                }
              }
            }
            p[f * Ae + m * Ke + g * Ye + y * $t + Oe] = Sn;
          }
        }
      }
  return t.makeTensorInfo(d.shape, d.dtype, d.values);
}
const FP = {
  kernelName: Ap,
  backendName: "cpu",
  kernelFunc: RP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _P = nt(yi, (n) => Math.cos(n)), OP = {
  kernelName: yi,
  backendName: "cpu",
  kernelFunc: _P
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LP = nt(bi, (n) => Math.cosh(n)), PP = {
  kernelName: bi,
  backendName: "cpu",
  kernelFunc: LP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, boxes: o, boxInd: a } = e, { cropSize: i, method: l, extrapolationValue: c } = s, [u, h, d, p] = r.shape, f = o.shape[0], [m, g] = i, y = Le([f, m, g, p], "float32"), b = t.data.get(o.dataId).values, w = t.data.get(a.dataId).values, x = t.data.get(r.dataId).values, v = ke(r.shape), $ = ke(y.shape);
  for (let C = 0; C < f; C++) {
    const S = C * 4, E = b[S], D = b[S + 1], O = b[S + 2], V = b[S + 3], W = w[C];
    if (W >= u)
      continue;
    const U = m > 1 ? (O - E) * (h - 1) / (m - 1) : 0, j = g > 1 ? (V - D) * (d - 1) / (g - 1) : 0;
    for (let q = 0; q < m; q++) {
      const Y = m > 1 ? E * (h - 1) + q * U : 0.5 * (E + O) * (h - 1);
      if (Y < 0 || Y > h - 1) {
        for (let X = 0; X < g; X++)
          for (let Q = 0; Q < p; Q++) {
            const se = Q + X * $[2] + q * $[1] + C * $[0];
            y.values[se] = c;
          }
        continue;
      }
      if (l === "bilinear") {
        const X = Math.floor(Y), Q = Math.ceil(Y), se = Y - X;
        for (let ee = 0; ee < g; ee++) {
          const ie = g > 1 ? D * (d - 1) + ee * j : 0.5 * (D + V) * (d - 1);
          if (ie < 0 || ie > d - 1) {
            for (let ye = 0; ye < p; ye++) {
              const we = ye + ee * $[2] + q * $[1] + C * $[0];
              y.values[we] = c;
            }
            continue;
          }
          const oe = Math.floor(ie), de = Math.ceil(ie), ce = ie - oe;
          for (let ye = 0; ye < p; ye++) {
            let we = ye + oe * v[2] + X * v[1] + W * v[0];
            const Se = x[we];
            we = ye + de * v[2] + X * v[1] + W * v[0];
            const Ne = x[we];
            we = ye + oe * v[2] + Q * v[1] + W * v[0];
            const Ae = x[we];
            we = ye + de * v[2] + Q * v[1] + W * v[0];
            const Oe = x[we], Ke = Se + (Ne - Se) * ce, Xe = Ae + (Oe - Ae) * ce;
            we = ye + ee * $[2] + q * $[1] + C * $[0], y.values[we] = Ke + (Xe - Ke) * se;
          }
        }
      } else
        for (let X = 0; X < g; ++X) {
          const Q = g > 1 ? D * (d - 1) + X * j : 0.5 * (D + V) * (d - 1);
          if (Q < 0 || Q > d - 1) {
            for (let ie = 0; ie < p; ie++) {
              const oe = ie + X * $[2] + q * $[1] + C * $[0];
              y.values[oe] = c;
            }
            continue;
          }
          const se = Math.round(Q), ee = Math.round(Y);
          for (let ie = 0; ie < p; ie++) {
            const oe = ie + se * v[2] + ee * v[1] + W * v[0], de = ie + X * $[2] + q * $[1] + C * $[0];
            y.values[de] = x[oe];
          }
        }
    }
  }
  return t.makeTensorInfo(y.shape, y.dtype, y.values);
}
const MP = {
  kernelName: Fp,
  backendName: "cpu",
  kernelFunc: zP
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, exclusive: a, reverse: i } = s;
  xe(r, "cumprod");
  const l = wt([o], r.shape.length);
  let c = r;
  l != null && (c = $n({ inputs: { x: r }, backend: t, attrs: { perm: l } }));
  const u = Nt(1, r.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = Rn(c.dtype, "int32"), d = wp(Z(c.shape), h), p = t.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = i ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f)
    for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0)
        d[w] = a ? 1 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = a ? p[x] * d[x] : p[w] * d[x];
      }
    }
  const g = t.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const y = Pr(l), b = $n({ inputs: { x: g }, backend: t, attrs: { perm: y } });
    return t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const VP = {
  kernelName: Rp,
  backendName: "cpu",
  kernelFunc: BP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, exclusive: a, reverse: i } = s;
  xe(r, "cumsum");
  const l = wt([o], r.shape.length);
  let c = r;
  l != null && (c = $n({ inputs: { x: r }, backend: t, attrs: { perm: l } }));
  const u = Nt(1, r.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = Rn(c.dtype, "int32"), d = sn(Z(c.shape), h), p = t.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = i ? (y, b) => y + f - b - 1 : (y, b) => y + b;
  for (let y = 0; y < p.length; y += f)
    for (let b = 0; b < f; b++) {
      const w = m(y, b);
      if (b === 0)
        d[w] = a ? 0 : p[w];
      else {
        const x = m(y, b - 1);
        d[w] = a ? p[x] + d[x] : p[w] + d[x];
      }
    }
  const g = t.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const y = Pr(l), b = $n({ inputs: { x: g }, backend: t, attrs: { perm: y } });
    return t.disposeIntermediateTensorInfo(g), t.disposeIntermediateTensorInfo(c), b;
  }
  return g;
}
const UP = {
  kernelName: su,
  backendName: "cpu",
  kernelFunc: WP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: o } = e, { size: a, binaryOutput: i } = s;
  if (r.shape.length === 1) {
    const l = t.data.get(r.dataId).values, c = t.data.get(o.dataId).values, u = Ig(l, c, o.dtype, o.shape, a);
    return t.makeTensorInfo([a], o.dtype, u);
  } else if (r.shape.length === 2) {
    const l = t.bufferSync(r), c = t.bufferSync(o), u = W2(l, c, a, i);
    return t.makeTensorInfo(u.shape, o.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const HP = {
  kernelName: _p,
  backendName: "cpu",
  kernelFunc: GP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockSize: o, dataFormat: a } = s;
  N(a === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);
  const i = r.shape[0], l = r.shape[1], c = r.shape[2], u = r.shape[3], h = l * o, d = c * o, p = u / (o * o), f = t.data.get(r.dataId).values, m = new Float32Array(i * h * d * p);
  let g = 0;
  for (let y = 0; y < i; ++y)
    for (let b = 0; b < h; ++b) {
      const w = Math.floor(b / o), x = b % o;
      for (let v = 0; v < d; ++v) {
        const $ = Math.floor(v / o), C = v % o, S = (x * o + C) * p;
        for (let E = 0; E < p; ++E) {
          const O = E + S + u * ($ + c * (w + l * y));
          m[g++] = f[O];
        }
      }
    }
  return t.makeTensorInfo([i, h, d, p], r.dtype, m);
}
const qP = {
  kernelName: Op,
  backendName: "cpu",
  kernelFunc: jP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zv(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o } = e, { strides: a, pad: i, dilations: l, dimRoundingMode: c } = s;
  xe([r, o], "depthwiseConv2DNative");
  const u = ke(r.shape), h = ke(o.shape);
  let d = l;
  d == null && (d = [1, 1]), N(Qt(a, d), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${d}'`);
  const p = jt(
    r.shape,
    o.shape,
    a,
    d,
    i,
    c,
    !0
    /* depthwise */
  ), { filterHeight: f, filterWidth: m, dilationHeight: g, dilationWidth: y, padInfo: b } = p, w = b.left, x = b.top, v = p.outChannels / p.inChannels, $ = new Gt(p.outShape, r.dtype), C = t.data.get(r.dataId).values, S = t.data.get(o.dataId).values, E = $.values;
  for (let D = 0; D < p.batchSize; ++D) {
    const O = D * u[0], V = D * $.strides[0];
    for (let W = 0; W < p.outHeight; ++W) {
      const U = V + W * $.strides[1], j = W * p.strideHeight - x;
      for (let q = 0; q < f; ++q) {
        const Y = j + q * g;
        if (Y < 0 || Y >= p.inHeight)
          continue;
        const X = q * h[0], Q = O + Y * u[1];
        for (let se = 0; se < p.outWidth; ++se) {
          const ee = U + se * $.strides[2], ie = se * p.strideWidth - w;
          for (let oe = 0; oe < m; ++oe) {
            const de = ie + oe * y;
            if (de < 0 || de >= p.inWidth)
              continue;
            const ce = X + oe * h[1], ye = Q + de * p.inChannels;
            let we = ee, Se = ce;
            for (let Ne = 0; Ne < p.inChannels; ++Ne) {
              const Ae = C[ye + Ne];
              for (let Oe = 0; Oe < v; ++Oe)
                E[we + Oe] += Ae * S[Se + Oe];
              we += v, Se += v;
            }
          }
        }
      }
    }
  }
  return t.makeTensorInfo($.shape, $.dtype, $.values);
}
const KP = {
  kernelName: ru,
  backendName: "cpu",
  kernelFunc: zv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: o } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: c, filterShape: u } = s;
  xe([r, o], "depthwiseConv2dNativeBackpropFilter");
  const h = jt(
    r.shape,
    u,
    a,
    i,
    l,
    c,
    !0
    /* depthwise */
  ), { strideHeight: d, strideWidth: p, filterHeight: f, filterWidth: m } = h, g = new Gt(h.filterShape, "float32"), y = h.padInfo.left, b = h.padInfo.top, w = h.outChannels / h.inChannels, x = t.data.get(r.dataId).values, v = new Gt(r.shape, r.dtype, x), $ = t.data.get(o.dataId).values, C = new Gt(o.shape, o.dtype, $);
  for (let S = 0; S < f; ++S) {
    const E = Math.max(0, Math.ceil((b - S) / d)), D = Math.min(h.outHeight, (h.inHeight + b - S) / d);
    for (let O = 0; O < m; ++O) {
      const V = Math.max(0, Math.ceil((y - O) / p)), W = Math.min(h.outWidth, (h.inWidth + y - O) / p);
      for (let U = 0; U < h.outChannels; ++U) {
        const j = Math.trunc(U / w), q = U % w;
        let Y = 0;
        for (let X = 0; X < h.batchSize; ++X)
          for (let Q = E; Q < D; ++Q) {
            const se = S + Q * d - b;
            for (let ee = V; ee < W; ++ee) {
              const ie = O + ee * p - y;
              Y += v.get(X, se, ie, j) * C.get(X, Q, ee, U);
            }
          }
        g.set(Y, S, O, j, q);
      }
    }
  }
  return t.makeTensorInfo(g.shape, g.dtype, g.values);
}
const YP = {
  kernelName: Lp,
  backendName: "cpu",
  kernelFunc: XP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZP(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: o } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: c, inputShape: u } = s;
  xe([r, o], "depthwiseConv2DNativeBackpropInput");
  const h = ke(r.shape), d = ke(o.shape), p = jt(
    u,
    o.shape,
    a,
    i,
    l,
    c,
    !0
    /* depthwise */
  ), f = new Gt(p.inShape, "float32"), m = f.values, [g, y, b] = f.strides, w = t.data.get(r.dataId).values, [x, v, $] = h, C = t.data.get(o.dataId).values, [S, E, D] = d, { batchSize: O, filterHeight: V, filterWidth: W, inChannels: U, inHeight: j, inWidth: q, outChannels: Y, outHeight: X, outWidth: Q, strideHeight: se, strideWidth: ee } = p, ie = V - 1 - p.padInfo.top, oe = W - 1 - p.padInfo.left, de = Y / U;
  for (let ce = 0; ce < O; ++ce)
    for (let ye = 0; ye < U; ++ye)
      for (let we = 0; we < j; ++we) {
        const Se = we - ie, Ne = Math.max(0, Math.ceil(Se / se)), Ae = Math.min(X, (V + Se) / se);
        for (let Oe = 0; Oe < q; ++Oe) {
          const Ke = Oe - oe, Xe = Math.max(0, Math.ceil(Ke / ee)), Qe = Math.min(Q, (W + Ke) / ee);
          let Ue = 0;
          for (let Ye = Ne; Ye < Ae; ++Ye) {
            const st = Ye * se - Se;
            for (let rt = Xe; rt < Qe; ++rt) {
              const Mn = rt * ee - Ke, $t = x * ce + v * Ye + $ * rt, Xn = S * (V - 1 - st) + E * (W - 1 - Mn) + D * ye;
              for (let an = 0; an < de; ++an) {
                const _s = ye * de + an, Sn = w[$t + _s], Yn = C[Xn + an];
                Ue += Sn * Yn;
              }
            }
          }
          m[g * ce + y * we + b * Oe + ye] = Ue;
        }
      }
  return t.makeTensorInfo(f.shape, f.dtype, f.values);
}
const JP = {
  kernelName: Pp,
  backendName: "cpu",
  kernelFunc: ZP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QP(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = Z(s.shape), o = t.data.get(s.dataId).values, a = Le([r, r], s.dtype), i = a.values;
  for (let c = 0; c < o.length; c++)
    i[c * r + c] = o[c];
  const l = [...s.shape, ...s.shape];
  return t.makeTensorInfo(l, a.dtype, a.values);
}
const e9 = {
  kernelName: zp,
  backendName: "cpu",
  kernelFunc: QP
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t9 = {
  kernelName: ou,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: e, attrs: t }) => {
    const { x: s, filter: r } = n, { strides: o, pad: a, dilations: i } = t, l = e, c = l.data.get(s.dataId).values, u = s.shape.length, h = l.data.get(r.dataId).values, d = r.shape.length, { batchSize: p, inHeight: f, inWidth: m, inChannels: g, outHeight: y, outWidth: b, padInfo: w, strideHeight: x, strideWidth: v, filterHeight: $, filterWidth: C, dilationHeight: S, dilationWidth: E, outShape: D } = rl(s.shape, r.shape, o, a, "NHWC", i), O = Z(D), V = D.length, W = Wt(s.dtype, O);
    for (let j = 0; j < p; ++j)
      for (let q = 0; q < y; ++q) {
        const Y = q * x - w.top;
        for (let X = 0; X < b; ++X) {
          const Q = X * v - w.left;
          for (let se = 0; se < g; ++se) {
            let ee = Number.MIN_SAFE_INTEGER;
            for (let oe = 0; oe < $; ++oe) {
              const de = Y + oe * S;
              if (de >= 0 && de < f)
                for (let ce = 0; ce < C; ++ce) {
                  const ye = Q + ce * E;
                  if (ye >= 0 && ye < m) {
                    const we = Vs([j, de, ye, se], u, ke(s.shape)), Se = Vs([oe, ce, se], d, ke(r.shape)), Ne = c[we] + h[Se];
                    Ne > ee && (ee = Ne);
                  }
                }
            }
            const ie = Vs([j, q, X, se], V, ke(D));
            W[ie] = ee;
          }
        }
      }
    return { dataId: l.write(go(W, s.dtype), D, s.dtype), shape: D, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n9 = {
  kernelName: Id,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: e, attrs: t }) => {
    const { x: s, filter: r, dy: o } = n, { strides: a, pad: i, dilations: l } = t, c = e, u = us(s.shape, c.data.get(s.dataId).values), h = us(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: v, filterWidth: $, dilationHeight: C, dilationWidth: S, outShape: E } = rl(s.shape, r.shape, a, i, "NHWC", l);
    N(o.rank === E.length, () => `Error in ${Id}, dy must have the same rank as output ${E.length}, but got ${o.rank}`);
    const D = us(E, c.data.get(o.dataId).values), O = Xy(r.shape, r.dtype);
    for (let W = 0; W < d; ++W)
      for (let U = 0; U < g; ++U) {
        const j = U * w - b.top;
        for (let q = 0; q < y; ++q) {
          const Y = q * x - b.left;
          for (let X = 0; X < m; ++X) {
            let Q = Number.MIN_SAFE_INTEGER, se = 0, ee = 0;
            for (let ie = 0; ie < v; ++ie) {
              const oe = j + ie * C;
              if (oe >= 0 && oe < p)
                for (let de = 0; de < $; ++de) {
                  const ce = Y + de * S;
                  if (ce >= 0 && ce < f) {
                    const ye = u[W][oe][ce][X] + h[ie][de][X];
                    ye > Q && (Q = ye, se = ie, ee = de);
                  }
                }
            }
            O[se][ee][X] += D[W][U][q][X];
          }
        }
      }
    return { dataId: c.write(go(O, s.dtype), r.shape, r.dtype), shape: r.shape, dtype: r.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s9 = {
  kernelName: vd,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: e, attrs: t }) => {
    const { x: s, filter: r, dy: o } = n, { strides: a, pad: i, dilations: l } = t, c = e, u = us(s.shape, c.data.get(s.dataId).values), h = us(r.shape, c.data.get(r.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: y, padInfo: b, strideHeight: w, strideWidth: x, filterHeight: v, filterWidth: $, dilationHeight: C, dilationWidth: S, outShape: E } = rl(s.shape, r.shape, a, i, "NHWC", l);
    N(o.rank === E.length, () => `Error in ${vd}, dy must have the same rank as output ${E.length}, but got ${o.rank}`);
    const D = us(E, c.data.get(o.dataId).values), O = Xy(s.shape, s.dtype);
    for (let W = 0; W < d; ++W)
      for (let U = 0; U < g; ++U) {
        const j = U * w - b.top;
        for (let q = 0; q < y; ++q) {
          const Y = q * x - b.left;
          for (let X = 0; X < m; ++X) {
            let Q = Number.MIN_SAFE_INTEGER, se = j < 0 ? 0 : j, ee = Y < 0 ? 0 : Y;
            for (let ie = 0; ie < v; ++ie) {
              const oe = j + ie * C;
              if (oe >= 0 && oe < p)
                for (let de = 0; de < $; ++de) {
                  const ce = Y + de * S;
                  if (ce >= 0 && ce < f) {
                    const ye = u[W][oe][ce][X] + h[ie][de][X];
                    ye > Q && (Q = ye, se = oe, ee = ce);
                  }
                }
            }
            O[W][se][ee][X] += D[W][U][q][X];
          }
        }
      }
    return { dataId: c.write(go(O, s.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sl(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s;
  xe(r, "sum");
  let i;
  r.dtype === "bool" ? i = Dr({ inputs: { x: r }, backend: t, attrs: { dtype: "int32" } }) : i = qs({ inputs: { x: r }, backend: t });
  const l = i.shape.length, c = ze(o, i.shape), u = wt(c, l);
  let h = c, d = i;
  u != null && (d = $n({ inputs: { x: i }, backend: t, attrs: { perm: u } }), h = Nt(h.length, l)), en("sum", h, d.shape.length);
  const [p, f] = qt(d.shape, h), m = Rn(d.dtype, "int32");
  let g = Ec(t, p, m);
  const y = Z(f), b = t.data.get(g.dataId).values, w = t.data.get(d.dataId).values;
  for (let x = 0; x < b.length; ++x) {
    const v = x * y;
    let $ = 0;
    for (let C = 0; C < y; ++C)
      $ += w[v + C];
    b[x] = $;
  }
  if (a) {
    const x = St(g.shape, c), v = g;
    g = ct({ inputs: { x: g }, backend: t, attrs: { shape: x } }), t.disposeIntermediateTensorInfo(v);
  }
  return t.disposeIntermediateTensorInfo(i), u != null && t.disposeIntermediateTensorInfo(d), g;
}
const r9 = {
  kernelName: zu,
  backendName: "cpu",
  kernelFunc: Sl
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o9(n) {
  const { inputs: e, backend: t, attrs: s } = n, { equation: r } = s, o = e, { allDims: a, summedDims: i, idDims: l } = Gm(r, o.length);
  jm(a.length, l, o);
  const { path: c, steps: u } = qm(i, l), h = u.length;
  let d = null, p = a.length;
  const f = [];
  for (let m = 0; m < h; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: y, expandDims: b } = Hm(p, l[g]);
      let w;
      Km(y) ? w = o[g] : (w = $n({ inputs: { x: o[g] }, backend: t, attrs: { perm: y } }), f.push(w));
      const x = w.shape.slice();
      for (let v = 0; v < b.length; ++v)
        x.splice(b[v], 0, 1);
      He(w.shape, x) || (w = ct({ inputs: { x: w }, backend: t, attrs: { shape: x } }), f.push(w)), d === null ? d = w : (d = Ah({ inputs: { a: w, b: d }, backend: t }), f.push(d));
    }
    m < h - 1 && (c[m] >= 0 && (d = Sl({
      inputs: { x: d },
      backend: t,
      attrs: {
        axis: c[m] - (a.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const m of f)
    m !== d && t.disposeIntermediateTensorInfo(m);
  return d;
}
const a9 = {
  kernelName: Mp,
  backendName: "cpu",
  kernelFunc: o9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i9(n) {
  const { inputs: e, backend: t } = n, { dy: s, y: r } = e;
  xe([s, r], "eluGrad");
  const o = new Float32Array(Z(r.shape)), a = t.data.get(r.dataId).values, i = t.data.get(s.dataId).values;
  for (let l = 0; l < a.length; ++l) {
    const c = a[l];
    c >= 1 ? o[l] = i[l] : o[l] = i[l] * (c + 1);
  }
  return t.makeTensorInfo(r.shape, "float32", o);
}
const l9 = {
  kernelName: Bp,
  backendName: "cpu",
  kernelFunc: i9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c9 = Pm, u9 = zm, h9 = Mm, d9 = Bm, p9 = Vm, f9 = Wm, m9 = nt(vi, (n) => {
  const e = Math.sign(n), t = Math.abs(n), s = 1 / (1 + c9 * t);
  return e * (1 - ((((f9 * s + p9) * s + d9) * s + h9) * s + u9) * s * Math.exp(-t * t));
}), g9 = {
  kernelName: vi,
  backendName: "cpu",
  kernelFunc: m9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rc(n) {
  const { inputs: e, backend: t, attrs: s } = n, { input: r } = e, { dim: o } = s, a = r.shape.length, i = r.shape.slice();
  let l = o;
  return o < 0 && (N(-(a + 1) <= o, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), l = a + o + 1), i.splice(l, 0, 1), ct({ inputs: { x: r }, backend: t, attrs: { shape: i } });
}
const y9 = {
  kernelName: iu,
  backendName: "cpu",
  kernelFunc: Rc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const b9 = Tt((n, e) => n / e), Tg = Kt(xi, b9), up = {
  kernelName: xi,
  backendName: "cpu",
  kernelFunc: Tg
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mv(n, e, t) {
  const s = n.shape, r = s[0], o = s[1], a = t.data.get(n.dataId), i = a.complexTensorInfos.real, l = a.complexTensorInfos.imag, c = [r, o], u = Z(c), h = Ht("float32", u), d = Ht("float32", u);
  for (let g = 0; g < r; g++) {
    const y = fo({
      inputs: { x: i },
      backend: t,
      attrs: { begin: [g, 0], size: [1, o] }
    }), b = fo({
      inputs: { x: l },
      backend: t,
      attrs: { begin: [g, 0], size: [1, o] }
    }), w = Tn({ inputs: { real: y, imag: b }, backend: t }), { real: x, imag: v } = x9(w, e, t), $ = ar(x, v);
    for (let C = 0; C < o; C++) {
      const S = Um($, C);
      h[g * o + C] = S.real, d[g * o + C] = S.imag;
    }
    t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(b), t.disposeIntermediateTensorInfo(w);
  }
  const p = t.makeTensorInfo(c, "float32", h), f = t.makeTensorInfo(c, "float32", d), m = Tn({ inputs: { real: p, imag: f }, backend: t });
  return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), m;
}
function x9(n, e, t) {
  const s = Z(n.shape), r = t.data.get(n.dataId), o = t.data.get(r.complexTensorInfos.real.dataId).values, a = t.data.get(r.complexTensorInfos.imag.dataId).values;
  if (w9(s)) {
    const i = hp(o, a, s, e, t), l = [n.shape[0], n.shape[1]];
    if (e) {
      const c = t.makeTensorInfo(l, "float32", i.real), u = t.makeTensorInfo(l, "float32", i.imag), h = t.makeTensorInfo([], "float32", Fr(s, "float32")), d = qs({ inputs: { x: h }, backend: t }), p = up.kernelFunc({ inputs: { a: c, b: h }, backend: t }), f = up.kernelFunc({ inputs: { a: u, b: d }, backend: t }), m = t.data.get(p.dataId).values, g = t.data.get(f.dataId).values;
      return t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), { real: m, imag: g };
    }
    return i;
  } else {
    const i = ar(o, a), l = v9(i, s, e);
    return ax(l);
  }
}
function w9(n) {
  return (n & n - 1) === 0;
}
function hp(n, e, t, s, r) {
  if (t === 1)
    return { real: n, imag: e };
  const o = ar(n, e), a = t / 2, i = ix(o), l = i.real, c = i.imag, u = [l.length], h = r.makeTensorInfo(u, "float32", l), d = r.makeTensorInfo(u, "float32", c), p = Tn({ inputs: { real: h, imag: d }, backend: r }), f = lx(o), m = f.real, g = f.imag, y = [m.length], b = r.makeTensorInfo(y, "float32", m), w = r.makeTensorInfo(y, "float32", g), x = Tn({ inputs: { real: b, imag: w }, backend: r }), v = hp(l, c, a, s, r), $ = v.real, C = v.imag, S = [$.length], E = r.makeTensorInfo(S, "float32", $), D = r.makeTensorInfo(S, "float32", C), O = Tn({
    inputs: { real: E, imag: D },
    backend: r
  }), V = hp(m, g, a, s, r), W = V.real, U = V.imag, j = [W.length], q = r.makeTensorInfo(j, "float32", W), Y = r.makeTensorInfo(j, "float32", U), X = Tn({ inputs: { real: q, imag: Y }, backend: r }), Q = ux(t, s), se = [Q.real.length], ee = r.makeTensorInfo(se, "float32", Q.real), ie = r.makeTensorInfo(se, "float32", Q.imag), oe = Tn({ inputs: { real: ee, imag: ie }, backend: r }), de = Ah({ inputs: { a: oe, b: X }, backend: r }), ce = oa({
    inputs: { a: O, b: de },
    backend: r
  }), ye = Ng({
    inputs: { a: O, b: de },
    backend: r
  }), we = po({ inputs: { input: ce }, backend: r }), Se = po({ inputs: { input: ye }, backend: r }), Ne = aa({ inputs: { input: ce }, backend: r }), Ae = aa({ inputs: { input: ye }, backend: r }), Oe = ia({
    inputs: [we, Se],
    backend: r,
    attrs: { axis: 0 }
  }), Ke = ia({
    inputs: [Ne, Ae],
    backend: r,
    attrs: { axis: 0 }
  }), Xe = r.data.get(Oe.dataId).values, Qe = r.data.get(Ke.dataId).values;
  return r.disposeIntermediateTensorInfo(h), r.disposeIntermediateTensorInfo(d), r.disposeIntermediateTensorInfo(p), r.disposeIntermediateTensorInfo(b), r.disposeIntermediateTensorInfo(w), r.disposeIntermediateTensorInfo(x), r.disposeIntermediateTensorInfo(E), r.disposeIntermediateTensorInfo(D), r.disposeIntermediateTensorInfo(O), r.disposeIntermediateTensorInfo(q), r.disposeIntermediateTensorInfo(Y), r.disposeIntermediateTensorInfo(X), r.disposeIntermediateTensorInfo(ee), r.disposeIntermediateTensorInfo(ie), r.disposeIntermediateTensorInfo(oe), r.disposeIntermediateTensorInfo(de), r.disposeIntermediateTensorInfo(ce), r.disposeIntermediateTensorInfo(ye), r.disposeIntermediateTensorInfo(we), r.disposeIntermediateTensorInfo(Ne), r.disposeIntermediateTensorInfo(Se), r.disposeIntermediateTensorInfo(Ae), r.disposeIntermediateTensorInfo(Oe), r.disposeIntermediateTensorInfo(Ke), { real: Xe, imag: Qe };
}
function v9(n, e, t) {
  const s = new Float32Array(e * 2);
  for (let r = 0; r < e; r++) {
    let o = 0, a = 0;
    for (let i = 0; i < e; i++) {
      const l = hx(r * i, e, t), c = Um(n, i);
      o += c.real * l.real - c.imag * l.imag, a += c.real * l.imag + c.imag * l.real;
    }
    t && (o /= e, a /= e), cx(s, o, a, r);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function I9(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = Z(s.shape), o = s.shape[s.shape.length - 1], a = r / o, i = ct({
    inputs: { x: s },
    backend: t,
    attrs: { shape: [a, o] }
  }), l = Mv(i, !1, t), c = ct({ inputs: { x: l }, backend: t, attrs: { shape: s.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(l), c;
}
const $9 = {
  kernelName: Vp,
  backendName: "cpu",
  kernelFunc: I9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Eg(n) {
  const { backend: e, attrs: t } = n, { shape: s, value: r, dtype: o } = t, a = o || ai(r), i = Wt(a, Z(s));
  return S9(i, r, a), e.makeTensorInfo(s, a, i);
}
const C9 = {
  kernelName: Wp,
  backendName: "cpu",
  kernelFunc: Eg
};
function S9(n, e, t) {
  n.fill(e);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N9 = {
  kernelName: Up,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
    const { image: s } = n, r = t, o = Ht(s.dtype, Z(s.shape)), [a, i, l, c] = s.shape, u = r.data.get(s.dataId).values;
    for (let d = 0; d < a; d++) {
      const p = d * l * i * c;
      for (let f = 0; f < i; f++) {
        const m = f * (l * c);
        for (let g = 0; g < l; g++) {
          const y = g * c;
          for (let b = 0; b < c; b++) {
            const w = Math.round(l - g - 1), x = p + m + y + b;
            let v = u[x];
            if (w >= 0 && w < l) {
              const $ = w * c, C = p + m + $ + b;
              v = u[C];
            }
            o[x] = v;
          }
        }
      }
    }
    return { dataId: r.write(o, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k9 = Tt((n, e) => Math.floor(n / e)), T9 = Kt(Si, k9, null, "int32"), E9 = {
  kernelName: Si,
  backendName: "cpu",
  kernelFunc: T9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D9(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o, bias: a, preluActivationWeights: i } = e, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let m = Pv({
    inputs: { x: r, filter: o },
    backend: t,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (a) {
    const g = m;
    if (u === "NCHW" && a.shape.length === 1 && a.shape[0] !== 1) {
      const y = ct({ inputs: { x: a }, backend: t, attrs: { shape: [a.shape[0], 1, 1] } });
      m = oa({ inputs: { a: m, b: y }, backend: t }), t.disposeIntermediateTensorInfo(y);
    } else
      m = oa({ inputs: { a: m, b: a }, backend: t });
    t.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    if (u === "NCHW" && p === "prelu" && i.shape.length === 1 && i.shape[0] !== 1) {
      const y = ct({
        inputs: { x: i },
        backend: t,
        attrs: { shape: [i.shape[0], 1, 1] }
      });
      m = Ac(t, m, p, y, f), t.disposeIntermediateTensorInfo(y);
    } else
      m = Ac(t, m, p, i, f);
    t.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const A9 = {
  kernelName: ic,
  backendName: "cpu",
  kernelFunc: D9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R9(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o, bias: a, preluActivationWeights: i } = e, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let m = zv({
    inputs: { x: r, filter: o },
    backend: t,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (a) {
    const g = m;
    m = oa({ inputs: { a: m, b: a }, backend: t }), t.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    m = Ac(t, m, p, i, f), t.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const F9 = {
  kernelName: lc,
  backendName: "cpu",
  kernelFunc: R9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _9(n) {
  const { inputs: e, backend: t } = n, { params: s, indices: r } = e, o = Z(s.shape), a = r.shape, i = a[a.length - 1], [l, c, u, h] = Rf(s, r);
  if (c === 0)
    return t.makeTensorInfo(l, s.dtype, []);
  const d = t.data.get(r.dataId).values, p = t.bufferSync(s), f = Z2(d, p, s.dtype, c, i, u, h, s.shape, o);
  return t.makeTensorInfo(l, s.dtype, f.values);
}
const O9 = {
  kernelName: Gp,
  backendName: "cpu",
  kernelFunc: _9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L9(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, indices: o } = e, { axis: a, batchDims: i } = s;
  xe([r, o], "gatherV2");
  const l = ze(a, r.shape)[0], c = t.data.get(o.dataId).values, u = r.shape[l];
  for (let x = 0; x < c.length; ++x) {
    const v = c[x];
    N(v <= u - 1 && v >= 0, () => `GatherV2: the index value ${v} is not in [0, ${u - 1}]`);
  }
  let h = i;
  i == null && (h = 0);
  const d = Z(o.shape), p = Ym(r, o, l, h), f = ct({
    inputs: { x: r },
    backend: t,
    attrs: {
      shape: [
        p.batchSize,
        p.outerSize,
        p.dimSize,
        p.sliceSize
      ]
    }
  }), m = ct({
    inputs: { x: o },
    backend: t,
    attrs: { shape: [p.batchSize, d / p.batchSize] }
  }), g = [
    p.batchSize,
    p.outerSize,
    d / p.batchSize,
    p.sliceSize
  ], y = t.bufferSync(m), b = t.bufferSync(f), w = J2(b, y, g);
  return t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(m), t.makeTensorInfo(p.outputShape, w.dtype, w.values);
}
const P9 = {
  kernelName: cu,
  backendName: "cpu",
  kernelFunc: L9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z9(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = Z(s.shape), o = s.shape[s.shape.length - 1], a = r / o, i = ct({
    inputs: { x: s },
    backend: t,
    attrs: { shape: [a, o] }
  }), l = Mv(i, !0, t), c = ct({ inputs: { x: l }, backend: t, attrs: { shape: s.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(l), c;
}
const M9 = {
  kernelName: Hp,
  backendName: "cpu",
  kernelFunc: z9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const B9 = nt(Ti, (n) => Number.isFinite(n) ? 1 : 0, "bool"), V9 = {
  kernelName: Ti,
  backendName: "cpu",
  kernelFunc: B9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W9 = nt(Ei, (n) => Math.abs(n) === 1 / 0 ? 1 : 0, "bool"), U9 = {
  kernelName: Ei,
  backendName: "cpu",
  kernelFunc: W9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G9 = nt(Di, (n) => Number.isNaN(n) ? 1 : 0, "bool"), H9 = {
  kernelName: Di,
  backendName: "cpu",
  kernelFunc: G9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j9(n) {
  const { backend: e, attrs: t } = n, { start: s, stop: r, num: o } = t, a = sv(s, r, o);
  return e.makeTensorInfo([a.length], "float32", a);
}
const q9 = {
  kernelName: qp,
  backendName: "cpu",
  kernelFunc: j9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const K9 = nt(Ri, (n) => Math.log1p(n)), X9 = {
  kernelName: Ri,
  backendName: "cpu",
  kernelFunc: K9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y9 = Tt((n, e) => n && e), Z9 = Kt(fu, Y9, null, "bool"), J9 = {
  kernelName: fu,
  backendName: "cpu",
  kernelFunc: Z9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q9 = nt(mu, (n) => n ? 0 : 1, "bool"), e6 = {
  kernelName: mu,
  backendName: "cpu",
  kernelFunc: Q9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t6 = Tt((n, e) => n || e), n6 = Kt(gu, t6, null, "bool"), s6 = {
  kernelName: gu,
  backendName: "cpu",
  kernelFunc: n6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function r6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { depthRadius: o, bias: a, alpha: i, beta: l } = s;
  xe(r, "LRN");
  const c = r.shape[3], u = c - 1, h = t.data.get(r.dataId).values, d = Z(r.shape), p = new Float32Array(d);
  function f(m) {
    const g = m % c;
    let y = m - g + Math.max(0, g - o);
    const b = m - g + Math.min(g + o, u);
    let w = 0;
    for (; y <= b; y++) {
      const x = h[y];
      w += x * x;
    }
    return w;
  }
  for (let m = 0; m < d; m++) {
    const g = f(m), y = h[m] * Math.pow(a + i * g, -l);
    p[m] = y;
  }
  return t.makeTensorInfo(r.shape, r.dtype, p);
}
const o6 = {
  kernelName: yu,
  backendName: "cpu",
  kernelFunc: r6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, y: o, dy: a } = e, { depthRadius: i, bias: l, alpha: c, beta: u } = s;
  xe(a, "LRNGrad");
  const h = Z(a.shape), d = a.shape[3], p = t.data.get(a.dataId).values, f = t.data.get(r.dataId).values, m = t.data.get(o.dataId).values, g = new Float32Array(h), y = h;
  for (let b = 0; b < y; b++) {
    const w = b % d, x = b - w + Math.max(0, w - i), v = b - w + Math.min(d, w + i + 1);
    let $ = 0;
    for (let C = x; C < v; C++)
      $ += Math.pow(f[C], 2);
    $ = c * $ + l;
    for (let C = x; C < v; C++) {
      let S = -2 * c * u * f[C] * m[b] / $;
      b === C && (S += Math.pow($, -u)), S *= p[b], g[C] += S;
    }
  }
  return t.makeTensorInfo(a.shape, r.dtype, g);
}
const i6 = {
  kernelName: Kp,
  backendName: "cpu",
  kernelFunc: a6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bv(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reductionIndices: o, keepDims: a } = s, i = t;
  let l = r.shape;
  const c = l.length, u = ze(o, l);
  let h = u;
  const d = wt(h, c);
  let p = i.data.get(r.dataId).values;
  if (d != null) {
    const x = new Array(c);
    for (let v = 0; v < x.length; v++)
      x[v] = l[d[v]];
    p = Cg(p, l, r.dtype, d, x), h = Nt(h.length, c), l = x;
  }
  xe(r, "max"), en("max", h, c);
  const [f, m] = qt(l, h), g = Z(m), y = ov(p, g, f, r.dtype), b = i.write(y, f, r.dtype);
  let w = f;
  return a && (w = St(f, u)), { dataId: b, shape: w, dtype: r.dtype };
}
const l6 = {
  kernelName: bu,
  backendName: "cpu",
  kernelFunc: Bv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  xe(r, "maxPool");
  const { filterSize: o, strides: a, pad: i, dimRoundingMode: l } = s, c = 1;
  N(Qt(a, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  const u = ps(r.shape, o, a, c, i, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && He(u.inShape, u.outShape))
    h = qs({ inputs: { x: r }, backend: t });
  else {
    const d = t.data.get(r.dataId).values, p = ke(r.shape), f = kg(d, r.shape, r.dtype, p, u, "max");
    h = t.makeTensorInfo(u.outShape, r.dtype, f.values);
  }
  return h;
}
const u6 = {
  kernelName: xu,
  backendName: "cpu",
  kernelFunc: c6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: o, strides: a, pad: i, dimRoundingMode: l, dataFormat: c } = s;
  xe(r, "maxPool3d");
  const u = ir(r.shape, o, a, 1, i, l, c), h = t.data.get(r.dataId).values, d = Lv(h, r.shape, r.dtype, ke(r.shape), u, "max");
  return t.makeTensorInfo(d.shape, "float32", d.values);
}
const d6 = {
  kernelName: wu,
  backendName: "cpu",
  kernelFunc: h6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o } = e, { filterSize: a, strides: i, pad: l, dimRoundingMode: c } = s;
  xe([r, o], "maxPool3DGrad");
  const u = ir(o.shape, a, i, 1, l, c), h = t.bufferSync(o), d = eP(h, u), p = u.strideDepth, f = u.strideHeight, m = u.strideWidth, g = u.dilationDepth, y = u.dilationHeight, b = u.dilationWidth, w = u.effectiveFilterDepth, x = u.effectiveFilterHeight, v = u.effectiveFilterWidth, $ = w - 1 - u.padInfo.front, C = v - 1 - u.padInfo.left, S = x - 1 - u.padInfo.top, E = Le(o.shape, "float32"), D = t.bufferSync(r);
  for (let O = 0; O < u.batchSize; ++O)
    for (let V = 0; V < u.inChannels; ++V)
      for (let W = 0; W < u.inDepth; ++W)
        for (let U = 0; U < u.inHeight; ++U)
          for (let j = 0; j < u.inWidth; ++j) {
            const q = W - $, Y = U - S, X = j - C;
            let Q = 0;
            for (let se = 0; se < w; se += g) {
              const ee = (q + se) / p;
              if (!(ee < 0 || ee >= u.outDepth || Math.floor(ee) !== ee))
                for (let ie = 0; ie < x; ie += y) {
                  const oe = (Y + ie) / f;
                  if (!(oe < 0 || oe >= u.outHeight || Math.floor(oe) !== oe))
                    for (let de = 0; de < v; de += b) {
                      const ce = (X + de) / m;
                      if (ce < 0 || ce >= u.outWidth || Math.floor(ce) !== ce)
                        continue;
                      const ye = w * x * v - 1 - d.get(O, ee, oe, ce, V), we = se * x * v + ie * v + de, Se = ye === we ? 1 : 0;
                      if (Se === 0)
                        continue;
                      const Ne = D.get(O, ee, oe, ce, V);
                      Q += Ne * Se;
                    }
                }
            }
            E.set(Q, O, W, U, j, V);
          }
  return t.makeTensorInfo(E.shape, E.dtype, E.values);
}
const f6 = {
  kernelName: Yp,
  backendName: "cpu",
  kernelFunc: p6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o, output: a } = e, i = o;
  xe([o, a], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = ps(i.shape, l, c, 1, u, h), p = t.data.get(i.dataId).values, f = Le(d.outShape, i.dtype, Ov(p, i.shape, i.dtype, d).values), m = d.strideHeight, g = d.strideWidth, y = d.dilationHeight, b = d.dilationWidth, w = d.effectiveFilterHeight, x = d.effectiveFilterWidth, v = x - 1 - d.padInfo.left, $ = w - 1 - d.padInfo.top, C = Le(i.shape, "float32"), S = t.data.get(r.dataId).values, E = Le(r.shape, "float32", S);
  for (let D = 0; D < d.batchSize; ++D)
    for (let O = 0; O < d.inChannels; ++O)
      for (let V = 0; V < d.inHeight; ++V)
        for (let W = 0; W < d.inWidth; ++W) {
          const U = V - $, j = W - v;
          let q = 0;
          for (let Y = 0; Y < w; Y += y) {
            const X = (U + Y) / m;
            if (!(X < 0 || X >= d.outHeight || Math.floor(X) !== X))
              for (let Q = 0; Q < x; Q += b) {
                const se = (j + Q) / g;
                if (se < 0 || se >= d.outWidth || Math.floor(se) !== se)
                  continue;
                const ee = w * x - 1 - f.get(D, X, se, O), ie = Y * x + Q, oe = ee === ie ? 1 : 0;
                if (oe === 0)
                  continue;
                const de = E.get(D, X, se, O);
                q += de * oe;
              }
          }
          C.set(q, D, V, W, O);
        }
  return t.makeTensorInfo(C.shape, C.dtype, C.values);
}
const g6 = {
  kernelName: Xp,
  backendName: "cpu",
  kernelFunc: m6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y6(n, e, t, s, r) {
  const o = ke(e), a = kg(n, e, t, o, r, "max"), i = Ov(n, e, t, r, !0, s);
  return [a.values, i.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const b6 = {
  kernelName: Zp,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
    const { x: s } = n, { filterSize: r, strides: o, pad: a, includeBatchInIndex: i } = e, l = t;
    xe(s, "MaxPoolWithArgmax");
    const c = l.data.get(s.dataId).values, u = ps(s.shape, r, o, [1, 1], a), [h, d] = y6(c, s.shape, s.dtype, i, u), p = l.write(h, u.outShape, s.dtype), f = l.write(d, u.outShape, s.dtype);
    return [
      { dataId: p, shape: u.outShape, dtype: s.dtype },
      { dataId: f, shape: u.outShape, dtype: "int32" }
    ];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s, i = ze(o, r.shape), c = qt(r.shape, i)[1], u = Z(c), h = [], d = t.makeTensorInfo([], "float32", new Float32Array([u]));
  h.push(d);
  const p = Dr({ inputs: { x: r }, backend: t, attrs: { dtype: "float32" } });
  h.push(p);
  const f = Tg({ inputs: { a: p, b: d }, backend: t });
  h.push(f);
  const m = Sl({ inputs: { x: f }, backend: t, attrs: { axis: o, keepDims: a } });
  return h.forEach((g) => t.disposeIntermediateTensorInfo(g)), m;
}
const w6 = {
  kernelName: vu,
  backendName: "cpu",
  kernelFunc: x6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s;
  xe(r, "min");
  const i = ze(o, r.shape);
  let l = i;
  const c = wt(l, r.shape.length);
  let u = r;
  c != null && (u = $n({ inputs: { x: r }, backend: t, attrs: { perm: c } }), l = Nt(l.length, r.shape.length)), en("min", l, u.shape.length);
  const [h, d] = qt(u.shape, l), p = Z(d), f = sn(Z(h), u.dtype), m = t.data.get(u.dataId).values;
  for (let y = 0; y < f.length; ++y) {
    const b = y * p;
    let w = m[b];
    for (let x = 0; x < p; ++x) {
      const v = m[b + x];
      (Number.isNaN(v) || v < w) && (w = v);
    }
    f[y] = w;
  }
  c != null && t.disposeIntermediateTensorInfo(u);
  const g = t.makeTensorInfo(h, u.dtype, f);
  if (a) {
    const y = St(h, i), b = ct({ inputs: { x: g }, backend: t, attrs: { shape: y } });
    return t.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
const I6 = {
  kernelName: Iu,
  backendName: "cpu",
  kernelFunc: v6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { paddings: o, mode: a } = s;
  xe(r, "mirrorPad");
  const i = o.map(
    (w, x) => w[0] + r.shape[x] + w[1]
    /* afterPad */
  ), l = o.map((w) => w[0]), c = o.map((w, x) => w[0] + r.shape[x]), u = a === "reflect" ? 0 : 1, h = t.data.get(r.dataId).values, d = r.shape.length, p = ke(r.shape), f = Z(i), m = i.length, g = ke(i), y = Ht(r.dtype, f);
  for (let w = 0; w < f; w++) {
    let x = fa(w, m, g);
    for (let $ = 0; $ < m; $++)
      x[$] < l[$] ? x[$] = l[$] * 2 - x[$] - u : x[$] >= c[$] && (x[$] = (c[$] - 1) * 2 - x[$] + u);
    x = x.map(($, C) => $ - l[C]);
    const v = Vs(x, d, p);
    y[w] = h[v];
  }
  return { dataId: t.write(y, i, r.dtype), shape: i, dtype: r.dtype };
}
const C6 = {
  kernelName: $u,
  backendName: "cpu",
  kernelFunc: $6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const S6 = Tt((n, e) => {
  const t = n % e;
  return n < 0 && e < 0 || n >= 0 && e >= 0 ? t : (t + e) % e;
}), N6 = Kt(Oi, S6), k6 = {
  kernelName: Oi,
  backendName: "cpu",
  kernelFunc: N6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Vv(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { dim: o } = s, a = r.shape.length;
  let i = o;
  if (i === -1 && (i = a - 1), i !== a - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);
  const l = ze([i], r.shape), c = Bv({
    inputs: { x: r },
    backend: t,
    attrs: { reductionIndices: l, keepDims: !1 }
  }), u = St(c.shape, l), h = ct({ inputs: { x: c }, backend: t, attrs: { shape: u } }), d = Ng({ inputs: { a: r, b: h }, backend: t }), p = K2({ inputs: { x: d }, backend: t }), f = Sl({ inputs: { x: p }, backend: t, attrs: { axis: l, keepDims: !1 } }), m = ct({ inputs: { x: f }, backend: t, attrs: { shape: u } }), g = Tg({ inputs: { a: p, b: m }, backend: t });
  return t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(m), g;
}
const T6 = {
  kernelName: Vu,
  backendName: "cpu",
  kernelFunc: Vv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function E6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { numSamples: o, seed: a, normalized: i } = s;
  xe(r, "multinomial");
  const l = i ? r : Vv({ inputs: { logits: r }, backend: t, attrs: { dim: -1 } }), c = l.shape[0], u = l.shape[1], h = t.data.get(l.dataId).values, d = [c, o], p = sn(Z(d), "int32");
  for (let f = 0; f < c; ++f) {
    const m = f * u, g = new Float32Array(u - 1);
    g[0] = h[m];
    for (let w = 1; w < g.length; ++w)
      g[w] = g[w - 1] + h[m + w];
    const y = ah.alea(a.toString()), b = f * o;
    for (let w = 0; w < o; ++w) {
      const x = y();
      p[b + w] = g.length;
      for (let v = 0; v < g.length; v++)
        if (x < g[v]) {
          p[b + w] = v;
          break;
        }
    }
  }
  return i || t.disposeIntermediateTensorInfo(l), t.makeTensorInfo(d, "int32", p);
}
const D6 = {
  kernelName: Jp,
  backendName: "cpu",
  kernelFunc: E6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A6 = Im;
function R6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: o } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l } = s;
  xe(r, "NonMaxSuppression");
  const c = t.data.get(r.dataId).values, u = t.data.get(o.dataId).values, { selectedIndices: h } = A6(c, u, a, i, l);
  return t.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const F6 = {
  kernelName: Qp,
  backendName: "cpu",
  kernelFunc: R6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _6 = $m;
function O6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: o } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, padToMaxOutputSize: c } = s;
  xe(r, "NonMaxSuppressionPadded");
  const u = t.data.get(r.dataId).values, h = t.data.get(o.dataId).values, { selectedIndices: d, validOutputs: p } = _6(u, h, a, i, l, c);
  return [
    t.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    t.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const L6 = {
  kernelName: ef,
  backendName: "cpu",
  kernelFunc: O6
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P6 = Cm;
function z6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: o } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, softNmsSigma: c } = s;
  xe(r, "NonMaxSuppressionWithScore");
  const u = t.data.get(r.dataId).values, h = t.data.get(o.dataId).values, d = a, p = i, f = l, m = c, { selectedIndices: g, selectedScores: y } = P6(u, h, d, p, f, m);
  return [
    t.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    t.makeTensorInfo([y.length], "float32", new Float32Array(y))
  ];
}
const M6 = {
  kernelName: tf,
  backendName: "cpu",
  kernelFunc: z6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r } = e, { dtype: o, depth: a, onValue: i, offValue: l } = s;
  xe(r, "oneHot");
  const c = Z(r.shape), u = new Float32Array(c * a);
  u.fill(l);
  const h = t.data.get(r.dataId).values;
  for (let d = 0; d < c; ++d)
    h[d] >= 0 && h[d] < a && (u[d * a + h[d]] = i);
  return t.makeTensorInfo([...r.shape, a], o, u);
}
const V6 = {
  kernelName: ku,
  backendName: "cpu",
  kernelFunc: B6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fc(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = po({ inputs: { input: s }, backend: t }), o = Fc({ inputs: { x: r }, backend: t }), a = aa({ inputs: { input: s }, backend: t }), i = Fc({ inputs: { x: a }, backend: t }), l = Tn({ inputs: { real: o, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return Eg({ backend: t, attrs: { shape: s.shape, value: 0, dtype: s.dtype } });
}
const W6 = {
  kernelName: Gu,
  backendName: "cpu",
  kernelFunc: Fc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wv(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const r = po({ inputs: { input: s }, backend: t }), o = Wv({ inputs: { x: r }, backend: t }), a = aa({ inputs: { input: s }, backend: t }), i = Fc({ inputs: { x: a }, backend: t }), l = Tn({ inputs: { real: o, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return Eg({ backend: t, attrs: { shape: s.shape, value: 1, dtype: s.dtype } });
}
const U6 = {
  kernelName: Nu,
  backendName: "cpu",
  kernelFunc: Wv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uv(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s;
  if (e.length === 1)
    return Rc({ inputs: { input: e[0] }, backend: t, attrs: { dim: r } });
  const o = e[0].shape, a = e[0].dtype;
  e.forEach((u) => {
    Pn(o, u.shape, "All tensors passed to stack must have matching shapes"), N(a === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], l = e.map((u) => {
    const h = Rc({ inputs: { input: u }, backend: t, attrs: { dim: r } });
    return i.push(h), h;
  }), c = ia({ inputs: l, backend: t, attrs: { axis: r } });
  return i.forEach((u) => t.disposeIntermediateTensorInfo(u)), c;
}
const G6 = {
  kernelName: Tu,
  backendName: "cpu",
  kernelFunc: Uv
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { paddings: o, constantValue: a } = s;
  xe(r, "pad");
  const i = o.map(
    (b, w) => b[0] + r.shape[w] + b[1]
    /* afterPad */
  ), l = o.map((b) => b[0]), c = t.data.get(r.dataId).values, u = Z(r.shape), h = r.shape.length, d = ke(r.shape), p = Z(i), f = i.length, m = ke(i), g = Ht(r.dtype, p);
  a !== 0 && g.fill(a);
  for (let b = 0; b < u; b++) {
    const x = fa(b, h, d).map(($, C) => $ + l[C]), v = Vs(x, f, m);
    g[v] = c[b];
  }
  return { dataId: t.write(g, i, r.dtype), shape: i, dtype: r.dtype };
}
const Gv = {
  kernelName: Eu,
  backendName: "cpu",
  kernelFunc: H6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j6 = Tt((n, e) => Math.pow(n, e)), q6 = Kt(Pi, j6), K6 = {
  kernelName: Pi,
  backendName: "cpu",
  kernelFunc: q6
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: o, indices: a } = e, i = r.map((g) => t.data.get(g.dataId).values), l = r.map((g) => g.shape), c = t.data.get(o.dataId).values, u = t.data.get(a.dataId).values, [h, d, p] = hv(i, l, c, o.shape, o.dtype, u, a.shape), f = h.map((g) => t.makeTensorInfo([g.length], "int32", g)), m = t.makeTensorInfo(p, o.dtype, d);
  return f.concat([m]);
}
const Y6 = {
  kernelName: nf,
  backendName: "cpu",
  kernelFunc: X6
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z6(n) {
  const { inputs: e, backend: t, attrs: s } = n, { shape: r, values: o, defaultValue: a, rowPartitionTensors: i } = e, { rowPartitionTypes: l } = s, c = t.data.get(r.dataId).values, u = t.data.get(o.dataId).values, h = t.data.get(a.dataId).values, d = i.map((g) => t.data.get(g.dataId).values), p = i.map((g) => g.shape), [f, m] = dv(c, r.shape, u, o.shape, o.dtype, h, a.shape, d, p, l);
  return t.makeTensorInfo(f, o.dtype, m);
}
const J6 = {
  kernelName: sf,
  backendName: "cpu",
  kernelFunc: Z6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q6(n) {
  const { backend: e, attrs: t } = n, { start: s, stop: r, dtype: o, step: a } = t, i = pv(s, r, a, o);
  return e.makeTensorInfo([i.length], o, i);
}
const e5 = {
  kernelName: rf,
  backendName: "cpu",
  kernelFunc: Q6
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t5 = nt(zi, (n) => 1 / n), n5 = {
  kernelName: zi,
  backendName: "cpu",
  kernelFunc: t5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: o, halfPixelCenters: a, size: i } = s;
  xe(r, "resizeBilinear");
  const l = ke(r.shape), [c, u] = i, [h, d, p, f] = r.shape, m = t.data.get(r.dataId).values, g = new Float32Array(Z([h, c, u, f])), y = [
    o && c > 1 ? d - 1 : d,
    o && u > 1 ? p - 1 : p
  ], b = [
    o && c > 1 ? c - 1 : c,
    o && u > 1 ? u - 1 : u
  ];
  let w = 0;
  const x = y[0] / b[0], v = y[1] / b[1];
  for (let $ = 0; $ < h; $++)
    for (let C = 0; C < c; C++) {
      let S;
      a ? S = x * (C + 0.5) - 0.5 : S = x * C;
      const E = Math.max(0, Math.floor(S)), D = S - E, O = Math.min(d - 1, Math.ceil(S)), V = $ * l[0] + E * l[1], W = $ * l[0] + O * l[1];
      for (let U = 0; U < u; U++) {
        let j;
        a ? j = v * (U + 0.5) - 0.5 : j = v * U;
        const q = Math.max(0, Math.floor(j)), Y = j - q, X = Math.min(p - 1, Math.ceil(j)), Q = V + q * l[2], se = W + q * l[2], ee = V + X * l[2], ie = W + X * l[2];
        for (let oe = 0; oe < f; oe++) {
          const de = m[Q + oe], ce = m[se + oe], ye = m[ee + oe], we = m[ie + oe], Se = de + (ye - de) * Y, Ne = ce + (we - ce) * Y, Ae = Se + (Ne - Se) * D;
          g[w++] = Ae;
        }
      }
    }
  return t.makeTensorInfo([h, c, u, f], "float32", g);
}
const r5 = {
  kernelName: _u,
  backendName: "cpu",
  kernelFunc: s5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: o } = e, { alignCorners: a } = s;
  xe([o, r], "resizeBilinearGrad");
  const i = ke(r.shape), [l, c, u, h] = r.shape, [, d, p] = o.shape, f = new Float32Array(l * c * u * h), m = [
    a && d > 1 ? c - 1 : c,
    a && p > 1 ? u - 1 : u
  ], g = [
    a && d > 1 ? d - 1 : d,
    a && p > 1 ? p - 1 : p
  ], y = m[0] / g[0], b = m[1] / g[1], w = t.data.get(o.dataId).values;
  let x = 0;
  for (let v = 0; v < l; v++) {
    const $ = v * i[0];
    for (let C = 0; C < d; C++) {
      const S = C * y, E = Math.floor(S), D = Math.min(Math.ceil(S), c - 1), O = $ + E * i[1], V = $ + D * i[1], W = S - E, U = 1 - W;
      for (let j = 0; j < p; j++) {
        const q = j * b, Y = Math.floor(q), X = Math.min(Math.ceil(q), u - 1), Q = q - Y, se = 1 - Q, ee = O + Y * i[2], ie = O + X * i[2], oe = V + Y * i[2], de = V + X * i[2], ce = U * se, ye = U * Q, we = W * se, Se = W * Q;
        for (let Ne = 0; Ne < h; Ne++) {
          const Ae = w[x++];
          f[ee + Ne] += Ae * ce, f[ie + Ne] += Ae * ye, f[oe + Ne] += Ae * we, f[de + Ne] += Ae * Se;
        }
      }
    }
  }
  return t.makeTensorInfo([l, u, c, h], "float32", f);
}
const a5 = {
  kernelName: lf,
  backendName: "cpu",
  kernelFunc: o5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: o, halfPixelCenters: a, size: i } = s;
  xe(r, "resizeNearestNeighbor");
  const l = ke(r.shape), [c, u] = i, [h, d, p, f] = r.shape, m = t.data.get(r.dataId).values, g = new Float32Array(h * c * u * f), y = [
    o && c > 1 ? d - 1 : d,
    o && u > 1 ? p - 1 : p
  ], b = [
    o && c > 1 ? c - 1 : c,
    o && u > 1 ? u - 1 : u
  ], w = y[0] / b[0], x = y[1] / b[1];
  let v = 0;
  for (let $ = 0; $ < h; $++) {
    const C = $ * l[0];
    for (let S = 0; S < c; S++) {
      const E = a ? w * (S + 0.5) : w * S;
      let D = Math.min(d - 1, o ? Math.round(E) : Math.floor(E));
      a && (D = Math.max(0, D));
      const O = C + D * l[1];
      for (let V = 0; V < u; V++) {
        const W = a ? x * (V + 0.5) : x * V;
        let U = Math.min(p - 1, o ? Math.round(W) : Math.floor(W));
        a && (U = Math.max(0, U));
        const j = O + U * l[2];
        for (let q = 0; q < f; q++) {
          const Y = m[j + q];
          g[v++] = Y;
        }
      }
    }
  }
  return t.makeTensorInfo([h, c, u, f], r.dtype, g);
}
const l5 = {
  kernelName: Fu,
  backendName: "cpu",
  kernelFunc: i5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: o } = e, { alignCorners: a } = s;
  xe([o, r], "resizeNearestNeighborGrad");
  const i = ke(r.shape), l = ke(o.shape), [c, u, h, d] = r.shape, [, p, f] = o.shape, m = new Float32Array(c * u * h * d), g = t.data.get(o.dataId).values, y = [
    a && p > 1 ? u - 1 : u,
    a && f > 1 ? h - 1 : h
  ], b = [
    a && p > 1 ? p - 1 : p,
    a && f > 1 ? f - 1 : f
  ], w = y[0] / b[0], x = y[1] / b[1], v = 1 / w, $ = 1 / x, C = Math.ceil(v) * 2 + 2, S = Math.ceil($) * 2 + 2;
  for (let E = 0; E < c; E++) {
    const D = E * i[0];
    for (let O = 0; O < u; O++) {
      const V = D + O * i[1], W = Math.floor(O * v), U = Math.floor(W - C / 2);
      for (let j = 0; j < h; j++) {
        const q = V + j * i[2], Y = Math.floor(j * $), X = Math.floor(Y - S / 2);
        for (let Q = 0; Q < d; Q++) {
          let se = 0;
          for (let ee = 0; ee < C; ee++) {
            const ie = ee + U;
            if (ie < 0 || ie >= p)
              continue;
            const oe = D + ie * l[1], de = ie * w, ce = Math.min(u - 1, a ? Math.round(de) : Math.floor(de));
            if (O === ce)
              for (let ye = 0; ye < S; ye++) {
                const we = ye + X;
                if (we < 0 || we >= f)
                  continue;
                const Se = oe + we * l[2], Ne = we * x, Ae = Math.min(h - 1, a ? Math.round(Ne) : Math.floor(Ne));
                j === Ae && (se += g[Se + Q]);
              }
          }
          m[q + Q] = se;
        }
      }
    }
  }
  return t.makeTensorInfo(r.shape, r.dtype, m);
}
const u5 = {
  kernelName: af,
  backendName: "cpu",
  kernelFunc: c5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dims: o } = s;
  xe(r, "reverse");
  const a = r.shape.length, i = ze(o, r.shape);
  if (a === 0)
    return qs({ inputs: { x: r }, backend: t });
  const l = new Gt(r.shape, r.dtype), c = t.bufferSync(r);
  for (let u = 0; u < l.size; u++) {
    const h = l.indexToLoc(u), d = h.slice();
    i.forEach((p) => d[p] = r.shape[p] - 1 - d[p]), l.set(c.get(...d), ...h);
  }
  return t.makeTensorInfo(l.shape, l.dtype, l.values);
}
const d5 = {
  kernelName: Ou,
  backendName: "cpu",
  kernelFunc: h5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p5 = {
  kernelName: Cf,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
    const { image: s } = n, { radians: r, fillValue: o, center: a } = e, i = t, l = Ht(s.dtype, Z(s.shape)), [c, u, h, d] = s.shape, [p, f] = _m(a, u, h), m = 255, g = Math.sin(r), y = Math.cos(r), b = i.data.get(s.dataId).values;
    for (let x = 0; x < c; x++) {
      const v = x * h * u * d;
      for (let $ = 0; $ < u; $++) {
        const C = $ * (h * d);
        for (let S = 0; S < h; S++) {
          const E = S * d;
          for (let D = 0; D < d; D++) {
            const O = [c, $, S, D], V = O[2], W = O[1];
            let U = (V - p) * y - (W - f) * g, j = (V - p) * g + (W - f) * y;
            U = Math.round(U + p), j = Math.round(j + f);
            let q = o;
            if (typeof o != "number" && (D === 3 ? q = m : q = o[D]), U >= 0 && U < h && j >= 0 && j < u) {
              const X = j * (h * d), Q = U * d, se = v + X + Q + D;
              q = b[se];
            }
            const Y = v + C + E + D;
            l[Y] = q;
          }
        }
      }
    }
    return { dataId: i.write(l, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f5 = nt(Vi, (n) => {
  const e = Math.floor(n);
  return n - e < 0.5 ? Math.floor(n) : n - e > 0.5 ? Math.ceil(n) : e % 2 === 0 ? e : e + 1;
}), m5 = {
  kernelName: Vi,
  backendName: "cpu",
  kernelFunc: f5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r, updates: o } = e, { shape: a } = s, { sliceRank: i, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = sl(o, r, a), d = !0, p = t.bufferSync(r), f = t.bufferSync(o), m = Mo(p, f, a, h, c, l, i, u, 0, d);
  return t.makeTensorInfo(a, m.dtype, m.values);
}
const y5 = {
  kernelName: cf,
  backendName: "cpu",
  kernelFunc: g5
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b5(n, e) {
  let t = 0, s = n.length, r = 0;
  for (; t < s; )
    r = Math.floor((t + s) / 2), n[r] < e ? t = r + 1 : s = r;
  return s;
}
function x5(n, e) {
  let t = 0, s = n.length, r = 0;
  for (; t < s; )
    r = Math.floor((t + s) / 2), n[r] <= e ? t = r + 1 : s = r;
  return s;
}
function w5(n, e, t, s, r, o) {
  const a = Wt("int32", t * r);
  for (let i = 0; i < t; ++i) {
    const l = n.slice(i * s, (i + 1) * s), c = i * r;
    for (let u = 0; u < r; ++u)
      a[c + u] = o === "left" ? b5(l, e[u + c]) : x5(l, e[u + c]);
  }
  return a;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sortedSequence: r, values: o } = e, { side: a } = s, i = t.data.get(r.dataId).values, l = t.data.get(o.dataId).values, c = w5(i, l, r.shape[0], r.shape[1], o.shape[1], a);
  return t.makeTensorInfo(o.shape, "int32", c);
}
const I5 = {
  kernelName: uf,
  backendName: "cpu",
  kernelFunc: v5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $5(n) {
  const { inputs: e, backend: t } = n, { condition: s, t: r, e: o } = e;
  xe([s, r, o], "select");
  const a = s.shape.length, i = t.data.get(s.dataId).values, l = t.data.get(r.dataId).values, c = t.data.get(o.dataId).values, u = Rn(r.dtype, o.dtype), h = sn(Z(r.shape), u);
  let d = 0;
  const p = a === 0 || a > 1 || r.shape.length === 1 ? 1 : Z(r.shape.slice(1));
  for (let f = 0; f < i.length; f++)
    for (let m = 0; m < p; m++)
      i[f] === 1 ? h[d++] = l[f] : h[d++] = c[f];
  return t.makeTensorInfo(r.shape, u, h);
}
const C5 = {
  kernelName: Lu,
  backendName: "cpu",
  kernelFunc: $5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const S5 = bh, N5 = xh, k5 = nt(Ui, (n) => n >= 0 ? N5 * n : S5 * (Math.exp(n) - 1)), T5 = {
  kernelName: Ui,
  backendName: "cpu",
  kernelFunc: k5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E5 = nt(ji, (n) => n < 0 ? -1 : n > 0 ? 1 : 0), D5 = {
  kernelName: ji,
  backendName: "cpu",
  kernelFunc: E5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A5 = nt(Gi, (n) => Math.sin(n)), R5 = {
  kernelName: Gi,
  backendName: "cpu",
  kernelFunc: A5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F5 = nt(Hi, (n) => Math.sinh(n)), _5 = {
  kernelName: Hi,
  backendName: "cpu",
  kernelFunc: F5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const O5 = 11920928955078125e-23, ny = Math.log(O5) + 2, L5 = nt(Ki, (n) => {
  const e = n > -ny, t = n < ny, s = Math.exp(n);
  let r;
  return t ? r = s : e ? r = n : r = Math.log(1 + s), r;
}), P5 = {
  kernelName: Ki,
  backendName: "cpu",
  kernelFunc: L5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: o, paddings: a } = s;
  xe([r], "spaceToBatchND");
  const i = Z(o), l = [[0, 0]];
  l.push(...a);
  for (let $ = 1 + o.length; $ < r.shape.length; ++$)
    l.push([0, 0]);
  const c = Gv.kernelFunc({
    inputs: { x: r },
    backend: t,
    attrs: { paddings: l, constantValue: 0 }
  }), u = pl(c.shape, o, i, !1), h = fl(u.length, o.length, !1), d = ml(c.shape, o, i, !1), m = ct({ inputs: { x: c }, backend: t, attrs: { shape: u } }), b = $n({ inputs: { x: m }, backend: t, attrs: { perm: h } }), v = ct({ inputs: { x: b }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(b), v;
}
const M5 = {
  kernelName: Mu,
  backendName: "cpu",
  kernelFunc: z5
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B5(n) {
  const { inputs: e, backend: t } = n, { indices: s, values: r, denseShape: o, defaultValue: a } = e;
  if (o.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${o.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${r.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  const i = t.data.get(s.dataId).values, l = t.data.get(r.dataId).values, c = t.data.get(o.dataId).values, u = t.data.get(a.dataId).values[0], [h, d, p, f, m] = yv(i, s.shape, s.dtype, l, r.dtype, c, u);
  return [
    t.makeTensorInfo(d, s.dtype, h),
    t.makeTensorInfo([d[0]], r.dtype, p),
    t.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    t.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const V5 = {
  kernelName: hf,
  backendName: "cpu",
  kernelFunc: B5
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W5(n) {
  const { inputs: e, backend: t } = n, { inputIndices: s, inputShape: r, newShape: o } = e;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
  const a = Array.from(t.data.get(r.dataId).values), i = t.data.get(s.dataId).values, l = Array.from(t.data.get(o.dataId).values), [c, u, h] = bv(i, s.shape, s.dtype, a, l);
  return [
    t.makeTensorInfo(u, s.dtype, c),
    t.makeTensorInfo([h.length], o.dtype, new Int32Array(h))
  ];
}
const U5 = {
  kernelName: df,
  backendName: "cpu",
  kernelFunc: W5
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G5(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: o } = e;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${o.shape}`);
  if (r.shape[0] !== o.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const a = t.data.get(s.dataId).values, i = t.data.get(r.dataId).values, l = t.data.get(o.dataId).values, [c, u] = Sg(a, s.shape, s.dtype, i, l, !0);
  return t.makeTensorInfo(u, s.dtype, c);
}
const H5 = {
  kernelName: pf,
  backendName: "cpu",
  kernelFunc: G5
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j5(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: o } = e;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${o.shape}`);
  if (r.shape[0] !== o.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const a = t.data.get(s.dataId).values, i = t.data.get(r.dataId).values, l = t.data.get(o.dataId).values, [c, u] = Sg(a, s.shape, s.dtype, i, l);
  return t.makeTensorInfo(u, s.dtype, c);
}
const q5 = {
  kernelName: ff,
  backendName: "cpu",
  kernelFunc: j5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sparseIndices: r, sparseValues: o, defaultValue: a } = e, { outputShape: i } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = sl(o, r, i), p = !1, f = t.bufferSync(r);
  let m;
  switch (o.dtype) {
    case "bool": {
      const g = t.bufferSync(o), y = !!t.data.get(a.dataId).values[0];
      m = Mo(f, g, i, d, u, c, l, h, y, p);
      break;
    }
    case "float32": {
      const g = t.bufferSync(o), y = t.data.get(a.dataId).values[0];
      m = Mo(f, g, i, d, u, c, l, h, y, p);
      break;
    }
    case "int32": {
      const g = t.bufferSync(o), y = t.data.get(a.dataId).values[0];
      m = Mo(f, g, i, d, u, c, l, h, y, p);
      break;
    }
    case "string": {
      const g = t.bufferSync(o), y = vr(t.data.get(a.dataId).values[0]);
      m = Mo(f, g, i, d, u, c, l, h, y, p);
      break;
    }
    default:
      throw new Error(`Unsupported type ${o.dtype}`);
  }
  return t.makeTensorInfo(i, m.dtype, m.values);
}
const X5 = {
  kernelName: mf,
  backendName: "cpu",
  kernelFunc: K5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y5(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { numOrSizeSplits: o, axis: a } = s, i = ze(a, r.shape)[0], l = Xm(r, o, i), c = new Array(r.shape.length).fill(0), u = r.shape.slice();
  return l.map((h) => {
    const d = [...u];
    d[i] = h;
    const p = fo({ inputs: { x: r }, backend: t, attrs: { begin: c, size: d } });
    return c[i] += h, p;
  });
}
const Z5 = {
  kernelName: Bu,
  backendName: "cpu",
  kernelFunc: Y5
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J5 = {
  kernelName: gf,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: e }) => {
    const { x: t } = n, s = e;
    xe(t, "square");
    const r = s.data.get(t.dataId).values, o = new Float32Array(r.length);
    for (let i = 0; i < r.length; ++i) {
      const l = r[i];
      o[i] = l * l;
    }
    return { dataId: s.write(o, t.shape, t.dtype), shape: t.shape, dtype: t.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q5 = nt(tl, (n, e) => {
  const t = e;
  return isNaN(n) ? NaN : n > 0 ? 1 : t.alpha;
}), ez = {
  kernelName: tl,
  backendName: "cpu",
  kernelFunc: Q5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tz(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: o, end: a, strides: i, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s;
  xe(r, "stridedSlice");
  const { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = Pf(r.shape, o, a, i, l, c, u, h, d);
  let v;
  if (m)
    v = ct({ inputs: { x: r }, backend: t, attrs: { shape: f } });
  else if (g || y) {
    N(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const $ = _f(b, w, x), C = fo({ inputs: { x: r }, backend: t, attrs: { begin: b, size: $ } });
    v = ct({ inputs: { x: C }, backend: t, attrs: { shape: f } }), t.disposeIntermediateTensorInfo(C);
  } else {
    const $ = t.bufferSync(r), C = wv(p, $, x, b);
    v = t.makeTensorInfo(f, C.dtype, C.values);
  }
  return v;
}
const nz = {
  kernelName: yf,
  backendName: "cpu",
  kernelFunc: tz
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sz(n) {
  const { inputs: e, backend: t, attrs: s } = n, { separator: r, nGramWidths: o, leftPad: a, rightPad: i, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = e, d = t.data.get(u.dataId).values, p = t.data.get(h.dataId).values, [f, m] = vv(d, p, r, o, a, i, l, c);
  return [
    t.makeTensorInfo([f.length], "string", f),
    t.makeTensorInfo(h.shape, "int32", m)
  ];
}
const rz = {
  kernelName: bf,
  backendName: "cpu",
  kernelFunc: sz
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oz(n) {
  const { inputs: e, backend: t, attrs: s } = n, { skipEmpty: r } = s, { input: o, delimiter: a } = e;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${o.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  const i = t.data.get(o.dataId).values, l = t.data.get(a.dataId).values[0], [c, u, h] = Iv(i, l, r), d = u.length;
  return [
    t.makeTensorInfo([d, 2], "int32", c),
    t.makeTensorInfo([d], "string", u),
    t.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const az = {
  kernelName: xf,
  backendName: "cpu",
  kernelFunc: oz
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iz(n) {
  const { inputs: e, backend: t, attrs: s } = n, { numBuckets: r } = s, { input: o } = e;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  const a = t.data.get(o.dataId).values, i = $v(a, r);
  return t.makeTensorInfo(o.shape, "int32", i);
}
const lz = {
  kernelName: wf,
  backendName: "cpu",
  kernelFunc: iz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cz = nt(Ji, (n) => Math.tan(n)), uz = {
  kernelName: Ji,
  backendName: "cpu",
  kernelFunc: cz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hz = nt(Qi, (n) => Math.tanh(n)), dz = {
  kernelName: Qi,
  backendName: "cpu",
  kernelFunc: hz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pz(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reps: o } = s;
  xe(r, "tile");
  const a = Sv(t.bufferSync(r), o);
  return t.makeTensorInfo(a.shape, a.dtype, a.values);
}
const fz = {
  kernelName: el,
  backendName: "cpu",
  kernelFunc: pz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mz(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { k: o, sorted: a } = s;
  xe(r, "topk");
  const i = t.data.get(r.dataId).values, [l, c] = kv(i, r.shape, r.dtype, o, a);
  return [
    t.makeTensorInfo(l.shape, l.dtype, l.values),
    t.makeTensorInfo(c.shape, c.dtype, c.values)
  ];
}
const gz = {
  kernelName: vf,
  backendName: "cpu",
  kernelFunc: mz
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yz(n) {
  const { inputs: e, attrs: t, backend: s } = n, { image: r, transforms: o } = e, { interpolation: a, fillMode: i, fillValue: l, outputShape: c } = t, [u, h, d, p] = r.shape, [f, m] = c ?? [h, d], g = [u, f, m, p], y = ke(r.shape), b = y[0], w = y[1], x = y[2], v = ke(g), $ = v[0], C = v[1], S = v[2], E = Ht(r.dtype, Z(g));
  E.fill(l);
  const D = s.data.get(r.dataId).values, O = s.data.get(o.dataId).values;
  for (let W = 0; W < u; ++W) {
    const U = o.shape[0] === 1 ? O : O.subarray(W * 8, W * 8 + 8);
    for (let j = 0; j < f; ++j)
      for (let q = 0; q < m; ++q)
        for (let Y = 0; Y < p; ++Y) {
          let X;
          const Q = U[6] * q + U[7] * j + 1;
          if (Q === 0)
            continue;
          const se = (U[0] * q + U[1] * j + U[2]) / Q, ee = (U[3] * q + U[4] * j + U[5]) / Q, ie = sy(se, d, i), oe = sy(ee, h, i);
          switch (a) {
            case "nearest":
              X = $z(D, h, d, b, w, x, W, oe, ie, Y, l);
              break;
            case "bilinear":
              X = Cz(D, h, d, b, w, x, W, oe, ie, Y, l);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`);
          }
          const de = W * $ + j * C + q * S + Y;
          E[de] = X;
        }
    return s.makeTensorInfo(g, r.dtype, E);
  }
  return { dataId: s.write(E, g, r.dtype), shape: r.shape, dtype: r.dtype };
}
const bz = {
  kernelName: If,
  backendName: "cpu",
  kernelFunc: yz
};
function sy(n, e, t) {
  switch (t) {
    case "reflect":
      return xz(n, e);
    case "wrap":
      return wz(n, e);
    case "nearest":
      return Iz(n, e);
    case "constant":
    default:
      return vz(n);
  }
}
function xz(n, e) {
  let t = n;
  if (t < 0)
    if (e <= 1)
      t = 0;
    else {
      const s = 2 * e;
      t < s && (t = s * Math.trunc(-t / s) + t), t = t < -e ? t + s : -t - 1;
    }
  else if (t > e - 1)
    if (e <= 1)
      t = 0;
    else {
      const s = 2 * e;
      t -= s * Math.trunc(t / s), t >= e && (t = s - t - 1);
    }
  return oo(0, t, e - 1);
}
function wz(n, e) {
  let t = n;
  if (t < 0)
    if (e <= 1)
      t = 0;
    else {
      const s = e - 1;
      t += e * (Math.trunc(-t / s) + 1);
    }
  else if (t > e - 1)
    if (e <= 1)
      t = 0;
    else {
      const s = e - 1;
      t -= e * Math.trunc(t / s);
    }
  return oo(0, t, e - 1);
}
function vz(n, e) {
  return n;
}
function Iz(n, e) {
  return oo(0, n, e - 1);
}
function Wa(n, e, t, s, r, o, a, i, l, c, u) {
  const h = a * s + i * r + l * o + c;
  return 0 <= i && i < e && 0 <= l && l < t ? n[h] : u;
}
function $z(n, e, t, s, r, o, a, i, l, c, u) {
  const h = Math.round(i), d = Math.round(l);
  return Wa(n, e, t, s, r, o, a, h, d, c, u);
}
function Cz(n, e, t, s, r, o, a, i, l, c, u) {
  const h = Math.floor(i), d = Math.floor(l), p = h + 1, f = d + 1, m = (f - l) * Wa(n, e, t, s, r, o, a, h, d, c, u) + (l - d) * Wa(n, e, t, s, r, o, a, h, f, c, u), g = (f - l) * Wa(n, e, t, s, r, o, a, p, d, c, u) + (l - d) * Wa(n, e, t, s, r, o, a, p, f, c, u);
  return (p - i) * m + (i - h) * g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sz(n) {
  const { inputs: e, attrs: t, backend: s } = n, { axis: r } = t, { x: o } = e;
  xe(o, "unique");
  const a = s.data.get(o.dataId).values, { outputValues: i, outputShape: l, indices: c } = Tv(a, r, o.shape, o.dtype);
  return [
    s.makeTensorInfo(l, o.dtype, i),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const Nz = {
  kernelName: $f,
  backendName: "cpu",
  kernelFunc: Sz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kz(n) {
  const { inputs: e, backend: t, attrs: s } = n, { value: r } = e;
  let { axis: o } = s;
  o < 0 && (o += r.shape.length);
  const a = r.shape.length, i = r.shape[o], l = new Array(a - 1);
  let c = 0;
  for (let p = 0; p < a; p++)
    p !== o && (l[c++] = r.shape[p]);
  const u = new Array(a).fill(0), h = r.shape.slice();
  h[o] = 1;
  const d = new Array(i);
  for (let p = 0; p < d.length; p++) {
    u[o] = p;
    const f = fo({ inputs: { x: r }, backend: t, attrs: { begin: u, size: h } });
    d[p] = ct({ inputs: { x: f }, backend: t, attrs: { shape: l } }), t.disposeIntermediateTensorInfo(f);
  }
  return d;
}
const Tz = {
  kernelName: Wu,
  backendName: "cpu",
  kernelFunc: kz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ez(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, segmentIds: o } = e, { numSegments: a } = s;
  xe(r, "unsortedSegmentSum");
  const i = r.shape.length, l = o.shape.length, c = [], u = [], h = i - l;
  let d = o;
  for (let f = 0; f < h; ++f) {
    const m = Rc({ inputs: { input: d }, backend: t, attrs: { dim: f + 1 } });
    d = m, u.push(m);
  }
  for (let f = 0; f < a; ++f) {
    const m = Fr(f, "int32"), g = t.makeTensorInfo([], "int32", m), y = j2({ inputs: { a: g, b: d }, backend: t }), b = Dr({ inputs: { x: y }, backend: t, attrs: { dtype: "float32" } }), w = Ah({ inputs: { a: b, b: r }, backend: t }), x = Sl({ inputs: { x: w }, backend: t, attrs: { axis: 0, keepDims: !1 } });
    c.push(x), u.push(g), u.push(y), u.push(b), u.push(w), u.push(x);
  }
  const p = Uv({ inputs: c, backend: t, attrs: { axis: 0 } });
  return u.forEach((f) => t.disposeIntermediateTensorInfo(f)), p;
}
const Dz = {
  kernelName: Uu,
  backendName: "cpu",
  kernelFunc: Ez
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Az = [
  TL,
  f4,
  DL,
  RL,
  w4,
  _L,
  LL,
  zL,
  BL,
  WL,
  GL,
  jL,
  KL,
  ZL,
  QL,
  nP,
  rP,
  aP,
  lP,
  NL,
  uP,
  dP,
  fP,
  gP,
  b4,
  I4,
  bP,
  m4,
  wP,
  IP,
  $P,
  SP,
  kP,
  EP,
  AP,
  FP,
  OP,
  PP,
  MP,
  VP,
  UP,
  HP,
  qP,
  KP,
  YP,
  JP,
  e9,
  t9,
  n9,
  s9,
  a9,
  xL,
  l9,
  $4,
  g9,
  C4,
  y9,
  N4,
  $9,
  C9,
  N9,
  T4,
  E9,
  A9,
  F9,
  O9,
  P9,
  D4,
  R4,
  g4,
  M9,
  vP,
  V9,
  U9,
  H9,
  wL,
  _4,
  L4,
  q9,
  z4,
  X9,
  J9,
  e6,
  s6,
  o6,
  i6,
  l6,
  B4,
  u6,
  d6,
  f6,
  g6,
  b6,
  w6,
  I6,
  W4,
  C6,
  k6,
  D6,
  G4,
  j4,
  F6,
  L6,
  M6,
  K4,
  V6,
  U6,
  G6,
  Gv,
  K6,
  IL,
  Z4,
  Y6,
  J6,
  e5,
  y4,
  up,
  n5,
  $L,
  CL,
  SL,
  r5,
  a5,
  l5,
  u5,
  d5,
  p5,
  m5,
  oL,
  y5,
  I5,
  C5,
  T5,
  iL,
  D5,
  R5,
  _5,
  lL,
  T6,
  P5,
  M5,
  V5,
  U5,
  H5,
  q5,
  X5,
  Z5,
  hL,
  J5,
  pL,
  ez,
  nz,
  rz,
  az,
  lz,
  yL,
  r9,
  uz,
  dz,
  fz,
  gz,
  bz,
  X4,
  Nz,
  Tz,
  Dz,
  W6
];
for (const n of Az)
  Qy(n);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Jr = {}, Vl = {
  alpha: !1,
  antialias: !1,
  premultipliedAlpha: !1,
  preserveDrawingBuffer: !1,
  depth: !1,
  stencil: !1,
  failIfMajorPerformanceCaveat: !0
};
function Rz(n, e) {
  Jr[n] = e;
}
function As(n, e) {
  if (!(n in Jr) || e != null) {
    const s = _z(n, e);
    if (s !== null)
      Jr[n] = s;
    else
      return console.log("Could not get context for WebGL version", n), null;
  }
  const t = Jr[n];
  return t == null || t.isContextLost() ? (delete Jr[n], As(n)) : (t.disable(t.DEPTH_TEST), t.disable(t.STENCIL_TEST), t.disable(t.BLEND), t.disable(t.DITHER), t.disable(t.POLYGON_OFFSET_FILL), t.disable(t.SAMPLE_COVERAGE), t.enable(t.SCISSOR_TEST), t.enable(t.CULL_FACE), t.cullFace(t.BACK), Jr[n]);
}
function Fz(n) {
  if (typeof OffscreenCanvas < "u" && n === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document < "u")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function _z(n, e) {
  if (n !== 1 && n !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  const t = e ?? Fz(n);
  return t.addEventListener("webglcontextlost", (s) => {
    s.preventDefault(), delete Jr[n];
  }, !1), K().getBool("SOFTWARE_WEBGL_ENABLED") && (Vl.failIfMajorPerformanceCaveat = !1), n === 1 ? t.getContext("webgl", Vl) || t.getContext("experimental-webgl", Vl) : t.getContext("webgl2", Vl);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Qa;
(function(n) {
  n[n.DENSE = 0] = "DENSE", n[n.SHARED_BATCH = 1] = "SHARED_BATCH";
})(Qa || (Qa = {}));
var Un;
(function(n) {
  n[n.RENDER = 0] = "RENDER", n[n.UPLOAD = 1] = "UPLOAD", n[n.PIXELS = 2] = "PIXELS", n[n.DOWNLOAD = 3] = "DOWNLOAD";
})(Un || (Un = {}));
var Xt;
(function(n) {
  n[n.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", n[n.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", n[n.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", n[n.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", n[n.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(Xt || (Xt = {}));
function Nl(n, e) {
  return [e, n];
}
function Oz(n, e) {
  return n * e;
}
function Wl(n) {
  const e = Z(n), t = Math.ceil(e / 4);
  return gd(t);
}
function $a(n, e) {
  return [
    Math.max(1, Math.ceil(e / 2)),
    Math.max(1, Math.ceil(n / 2))
  ];
}
function Lz(n, e) {
  const [t, s] = $a(n, e);
  return t * s * 4;
}
function Dg(n, e) {
  const t = n;
  let s, r, o, a, i, l, c, u, h, d;
  return K().getNumber("WEBGL_VERSION") === 2 ? (s = t.R32F, r = t.R16F, o = t.RGBA16F, a = t.RGBA32F, i = t.RED, c = 4, u = 1, h = t.HALF_FLOAT, d = t.FLOAT, l = t.RGBA8) : (s = n.RGBA, r = n.RGBA, o = n.RGBA, a = t.RGBA, i = n.RGBA, c = 4, u = 4, h = e != null ? e.HALF_FLOAT_OES : null, d = n.FLOAT, l = n.RGBA), {
    internalFormatFloat: s,
    internalFormatHalfFloat: r,
    internalFormatPackedHalfFloat: o,
    internalFormatPackedFloat: a,
    textureFormatFloat: i,
    downloadTextureFormat: l,
    downloadUnpackNumChannels: c,
    defaultNumChannels: u,
    textureTypeHalfFloat: h,
    textureTypeFloat: d
  };
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ve(n, e) {
  const t = e();
  return K().getBool("DEBUG") && Pz(n), t;
}
function Pz(n) {
  const e = n.getError();
  if (e !== n.NO_ERROR)
    throw new Error("WebGL Error: " + Vz(n, e));
}
const zz = 596e-10, Mz = 65504;
function Bz(n) {
  return !!(K().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || n === 0 || zz < Math.abs(n) && Math.abs(n) < Mz);
}
function Vz(n, e) {
  switch (e) {
    case n.NO_ERROR:
      return "NO_ERROR";
    case n.INVALID_ENUM:
      return "INVALID_ENUM";
    case n.INVALID_VALUE:
      return "INVALID_VALUE";
    case n.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case n.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case n.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case n.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${e}`;
  }
}
function Ul(n, e) {
  return hr(n, () => n.getExtension(e), 'Extension "' + e + '" not supported on this browser.');
}
function Wz(n, e) {
  const t = hr(n, () => n.createShader(n.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (ve(n, () => n.shaderSource(t, e)), ve(n, () => n.compileShader(t)), n.getShaderParameter(t, n.COMPILE_STATUS) === !1)
    throw console.log(n.getShaderInfoLog(t)), new Error("Failed to compile vertex shader.");
  return t;
}
function Uz(n, e) {
  const t = hr(n, () => n.createShader(n.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (ve(n, () => n.shaderSource(t, e)), ve(n, () => n.compileShader(t)), K().get("ENGINE_COMPILE_ONLY"))
    return t;
  if (n.getShaderParameter(t, n.COMPILE_STATUS) === !1)
    throw Hv(e, n.getShaderInfoLog(t)), new Error("Failed to compile fragment shader.");
  return t;
}
const Gz = /ERROR: [0-9]+:([0-9]+):/g;
function Hv(n, e) {
  const t = Gz.exec(e);
  if (t == null) {
    console.log(`Couldn't parse line number in error: ${e}`), console.log(n);
    return;
  }
  const s = +t[1], r = n.split(`
`), o = r.length.toString().length + 2, a = r.map((h, d) => Bo((d + 1).toString(), o) + h);
  let i = 0;
  for (let h = 0; h < a.length; h++)
    i = Math.max(a[h].length, i);
  const l = a.slice(0, s - 1), c = a.slice(s - 1, s), u = a.slice(s);
  console.log(l.join(`
`)), console.log(e.split(`
`)[0]), console.log(`%c ${Bo(c[0], i)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(u.join(`
`));
}
function Hz(n) {
  return hr(n, () => n.createProgram(), "Unable to create WebGLProgram.");
}
function jz(n, e) {
  if (ve(n, () => n.linkProgram(e)), !K().get("ENGINE_COMPILE_ONLY") && n.getProgramParameter(e, n.LINK_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(e)), new Error("Failed to link vertex and fragment shaders.");
}
function td(n, e) {
  if (ve(n, () => n.validateProgram(e)), n.getProgramParameter(e, n.VALIDATE_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(e)), new Error("Shader program validation failed.");
}
function qz(n, e) {
  const t = hr(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return ve(n, () => n.bindBuffer(n.ARRAY_BUFFER, t)), ve(n, () => n.bufferData(n.ARRAY_BUFFER, e, n.STATIC_DRAW)), t;
}
function Kz(n, e) {
  const t = hr(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return ve(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, t)), ve(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, e, n.STATIC_DRAW)), t;
}
function Xz(n) {
  return hr(n, () => n.createTexture(), "Unable to create WebGLTexture.");
}
function Yz(n, e) {
  const t = K().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (n <= 0 || e <= 0) {
    const s = `[${n}x${e}]`;
    throw new Error("Requested texture size " + s + " is invalid.");
  }
  if (n > t || e > t) {
    const s = `[${n}x${e}]`, r = `[${t}x${t}]`;
    throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + r + ".");
  }
}
function Zz(n) {
  return hr(n, () => n.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function ry(n, e, t, s, r, o, a) {
  const i = n.getAttribLocation(e, t);
  return i === -1 ? !1 : (ve(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)), ve(n, () => n.vertexAttribPointer(i, r, n.FLOAT, !1, o, a)), ve(n, () => n.enableVertexAttribArray(i)), !0);
}
function Jz(n, e, t) {
  sM(n, t), ve(n, () => n.activeTexture(n.TEXTURE0 + t)), ve(n, () => n.bindTexture(n.TEXTURE_2D, e));
}
function Qz(n, e, t) {
  return hr(n, () => n.getUniformLocation(e, t), 'uniform "' + t + '" not present in program.');
}
function eM(n, e, t) {
  return n.getUniformLocation(e, t);
}
function tM(n, e, t, s) {
  ve(n, () => Jz(n, e, s)), ve(n, () => n.uniform1i(t, s));
}
function nd(n, e, t) {
  ve(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)), ve(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, e, 0));
}
function oy(n, e) {
  ve(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)), ve(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, null, 0));
}
function Gl(n) {
  const e = n.checkFramebufferStatus(n.FRAMEBUFFER);
  if (e !== n.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + nM(n, e));
}
function nM(n, e) {
  switch (e) {
    case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case n.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${e}`;
  }
}
function hr(n, e, t) {
  const s = ve(n, () => e());
  if (s == null)
    throw new Error(t);
  return s;
}
function sM(n, e) {
  const t = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = e + n.TEXTURE0;
  if (s < n.TEXTURE0 || s > t) {
    const r = `[gl.TEXTURE0, gl.TEXTURE${t}]`;
    throw new Error(`textureUnit must be in ${r}.`);
  }
}
function la(n, e = 2) {
  return Z(n.slice(0, n.length - e));
}
function ca(n) {
  if (n.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [
    n.length > 1 ? n[n.length - 2] : 1,
    n[n.length - 1]
  ];
}
function sd(n) {
  let e = [1, 1, 1];
  return n.length === 0 || n.length === 1 && n[0] === 1 || (e = [la(n), ...ca(n)]), e;
}
function rM(n, e = !1) {
  let t = K().getNumber("WEBGL_MAX_TEXTURE_SIZE"), s = K().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  s === 1 / 0 && K().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (s = t / 2), e && (t = t * 2, s = s * 2, n = n.map((i, l) => l >= n.length - 2 ? xp(n[l]) : n[l]), n.length === 1 && (n = [2, n[0]])), n.length !== 2 && (n = Rr(n).newShape);
  let r = Z(n), o = null;
  n.length <= 1 && r <= t ? o = [1, r] : n.length === 2 && n[0] <= t && n[1] <= t ? o = n : n.length === 3 && n[0] * n[1] <= t && n[2] <= t ? o = [n[0] * n[1], n[2]] : n.length === 3 && n[0] <= t && n[1] * n[2] <= t ? o = [n[0], n[1] * n[2]] : n.length === 4 && n[0] * n[1] * n[2] <= t && n[3] <= t ? o = [n[0] * n[1] * n[2], n[3]] : n.length === 4 && n[0] <= t && n[1] * n[2] * n[3] <= t && (o = [n[0], n[1] * n[2] * n[3]]);
  const a = o != null && Math.max(...o) > s && Math.min(...o) <= (e ? 2 : 1) && Math.min(...o) > 0;
  if (o == null || a)
    if (e) {
      const i = la(n);
      let l = 2, c = 2;
      n.length && ([l, c] = ca(n)), r = i * (l / 2) * (c / 2), o = gd(r).map((u) => u * 2);
    } else
      o = gd(r);
  return o;
}
function Hl(n) {
  return n % 2 === 0;
}
function _c(n, e) {
  if (n = n.slice(-2), e = e.slice(-2), He(n, e) || !n.length || !e.length || n[0] === 0 || n[1] === 0 || e[0] === 0 || e[1] === 0)
    return !0;
  if (n.length !== e.length) {
    const t = n.slice(-1)[0], s = e.slice(-1)[0];
    if (t === s || Hl(t) && Hl(s) && (n[0] === 1 || e[0] === 1))
      return !0;
  }
  return n[1] === e[1] && Hl(n[0]) && Hl(e[0]);
}
let rd, od;
function oM(n) {
  if (rd == null) {
    const e = As(n);
    rd = e.getParameter(e.MAX_TEXTURE_SIZE);
  }
  return rd;
}
function aM(n) {
  if (od == null) {
    const e = As(n);
    od = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, od);
}
function iM(n) {
  if (n === 0)
    return 0;
  let e;
  const t = As(n);
  return cs(t, "EXT_disjoint_timer_query_webgl2") && n === 2 ? e = 2 : cs(t, "EXT_disjoint_timer_query") ? e = 1 : e = 0, e;
}
function cs(n, e) {
  return n.getExtension(e) != null;
}
function ay(n) {
  try {
    if (As(n) != null)
      return !0;
  } catch (e) {
    return console.log("Error when getting WebGL context: ", e), !1;
  }
  return !1;
}
function lM(n) {
  if (n === 0)
    return !1;
  const e = As(n);
  if (n === 1) {
    if (!cs(e, "OES_texture_float"))
      return !1;
  } else if (!cs(e, "EXT_color_buffer_float"))
    return !1;
  return dp(e);
}
function cM(n) {
  if (n === 0)
    return !1;
  const e = As(n);
  if (n === 1) {
    if (!cs(e, "OES_texture_float") || !cs(e, "WEBGL_color_buffer_float"))
      return !1;
  } else {
    if (cs(e, "EXT_color_buffer_float"))
      return dp(e);
    const s = "EXT_color_buffer_half_float";
    if (cs(e, s)) {
      const r = e.getExtension(s);
      return uM(e, r);
    }
    return !1;
  }
  return dp(e);
}
function dp(n) {
  const e = Dg(n), t = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, t), n.texImage2D(n.TEXTURE_2D, 0, e.internalFormatFloat, 1, 1, 0, e.textureFormatFloat, e.textureTypeFloat, null);
  const o = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, o), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, t, 0);
  const a = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(t), n.deleteFramebuffer(o), a;
}
function uM(n, e) {
  const t = Dg(n, e), s = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, s), n.texImage2D(n.TEXTURE_2D, 0, t.internalFormatHalfFloat, 1, 1, 0, t.textureFormatFloat, t.textureTypeHalfFloat, null);
  const a = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, a), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, s, 0);
  const i = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(s), n.deleteFramebuffer(a), i;
}
function hM(n) {
  return n !== 2 ? !1 : As(n).fenceSync != null;
}
function kl(n, e) {
  Array.isArray(n) || (n = [n]), n.forEach((t) => {
    t != null && N(t.dtype !== "complex64", () => `${e} does not support complex64 tensors in the WebGL backend.`);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $e = K();
$e.registerFlag("HAS_WEBGL", () => $e.getNumber("WEBGL_VERSION") > 0);
$e.registerFlag("WEBGL_VERSION", () => ay(2) ? 2 : ay(1) ? 1 : 0);
$e.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1);
$e.registerFlag("WEBGL_BUFFER_SUPPORTED", () => $e.get("WEBGL_VERSION") === 2);
$e.registerFlag("WEBGL_CPU_FORWARD", () => !0);
$e.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1);
$e.registerFlag("WEBGL_PACK", () => $e.getBool("HAS_WEBGL"));
$e.registerFlag("WEBGL_PACK_NORMALIZATION", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_CLIP", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_PACK_REDUCE", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_LAZILY_UNPACK", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_CONV_IM2COL", () => $e.getBool("WEBGL_PACK"));
$e.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => oM($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => aM($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const n = $e.getNumber("WEBGL_VERSION");
  return n === 0 ? 0 : iM(n);
});
$e.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => $e.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !f1());
$e.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => lM($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => $e.getBool("WEBGL_FORCE_F16_TEXTURES") ? !1 : $e.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
$e.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => cM($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_FENCE_API_ENABLED", () => hM($e.getNumber("WEBGL_VERSION")));
$e.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => $e.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
$e.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`);
});
$e.registerFlag("WEBGL_FLUSH_THRESHOLD", () => f1() ? 1 : -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`);
});
$e.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
$e.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1);
$e.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
$e.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
$e.registerFlag("WEBGL_EXP_CONV", () => !1);
$e.registerFlag("SOFTWARE_WEBGL_ENABLED", () => $e.getBool("IS_TEST"));
$e.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
$e.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1);
$e.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fn() {
  let n, e, t, s, r, o, a, i, l, c;
  return K().getNumber("WEBGL_VERSION") === 2 ? (n = "#version 300 es", e = "in", t = "out", s = "in", r = "texture", o = "outputColor", a = "out vec4 outputColor;", i = K().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (n = "", e = "attribute", t = "varying", s = "varying", r = "texture2D", o = "gl_FragColor", a = "", i = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), {
    version: n,
    attribute: e,
    varyingVs: t,
    varyingFs: s,
    texture2D: r,
    output: o,
    defineOutput: a,
    defineSpecialNaN: i,
    defineSpecialInf: l,
    defineRound: c
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Io(n, e, t = "index") {
  const s = ke(e);
  return s.map((r, o) => {
    const a = `int ${n[o]} = ${t} / ${r}`, i = o === s.length - 1 ? `int ${n[o + 1]} = ${t} - ${n[o]} * ${r}` : `index -= ${n[o]} * ${r}`;
    return `${a}; ${i};`;
  }).join("");
}
function Rh(n, e, t = "index") {
  const s = ke(e);
  return s.map((r, o) => {
    const a = `int ${n[o]} = ${t} / outShapeStrides[${o}]`, i = o === s.length - 1 ? `int ${n[o + 1]} = ${t} - ${n[o]} * outShapeStrides[${o}]` : `index -= ${n[o]} * outShapeStrides[${o}]`;
    return `${a}; ${i};`;
  }).join("");
}
function dM(n, e) {
  const t = n.length, s = n.map((o) => `${e}[${o}]`), r = new Array(t - 1);
  r[t - 2] = s[t - 1];
  for (let o = t - 3; o >= 0; --o)
    r[o] = `(${r[o + 1]} * ${s[o + 1]})`;
  return r;
}
function pM(n, e, t = "index") {
  const s = n.map((o, a) => a), r = dM(s, e);
  return r.map((o, a) => {
    const i = `int ${n[a]} = ${t} / ${r[a]}`, l = a === r.length - 1 ? `int ${n[a + 1]} = ${t} - ${n[a]} * ${r[a]}` : `index -= ${n[a]} * ${r[a]}`;
    return `${i}; ${l};`;
  }).join("");
}
function Ag(n) {
  const e = ke(n).map((t) => t.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`;
}
function Rg() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const jv = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { getBroadcastDims: qv } = KD;
function fM(n, e, t) {
  const s = [];
  if (n.forEach((p) => {
    const f = Z(p.shapeInfo.logicalShape);
    if (p.shapeInfo.isUniform ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${p.name};`), s.push(`uniform int offset${p.name};`)), t.enableShapeUniforms) {
      const { uniformShape: m } = Fg(t.packedInputs, p.shapeInfo.logicalShape, p.shapeInfo.texShape);
      switch (m.length) {
        case 1:
          s.push(`uniform int ${p.name}Shape;`);
          break;
        case 2:
          s.push(`uniform ivec2 ${p.name}Shape;`);
          break;
        case 3:
          s.push(`uniform ivec3 ${p.name}Shape;`);
          break;
        case 4:
          s.push(`uniform ivec4 ${p.name}Shape;`);
          break;
      }
      s.push(`uniform ivec2 ${p.name}TexShape;`);
    }
  }), t.enableShapeUniforms) {
    switch (e.logicalShape.length) {
      case 1:
        s.push("uniform int outShape;");
        break;
      case 2:
        s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
        break;
      case 3:
        s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
        break;
    }
    s.push("uniform ivec2 outTexShape;");
  }
  t.customUniforms && t.customUniforms.forEach((p) => {
    s.push(`uniform ${p.type} ${p.name}${p.arrayIndex ? `[${p.arrayIndex}]` : ""};`);
  });
  const r = s.join(`
`), o = n.map((p) => mM(p, e, t.packedInputs, t.enableShapeUniforms)).join(`
`), a = e.texShape, i = fn(), l = bM(i);
  let c, u, h = vM(i);
  return e.isPacked ? (c = gM(e.logicalShape, a, t.enableShapeUniforms), u = wM(i)) : (c = yM(e.logicalShape, a, t.enableShapeUniforms), u = xM(i)), t.packedInputs && (h += SM), [
    h,
    l,
    u,
    r,
    c,
    o,
    t.userCode
  ].join(`
`);
}
function Ca(n, e = !1) {
  const t = n.shapeInfo.logicalShape;
  switch (t.length) {
    case 0:
      return PM(n, e);
    case 1:
      return MM(n, e);
    case 2:
      return VM(n, e);
    case 3:
      return UM(n, e);
    case 4:
      return HM(n, e);
    case 5:
      return jM(n);
    case 6:
      return qM(n);
    default:
      throw new Error(`${t.length}-D input sampling is not yet supported`);
  }
}
function Kv(n, e) {
  switch (n.shapeInfo.logicalShape.length) {
    case 0:
      return LM(n);
    case 1:
      return zM(n, e);
    case 2:
      return BM(n, e);
    case 3:
      return WM(n, e);
    default:
      return GM(n, e);
  }
}
function mM(n, e, t = !1, s) {
  let r = "";
  t ? r += Kv(n, s) : r += Ca(n, s);
  const o = n.shapeInfo.logicalShape, a = e.logicalShape;
  return o.length <= a.length && (t ? r += KM(n, e) : r += XM(n, e)), r;
}
function gM(n, e, t) {
  switch (n.length) {
    case 0:
      return Xv();
    case 1:
      return NM(n, e, t);
    case 2:
      return _M(n, e, t);
    case 3:
      return TM(n, e, t);
    default:
      return DM(n, e, t);
  }
}
function yM(n, e, t) {
  switch (n.length) {
    case 0:
      return Xv();
    case 1:
      return kM(n, e, t);
    case 2:
      return OM(n, e, t);
    case 3:
      return EM(n, e, t);
    case 4:
      return AM(n, e, t);
    case 5:
      return RM(n, e);
    case 6:
      return FM(n, e);
    default:
      throw new Error(`${n.length}-D output sampling is not yet supported`);
  }
}
function bM(n) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function xM(n) {
  return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function wM(n) {
  return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function vM(n) {
  return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${IM}
    ${$M}
    ${CM}
  `;
}
const IM = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, $M = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, CM = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, SM = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function Xv() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function NM(n, e, t) {
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  return s[0] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? t ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function kM(n, e, t) {
  return e[0] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    ` : e[1] === 1 ? t ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    ` : t ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `;
}
function TM(n, e, t) {
  if (t)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], r = Math.ceil(n[2] / 2), o = r * Math.ceil(n[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function EM(n, e, t) {
  if (t)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Rh(["r", "c", "d"], n)}
    return ivec3(r, c, d);
  }
`;
  const s = Io(["r", "c", "d"], n);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function DM(n, e, t) {
  if (t)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], r = Math.ceil(n[n.length - 1] / 2), o = r * Math.ceil(n[n.length - 2] / 2);
  let a = o, i = "", l = "b, r, c";
  for (let c = 2; c < n.length - 1; c++)
    a *= n[n.length - c - 1], i = `
      int b${c} = index / ${a};
      index -= b${c} * ${a};
    ` + i, l = `b${c}, ` + l;
  return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${i}

      int b = index / ${o};
      index -= b * ${o};

      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec${n.length}(${l});
    }
  `;
}
function AM(n, e, t) {
  if (t)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Rh(["r", "c", "d", "d2"], n)}
      return ivec4(r, c, d, d2);
    }
  `;
  const s = Io(["r", "c", "d", "d2"], n);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function RM(n, e) {
  const t = Io(["r", "c", "d", "d2", "d3"], n);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function FM(n, e) {
  const t = Io(["r", "c", "d", "d2", "d3", "d4"], n);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function _M(n, e, t) {
  const s = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  if (He(n, e))
    return t ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
  const r = Math.ceil(n[1] / 2);
  return t ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${r});
      int c = imod(index, ${r}) * 2;

      return ivec2(r, c);
    }
  `;
}
function OM(n, e, t) {
  return He(n, e) ? t ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    ` : n[1] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : n[0] === 1 ? t ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : t ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function $o(n) {
  return `offset${n}`;
}
function LM(n) {
  const e = n.name, t = "get" + e.charAt(0).toUpperCase() + e.slice(1), s = fn();
  return `
    vec4 ${t}() {
      return ${s.texture2D}(${e}, halfCR);
    }
  `;
}
function PM(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (n.shapeInfo.isUniform)
    return `float ${s}() {return ${t};}`;
  const [r, o] = n.shapeInfo.texShape;
  if (r === 1 && o === 1)
    return `
      float ${s}() {
        return sampleTexture(${t}, halfCR);
      }
    `;
  const a = $o(t);
  if (e)
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], ${a});
      return sampleTexture(${t}, uv);
    }
  `;
  const [i, l] = n.shapeInfo.texShape;
  return `
    float ${s}() {
      vec2 uv = uvFromFlat(${i}, ${l}, ${a});
      return sampleTexture(${t}, uv);
    }
  `;
}
function zM(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), r = n.shapeInfo.texShape, o = fn();
  if (e)
    return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${o.texture2D}(${t}, uv);
    }
  `;
  const a = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${a[0]}, ${a[1]}, index);
      return ${o.texture2D}(${t}, uv);
    }
  `;
}
function MM(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1);
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int index) {
        ${Sa(n)}
      }
    `;
  const r = n.shapeInfo.texShape, o = r[0], a = r[1];
  if (a === 1 && o === 1)
    return `
      float ${s}(int index) {
        return sampleTexture(${t}, halfCR);
      }
    `;
  const i = $o(t);
  return a === 1 ? e ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${t}TexShape[0]));
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);
        return sampleTexture(${t}, uv);
      }
    ` : o === 1 ? e ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${t}TexShape[1]), 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);
        return sampleTexture(${t}, uv);
      }
    ` : e ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${t}TexShape[0], ${t}TexShape[1], index + ${i});
      return sampleTexture(${t}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${o}, ${a}, index + ${i});
      return sampleTexture(${t}, uv);
    }
  `;
}
function BM(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape, a = o[0], i = o[1], l = fn();
  if (o != null && He(t, o))
    return e ? `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
  if (e)
    return `
    vec4 ${r}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
  const c = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)], u = Math.ceil(t[1] / 2);
  return `
    vec4 ${r}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
}
function VM(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape;
  if (o != null && He(t, o)) {
    if (e)
      return `
      float ${r}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
    const d = o[0], p = o[1];
    return `
    float ${r}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  }
  const { newShape: a, keptDims: i } = Rr(t), l = a;
  if (l.length < t.length) {
    const d = Na(n, l), p = ["row", "col"];
    return `
      ${Ca(d, e)}
      float ${r}(int row, int col) {
        return ${r}(${ka(p, i)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));
        ${Sa(n)}
      }
    `;
  const c = o[0], u = o[1], h = $o(s);
  return u === 1 ? e ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  ` : c === 1 ? e ? `
      float ${r}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${t[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : e ? `
      float ${r}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${r}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t[1]} + col + ${h};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function WM(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = n.shapeInfo.texShape, a = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
  if (t[0] === 1) {
    const d = t.slice(1), p = [1, 2], f = Na(n, d), m = ["b", "row", "col"];
    return `
        ${Kv(f, e)}
        vec4 ${r}(int b, int row, int col) {
          return ${r}(${ka(m, p)});
        }
      `;
  }
  const i = fn();
  if (e)
    return `
    vec4 ${r}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${i.texture2D}(${s}, uv);
    }
  `;
  const l = a[0], c = a[1], u = Math.ceil(t[2] / 2), h = u * Math.ceil(t[1] / 2);
  return `
    vec4 ${r}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${h}, ${u}, b, row, col);
      return ${i.texture2D}(${s}, uv);
    }
  `;
}
function UM(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = t[1] * t[2], a = t[2], { newShape: i, keptDims: l } = Rr(t), c = i;
  if (c.length < t.length) {
    const m = Na(n, c), g = ["row", "col", "depth"];
    return `
        ${Ca(m, e)}
        float ${r}(int row, int col, int depth) {
          return ${r}(${ka(g, l)});
        }
      `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${o}, ${a}, 1)));
        ${Sa(n)}
      }
    `;
  const u = n.shapeInfo.texShape, h = u[0], d = u[1], p = n.shapeInfo.flatOffset;
  if (d === o && p == null)
    return e ? `
      float ${r}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${r}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${a}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${s}, uv);
        }
      `;
  if (d === a && p == null)
    return e ? `
      float ${r}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${r}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  const f = $o(s);
  return e ? `
    float ${r}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${r}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o} + col * ${a} + depth + ${f};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function GM(n, e) {
  const t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), r = fn();
  if (e)
    return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t}TexShape[0]) / 2.0), ceil(float(${t}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${t}, uv);
    }
  `;
  const o = n.shapeInfo.logicalShape, a = o.length, i = n.shapeInfo.texShape, l = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)], c = l[0], u = l[1], h = Math.ceil(o[a - 1] / 2);
  let d = h * Math.ceil(o[a - 2] / 2), p = "int b, int row, int col", f = `b * ${d} + (row / 2) * ${h} + (col / 2)`;
  for (let m = 2; m < a - 1; m++)
    p = `int b${m}, ` + p, d *= o[a - m - 1], f = `b${m} * ${d} + ` + f;
  return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${r.texture2D}(${t}, uv);
    }
  `;
}
function HM(n, e) {
  const t = n.shapeInfo.logicalShape, s = n.name, r = "get" + s.charAt(0).toUpperCase() + s.slice(1), o = t[3], a = t[2] * o, i = t[1] * a, { newShape: l, keptDims: c } = Rr(t);
  if (l.length < t.length) {
    const b = Na(n, l), w = ["row", "col", "depth", "depth2"];
    return `
      ${Ca(b, e)}
      float ${r}(int row, int col, int depth, int depth2) {
        return ${r}(${ka(w, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${r}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${i}, ${a}, ${o}, 1)));
        ${Sa(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1], f = `int stride2 = ${s}Shape[3];`, m = `int stride1 = ${s}Shape[2] * stride2;`, g = `int stride0 = ${s}Shape[1] * stride1;`;
  if (p === i && u == null)
    return e ? `
      float ${r}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${a}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  if (p === o && u == null)
    return e ? `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${r}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t[1] * t[2]}, ${t[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  const y = $o(s);
  return e ? `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${r}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} +
          depth * ${o} + depth2;
      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});
      return sampleTexture(${s}, uv);
    }
  `;
}
function jM(n) {
  const e = n.shapeInfo.logicalShape, t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), r = e[4], o = e[3] * r, a = e[2] * o, i = e[1] * a, { newShape: l, keptDims: c } = Rr(e);
  if (l.length < e.length) {
    const m = Na(n, l), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${Ca(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${ka(g, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${i}, ${a}, ${o}, ${r})) +
          depth3;
        ${Sa(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1];
  if (p === i && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${a}, ${o}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (p === r && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3]},
               ${e[2] * e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  const f = $o(t);
  return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} + depth * ${o} +
          depth2 * ${r} + depth3 + ${f};
      vec2 uv = uvFromFlat(${d}, ${p}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function qM(n) {
  const e = n.shapeInfo.logicalShape, t = n.name, s = "get" + t.charAt(0).toUpperCase() + t.slice(1), { newShape: r, keptDims: o } = Rr(e);
  if (r.length < e.length) {
    const g = Na(n, r), y = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${Ca(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${ka(y, o)});
      }
    `;
  }
  const a = e[5], i = e[4] * a, l = e[3] * i, c = e[2] * l, u = e[1] * c;
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${i})) +
          dot(
            vec2(depth3, depth4),
            vec2(${a}, 1)));
        ${Sa(n)}
      }
    `;
  const h = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, p = d[0], f = d[1];
  if (f === u && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${i}, ${a})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  if (f === a && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3] * e[4]},
               ${e[2] * e[3] * e[4]},
               ${e[3] * e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${t}, uv);
      }
    `;
  const m = $o(t);
  return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${i} + depth3 * ${a} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${t}, uv);
    }
  `;
}
function Sa(n) {
  const e = n.name, t = Z(n.shapeInfo.logicalShape);
  return t < 2 ? `return ${e};` : `
    for (int i = 0; i < ${t}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `;
}
function KM(n, e) {
  const t = n.name, s = t.charAt(0).toUpperCase() + t.slice(1), r = "get" + s + "AtOutCoords", o = n.shapeInfo.logicalShape.length, a = e.logicalShape.length, i = qv(n.shapeInfo.logicalShape, e.logicalShape), l = ut(a), c = a - o;
  let u;
  const h = ["x", "y", "z", "w", "u", "v"];
  o === 0 ? u = "" : a < 2 && i.length >= 1 ? u = "coords = 0;" : u = i.map((b) => `coords.${h[b + c]} = 0;`).join(`
`);
  let d = "";
  a < 2 && o > 0 ? d = "coords" : d = n.shapeInfo.logicalShape.map((b, w) => `coords.${h[w + c]}`).join(", ");
  let p = "return outputValue;";
  const m = Z(n.shapeInfo.logicalShape) === 1, y = Z(e.logicalShape) === 1;
  if (o === 1 && !m && !y)
    p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (m && !y)
    a === 1 ? p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : p = `
        return vec4(outputValue.x);
      `;
  else if (i.length) {
    const b = o - 2, w = o - 1;
    i.indexOf(b) > -1 && i.indexOf(w) > -1 ? p = "return vec4(outputValue.x);" : i.indexOf(b) > -1 ? p = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : i.indexOf(w) > -1 && (p = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${r}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${d});
      ${p}
    }
  `;
}
function XM(n, e) {
  const t = n.name, s = t.charAt(0).toUpperCase() + t.slice(1), r = "get" + s + "AtOutCoords", o = e.texShape, a = n.shapeInfo.texShape, i = n.shapeInfo.logicalShape.length, l = e.logicalShape.length;
  if (!n.shapeInfo.isUniform && i === l && n.shapeInfo.flatOffset == null && He(a, o))
    return `
      float ${r}() {
        return sampleTexture(${t}, resultUV);
      }
    `;
  const c = ut(l), u = qv(n.shapeInfo.logicalShape, e.logicalShape), h = l - i;
  let d;
  const p = ["x", "y", "z", "w", "u", "v"];
  i === 0 ? d = "" : l < 2 && u.length >= 1 ? d = "coords = 0;" : d = u.map((m) => `coords.${p[m + h]} = 0;`).join(`
`);
  let f = "";
  return l < 2 && i > 0 ? f = "coords" : f = n.shapeInfo.logicalShape.map((m, g) => `coords.${p[g + h]}`).join(", "), `
    float ${r}() {
      ${c} coords = getOutputCoords();
      ${d}
      return get${s}(${f});
    }
  `;
}
function ut(n) {
  if (n <= 1)
    return "int";
  if (n === 2)
    return "ivec2";
  if (n === 3)
    return "ivec3";
  if (n === 4)
    return "ivec4";
  if (n === 5)
    return "ivec5";
  if (n === 6)
    return "ivec6";
  throw Error(`GPU for rank ${n} is not yet supported`);
}
function Fg(n, e, t) {
  const { newShape: s, keptDims: r } = Rr(e), o = e.length, a = n && o === 3 && e[0] === 1, i = a ? e.slice(1) : s, l = !n && o > 1 && !He(e, t) && s.length < o || a;
  return { useSqueezeShape: l, uniformShape: l ? i : e, keptDims: r };
}
function Na(n, e) {
  const t = JSON.parse(JSON.stringify(n));
  return t.shapeInfo.logicalShape = e, t;
}
function ka(n, e) {
  return e.map((t) => n[t]).join(", ");
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YM(n, e, t, s) {
  const r = t.map((u, h) => {
    const d = {
      logicalShape: u.shape,
      texShape: u.isUniform ? null : u.texData.texShape,
      isUniform: u.isUniform,
      isPacked: u.isUniform ? !1 : u.texData.isPacked,
      flatOffset: null
    };
    return u.texData != null && u.texData.slice != null && u.texData.slice.flatOffset > 0 && (d.flatOffset = u.texData.slice.flatOffset), { name: e.variableNames[h], shapeInfo: d };
  }), o = r.map((u) => u.shapeInfo), a = {
    logicalShape: s.shape,
    texShape: s.texData.texShape,
    isUniform: !1,
    isPacked: s.texData.isPacked,
    flatOffset: null
  }, i = fM(r, a, e), l = Uz(n.gl, i), c = n.createProgram(l);
  return K().get("ENGINE_COMPILE_ONLY") ? {
    program: e,
    fragmentShader: l,
    source: i,
    webGLProgram: c,
    inShapeInfos: o,
    outShapeInfo: a,
    uniformLocations: null,
    customUniformLocations: null,
    infLoc: null,
    nanLoc: null,
    inShapesLocations: null,
    inTexShapesLocations: null,
    outShapeLocation: null,
    outShapeStridesLocation: null,
    outTexShapeLocation: null
  } : Object.assign({
    program: e,
    fragmentShader: l,
    source: i,
    webGLProgram: c,
    inShapeInfos: o,
    outShapeInfo: a
  }, Yv(n, e, c));
}
function Yv(n, e, t) {
  const s = {}, r = {}, o = {}, a = [];
  let i, l, c, u = null, h = null;
  h = n.getUniformLocation(t, "NAN", !1), K().getNumber("WEBGL_VERSION") === 1 && (u = n.getUniformLocation(t, "INFINITY", !1));
  const d = !1;
  for (let p = 0; p < e.variableNames.length; p++) {
    const f = e.variableNames[p];
    s[f] = n.getUniformLocation(t, f, d), s[`offset${f}`] = n.getUniformLocation(t, `offset${f}`, d), e.enableShapeUniforms && (r[`${f}Shape`] = n.getUniformLocation(t, `${f}Shape`, d), o[`${f}TexShape`] = n.getUniformLocation(t, `${f}TexShape`, d));
  }
  return e.enableShapeUniforms && (i = n.getUniformLocation(t, "outShape", d), c = n.getUniformLocation(t, "outShapeStrides", d), l = n.getUniformLocation(t, "outTexShape", d)), e.customUniforms && e.customUniforms.forEach((p, f) => {
    a[f] = n.getUniformLocation(t, p.name, d);
  }), {
    uniformLocations: s,
    customUniformLocations: a,
    infLoc: u,
    nanLoc: h,
    inShapesLocations: r,
    inTexShapesLocations: o,
    outShapeLocation: i,
    outShapeStridesLocation: c,
    outTexShapeLocation: l
  };
}
function iy(n, e) {
  if (n.length !== e.length)
    throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${e.length} inputs`);
  n.forEach((t, s) => {
    const r = t.logicalShape, o = e[s], a = o.shape;
    if (!He(r, a))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);
    if (t.isUniform && o.isUniform)
      return;
    const i = t.texShape, l = o.isUniform ? null : o.texData.texShape;
    if (!He(i, l))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`);
  });
}
function ZM(n, e, t, s, r) {
  e.program.enableShapeUniforms || (iy(e.inShapeInfos, t), iy([e.outShapeInfo], [s]));
  const o = s.texData.texture, a = s.texData.texShape;
  s.texData.isPacked ? n.setOutputPackedMatrixTexture(o.texture, a[0], a[1]) : n.setOutputMatrixTexture(o.texture, a[0], a[1]), n.setProgram(e.webGLProgram), K().getNumber("WEBGL_VERSION") === 1 && e.infLoc !== null && n.gl.uniform1f(e.infLoc, 1 / 0), e.nanLoc !== null && n.gl.uniform1f(e.nanLoc, NaN), t.forEach((l, c) => {
    const u = e.program.variableNames[c], h = e.uniformLocations[u], d = e.uniformLocations[`offset${u}`], p = e.inShapesLocations[`${u}Shape`], f = e.inTexShapesLocations[`${u}TexShape`];
    if (p) {
      const { uniformShape: m } = Fg(e.program.packedInputs, l.shape, l.texData.texShape);
      switch (m.length) {
        case 1:
          n.gl.uniform1iv(p, new Int32Array(m));
          break;
        case 2:
          n.gl.uniform2iv(p, new Int32Array(m));
          break;
        case 3:
          n.gl.uniform3iv(p, new Int32Array(m));
          break;
        case 4:
          n.gl.uniform4iv(p, new Int32Array(m));
          break;
      }
    }
    if (f && n.gl.uniform2i(f, l.texData.texShape[0], l.texData.texShape[1]), h != null) {
      if (l.isUniform) {
        if (Z(l.shape) < 2)
          n.gl.uniform1f(h, l.uniformValues[0]);
        else {
          let m = l.uniformValues;
          m instanceof Float32Array || (m = new Float32Array(m)), n.gl.uniform1fv(h, m);
        }
        return;
      }
      l.texData.slice != null && d != null && n.gl.uniform1i(d, l.texData.slice.flatOffset), n.setInputMatrixTexture(l.texData.texture.texture, h, c);
    }
  });
  const i = e.outShapeLocation;
  if (i)
    switch (s.shape.length) {
      case 1:
        n.gl.uniform1iv(i, new Int32Array(s.shape));
        break;
      case 2:
        n.gl.uniform2iv(i, new Int32Array(s.shape));
        break;
      case 3:
        n.gl.uniform3iv(i, new Int32Array(s.shape));
        break;
      case 4:
        n.gl.uniform4iv(i, new Int32Array(s.shape));
        break;
    }
  if (e.outShapeStridesLocation) {
    const l = ke(s.shape);
    switch (s.shape.length) {
      case 2:
        n.gl.uniform1iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        n.gl.uniform2iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        n.gl.uniform3iv(e.outShapeStridesLocation, new Int32Array(l));
        break;
    }
  }
  e.outTexShapeLocation && n.gl.uniform2i(e.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), e.program.customUniforms && r && e.program.customUniforms.forEach((l, c) => {
    const u = e.customUniformLocations[c], h = r[c];
    if (l.type === "float")
      n.gl.uniform1fv(u, h);
    else if (l.type === "vec2")
      n.gl.uniform2fv(u, h);
    else if (l.type === "vec3")
      n.gl.uniform3fv(u, h);
    else if (l.type === "vec4")
      n.gl.uniform4fv(u, h);
    else if (l.type === "int")
      n.gl.uniform1iv(u, h);
    else if (l.type === "ivec2")
      n.gl.uniform2iv(u, h);
    else if (l.type === "ivec3")
      n.gl.uniform3iv(u, h);
    else if (l.type === "ivec4")
      n.gl.uniform4iv(u, h);
    else
      throw Error(`uniform type ${l.type} is not supported yet.`);
  }), n.executeProgram();
}
function JM(n, e, t) {
  let s = "";
  e.concat(t).forEach((a) => {
    const i = a.texData != null && a.texData.slice != null && a.texData.slice.flatOffset > 0;
    if (n.enableShapeUniforms && !a.isUniform) {
      const l = a.texData.texShape, { useSqueezeShape: c, uniformShape: u, keptDims: h } = Fg(n.packedInputs, a.shape, l);
      let d = "", p = "", f = "";
      if (u.length === 1 && n.packedInputs) {
        const v = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        d = `${v[0] > 1}_${v[1] > 1}`;
      } else if (u.length === 2 && !n.packedInputs)
        p = `${u[0] > 1}_${u[1] > 1}`;
      else if (u.length > 2 && !n.packedInputs) {
        const v = ke(u);
        f = `${v[0] === l[1]}_${v[v.length - 1] === l[1]}`;
      }
      const m = a.shape.length, g = u.length === 2 && He(a.shape, l), y = Z(a.shape) === 1, b = Qo(a.shape, t.shape), w = !n.packedInputs && m === t.shape.length && He(l, t.texData.texShape), x = n.packedInputs || u.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      s += `${m}_${w}_${c ? h : ""}_${u.length}_${y}_${b}_${g}_${d}_${p}_${f}_${x}_${i}`;
    } else {
      const l = a.isUniform ? "uniform" : a.texData.texShape;
      s += `${a.shape}_${l}_${i}`;
    }
  });
  const r = n.userCode;
  let o = n.constructor.name;
  return o += "_" + s + "_" + r + `${K().getNumber("WEBGL_VERSION")}`, o;
}
function mn(n) {
  return K().getBool("WEBGL_USE_SHAPES_UNIFORMS") && n <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class QM {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = Qa.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const t = fn();
    this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Rh(["r", "c", "d"], e) : Io(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eB {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = Qa.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const t = fn();
    this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Rh(["r", "c", "d"], e) : Io(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tB {
  constructor(e) {
    this.variableNames = ["A"], this.outTexUsage = Un.DOWNLOAD;
    const t = fn();
    this.outputShape = e, this.userCode = `
      ${jv}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nB {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = Un.DOWNLOAD;
    const t = fn();
    this.outputShape = e, this.userCode = `
      ${jv}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sB {
  constructor(e, t = !1) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = fn();
    this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length);
    let r = "result";
    t && (r = "floor(result * 255. + 0.5)"), this.userCode = `
      ${this.enableShapeUniforms ? Rg() : Ag(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${s.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${s.output} = vec4(${r}, 0., 0., 0.);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rB {
  constructor(e, t = !1) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = fn();
    this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length);
    let r = "", o = "result";
    t && (o = "floor(result * 255. + 0.5)");
    for (let a = 0; a <= 1; a++)
      for (let i = 0; i <= 1; i++) {
        const l = a * 2 + i;
        r += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${a} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${a};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? Rg() : Ag(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${s.output} = ${o};
        }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oB(n) {
  const e = fn(), t = `${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return Wz(n, t);
}
function aB(n) {
  const e = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return qz(n, e);
}
function iB(n) {
  const e = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return Kz(n, e);
}
function Tl(n, e, t, s, r, o) {
  Yz(e, t);
  const a = Xz(n), i = n.TEXTURE_2D;
  return ve(n, () => n.bindTexture(i, a)), ve(n, () => n.texParameteri(i, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)), ve(n, () => n.texParameteri(i, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)), ve(n, () => n.texParameteri(i, n.TEXTURE_MIN_FILTER, n.NEAREST)), ve(n, () => n.texParameteri(i, n.TEXTURE_MAG_FILTER, n.NEAREST)), K().getNumber("WEBGL_VERSION") === 1 ? ve(n, () => n.texImage2D(i, 0, s, e, t, 0, r, o, null)) : ve(n, () => n.texStorage2D(i, 1, s, e, t)), ve(n, () => n.bindTexture(n.TEXTURE_2D, null)), { texture: a, texShape: [t, e] };
}
function Zv(n) {
  return n.internalFormatFloat;
}
function lB(n, e, t, s) {
  const [r, o] = Nl(e, t);
  return Tl(n, r, o, Zv(s), s.textureFormatFloat, n.FLOAT);
}
function Jv(n) {
  return n.internalFormatHalfFloat;
}
function cB(n, e, t, s) {
  const [r, o] = Nl(e, t);
  return Tl(n, r, o, Jv(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function Qv(n) {
  return n.downloadTextureFormat;
}
function uB(n, e, t, s) {
  const [r, o] = Nl(e, t);
  return Tl(n, r, o, Qv(s), n.RGBA, n.UNSIGNED_BYTE);
}
function eI(n) {
  return n.internalFormatPackedFloat;
}
function hB(n, e, t, s) {
  const [r, o] = $a(e, t);
  return Tl(n, r, o, eI(s), n.RGBA, n.FLOAT);
}
function tI(n) {
  return n.internalFormatPackedHalfFloat;
}
function dB(n, e, t, s) {
  const [r, o] = $a(e, t);
  return Tl(n, r, o, tI(s), n.RGBA, s.textureTypeHalfFloat);
}
function pB(n, e, t) {
  return ve(n, () => n.bindBuffer(n.ARRAY_BUFFER, t)), ry(n, e, "clipSpacePos", t, 3, 20, 0) && ry(n, e, "uv", t, 2, 20, 12);
}
function fB(n, e, t, s, r, o) {
  ve(n, () => n.bindTexture(n.TEXTURE_2D, e));
  let a, i, l;
  r instanceof Uint8Array ? (a = new Uint8Array(t * s * 4), i = n.UNSIGNED_BYTE, l = n.RGBA) : (a = new Float32Array(t * s * 4), i = n.FLOAT, l = o.internalFormatPackedFloat), a.set(r), K().getNumber("WEBGL_VERSION") === 2 ? ve(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, t, s, n.RGBA, i, a)) : ve(n, () => n.texImage2D(n.TEXTURE_2D, 0, l, t, s, 0, n.RGBA, i, a)), ve(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function mB(n, e, t) {
  ve(n, () => n.bindTexture(n.TEXTURE_2D, e)), t.data instanceof Uint8Array ? K().getNumber("WEBGL_VERSION") === 2 ? ve(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, t.width, t.height, n.RGBA, n.UNSIGNED_BYTE, t.data)) : ve(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, t.width, t.height, 0, n.RGBA, n.UNSIGNED_BYTE, t.data)) : K().getNumber("WEBGL_VERSION") === 2 ? ve(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, n.RGBA, n.UNSIGNED_BYTE, t)) : ve(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, t)), ve(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function gB(n, e, t, s) {
  const r = n.createBuffer();
  ve(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, r));
  const i = 4 * 4 * e * t;
  return ve(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, i, n.STREAM_READ)), ve(n, () => n.readPixels(0, 0, t, e, n.RGBA, n.FLOAT, 0)), ve(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)), r;
}
function yB(n, e, t) {
  const s = n, r = new Float32Array(t);
  return s.bindBuffer(s.PIXEL_PACK_BUFFER, e), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, r), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), r;
}
function bB(n, e, t, s) {
  const [r, o] = Nl(e, t), a = 4, i = new Uint8Array(Oz(e * t, a));
  return ve(n, () => n.readPixels(0, 0, r, o, s.downloadTextureFormat, n.UNSIGNED_BYTE, i)), new Float32Array(i.buffer);
}
function xB(n, e, t, s, r, o, a, i) {
  const l = n, c = new Float32Array(Lz(o, a));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, e), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), c;
}
function wB(n, e, t) {
  const s = new Float32Array(e * t * 4);
  return ve(n, () => n.readPixels(0, 0, t, e, n.RGBA, n.FLOAT, s)), s;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ad {
  constructor(e) {
    this.outputTexture = null, this.program = null, this.disposed = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [];
    const t = K().getNumber("WEBGL_VERSION");
    e != null ? (this.gl = e, Rz(t, e)) : this.gl = As(t);
    let s = "WEBGL_color_buffer_float";
    const r = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), K().getNumber("WEBGL_VERSION") === 1) {
      const o = "OES_texture_float", a = "OES_texture_half_float";
      if (this.textureFloatExtension = Ul(this.gl, o), cs(this.gl, a))
        this.textureHalfFloatExtension = Ul(this.gl, a);
      else if (K().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(s), cs(this.gl, r))
        this.colorBufferHalfFloatExtension = Ul(this.gl, r);
      else if (K().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (s = "EXT_color_buffer_float", cs(this.gl, s))
      this.colorBufferFloatExtension = this.gl.getExtension(s);
    else if (cs(this.gl, r))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(r);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = aB(this.gl), this.indexBuffer = iB(this.gl), this.framebuffer = Zz(this.gl), this.textureConfig = Dg(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return K().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const e = this.gl;
    ve(e, () => e.finish()), ve(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), ve(e, () => e.deleteFramebuffer(this.framebuffer)), ve(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), ve(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), ve(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = !0;
  }
  createFloat32MatrixTexture(e, t) {
    return this.throwIfDisposed(), lB(this.gl, e, t, this.textureConfig);
  }
  createFloat16MatrixTexture(e, t) {
    return this.throwIfDisposed(), cB(this.gl, e, t, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(e, t) {
    return this.throwIfDisposed(), uB(this.gl, e, t, this.textureConfig);
  }
  uploadPixelDataToTexture(e, t) {
    this.throwIfDisposed(), mB(this.gl, e, t);
  }
  uploadDenseMatrixToTexture(e, t, s, r) {
    this.throwIfDisposed(), fB(this.gl, e, t, s, r, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), dB(this.gl, e, t, this.textureConfig);
  }
  createPackedMatrixTexture(e, t) {
    return this.throwIfDisposed(), hB(this.gl, e, t, this.textureConfig);
  }
  deleteMatrixTexture(e) {
    this.throwIfDisposed(), this.outputTexture === e && (oy(this.gl, this.framebuffer), this.outputTexture = null), ve(this.gl, () => this.gl.deleteTexture(e));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(e, t, s) {
    return this.downloadMatrixDriver(e, () => bB(this.gl, t, s, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(e, t, s, r, o, a) {
    return xB(this.gl, e, t, s, r, o, a, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(e, t) {
    return yB(this.gl, e, t);
  }
  createBufferFromTexture(e, t, s) {
    this.bindTextureToFrameBuffer(e);
    const r = gB(this.gl, t, s, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), r;
  }
  createAndWaitForFence() {
    const e = this.createFence(this.gl);
    return this.pollFence(e);
  }
  createFence(e) {
    let t, s;
    if (K().getBool("WEBGL_FENCE_API_ENABLED")) {
      const r = e, o = r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE, 0);
      e.flush(), s = () => {
        const a = r.clientWaitSync(o, 0, 0);
        return a === r.ALREADY_SIGNALED || a === r.CONDITION_SATISFIED;
      }, t = o;
    } else K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), s = () => this.isQueryAvailable(t, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : s = () => !0;
    return { query: t, isFencePassed: s };
  }
  downloadMatrixFromPackedTexture(e, t, s) {
    return this.downloadMatrixDriver(e, () => wB(this.gl, t, s));
  }
  createProgram(e) {
    this.throwIfDisposed();
    const t = this.gl;
    this.vertexShader == null && (this.vertexShader = oB(t));
    const s = Hz(t);
    return ve(t, () => t.attachShader(s, this.vertexShader)), ve(t, () => t.attachShader(s, e)), jz(t, s), this.debug && td(t, s), this.vertexAttrsAreBound || (this.setProgram(s), this.vertexAttrsAreBound = pB(t, this.program, this.vertexBuffer)), s;
  }
  deleteProgram(e) {
    this.throwIfDisposed(), e === this.program && (this.program = null), e != null && ve(this.gl, () => this.gl.deleteProgram(e));
  }
  setProgram(e) {
    this.throwIfDisposed(), this.program = e, this.program != null && this.debug && td(this.gl, this.program), ve(this.gl, () => this.gl.useProgram(e));
  }
  getUniformLocation(e, t, s = !0) {
    return this.throwIfDisposed(), s ? Qz(this.gl, e, t) : eM(this.gl, e, t);
  }
  getAttributeLocation(e, t) {
    return this.throwIfDisposed(), ve(this.gl, () => this.gl.getAttribLocation(e, t));
  }
  getUniformLocationNoThrow(e, t) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
  }
  setInputMatrixTexture(e, t, s) {
    this.throwIfDisposed(), this.throwIfNoProgram(), tM(this.gl, e, t, s);
  }
  setOutputMatrixTexture(e, t, s) {
    this.setOutputMatrixTextureDriver(e, s, t);
  }
  setOutputPackedMatrixTexture(e, t, s) {
    this.throwIfDisposed();
    const [r, o] = $a(t, s);
    this.setOutputMatrixTextureDriver(e, r, o);
  }
  setOutputMatrixWriteRegion(e, t, s, r) {
    this.setOutputMatrixWriteRegionDriver(s, e, r, t);
  }
  setOutputPackedMatrixWriteRegion(e, t, s, r) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && td(this.gl, this.program), Gl(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const e = this.gl;
    this.debug && this.debugValidate(), ve(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), ve(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Ul(this.gl, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.createQuery();
      return s.beginQuery(r.TIME_ELAPSED_EXT, o), o;
    }
    const e = this.getQueryTimerExtensionWebGL1(), t = e.createQueryEXT();
    return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t), t;
  }
  endQuery() {
    if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const t = this.gl, s = this.getQueryTimerExtensionWebGL2();
      t.endQuery(s.TIME_ELAPSED_EXT);
      return;
    }
    const e = this.getQueryTimerExtensionWebGL1();
    e.endQueryEXT(e.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(e) {
    return await Kg(() => this.disposed || // while testing contexts are created / disposed
    // in rapid succession, so without this check we
    // may poll for the query timer indefinitely
    this.isQueryAvailable(e, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(e, t) {
    if (t === 0)
      return null;
    if (t === 2) {
      const s = this.gl;
      return s.getQueryParameter(e, s.QUERY_RESULT) / 1e6;
    } else {
      const s = this.getQueryTimerExtensionWebGL1();
      return s.getQueryObjectEXT(e, s.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(e, t) {
    if (t === 0)
      return !0;
    if (t === 2) {
      const s = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = s.getQueryParameter(e, s.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;
    } else {
      const s = this.getQueryTimerExtensionWebGL1(), r = s.getQueryObjectEXT(e, s.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), r && !this.disjoint;
    }
  }
  pollFence(e) {
    return new Promise((t) => {
      this.addItemToPoll(() => e.isFencePassed(), () => t());
    });
  }
  pollItems() {
    const e = vB(this.itemsToPoll.map((t) => t.isDoneFn));
    for (let t = 0; t <= e; ++t) {
      const { resolveFn: s } = this.itemsToPoll[t];
      s();
    }
    this.itemsToPoll = this.itemsToPoll.slice(e + 1);
  }
  addItemToPoll(e, t) {
    if (this.itemsToPoll.push({ isDoneFn: e, resolveFn: t }), this.itemsToPoll.length > 1)
      return;
    let s;
    "setTimeoutCustom" in K().platform && (s = K().platform.setTimeoutCustom.bind(K().platform)), Kg(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, s);
  }
  bindTextureToFrameBuffer(e) {
    this.throwIfDisposed(), nd(this.gl, e, this.framebuffer), this.debug && Gl(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (nd(this.gl, this.outputTexture, this.framebuffer), this.debug && Gl(this.gl)) : oy(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(e, t) {
    this.bindTextureToFrameBuffer(e);
    const s = t();
    return this.unbindTextureToFrameBuffer(), s;
  }
  setOutputMatrixTextureDriver(e, t, s) {
    this.throwIfDisposed();
    const r = this.gl;
    nd(r, e, this.framebuffer), this.debug && Gl(r), this.outputTexture = e, ve(r, () => r.viewport(0, 0, t, s)), ve(r, () => r.scissor(0, 0, t, s));
  }
  setOutputMatrixWriteRegionDriver(e, t, s, r) {
    this.throwIfDisposed(), ve(this.gl, () => this.gl.scissor(e, t, s, r));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
}
function vB(n) {
  let e = 0;
  for (; e < n.length && n[e](); ++e)
    ;
  return e - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { addImpl: IB, bincountImpl: nI, bincountReduceImpl: $B, castImpl: CB, ceilImpl: SB, concatImpl: NB, equalImpl: kB, expImpl: TB, expm1Impl: EB, floorImpl: DB, gatherNdImpl: AB, gatherV2Impl: RB, greaterImpl: FB, greaterEqualImpl: _B, lessImpl: OB, lessEqualImpl: LB, linSpaceImpl: PB, logImpl: zB, maxImpl: MB, maximumImpl: BB, minimumImpl: VB, multiplyImpl: WB, negImpl: UB, notEqualImpl: GB, prodImpl: HB, raggedGatherImpl: jB, raggedTensorToTensorImpl: qB, rangeImpl: KB, rsqrtImpl: XB, scatterImpl: YB, sigmoidImpl: ZB, simpleAbsImpl: sI, sliceImpl: JB, sparseFillEmptyRowsImpl: QB, sparseReshapeImpl: e8, sparseSegmentReductionImpl: rI, sqrtImpl: t8, stridedSliceImpl: n8, stringNGramsImpl: s8, stringSplitImpl: r8, stringToHashBucketFastImpl: o8, subImpl: a8, tileImpl: i8, topKImpl: l8, transposeImpl: _g, uniqueImpl: c8 } = bL;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oI(n, e) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e).map((t) => `${n}.${t}`);
}
function hn(n, e) {
  return e === 1 ? [n] : oI(n, e);
}
function u8(n, e) {
  if (n === 1)
    return "rc";
  let t = "";
  for (let s = 0; s < n; s++)
    t += e[s], s < n - 1 && (t += ",");
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class h8 {
  constructor(e) {
    if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = e, this.rank = e.length, this.enableShapeUniforms = mn(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const t = hn("rc", this.rank), s = ut(this.rank), r = this.getOutOfBoundsCondition(t), o = this.getSetup(t), a = this.getOutput(t);
      this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${r}) {
            setOutput(vec4(0));
          } else {
            ${o}

            setOutput(vec4(${a}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(e) {
    const t = [];
    for (let s = 0; s <= 1; s++)
      for (let r = 0; r <= 1; r++) {
        let o = `${s === 0 ? "r" : "rp1"}, ${r === 0 ? "c" : "cp1"}`;
        for (let a = 2; a < this.rank; a++)
          o = `${e[e.length - 1 - a]},` + o;
        t.push(o);
      }
    return t;
  }
  getOutOfBoundsCondition(e) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let t = "";
    for (let s = this.rank - 2; s < this.rank; s++)
      t += `${e[s]} >= ${this.enableShapeUniforms ? `outShape[${s}]` : this.outputShape[s]}`, s < this.rank - 1 && (t += "||");
    return t;
  }
  getSetup(e) {
    if (this.rank === 1)
      return "";
    const t = e.slice(-2), s = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], r = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${r};
    `;
  }
  getOutput(e) {
    const t = this.getSourceCoordsArr(e);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class aI {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length);
    let s = "";
    for (let r = 0; r < 4; r++) {
      let o = "thisRC = rc;";
      r % 2 === 1 && (o += "thisRC.z += 1;"), r > 1 && (o += "thisRC.y += 1;"), s += `
        ${o}
        ${r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${r}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${r > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${d8(t, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? Rg() : Ag(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${s}

        setOutput(result);
      }
    `;
  }
}
function d8(n, e) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e ? pM(["r", "c", "d"], "inputShape") : Io(["r", "c", "d"], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class p8 {
  constructor(e) {
    this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};
  }
  acquireTexture(e, t, s) {
    const r = cy(t, s), o = uy(e, r, s);
    o in this.freeTextures || (this.freeTextures[o] = []), o in this.usedTextures || (this.usedTextures[o] = []);
    const a = ly(e, r, this.gpgpu.gl, this.gpgpu.textureConfig, s);
    if (this.freeTextures[o].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= a, this.log();
      const l = this.freeTextures[o].shift();
      return this.usedTextures[o].push(l), l;
    }
    let i;
    return r === Xt.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : r === Xt.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : r === Xt.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : r === Xt.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : r === Xt.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[o].push(i), this.numUsedTextures++, this._numBytesAllocated += a, this.log(), i;
  }
  releaseTexture(e, t, s, r) {
    if (this.freeTextures == null)
      return;
    const o = cy(s, r), a = uy(t, o, r);
    a in this.freeTextures || (this.freeTextures[a] = []);
    const i = ly(t, o, this.gpgpu.gl, this.gpgpu.textureConfig, r), l = K().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(e.texture), this._numBytesAllocated -= i) : (this.freeTextures[a].push(e), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    const c = this.usedTextures[a], u = c.indexOf(e);
    if (u < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    c.splice(u, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    const e = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`);
    const t = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const e in this.freeTextures)
        this.freeTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t.texture);
        });
      for (const e in this.usedTextures)
        this.usedTextures[e].forEach((t) => {
          this.gpgpu.deleteMatrixTexture(t.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
}
function f8(n, e) {
  const t = n;
  if (e === t.R32F)
    return 4;
  if (e === t.R16F)
    return 2;
  if (e === t.RGBA32F)
    return 16;
  if (e === n.RGBA)
    return 16;
  if (e === t.RGBA16F)
    return 8;
  if (e === t.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${e}`);
}
function ly(n, e, t, s, r) {
  const o = m8(e, s);
  let a;
  if (r) {
    const [l, c] = $a(n[0], n[1]);
    a = l * c;
  } else {
    const [l, c] = Nl(n[0], n[1]);
    a = l * c;
  }
  const i = f8(t, o);
  return a * i;
}
function m8(n, e) {
  switch (n) {
    case Xt.PACKED_2X2_FLOAT32:
      return eI(e);
    case Xt.PACKED_2X2_FLOAT16:
      return tI(e);
    case Xt.UNPACKED_FLOAT32:
      return Zv(e);
    case Xt.UNPACKED_FLOAT16:
      return Jv(e);
    case Xt.PACKED_4X1_UNSIGNED_BYTE:
      return Qv(e);
    default:
      throw new Error(`Unknown physical texture type ${n}`);
  }
}
function g8(n) {
  return K().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? n ? Xt.PACKED_2X2_FLOAT32 : Xt.UNPACKED_FLOAT32 : n ? Xt.PACKED_2X2_FLOAT16 : Xt.UNPACKED_FLOAT16;
}
function cy(n, e) {
  if (n === Un.UPLOAD)
    return Xt.PACKED_2X2_FLOAT32;
  if (n === Un.RENDER || n == null)
    return g8(e);
  if (n === Un.DOWNLOAD || n === Un.PIXELS)
    return Xt.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${n}`);
}
function uy(n, e, t) {
  return `${n[0]}_${n[1]}_${e}_${t}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Js {
  constructor(e, t) {
    this.variableNames = ["A"], this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const ms = "if (isnan(x)) return x;", y8 = "return x;", hy = "return abs(x);", b8 = "return (x >= 0.0) ? x : (exp(x) - 1.0);", x8 = ms + `
  return (x < 0.0) ? 0.0 : x;
`, w8 = ms + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, Do = "return x;", v8 = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const I8 = "return x;", $8 = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, C8 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, S8 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, N8 = "return 1.0 / (1.0 + exp(-1.0 * x));";
class to {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class k8 {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length);
    const t = e.length, s = hn("rc", t), r = ut(t), o = u8(t, s), a = s.slice(-2), i = t <= 1 ? "rc" : `vec2(${a.join(",")})`;
    this.userCode = `
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${o});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const T8 = xm, E8 = 1e-7, D8 = 1e-4, jl = {};
function A8(n) {
  return n in jl || (jl[n] = {}), jl[n];
}
const R8 = K().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), F8 = 600;
function _8() {
  return K().global.screen == null ? 1024 : K().global.screen.height * K().global.screen.width * window.devicePixelRatio * F8 / 1024 / 1024;
}
class Fh extends bp {
  constructor(e) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !K().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let t;
    if (e != null) {
      if (e instanceof ad)
        t = e;
      else {
        const s = As(K().getNumber("WEBGL_VERSION"), e);
        t = new ad(s);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = !1;
    } else {
      const s = As(K().getNumber("WEBGL_VERSION"));
      t = new ad(s), this.binaryCache = A8(K().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = !0;
    }
    this.gpgpu = t, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new p8(this.gpgpu), this.numMBBeforeWarning = _8(), this.texData = new Hy(this, fr());
  }
  nextDataId() {
    return Fh.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  write(e, t, s) {
    if ((K().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || K().getBool("DEBUG")) && this.checkNumericalProblems(e), s === "complex64" && e != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const r = { id: this.nextDataId() };
    return this.texData.set(r, { shape: t, dtype: s, values: e, usage: Un.UPLOAD, refCount: 1 }), r;
  }
  /** Return refCount of a `TensorData`. */
  refCount(e) {
    return this.texData.has(e) ? this.texData.get(e).refCount : 0;
  }
  /** Increase refCount of a `TextureData`. */
  incRef(e) {
    const t = this.texData.get(e);
    t.refCount++;
  }
  /** Decrease refCount of a `TextureData`. */
  decRef(e) {
    if (this.texData.has(e)) {
      const t = this.texData.get(e);
      t.refCount--;
    }
  }
  move(e, t, s, r, o) {
    if (K().getBool("DEBUG") && this.checkNumericalProblems(t), r === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(e, { shape: s, dtype: r, values: t, usage: Un.UPLOAD, refCount: o });
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  readSync(e) {
    const t = this.texData.get(e), { values: s, dtype: r, complexTensorInfos: o, slice: a, shape: i, isPacked: l } = t;
    if (a != null) {
      let d;
      l ? d = new to(i, Do) : d = new Js(i, Do);
      const p = this.runWebGLProgram(d, [{ dataId: e, shape: i, dtype: r }], r), f = this.readSync(p.dataId);
      return this.disposeIntermediateTensorInfo(p), f;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(e);
    if (r === "string")
      return s;
    const c = this.activeTimers != null;
    let u;
    c && (u = bn());
    let h;
    if (r === "complex64") {
      const d = this.readSync(o.real.dataId), p = this.readSync(o.imag.dataId);
      h = ar(d, p);
    } else
      h = this.getValuesFromTexture(e);
    return c && (this.downloadWaitMs += bn() - u), this.convertAndCacheOnCPU(e, h);
  }
  async read(e) {
    if (this.pendingRead.has(e)) {
      const f = this.pendingRead.get(e);
      return new Promise((m) => f.push(m));
    }
    const t = this.texData.get(e), { values: s, shape: r, slice: o, dtype: a, complexTensorInfos: i, isPacked: l } = t;
    if (o != null) {
      let f;
      l ? f = new to(r, Do) : f = new Js(r, Do);
      const m = this.runWebGLProgram(f, [{ dataId: e, shape: r, dtype: a }], a), g = this.read(m.dataId);
      return this.disposeIntermediateTensorInfo(m), g;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(e);
    if (K().getBool("DEBUG") && !K().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && K().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let c = null, u;
    if (a !== "complex64" && K().get("WEBGL_BUFFER_SUPPORTED")) {
      u = this.decode(e);
      const f = this.texData.get(u.dataId);
      c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...Wl(r));
    }
    this.pendingRead.set(e, []), a !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let h;
    if (a === "complex64") {
      const f = await Promise.all([
        this.read(i.real.dataId),
        this.read(i.imag.dataId)
      ]), m = f[0], g = f[1];
      h = ar(m, g);
    } else if (c == null)
      h = this.getValuesFromTexture(e);
    else {
      const f = Z(r);
      h = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
    }
    if (u != null && this.disposeIntermediateTensorInfo(u), c != null) {
      const f = this.gpgpu.gl;
      ve(f, () => f.deleteBuffer(c));
    }
    const d = this.convertAndCacheOnCPU(e, h), p = this.pendingRead.get(e);
    return this.pendingRead.delete(e), p.forEach((f) => f(d)), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e) && fr().removeDataId(e, this), this.pendingDeletes--), d;
  }
  /**
   * Read tensor to a new texture that is densely packed for ease of use.
   * @param dataId The source tensor.
   * @param options
   *     customTexShape: Optional. If set, will use the user defined texture
   *     shape to create the texture.
   */
  readToGPU(e, t = {}) {
    const s = this.texData.get(e), { values: r, shape: o, slice: a, dtype: i, isPacked: l, texture: c } = s;
    if (i === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (a != null) {
      let p;
      l ? p = new to(o, Do) : p = new Js(o, Do);
      const f = this.runWebGLProgram(p, [{ dataId: e, shape: o, dtype: i }], i), m = this.readToGPU(f, t);
      return this.disposeIntermediateTensorInfo(f), m;
    }
    if (c == null)
      throw r != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const u = this.decode(e, t.customTexShape), h = fr().makeTensorFromTensorInfo(u), d = this.texData.get(u.dataId);
    return Object.assign({ tensorRef: h }, d.texture);
  }
  bufferSync(e) {
    const t = this.readSync(e.dataId);
    if (e.dtype === "string")
      try {
        const s = t.map((r) => vr(r));
        return Le(e.shape, e.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Le(e.shape, e.dtype, t);
  }
  checkNumericalProblems(e) {
    if (e != null)
      for (let t = 0; t < e.length; t++) {
        const s = e[t];
        if (!Bz(s))
          throw K().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${s} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(e) {
    const { shape: t, dtype: s, isPacked: r } = this.texData.get(e), o = Z(t);
    if (K().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const d = this.decode(e), p = this.texData.get(d.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(p.texture.texture, ...Wl(t)).subarray(0, o);
      return this.disposeIntermediateTensorInfo(d), f;
    }
    const a = K().getBool("WEBGL_PACK") && r === !0, i = a ? sd(t) : t, l = a ? new nB(i) : new tB(i), c = this.runWebGLProgram(l, [{ shape: i, dtype: s, dataId: e }], "float32"), u = this.texData.get(c.dataId), h = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture, u.texShape[0], u.texShape[1]).subarray(0, o);
    return this.disposeIntermediateTensorInfo(c), h;
  }
  timerAvailable() {
    return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(e) {
    const t = this.activeTimers, s = [];
    let r = !1;
    this.programTimersStack == null ? (this.programTimersStack = s, r = !0) : this.activeTimers.push(s), this.activeTimers = s, e();
    const o = Ko(this.activeTimers.map((l) => l.query)).filter((l) => l != null), a = Ko(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = t, r && (this.programTimersStack = null);
    const i = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null
      // will be filled by the engine
    };
    return (async () => {
      if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const l = await Promise.all(o);
        i.kernelMs = H$(l), i.getExtraProfileInfo = () => l.map((c, u) => ({ name: a[u], ms: c })).map((c) => `${c.name}: ${c.ms}`).join(", ");
      } else
        i.kernelMs = {
          error: "WebGL query timers are not supported in this environment."
        };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
    })();
  }
  memory() {
    return {
      unreliable: !1,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }
  startTimer() {
    return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: bn(), endMs: null };
  }
  endTimer(e) {
    return K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = bn(), e);
  }
  async getQueryTime(e) {
    if (K().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(e);
    const t = e;
    return t.endMs - t.startMs;
  }
  /**
   * Decrease the RefCount on the dataId and dispose the memory if the dataId
   * has 0 refCount. If there are pending read on the data, the disposal would
   * added to the pending delete queue. Return true if the dataId is removed
   * from backend or the backend does not contain the dataId, false if the
   * dataId is not removed. Memory may or may not be released even when dataId
   * is removed, which also depends on dataRefCount, see `releaseGPU`.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(e, t = !1) {
    if (this.pendingDisposal.has(e))
      return !1;
    if (!this.texData.has(e))
      return !0;
    if (t ? this.texData.get(e).refCount = 0 : this.texData.get(e).refCount--, !t && this.texData.get(e).refCount > 0)
      return !1;
    if (this.pendingRead.has(e))
      return this.pendingDisposal.add(e), this.pendingDeletes++, !1;
    this.releaseGPUData(e);
    const { complexTensorInfos: s } = this.texData.get(e);
    return s != null && (this.disposeData(s.real.dataId, t), this.disposeData(s.imag.dataId, t)), this.texData.delete(e), !0;
  }
  releaseGPUData(e) {
    const { texture: t, dtype: s, texShape: r, usage: o, isPacked: a, slice: i } = this.texData.get(e), l = i && i.origDataId || e, c = this.dataRefCount.get(l);
    c > 1 ? this.dataRefCount.set(l, c - 1) : (this.dataRefCount.delete(l), t != null && (this.numBytesInGPU -= this.computeBytes(r, s), this.textureManager.releaseTexture(t, r, o, a)));
    const u = this.texData.get(e);
    u.texture = null, u.texShape = null, u.isPacked = !1, u.slice = null;
  }
  getTexture(e) {
    return this.uploadToGPU(e), this.texData.get(e).texture.texture;
  }
  /**
   * Returns internal information for the specific data bucket. Used in unit
   * tests.
   */
  getDataInfo(e) {
    return this.texData.get(e);
  }
  /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */
  shouldExecuteOnCPU(e, t = R8) {
    return K().getBool("WEBGL_CPU_FORWARD") && e.every((s) => this.texData.get(s.dataId).texture == null && Z(s.shape) < t);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(e) {
    Vn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const t = e.dataSync();
    return T8(e.shape, t);
  }
  packedUnaryOp(e, t, s) {
    const r = new to(e.shape, t), o = this.compileAndRun(r, [e], s);
    return fr().makeTensorFromTensorInfo(o);
  }
  // TODO(msoulanille) remove this once the backend has been modularized
  // a copy is needed here to break a circular dependency.
  // Also remove the op from unary_op.
  abs(e) {
    if (this.shouldExecuteOnCPU([e]) && e.dtype !== "complex64") {
      const r = sI(this.texData.get(e.dataId).values);
      return this.makeOutput(e.shape, e.dtype, r);
    }
    if (K().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(e, hy, e.dtype);
    const t = new Js(e.shape, hy), s = this.compileAndRun(t, [e]);
    return fr().makeTensorFromTensorInfo(s);
  }
  makeTensorInfo(e, t, s) {
    let r;
    if (t === "string" && s != null && s.length > 0 && oi(s[0])) {
      const o = s.map((a) => br(a));
      r = this.write(o, e, t);
    } else
      r = this.write(s, e, t);
    return this.texData.get(r).usage = null, { dataId: r, shape: e, dtype: t };
  }
  makeOutput(e, t, s) {
    return fr().makeTensorFromTensorInfo(this.makeTensorInfo(e, t, s), this);
  }
  unpackTensor(e) {
    const t = new k8(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype);
  }
  packTensor(e) {
    const t = new h8(e.shape);
    return this.runWebGLProgram(t, [e], e.dtype, null, !0);
  }
  packedReshape(e, t) {
    const s = [
      la(e.shape),
      ...ca(e.shape)
    ], r = {
      dtype: e.dtype,
      shape: s,
      dataId: e.dataId
    }, o = [
      la(t),
      ...ca(t)
    ], a = new aI(o, s), i = !0, l = [s], c = this.runWebGLProgram(a, [r], e.dtype, l, i);
    return { dataId: c.dataId, shape: t, dtype: c.dtype };
  }
  decode(e, t) {
    const s = this.texData.get(e), { isPacked: r, shape: o, dtype: a } = s;
    if (t != null) {
      const d = Z(o), p = t[0] * t[1] * 4;
      N(d <= p, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    const i = sd(o);
    let l;
    r ? l = new eB(i) : l = new QM(i);
    const c = !0, u = [t ?? Wl(i)], h = this.runWebGLProgram(l, [{ shape: i, dtype: a, dataId: e }], a, u, c, t);
    return { dtype: a, shape: o, dataId: h.dataId };
  }
  runWebGLProgram(e, t, s, r, o = !1, a) {
    const i = this.makeTensorInfo(e.outputShape, s), l = this.texData.get(i.dataId);
    if (e.packedOutput && (l.isPacked = !0), e.outPackingScheme === Qa.DENSE) {
      const y = a ?? Wl(e.outputShape);
      l.texShape = y.map((b) => b * 2);
    }
    if (e.outTexUsage != null && (l.usage = e.outTexUsage), Z(i.shape) === 0)
      return l.values = Ht(i.dtype, 0), i;
    const c = [], u = t.map((y) => {
      if (y.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let b = this.texData.get(y.dataId);
      if (b.texture == null) {
        if (!e.packedInputs && Z(y.shape) <= K().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return {
            shape: y.shape,
            texData: null,
            isUniform: !0,
            uniformValues: b.values
          };
        e.packedInputs && (b.isPacked = !0, b.shape = y.shape);
      }
      if (this.uploadToGPU(y.dataId), !!b.isPacked != !!e.packedInputs)
        y = b.isPacked ? this.unpackTensor(y) : this.packTensor(y), c.push(y), b = this.texData.get(y.dataId);
      else if (b.isPacked && !_c(b.shape, y.shape)) {
        const w = y, x = y.shape;
        y.shape = b.shape, y = this.packedReshape(y, x), c.push(y), b = this.texData.get(y.dataId), w.shape = x;
      }
      return { shape: y.shape, texData: b, isUniform: !1 };
    });
    this.uploadToGPU(i.dataId);
    const h = { shape: i.shape, texData: l, isUniform: !1 }, d = JM(e, u, h), p = this.getAndSaveBinary(d, () => YM(this.gpgpu, e, u, h)), f = this.activeTimers != null;
    let m;
    f && (m = this.startTimer()), K().get("ENGINE_COMPILE_ONLY") || ZM(this.gpgpu, p, u, h, r), c.forEach((y) => this.disposeIntermediateTensorInfo(y)), f && (m = this.endTimer(m), this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(m) }));
    const g = K().get("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      const y = bn();
      y - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = y);
    }
    if (!K().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && o === !1) {
      const y = this.unpackTensor(i);
      return this.disposeIntermediateTensorInfo(i), y;
    }
    return i;
  }
  compileAndRun(e, t, s, r, o = !1) {
    return s = s || t[0].dtype, this.runWebGLProgram(e, t, s, r, o);
  }
  getAndSaveBinary(e, t) {
    return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (K().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((t) => {
      this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram), delete this.binaryCache[t];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = H(() => {
      if (!K().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const e = K().getBool("DEBUG");
        K().set("DEBUG", !1);
        const t = this.abs(Te(1e-8)).dataSync()[0];
        if (K().set("DEBUG", e), t > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? E8 : D8;
  }
  uploadToGPU(e) {
    const t = this.texData.get(e), { shape: s, dtype: r, values: o, texture: a, usage: i, isPacked: l } = t;
    if (a != null)
      return;
    const c = this.activeTimers != null;
    let u;
    c && (u = bn());
    let h = t.texShape;
    if (h == null && (h = rM(s, l), t.texShape = h), o != null) {
      const d = sd(s);
      let p, f = h[1], m = h[0];
      const g = o instanceof Uint8Array || o instanceof Uint8ClampedArray;
      (l || !g) && ([f, m] = $a(h[0], h[1])), l ? p = new rB(d, g) : p = new sB(d, g);
      const y = g ? [m, f] : h, b = this.makeTensorInfo(y, r), w = this.texData.get(b.dataId);
      g ? w.usage = Un.PIXELS : w.usage = Un.UPLOAD, w.texShape = y, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), f, m, o);
      const x = [[m, f]], $ = this.runWebGLProgram(p, [b], r, x, !0), C = this.texData.get($.dataId);
      t.texShape = C.texShape, t.isPacked = C.isPacked, t.usage = C.usage, K().get("ENGINE_COMPILE_ONLY") ? this.disposeData($.dataId) : (t.texture = C.texture, t.values = null, this.texData.delete($.dataId)), this.disposeIntermediateTensorInfo(b), c && (this.uploadWaitMs += bn() - u);
    } else {
      const d = this.acquireTexture(h, i, r, l);
      t.texture = d;
    }
  }
  convertAndCacheOnCPU(e, t) {
    const s = this.texData.get(e), { dtype: r } = s;
    return this.releaseGPUData(e), t != null && (s.values = O8(t, r)), s.values;
  }
  acquireTexture(e, t, s, r) {
    if (this.numBytesInGPU += this.computeBytes(e, s), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${o} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(e, t, r);
  }
  computeBytes(e, t) {
    return e[0] * e[1] * yd(t);
  }
  checkCompileCompletion() {
    for (const [, e] of Object.entries(this.binaryCache))
      this.checkCompletion_(e);
  }
  async checkCompileCompletionAsync() {
    const e = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, t] of Object.entries(this.binaryCache))
        e.push(this.checkCompletionAsync_(t));
      return Promise.all(e);
    } else {
      for (const [, t] of Object.entries(this.binaryCache)) {
        const s = new Promise((r) => {
          try {
            this.checkCompletion_(t), r(!0);
          } catch (o) {
            throw o;
          }
        });
        e.push(s);
      }
      return Promise.all(e);
    }
  }
  async checkCompletionAsync_(e) {
    return this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(e) : (await tx(), this.checkCompletionAsync_(e));
  }
  checkCompletion_(e) {
    if (this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)), this.gpgpu.gl.getShaderParameter(e.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (Hv(e.source, this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return !0;
  }
  getUniformLocations() {
    for (const [, e] of Object.entries(this.binaryCache)) {
      const { uniformLocations: t, customUniformLocations: s, infLoc: r, nanLoc: o, inShapesLocations: a, inTexShapesLocations: i, outShapeLocation: l, outShapeStridesLocation: c, outTexShapeLocation: u } = Yv(this.gpgpu, e.program, e.webGLProgram);
      e.uniformLocations = t, e.customUniformLocations = s, e.infLoc = r, e.nanLoc = o, e.inShapesLocations = a, e.inTexShapesLocations = i, e.outShapeLocation = l, e.outShapeStridesLocation = c, e.outTexShapeLocation = u;
    }
  }
}
Fh.nextDataId = 0;
function O8(n, e) {
  if (e === "float32" || e === "complex64")
    return n;
  if (e === "int32" || e === "bool") {
    const t = e === "int32" ? new Int32Array(n.length) : new Uint8Array(n.length);
    for (let s = 0; s < t.length; ++s)
      t[s] = Math.round(n[s]);
    return t;
  } else
    throw new Error(`Unknown dtype ${e}`);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
m1() && P1(
  "webgl",
  () => new Fh(),
  2
  /* priority */
);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Og = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class ua {
  constructor(e, t, s) {
    this.variableNames = ["A", "B"], this.outputShape = Fe(t, s), this.enableShapeUniforms = mn(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const El = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class Dl {
  constructor(e, t, s, r = !1) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = Fe(t, s);
    const o = this.outputShape.length;
    this.enableShapeUniforms = mn(o);
    let a = "";
    if (r)
      if (o === 0 || Z(this.outputShape) === 1)
        a = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (a = `
          ${ut(o)} coords = getOutputCoords();
        `, o === 1)
        this.enableShapeUniforms ? a += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : a += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const l = hn("coords", o);
        this.enableShapeUniforms ? a += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= outShape[${o} - 2];
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= outShape[${o} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : a += `
            bool nextRowOutOfBounds =
              (${l[o - 2]} + 1) >= ${this.outputShape[o - 2]};
            bool nextColOutOfBounds =
              (${l[o - 1]} + 1) >= ${this.outputShape[o - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${a}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ln(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  return t.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const L8 = {
  kernelName: ki,
  backendName: "webgl",
  kernelFunc: Ln
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wr(n) {
  const { inputs: e, backend: t } = n, { real: s, imag: r } = e, o = t.makeTensorInfo(s.shape, "complex64"), a = t.texData.get(o.dataId), i = Ln({ inputs: { x: s }, backend: t }), l = Ln({ inputs: { x: r }, backend: t });
  return a.complexTensorInfos = { real: i, imag: l }, o;
}
const P8 = {
  kernelName: Tp,
  backendName: "webgl",
  kernelFunc: Wr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iI = "return (a < 0.) ? b * a : a;", lI = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function z8(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { alpha: o } = s, a = t.makeTensorInfo([], "float32", Fr(o, "float32")), i = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Dl(lI, r.shape, a.shape) : new ua(iI, r.shape, a.shape), l = t.runWebGLProgram(i, [r, a], "float32");
  return t.disposeIntermediateTensorInfo(a), l;
}
const M8 = {
  kernelName: hu,
  backendName: "webgl",
  kernelFunc: z8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cI = "return (a < 0.) ? b * a : a;", uI = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function B8(n) {
  const { inputs: e, backend: t } = n, { x: s, alpha: r } = e, o = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Dl(uI, s.shape, r.shape) : new ua(cI, s.shape, r.shape);
  return t.runWebGLProgram(o, [s, r], "float32");
}
const V8 = {
  kernelName: Du,
  backendName: "webgl",
  kernelFunc: B8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ta = "if (isnan(x)) return x;";
function qe({ opSnippet: n, packedOpSnippet: e, cpuKernelImpl: t, dtype: s }) {
  return ({ inputs: r, backend: o }) => {
    const { x: a } = r, i = o, l = s || a.dtype;
    if (i.shouldExecuteOnCPU([a]) && t != null) {
      const h = i.texData.get(a.dataId), d = t(h.values, l);
      return i.makeTensorInfo(a.shape, l, d);
    }
    const c = K().getBool("WEBGL_PACK_UNARY_OPERATIONS") && e != null;
    let u;
    return c ? u = new to(a.shape, e) : u = new Js(a.shape, n), i.runWebGLProgram(u, [a], l);
  };
}
function tn({ opSnippet: n, packedOpSnippet: e, checkOutOfBounds: t = !1, supportsComplex: s = !1, cpuKernelImpl: r, dtype: o }) {
  return ({ inputs: a, backend: i }) => {
    const { a: l, b: c } = a, u = i;
    if (s && l.dtype === "complex64") {
      const f = u.texData.get(l.dataId), m = u.texData.get(c.dataId), [g, y] = [
        [f.complexTensorInfos.real, m.complexTensorInfos.real],
        [f.complexTensorInfos.imag, m.complexTensorInfos.imag]
      ].map((w) => {
        const [x, v] = w, $ = {
          dataId: x.dataId,
          dtype: x.dtype,
          shape: l.shape
        }, C = {
          dataId: v.dataId,
          dtype: v.dtype,
          shape: c.shape
        }, S = new ua(n, l.shape, c.shape);
        return u.runWebGLProgram(S, [$, C], Rn(x.dtype, v.dtype));
      }), b = Wr({ inputs: { real: g, imag: y }, backend: u });
      return u.disposeIntermediateTensorInfo(g), u.disposeIntermediateTensorInfo(y), b;
    }
    const h = o || Rn(l.dtype, c.dtype);
    if ((l.dtype === "string" || c.dtype === "string" || u.shouldExecuteOnCPU([l, c])) && r != null) {
      const f = u.texData.get(l.dataId).values, m = u.texData.get(c.dataId).values, g = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        co(f)
      ) : f, y = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        co(m)
      ) : m, [b, w] = r(l.shape, c.shape, g, y, h), x = u.makeTensorInfo(w, h), v = u.texData.get(x.dataId);
      return v.values = b, x;
    }
    const d = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") && e != null;
    let p;
    return d ? p = new Dl(e, l.shape, c.shape, t) : p = new ua(n, l.shape, c.shape), u.runWebGLProgram(p, [l, c], h);
  };
}
function ei(n, e = !1) {
  if (n === "linear")
    return e ? I8 : y8;
  if (n === "relu")
    return e ? C8 : x8;
  if (n === "elu")
    return e ? $8 : b8;
  if (n === "relu6")
    return e ? S8 : w8;
  if (n === "prelu")
    return e ? uI : cI;
  if (n === "leakyrelu")
    return e ? lI : iI;
  if (n === "sigmoid")
    return e ? N8 : v8;
  throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hI {
  constructor(e, t, s, r = !1, o = !1, a = !1, i = null, l = !1, c = !1) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = s, this.enableShapeUniforms = mn(this.outputShape.length);
    const u = r ? e[1] : e[2], h = Math.ceil(u / 2), d = r ? "i * 2, rc.y" : "rc.y, i * 2", p = o ? "rc.z, i * 2" : "i * 2, rc.z", f = r ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], m = o ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let g = "", y = "";
    i && (l ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : c ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : g = `vec4 activation(vec4 x) {
          ${i}
        }`, y = "result = activation(result);");
    const b = a ? "result += getBiasAtOutCoords();" : "";
    a && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), c && this.variableNames.push("leakyreluAlpha");
    let w = "rc.x", x = "rc.x";
    e[0] < t[0] ? w = `int(min(float(rc.x), ${e[0] - 1}.))` : t[0] < e[0] && (x = `int(min(float(rc.x), ${t[0] - 1}.))`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${h}; i++) {
          int batchA = ${w};
          int batchB = ${x};
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${y}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dy = {
  REAL: "return areal * breal - aimag * bimag;",
  IMAG: "return areal * bimag + aimag * breal;"
};
class py {
  constructor(e, t, s) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = Fe(t, s), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fy = "return a * b;";
function Lg(n) {
  const { inputs: e, backend: t } = n, { a: s, b: r } = e, o = Rn(s.dtype, r.dtype);
  if (s.dtype === "complex64") {
    const i = t.texData.get(s.dataId), l = t.texData.get(r.dataId), c = new py(dy.REAL, s.shape, r.shape), u = new py(dy.IMAG, s.shape, r.shape), h = [
      {
        dataId: i.complexTensorInfos.real.dataId,
        dtype: i.complexTensorInfos.real.dtype,
        shape: s.shape
      },
      {
        dataId: i.complexTensorInfos.imag.dataId,
        dtype: i.complexTensorInfos.imag.dtype,
        shape: s.shape
      },
      {
        dataId: l.complexTensorInfos.real.dataId,
        dtype: l.complexTensorInfos.real.dtype,
        shape: r.shape
      },
      {
        dataId: l.complexTensorInfos.imag.dataId,
        dtype: l.complexTensorInfos.imag.dtype,
        shape: r.shape
      }
    ], d = t.runWebGLProgram(c, h, "float32"), p = t.runWebGLProgram(u, h, "float32"), f = Wr({ inputs: { real: d, imag: p }, backend: t });
    return t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(p), f;
  }
  if (t.shouldExecuteOnCPU([s, r])) {
    const i = t.texData.get(s.dataId), l = t.texData.get(r.dataId), [c, u] = WB(s.shape, r.shape, i.values, l.values, o), h = t.makeTensorInfo(u, o), d = t.texData.get(h.dataId);
    return d.values = c, h;
  }
  let a;
  return K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? a = new Dl(fy, s.shape, r.shape) : a = new ua(fy, s.shape, r.shape), t.runWebGLProgram(a, [s, r], o);
}
const W8 = {
  kernelName: Li,
  backendName: "webgl",
  kernelFunc: Lg
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U8(n, e, t) {
  const s = [
    la(n.shape),
    ...ca(n.shape)
  ], r = {
    dtype: n.dtype,
    shape: s,
    dataId: n.dataId
  }, o = [
    la(e),
    ...ca(e)
  ], a = new aI(o, s), i = !0, l = [s], c = t.runWebGLProgram(a, [r], n.dtype, l, i);
  return { dataId: c.dataId, shape: e, dtype: c.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function me(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { shape: o } = s, a = t, i = Z(r.shape), l = jy(o, i), c = Z(l);
  N(i === c, () => `The new shape (${l}) has ${c} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);
  const u = a.texData.get(r.dataId);
  return u.isPacked && !_c(r.shape, l) && !(u.texture !== null && _c(u.shape, l)) ? U8(r, l, a) : (a.incRef(r.dataId), { dataId: r.dataId, shape: l, dtype: r.dtype });
}
const G8 = {
  kernelName: Ru,
  backendName: "webgl",
  kernelFunc: me
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class my {
  constructor(e, t) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: o, outSize: a } = e;
    this.outputShape = [r, a];
    const i = Math.floor(s / 4) * 4, l = s % 4;
    let c = "sumValue += dot(values, ones);";
    if (t != null) {
      const h = 1 / t;
      c = `sumValue += dot(values * ${Xo(h) ? h.toPrecision(2) : h}, ones);`;
    }
    let u = "";
    o % s > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${i};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class H8 {
  constructor(e, t) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: r, inSize: o, outSize: a } = e;
    this.outputShape = [r, a];
    let i = "0.0", l = "";
    t === "prod" ? i = "1.0" : t === "min" ? (i = "1.0 / 1e-20", l = "min") : t === "max" && (i = "-1.0 / 1e-20", l = "max");
    let c = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "sum" ? c = "sumValue" : t === "prod" ? c = "prodValue" : t === "all" ? c = "allValue" : t === "any" && (c = "anyValue");
    const u = Math.floor(s / 4) * 4, h = s % 4;
    let d = `
      if (${t === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${t === "min"} || ${t === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, p = "vec4";
    t === "all" ? (i = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, p = "bvec4") : t === "any" && (i = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, p = "bvec4");
    let f = "";
    o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j8(n) {
  const e = [];
  for (; e.length === 0 || e[e.length - 1].outSize !== 1; ) {
    const t = e.length ? e[e.length - 1].outSize : n[1], s = yh(t);
    e.push({
      inSize: t,
      windowSize: s,
      outSize: Math.ceil(t / s)
    });
  }
  return e;
}
function Co(n, e, t, s) {
  const r = j8(n.shape);
  let o = n;
  for (let a = 0; a < r.length; a++) {
    const { inSize: i, windowSize: l, outSize: c } = r[a];
    let u, h;
    t === "mean" ? u = a === 0 ? new my({ windowSize: l, inSize: i, batchSize: n.shape[0], outSize: c }, i) : new my({ windowSize: l, inSize: i, batchSize: n.shape[0], outSize: c }) : u = new H8({ windowSize: l, inSize: i, batchSize: n.shape[0], outSize: c }, t), h = o, o = s.runWebGLProgram(u, [o], e), h.dataId !== n.dataId && s.disposeIntermediateTensorInfo(h);
  }
  return o;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class q8 {
  constructor(e, t) {
    this.variableNames = ["A"];
    const s = new Array(e.length);
    for (let a = 0; a < s.length; a++)
      s[a] = e[t[a]];
    this.outputShape = s, this.rank = s.length;
    const r = ut(this.rank), o = K8(t);
    this.userCode = `
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${o}));
    }
    `;
  }
}
function K8(n) {
  const e = n.length;
  if (e > 6)
    throw Error(`Transpose for rank ${e} is not yet supported`);
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], s = new Array(e);
  for (let r = 0; r < n.length; r++)
    s[n[r]] = t[r];
  return s.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class X8 {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0;
    const s = new Array(e.length);
    for (let u = 0; u < s.length; u++)
      s[u] = e[t[u]];
    if (this.outputShape = s, this.rank = s.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const r = ut(this.rank), o = oI("rc", this.rank), a = new Array(this.rank);
    for (let u = 0; u < t.length; u++)
      a[t[u]] = o[u];
    const i = `vec2(${a.slice(-2).join()})`, l = `++${o[this.rank - 1]} < ${s[this.rank - 1]}`, c = `getChannel(getA(${a.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${o[this.rank - 1]};
      if(++${o[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _h(n, e, t) {
  const s = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new X8(n.shape, e) : new q8(n.shape, e);
  return t.runWebGLProgram(s, [n], n.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y8(n, e, t, s) {
  const r = e, o = n.shape.length, a = ze(r, n.shape);
  let i = a;
  const l = wt(i, o), c = l != null;
  let u = n;
  c && (u = _h(n, l, s), i = Nt(i.length, o)), en("sum", i, o);
  const [h, d] = qt(u.shape, i);
  let p = h;
  t && (p = St(h, a));
  const f = Z(d), g = Z(n.shape) / f, y = me({ inputs: { x: u }, attrs: { shape: [g, f] }, backend: s }), b = Nf(n.dtype), w = Co(y, b, "sum", s), x = me({ inputs: { x: w }, attrs: { shape: p }, backend: s });
  return s.disposeIntermediateTensorInfo(y), s.disposeIntermediateTensorInfo(w), c && s.disposeIntermediateTensorInfo(u), x;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Oh(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s;
  return Y8(r, o, a, t);
}
const Z8 = {
  kernelName: zu,
  backendName: "webgl",
  kernelFunc: Oh
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dn(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { perm: o } = s, a = t, i = r.shape.length, l = new Array(i);
  for (let u = 0; u < l.length; u++)
    l[u] = r.shape[o[u]];
  let c;
  if (a.shouldExecuteOnCPU([r])) {
    const h = a.texData.get(r.dataId).values, d = _g(h, r.shape, r.dtype, o, l);
    c = a.makeTensorInfo(l, r.dtype);
    const p = a.texData.get(c.dataId);
    p.values = d;
  } else
    c = _h(r, o, a);
  return c;
}
const J8 = {
  kernelName: Vo,
  backendName: "webgl",
  kernelFunc: dn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dI = 1e3;
function Oc({ a: n, b: e, transposeA: t, transposeB: s, backend: r, bias: o = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: l = null }) {
  const c = n.shape.length, u = e.shape.length, h = t ? n.shape[c - 2] : n.shape[c - 1], d = s ? e.shape[u - 1] : e.shape[u - 2], p = t ? n.shape[c - 1] : n.shape[c - 2], f = s ? e.shape[u - 2] : e.shape[u - 1], m = n.shape.slice(0, -2), g = e.shape.slice(0, -2), y = Z(m), b = Z(g), x = Fe(n.shape.slice(0, -2), e.shape.slice(0, -2)).concat([p, f]);
  N(h === d, () => `Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${e.shape} and transposeA=${t} and transposeB=${s} must match.`);
  const v = t ? [y, h, p] : [y, p, h], $ = s ? [b, f, d] : [b, d, f], C = me({ inputs: { x: n }, backend: r, attrs: { shape: v } }), S = me({ inputs: { x: e }, backend: r, attrs: { shape: $ } }), E = [C, S], D = Math.max(y, b), O = t ? C.shape[1] : C.shape[2], V = o != null, W = a != null, U = l === "leakyrelu", j = l != null ? ei(l, !0) : null, q = V || W || U || j != null;
  let Y;
  if ((p === 1 || f === 1) && O > dI && q === !1) {
    let Q = C, se = S;
    t && (Q = dn({ inputs: { x: C }, backend: r, attrs: { perm: [0, 2, 1] } }), E.push(Q)), s && (se = dn({ inputs: { x: S }, backend: r, attrs: { perm: [0, 2, 1] } }), E.push(se));
    const ee = f !== 1, ie = f === 1;
    let oe = Q;
    ee && (oe = me({
      inputs: { x: Q },
      backend: r,
      attrs: { shape: [D, O, 1] }
    }), E.push(oe));
    const de = f === 1 ? 2 : 1;
    let ce = se;
    ie && (ce = me({
      inputs: { x: se },
      backend: r,
      attrs: { shape: [D, 1, O] }
    }), E.push(ce));
    const ye = Lg({ inputs: { a: oe, b: ce }, backend: r });
    Y = Oh({ inputs: { x: ye }, backend: r, attrs: { axis: de, keepDims: !0 } }), E.push(ye);
  } else {
    const Q = Rn(n.dtype, e.dtype), se = new hI(v, $, [D, p, f], t, s, V, j, W, U), ee = [C, S];
    if (o != null && ee.push(o), W && ee.push(a), U) {
      const ie = r.makeTensorInfo([], "float32", Fr(i, "float32"));
      ee.push(ie), E.push(ie);
    }
    Y = r.runWebGLProgram(se, ee, Q);
  }
  const X = me({ inputs: { x: Y }, backend: r, attrs: { shape: x } });
  E.push(Y);
  for (const Q of E)
    r.disposeIntermediateTensorInfo(Q);
  return X;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q8(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: o, bias: a, preluActivationWeights: i } = e, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  return Oc({
    a: r,
    b: o,
    transposeA: l,
    transposeB: c,
    backend: t,
    bias: a,
    preluActivationWeights: i,
    leakyreluAlpha: h,
    activation: u
  });
}
const e7 = {
  kernelName: ac,
  backendName: "webgl",
  kernelFunc: Q8
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gy = "return abs(x);";
function t7(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (t.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
    const o = t.texData.get(s.dataId), a = sI(o.values);
    return t.makeTensorInfo(s.shape, s.dtype, a);
  }
  let r;
  return K().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new to(s.shape, gy) : r = new Js(s.shape, gy), t.runWebGLProgram(r, [s], s.dtype);
}
const n7 = {
  kernelName: Gc,
  backendName: "webgl",
  kernelFunc: t7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s7 = ms + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, r7 = qe({ opSnippet: s7 }), o7 = {
  kernelName: ii,
  backendName: "webgl",
  kernelFunc: r7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a7 = ms + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, i7 = qe({ opSnippet: a7 }), l7 = {
  kernelName: li,
  backendName: "webgl",
  kernelFunc: i7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yy = "return a + b;", c7 = tn({
  opSnippet: yy,
  packedOpSnippet: yy,
  supportsComplex: !0,
  cpuKernelImpl: IB
}), u7 = {
  kernelName: ma,
  backendName: "webgl",
  kernelFunc: c7
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class h7 {
  constructor(e, t) {
    this.outputShape = [], this.outputShape = e, this.variableNames = t.map((o, a) => `T${a}`);
    const s = [];
    this.variableNames.forEach((o) => {
      s.push(`float v${o} = get${o}AtOutCoords();`);
    });
    const r = this.variableNames.map((o) => `v${o}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${r};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class d7 {
  constructor(e, t) {
    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.variableNames = t.map((o, a) => `T${a}`);
    const s = [];
    this.variableNames.forEach((o) => {
      s.push(`vec4 v${o} = get${o}AtOutCoords();`);
    });
    const r = this.variableNames.map((o) => `v${o}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${r};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sc(n) {
  const { inputs: e, backend: t } = n, s = e;
  if (s.length === 1)
    return Ln({ inputs: { x: s[0] }, backend: t });
  if (s.length > K().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const l = Math.floor(s.length / 2), c = sc({ inputs: s.slice(0, l), backend: t }), u = sc({ inputs: s.slice(l), backend: t });
    return sc({ inputs: [c, u], backend: t });
  }
  const r = s.map((l) => l.dtype).reduce((l, c) => Rn(l, c)), o = s.map((l) => l.shape), i = K().getBool("WEBGL_PACK") ? new d7(s[0].shape, o) : new h7(s[0].shape, o);
  return t.runWebGLProgram(i, s, r);
}
const p7 = {
  kernelName: Hc,
  backendName: "webgl",
  kernelFunc: sc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s, i = r.shape.length, l = ze(o, r.shape);
  let c = l;
  const u = wt(c, i);
  let h = r;
  u != null && (h = dn({ inputs: { x: r }, backend: t, attrs: { perm: u } }), c = Nt(c.length, i)), en("all", c, i);
  const [d, p] = qt(h.shape, c), f = Z(p), m = me({ inputs: { x: h }, backend: t, attrs: { shape: [-1, f] } }), g = Co(m, m.dtype, "all", t);
  let y;
  if (a) {
    const b = St(d, l);
    y = me({ inputs: { x: g }, backend: t, attrs: { shape: b } });
  } else
    y = me({ inputs: { x: g }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), u != null && t.disposeIntermediateTensorInfo(h), y;
}
const m7 = {
  kernelName: Ip,
  backendName: "webgl",
  kernelFunc: f7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s, i = r.shape.length, l = ze(o, r.shape);
  let c = l;
  const u = wt(c, i);
  let h = r;
  u != null && (h = dn({ inputs: { x: r }, backend: t, attrs: { perm: u } }), c = Nt(c.length, i)), en("any", c, i);
  const [d, p] = qt(h.shape, c), f = Z(p), m = me({ inputs: { x: h }, backend: t, attrs: { shape: [-1, f] } }), g = Co(m, m.dtype, "any", t);
  let y;
  if (a) {
    const b = St(d, l);
    y = me({ inputs: { x: g }, backend: t, attrs: { shape: b } });
  } else
    y = me({ inputs: { x: g }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), u != null && t.disposeIntermediateTensorInfo(h), y;
}
const y7 = {
  kernelName: $p,
  backendName: "webgl",
  kernelFunc: g7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class b7 {
  constructor(e, t, s) {
    this.variableNames = ["A"];
    const { windowSize: r, batchSize: o, outSize: a } = e;
    s || this.variableNames.push("bestIndicesA"), this.outputShape = [o, a];
    const i = t === "max" ? ">" : "<", l = s ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class x7 {
  constructor(e, t, s, r) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, N(e.length > 2, () => `Packed arg${s.charAt(0).toUpperCase() + s.slice(1)} supports only inputs with rank above 2.`);
    const o = e[e.length - 1], a = Math.ceil(o / t);
    this.outputShape = e.slice(0, -1), a > 1 && this.outputShape.push(a), r || this.variableNames.push("bestIndicesA");
    const i = this.outputShape, l = i.length, c = ut(l), u = hn("coords", l);
    let h, d;
    if (a === 1) {
      d = l + 1;
      const S = ut(d);
      h = `
        ${S} sourceLocR = ${S}(${u.join()}, 0);
        ++${u[l - 1]};
        ${S} sourceLocG = ${S}(${u.join()}, 0);
        ++${u[l - 2]};
        ${S} sourceLocA = ${S}(${u.join()}, 0);
        --${u[l - 1]};
        ${S} sourceLocB = ${S}(${u.join()}, 0);
        --${u[l - 2]};`;
    } else
      d = l, h = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`;
    const p = ["x", "y", "z", "w", "u", "v"].slice(0, d), f = "." + p[d - 1], m = p.map((S) => "int " + S), g = hn("sourceLocR", d - 1).concat("inIdx.r"), y = hn("sourceLocG", d - 1).concat("inIdx.g"), b = hn("sourceLocB", d - 1).concat("inIdx.b"), w = hn("sourceLocA", d - 1).concat("inIdx.a"), x = s === "max" ? "greaterThan" : "lessThan", v = r ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${w.join()})));`, $ = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${y.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`, C = r ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${C}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${i[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${i[l - 2] - 1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${$};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${v}
          vec4 candidate = ${$};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pI(n, e, t, s = null) {
  let r = e.shape[0], o = e.shape[1];
  s != null && (r = s.shape[0], o = s.shape[1]);
  const a = yh(o), i = { windowSize: a, inSize: o, batchSize: r, outSize: Math.ceil(o / a) }, l = new b7(i, t, s == null), c = [e];
  s != null && c.push(s);
  const u = n.runWebGLProgram(l, c, "int32");
  if (u.shape[1] === 1)
    return u;
  const h = pI(n, e, t, u);
  return n.disposeIntermediateTensorInfo(u), h;
}
function fI(n, e, t, s = null) {
  const r = s != null ? s.shape : e.shape, o = r[r.length - 1], a = yh(o), i = new x7(r, a, t, s == null), l = s == null ? [e] : [e, s], c = n.runWebGLProgram(i, l, "int32");
  if (c.shape.length === e.shape.length) {
    const u = fI(n, e, t, c);
    return n.disposeIntermediateTensorInfo(c), u;
  }
  return c;
}
function mI(n, e, t, s) {
  const r = [t];
  if (en("arg" + s.charAt(0).toUpperCase() + s.slice(1), r, e.shape.length), !K().getBool("WEBGL_PACK_REDUCE") || e.shape.length <= 2) {
    const o = [], a = n.texData.get(e.dataId), i = a !== null && a.isPacked;
    let l = e;
    i && (l = n.unpackTensor(e), o.push(l));
    const [c, u] = qt(l.shape, r), h = Z(u), d = me({ inputs: { x: l }, backend: n, attrs: { shape: [-1, h] } });
    o.push(d);
    const p = pI(n, d, s);
    o.push(p);
    const f = me({ inputs: { x: p }, backend: n, attrs: { shape: c } });
    return o.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
  }
  return fI(n, e, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o } = s;
  let a = ze(o, r.shape);
  const i = wt(a, r.shape.length);
  let l = r;
  const c = [];
  i != null && (l = dn({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(l), a = Nt(a.length, l.shape.length)), en("argMax", [a[0]], l.shape.length);
  const u = mI(t, l, a[0], "max");
  return c.forEach((h) => t.disposeIntermediateTensorInfo(h)), u;
}
const v7 = {
  kernelName: jc,
  backendName: "webgl",
  kernelFunc: w7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function I7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o } = s;
  let a = ze(o, r.shape);
  const i = wt(a, r.shape.length);
  let l = r;
  const c = [];
  i != null && (l = dn({ inputs: { x: r }, backend: t, attrs: { perm: i } }), c.push(l), a = Nt(a.length, l.shape.length)), en("argMin", [a[0]], l.shape.length);
  const u = mI(t, l, a[0], "min");
  return c.forEach((h) => t.disposeIntermediateTensorInfo(h)), u;
}
const $7 = {
  kernelName: qc,
  backendName: "webgl",
  kernelFunc: I7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const C7 = ms + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, S7 = qe({ opSnippet: C7 }), N7 = {
  kernelName: ci,
  backendName: "webgl",
  kernelFunc: S7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k7 = ms + "return log(x + sqrt(x * x + 1.0));", T7 = qe({ opSnippet: k7 }), E7 = {
  kernelName: ui,
  backendName: "webgl",
  kernelFunc: T7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D7 = ms + `
  return atan(x);
`, A7 = qe({ opSnippet: D7 }), R7 = {
  kernelName: hi,
  backendName: "webgl",
  kernelFunc: A7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F7 = Og + `
  return atan(a, b);
`, _7 = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + El + `
  return result;
`, O7 = tn({ opSnippet: F7, packedOpSnippet: _7 }), L7 = {
  kernelName: pi,
  backendName: "webgl",
  kernelFunc: O7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P7 = ms + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, z7 = qe({ opSnippet: P7 }), M7 = {
  kernelName: di,
  backendName: "webgl",
  kernelFunc: z7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ti {
  constructor(e, t, s, r = !1, o = !1) {
    if (this.variableNames = ["x"], t === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const a = e.filterWidth, i = e.strideHeight, l = e.strideWidth, c = e.dilationHeight, u = e.dilationWidth, h = e.effectiveFilterHeight, d = e.effectiveFilterWidth, p = e.padInfo.top, f = e.padInfo.left;
    this.outputShape = e.outShape;
    const m = t === "avg", g = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, y = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;
    let b = "0.0";
    if (m || (b = "-1.0 / 1e-20"), s) {
      const S = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${i}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${S} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r ? o ? g : y : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const w = "max";
    let x = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && (x = "avgValue / count");
    const v = Math.floor(a / 4) * 4, $ = a % 4, C = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${v}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${C}
          }

          int xC = xCCorner + ${v};
          if (${$ === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${C}
          } else if (${$ === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${C}
          } else if (${$ === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${C}
          }
        }
        setOutput(${x});
      }
    `;
  }
}
class Pg {
  constructor(e, t, s, r = !1, o = !1) {
    if (this.variableNames = ["x"], t === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const a = e.filterWidth, i = e.strideDepth, l = e.strideHeight, c = e.strideWidth, u = e.dilationDepth, h = e.dilationHeight, d = e.dilationWidth, p = e.effectiveFilterDepth, f = e.effectiveFilterHeight, m = e.effectiveFilterWidth, g = e.padInfo.front, y = e.padInfo.top, b = e.padInfo.left;
    this.outputShape = e.outShape;
    const w = t === "avg";
    let x = "0.0";
    if (w || (x = "-1.0 / 1e-20"), s) {
      const D = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${l}, ${c});
        const ivec3 pads = ivec3(${g}, ${y}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${D} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${r ? o ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${f} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const v = "max";
    let $ = `${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t === "avg" && ($ = "avgValue / count");
    const C = Math.floor(a / 4) * 4, S = a % 4, E = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${v}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${l}, ${c});
      const ivec3 pads = ivec3(${g}, ${y}, ${b});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${C}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${E}
            }

            int xC = xCCorner + ${C};
            if (${S === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${E}
            } else if (${S === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${E}
            } else if (${S === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${E}
            }
          }
          setOutput(${$});
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  kl(r, "avgPool");
  const { filterSize: o, strides: a, pad: i, dimRoundingMode: l } = s, c = 1;
  N(Qt(a, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  const u = ps(r.shape, o, a, c, i, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && He(u.inShape, u.outShape))
    return Ln({ inputs: { x: r }, backend: t });
  const h = new ti(u, "avg", !1);
  return t.runWebGLProgram(h, [r], "float32");
}
const V7 = {
  kernelName: Kc,
  backendName: "webgl",
  kernelFunc: B7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: o, strides: a, pad: i, dimRoundingMode: l, dataFormat: c } = s, u = [1, 1, 1], h = ir(r.shape, o, a, u, i, l, c), d = new Pg(h, "avg", !1);
  return t.runWebGLProgram(d, [r], "float32");
}
const U7 = {
  kernelName: Xc,
  backendName: "webgl",
  kernelFunc: W7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class G7 {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    const t = e.filterHeight, s = e.filterWidth, r = e.strideHeight, o = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, l = e.effectiveFilterHeight, c = e.effectiveFilterWidth, u = l - 1 - e.padInfo.top, h = c - 1 - e.padInfo.left, d = 1 / (t * s);
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class H7 {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    const t = e.filterDepth, s = e.filterHeight, r = e.filterWidth, o = e.strideDepth, a = e.strideHeight, i = e.strideWidth, l = e.dilationDepth, c = e.dilationHeight, u = e.dilationWidth, h = e.effectiveFilterDepth, d = e.effectiveFilterHeight, p = e.effectiveFilterWidth, f = h - 1 - e.padInfo.front, m = d - 1 - e.padInfo.top, g = p - 1 - e.padInfo.left, y = 1 / (t * s * r);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${y});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${o}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o } = e, a = o, { filterSize: i, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = ir(a.shape, i, l, h, c, u), p = new H7(d);
  return t.runWebGLProgram(p, [r], a.dtype);
}
const q7 = {
  kernelName: Sp,
  backendName: "webgl",
  kernelFunc: j7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o } = e, a = o;
  kl([r, o], "avgPoolGrad");
  const { filterSize: i, strides: l, pad: c } = s, u = ps(a.shape, i, l, 1, c), h = new G7(u);
  return t.runWebGLProgram(h, [r], a.dtype);
}
const X7 = {
  kernelName: Cp,
  backendName: "webgl",
  kernelFunc: K7
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y7(n) {
  const { inputs: e, backend: t, attrs: s } = n, { a: r, b: o } = e, { transposeA: a, transposeB: i } = s;
  return Oc({ a: r, b: o, transposeA: a, transposeB: i, backend: t });
}
const Z7 = {
  kernelName: Yc,
  backendName: "webgl",
  kernelFunc: Y7
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class J7 {
  constructor(e, t, s, r, o, a) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], Fe(e, t), Fe(e, s);
    let i = "0.0";
    r != null && (Fe(e, r), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let l = "1.0";
    o != null && (Fe(e, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${a}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Q7 {
  constructor(e, t, s, r, o, a) {
    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], Fe(e, t), Fe(e, s);
    let i = "vec4(0.0)";
    r != null && (Fe(e, r), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let l = "vec4(1.0)";
    o != null && (Fe(e, o), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${a}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eV = ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s, mean: r, variance: o, offset: a, scale: i } = n;
  N(r.shape.length === o.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), N(a == null || r.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), N(i == null || r.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = t;
  l == null && (l = 1e-3);
  const c = [s, r, o];
  let u = null;
  a != null && (u = a.shape, c.push(a));
  let h = null;
  i != null && (h = i.shape, c.push(i));
  const d = K().getBool("WEBGL_PACK_NORMALIZATION") ? new Q7(s.shape, r.shape, o.shape, u, h, l) : new J7(s.shape, r.shape, o.shape, u, h, l);
  return e.runWebGLProgram(d, c, c[0].dtype);
}, tV = {
  kernelName: lu,
  backendName: "webgl",
  kernelFunc: eV
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nV {
  constructor(e) {
    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;
    const t = ut(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const s = sV(this.rank);
    let r;
    const o = e.map((a, i) => `sourceLoc.${pp[i]} = start[${i}] + coords.${pp[i]};`);
    r = `
        ${t} sourceLoc;
        ${t} coords = getOutputCoords();
        ${o.join(`
`)}
      `, this.userCode = `
      void main() {
        ${r}
        setOutput(getSource(${s}));
      }
    `;
  }
}
const pp = ["x", "y", "z", "w", "u", "v"];
function sV(n) {
  if (n === 1)
    return "sourceLoc";
  if (n <= 6)
    return pp.slice(0, n).map((e) => "sourceLoc." + e).join(",");
  throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rV {
  constructor(e) {
    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e, this.rank = e.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const t = ut(this.rank), s = hn("coords", this.rank), r = hn("sourceLoc", this.rank), o = this.rank === 1 ? "sourceLoc" : `vec2(${r.slice(-2).join()})`, a = `getChannel(getSource(${r.join()}), ${o})`, i = `
      result.x = ${a};
      if (++${s[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${r[this.rank - 1]};
        result.y = ${a};
        --${r[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${r[this.rank - 2]};
        result.z = ${a};
        if (++${s[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${r[this.rank - 1]};
          result.w = ${a};
        }
      }
    `, c = this.rank <= 4 ? `sourceLoc = coords +
            ${t}(${e.map((u, h) => `start[${h}]`).join()});` : e.map((u, h) => `${r[h]} = ${s[h]} + start[${h}];`).join(`
`);
    this.userCode = `
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${i}
        ${l}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oV(n, e, t, s) {
  const r = s.texData.get(n.dataId), o = s.makeTensorInfo(t, n.dtype), a = s.texData.get(o.dataId);
  Object.assign(a, r), a.refCount = 1, a.shape = t, a.dtype = n.dtype;
  let i = Lf(e, ke(n.shape));
  r.slice && (i += r.slice.flatOffset), a.slice = {
    flatOffset: i,
    // Point to the original dataId, which is used to do ref counting.
    origDataId: r.slice && r.slice.origDataId || n.dataId
  };
  const l = s.dataRefCount.get(a.slice.origDataId) || 1;
  return s.dataRefCount.set(a.slice.origDataId, l + 1), o;
}
function Ea(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: o, size: a } = s, [i, l] = Ku(r, o, a);
  if (Ff(r, i, l), Z(l) === 0)
    return t.makeTensorInfo(l, r.dtype, []);
  if (t.shouldExecuteOnCPU([r]) || r.dtype === "string") {
    const h = t.texData.get(r.dataId), d = JB(h.values, i, l, r.shape, r.dtype);
    return t.makeTensorInfo(l, r.dtype, d);
  }
  const { isPacked: c } = t.texData.get(r.dataId), u = Of(r.shape, i, l);
  if (c || !u) {
    const h = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new rV(l) : new nV(l), d = [i];
    return t.runWebGLProgram(h, [r], r.dtype, d);
  }
  return t.uploadToGPU(r.dataId), oV(r, i, l, t);
}
const aV = {
  kernelName: Pu,
  backendName: "webgl",
  kernelFunc: Ea
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iV = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: o, crops: a } = s;
  N(r.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const i = o.reduce((b, w) => b * w), l = pl(r.shape, o, i), c = fl(l.length, o.length), u = ml(r.shape, o, i), h = Om(a, o.length), d = Lm(u, a, o.length), p = [], f = me({ inputs: { x: r }, backend: t, attrs: { shape: l } }), m = dn({ inputs: { x: f }, backend: t, attrs: { perm: c } }), g = me({
    inputs: { x: m },
    backend: t,
    attrs: { shape: u }
  }), y = Ea({
    inputs: { x: g },
    backend: t,
    attrs: { begin: h, size: d }
  });
  return p.push(f), p.push(m), p.push(g), p.forEach((b) => t.disposeIntermediateTensorInfo(b)), y;
}, lV = {
  kernelName: Zc,
  backendName: "webgl",
  kernelFunc: iV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cV(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: o } = e, { size: a } = s, i = t.readSync(r.dataId), l = t.readSync(o.dataId), c = nI(i, l, o.dtype, o.shape, a);
  return t.makeTensorInfo([a], o.dtype, c);
}
const uV = {
  kernelName: Np,
  backendName: "webgl",
  kernelFunc: cV
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hV(n) {
  const { inputs: e, backend: t } = n, { s0: s, s1: r } = e, o = t.readSync(s.dataId), a = t.readSync(r.dataId), i = Fe(Array.from(o), Array.from(a));
  return t.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
const dV = {
  kernelName: kp,
  backendName: "webgl",
  kernelFunc: hV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pV = "return float(a != b);", gI = tn({ opSnippet: pV, cpuKernelImpl: GB, dtype: "bool" }), fV = {
  kernelName: Su,
  backendName: "webgl",
  kernelFunc: gI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Al(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.texData.get(s.dataId);
  return Ln({ inputs: { x: r.complexTensorInfos.real }, backend: t });
}
const mV = {
  kernelName: of,
  backendName: "webgl",
  kernelFunc: Al
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gV = "return float(int(x));";
function yV(n, e) {
  const t = new Js(n.shape, gV), s = e.runWebGLProgram(t, [n], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fp(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dtype: o } = s;
  if (o === "complex64") {
    if (r.dtype === "complex64")
      return Ln({ inputs: { x: r }, backend: t });
    const a = Rt(r.shape), i = fp({ inputs: { x: r }, backend: t, attrs: { dtype: "float32" } }), l = Wr({ inputs: { real: i, imag: a }, backend: t });
    return a.dispose(), t.disposeIntermediateTensorInfo(i), l;
  }
  if (r.dtype === "complex64") {
    const a = Al({ inputs: { input: r }, backend: t }), i = fp({ inputs: { x: a }, backend: t, attrs: { dtype: o } });
    return t.disposeIntermediateTensorInfo(a), i;
  }
  if (!qy(r.dtype, o)) {
    const a = Ln({ inputs: { x: r }, backend: t });
    return { dataId: a.dataId, shape: a.shape, dtype: o };
  }
  if (t.shouldExecuteOnCPU([r])) {
    const a = t.texData.get(r.dataId).values, [i, l, c] = CB(a, r.shape, r.dtype, o);
    return t.makeTensorInfo(i, l, c);
  }
  if (o === "int32")
    return yV(r, t);
  if (o === "bool") {
    const a = t.makeTensorInfo([], "bool", Ht("bool", 1)), l = gI({ inputs: { a: r, b: a }, backend: t });
    return t.disposeIntermediateTensorInfo(a), l;
  }
  throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`);
}
const bV = {
  kernelName: fi,
  backendName: "webgl",
  kernelFunc: fp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const by = "return ceil(x);", xV = qe({ opSnippet: by, packedOpSnippet: by, cpuKernelImpl: SB }), wV = {
  kernelName: mi,
  backendName: "webgl",
  kernelFunc: xV
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vV {
  constructor(e) {
    this.variableNames = ["A"], this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IV {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $V(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { clipValueMin: o, clipValueMax: a } = s;
  let i;
  K().getBool("WEBGL_PACK_CLIP") ? i = new IV(r.shape) : i = new vV(r.shape);
  const l = [[o], [a]];
  return t.runWebGLProgram(i, [r], r.dtype, l);
}
const CV = {
  kernelName: gi,
  backendName: "webgl",
  kernelFunc: $V
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SV {
  constructor(e) {
    this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xy(n, e) {
  return {
    dataId: e.dataId,
    dtype: e.dtype,
    shape: n.shape
  };
}
function NV(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = t.texData.get(s.dataId), o = new SV(s.shape), a = [
    xy(s, r.complexTensorInfos.real),
    xy(s, r.complexTensorInfos.imag)
  ];
  return t.runWebGLProgram(o, a, a[0].dtype);
}
const kV = {
  kernelName: Jc,
  backendName: "webgl",
  kernelFunc: NV
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TV {
  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
  constructor(e) {
    this.outputShape = [], this.outputShape = Us(
      e,
      1
      /* axis */
    ), this.variableNames = e.map((a, i) => `T${i}`);
    const t = new Array(e.length - 1);
    t[0] = e[0][1];
    for (let a = 1; a < t.length; a++)
      t[a] = t[a - 1] + e[a][1];
    const s = [`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];
    for (let a = 1; a < t.length; a++) {
      const i = t[a - 1];
      s.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${i}));`);
    }
    const r = t.length, o = t[t.length - 1];
    s.push(`else setOutput(getT${r}(yR, yC-${o}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EV {
  constructor(e, t) {
    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = Us(e, t);
    const s = this.outputShape, r = s.length, o = ut(r), a = hn("coords", r), i = ["x", "y", "z", "w", "u", "v"].slice(0, r);
    this.variableNames = e.map((m, g) => `T${g}`);
    const l = new Array(e.length - 1);
    l[0] = e[0][t];
    for (let m = 1; m < l.length; m++)
      l[m] = l[m - 1] + e[m][t];
    const c = i[t], u = i.slice(-2), h = i.join();
    let d = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;
    for (let m = 1; m < l.length; m++) {
      const g = l[m - 1];
      d += `
        if (${c} < ${l[m]}  && ${c} >= ${l[m - 1]}) {
          return getChannel(
            getT${m}(${ql(i, c, g)}),
            vec2(${ql(u, c, g)}));
        }`;
    }
    const p = l.length, f = l[l.length - 1];
    d += `
        return getChannel(
          getT${p}(${ql(i, c, f)}),
          vec2(${ql(u, c, f)}));`, this.userCode = `
      float getValue(${i.map((m) => "int " + m)}) {
        ${d}
      }

      void main() {
        ${o} coords = getOutputCoords();
        vec4 result = vec4(getValue(${a}), 0., 0., 0.);

        ${a[r - 1]} = ${a[r - 1]} + 1;
        if (${a[r - 1]} < ${s[r - 1]}) {
          result.g = getValue(${a});
        }

        ${a[r - 2]} = ${a[r - 2]} + 1;
        if (${a[r - 2]} < ${s[r - 2]}) {
          result.a = getValue(${a});
        }

        ${a[r - 1]} = ${a[r - 1]} - 1;
        if (${a[r - 2]} < ${s[r - 2]} &&
            ${a[r - 1]} < ${s[r - 1]}) {
          result.b = getValue(${a});
        }
        setOutput(result);
      }
    `;
  }
}
function ql(n, e, t) {
  const s = n.indexOf(e);
  return n.map((o, a) => a === s ? `${o} - ${t}` : o).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lh(n) {
  const { inputs: e, backend: t } = n, { input: s } = e, r = t.texData.get(s.dataId);
  return Ln({ inputs: { x: r.complexTensorInfos.imag }, backend: t });
}
const DV = {
  kernelName: jp,
  backendName: "webgl",
  kernelFunc: Lh
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ua(n, e, t) {
  const s = n[0].dtype;
  if (s === "complex64") {
    const h = n.map((g) => Al({ inputs: { input: g }, backend: t })), d = n.map((g) => Lh({ inputs: { input: g }, backend: t })), p = Ua(h, e, t), f = Ua(d, e, t), m = Wr({ inputs: { real: p, imag: f }, backend: t });
    return h.forEach((g) => t.disposeIntermediateTensorInfo(g)), d.forEach((g) => t.disposeIntermediateTensorInfo(g)), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), m;
  }
  let r = t.shouldExecuteOnCPU(n);
  if (s === "string" && (r = !0), r) {
    const h = n.map((b) => {
      const x = [-1, Z(b.shape.slice(e))];
      return me({ inputs: { x: b }, backend: t, attrs: { shape: x } });
    }), d = h.map((b) => ({ vals: t.readSync(b.dataId), shape: b.shape })), p = Us(
      h.map((b) => b.shape),
      1
      /* axis */
    ), f = h[0].shape[0] === 1, m = NB(d, p, s, f), g = Us(n.map((b) => b.shape), e), y = t.makeTensorInfo(g, s, m);
    return h.forEach((b) => t.disposeIntermediateTensorInfo(b)), y;
  }
  const o = K().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (n.length > o) {
    const h = [];
    for (let p = 0; p < n.length; p += o) {
      const f = n.slice(p, p + o);
      h.push(Ua(f, e, t));
    }
    const d = Ua(h, e, t);
    for (const p of h)
      t.disposeIntermediateTensorInfo(p);
    return d;
  }
  if (K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && n[0].shape.length > 1) {
    const h = new EV(n.map((d) => d.shape), e);
    return t.runWebGLProgram(h, n, s);
  }
  const { tensors2D: a, outShape: i } = AV(n, e, t), l = new TV(a.map((h) => h.shape)), c = t.runWebGLProgram(l, a, s);
  a.forEach((h) => t.disposeIntermediateTensorInfo(h));
  const u = me({ inputs: { x: c }, attrs: { shape: i }, backend: t });
  return t.disposeIntermediateTensorInfo(c), u;
}
function AV(n, e, t) {
  const s = Us(n.map((o) => o.shape), e);
  return { tensors2D: n.map((o) => me({
    inputs: { x: o },
    attrs: { shape: [-1, Z(o.shape.slice(e))] },
    backend: t
  })), outShape: s };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yI(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s, o = ze(r, e[0].shape)[0], a = e.map((c) => c.shape);
  Rm(a, o);
  const i = Us(e.map((c) => c.shape), o);
  if (Z(i) === 0)
    return t.makeTensorInfo(i, e[0].dtype, []);
  const l = e.filter((c) => Z(c.shape) > 0);
  return l.length === 1 ? Ln({ inputs: { x: l[0] }, backend: t }) : Ua(l, o, t);
}
const RV = {
  kernelName: Qc,
  backendName: "webgl",
  kernelFunc: yI
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bI {
  constructor(e, t = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const a = e.padInfo.top, i = e.padInfo.left, l = e.strideHeight, c = e.strideWidth, u = e.dilationHeight, h = e.dilationWidth, d = e.filterHeight, p = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4, g = e.dataFormat === "channelsLast", y = g ? 1 : 2, b = g ? 2 : 3, w = g ? 3 : 1;
    let x = "", v = "";
    s && (r ? x = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? x = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : x = `
          float activation(float x) {
            ${s}
          }
        `, v = "result = activation(result);");
    const $ = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${x}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${y}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${$}
        ${v}
        setOutput(result);
      }
    `;
  }
}
class FV {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const t = e.padInfo.front, s = e.padInfo.top, r = e.padInfo.left, o = e.strideDepth, a = e.strideHeight, i = e.strideWidth, l = e.dilationDepth, c = e.dilationHeight, u = e.dilationWidth, h = e.filterDepth, d = e.filterHeight, p = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, m = e.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${o}, ${a}, ${i});
      const ivec3 pads = ivec3(${t}, ${s}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class xI {
  constructor(e, t = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = e.outShape, this.enableShapeUniforms = mn(this.outputShape.length);
    const a = e.padInfo.left, i = e.strideWidth, l = e.dilationWidth, c = e.filterHeight, u = e.filterWidth, h = u;
    let d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < u; g++)
      d += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
    d += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;
    for (let g = 0; g < u; g++)
      d += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
    d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let g = 0; g < (h + 1) / 2; g++) {
      const y = g * 2;
      if (d += `
           xC = xCCorner + ${y * l};
           `, i === 1) {
        if (y < u && (a % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }
               `, l === 1 && y > 0 ? d += `
                 xC${y} = vec4(xTexelC${y - 2}.zw, xTexelC${y}.xy);
                 ` : d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);
                   } else {
                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xC${y} = xTexelC${y};
                 `, y + 1 < u)) {
          const b = a % 2 === 0 ? xp(l) : l;
          l % 2 === 0 && a % 2 === 1 || l % 2 !== 0 && a % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                     xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${y + 1}.zw = vec2(0.0);
                     }
                     xTexelC${y + 1}Ready = 1;
                   }
                   `, l > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${y + 1} = vec4(previous.zw, xTexelC${y + 1}.xy);
                     } else {
                      xC${y + 1} = vec4(0.0, 0.0, xTexelC${y + 1}.xy);
                     }
                     ` : d += `
                     xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.xy);
                     `) : b === 1 ? d += `
                     xC${y + 1} = xTexelC${y};
                     ` : d += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                       xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${y + 1}.zw = vec2(0.0);
                       }
                       xTexelC${y + 1}Ready = 1;
                     }

                     xC${y + 1} = xTexelC${y + 1};
                     `;
        }
      } else
        y < u && (a % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.0);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
               `, y + 1 < u && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${y + 1} = vec4(xTexelC${y + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {
                   xTexelC${y} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${y}.zw = vec2(0.0);
                   }
                   xTexelC${y}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y + 1}Ready == 0) {
                   xTexelC${y + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${y + 1}.zw = vec2(0.);
                   }
                   xTexelC${y + 1}Ready = 1;
                 }

                 xC${y} = vec4(
                   xTexelC${y}.xy, xTexelC${y + 1}.xy);
               `, y + 1 < u && (d += `
                   xC${y + 1} = vec4(xTexelC${y}.zw, xTexelC${y + 1}.zw);
                 `)));
      y < u && (d += `
             wTexel = getW(r, ${y}, d1, d2);
             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, y + 1 < u && (d += `
               wTexel = getW(r, ${y + 1}, d1, d2);
               dotProd += xC${y + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${y + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    d += `
     }
   `, d += `
     }
   `, d += `
     }
   `;
    let p = "", f = "";
    s && (r ? p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }` : o ? p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }` : p = `vec4 activation(vec4 x) {
           ${s}
         }`, f = "result = activation(result);");
    const m = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _V {
  constructor(e, t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "inputShape", type: "ivec4" },
      { name: "pad", type: "ivec2" },
      { name: "stride", type: "ivec2" },
      { name: "dilation", type: "ivec2" },
      { name: "inChannels", type: "int" },
      { name: "itemsPerBlockRow", type: "int" },
      { name: "outWidth", type: "int" }
    ], this.outputShape = e, this.enableShapeUniforms = mn(this.outputShape.length);
    const { dataFormat: s } = t, r = fn(), o = s === "channelsLast", a = o ? 1 : 2, i = o ? 2 : 3, l = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;
    let c = "";
    for (let u = 0; u <= 1; u++)
      for (let h = 0; h <= 1; h++)
        c += `
          blockIndex = rc.z + ${h};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${a}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${o}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${r.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lc(n, e) {
  const t = n.length;
  return t >= 3 ? e ? [
    ...n.slice(0, -3),
    n[t - 3] * n[t - 2],
    n[t - 1]
    /* channel */
  ] : [
    ...n.slice(0, -3),
    n[t - 3],
    n[t - 2] * n[t - 1]
    /* height * width */
  ] : !e && t === 1 && n[0] > 1 ? [n[0], 1] : null;
}
function wI({ x: n, filter: e, convInfo: t, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: a = 0, activation: i = null }) {
  const l = n.shape, c = s.texData.get(n.dataId), u = t.inChannels, h = l[0] * l[1] * l[2], d = t.outChannels, p = t.dataFormat === "channelsLast", f = !1, m = !1;
  let g;
  const y = [];
  if (o != null) {
    const x = Lc(o.shape, p);
    x != null && (o = me({
      inputs: { x: o },
      backend: s,
      attrs: { shape: x }
    }), y.push(o));
  }
  if (r != null) {
    const x = Lc(r.shape, p);
    x != null && (r = me({ inputs: { x: r }, backend: s, attrs: { shape: x } }), y.push(r));
  }
  if (!((h === 1 || d === 1) && u > dI) && c.isPacked && p && c.texture != null && l[2] % 2 !== 0 && He(c.shape.slice(-3), l.slice(-3))) {
    const x = l[0] * l[1] * (l[2] + 1), v = {
      dataId: n.dataId,
      shape: [1, x, t.inChannels],
      dtype: n.dtype
    }, $ = c.shape;
    c.shape = c.shape.slice(), c.shape[c.shape.length - 2]++, N(_c(c.shape, v.shape), () => `packed reshape ${c.shape} to ${v.shape} isn't free`);
    const C = me({
      inputs: { x: e },
      backend: s,
      attrs: { shape: [1, t.inChannels, t.outChannels] }
    });
    y.push(C);
    const S = Oc({
      a: v,
      b: C,
      backend: s,
      transposeA: f,
      transposeB: m,
      bias: r,
      activation: i,
      preluActivationWeights: o,
      leakyreluAlpha: a
    }), E = s.texData.get(S.dataId);
    N(E.isPacked, () => "batchMatMul result is expected to be packed"), c.shape = $, E.shape = t.outShape, g = Ln({ inputs: { x: S }, backend: s }), g.shape = t.outShape, y.push(S);
  } else {
    const x = t.outHeight * t.outWidth, v = me({
      inputs: { x: n },
      backend: s,
      attrs: {
        shape: p ? [t.batchSize, x, t.inChannels] : [t.batchSize, t.inChannels, x]
      }
    }), $ = me({
      inputs: { x: e },
      backend: s,
      attrs: { shape: [1, t.inChannels, t.outChannels] }
    }), C = Oc({
      a: p ? v : $,
      b: p ? $ : v,
      transposeA: !p,
      transposeB: m,
      backend: s,
      bias: r,
      activation: i,
      preluActivationWeights: o,
      leakyreluAlpha: a
    });
    g = me({ inputs: { x: C }, backend: s, attrs: { shape: t.outShape } }), y.push(v), y.push($), y.push(C);
  }
  for (const x of y)
    s.disposeIntermediateTensorInfo(x);
  return g;
}
function vI({ x: n, filter: e, convInfo: t, backend: s, bias: r = null, preluActivationWeights: o = null, leakyreluAlpha: a = 0, activation: i = null }) {
  const { filterWidth: l, filterHeight: c, inChannels: u, outWidth: h, outHeight: d, dataFormat: p } = t, f = p === "channelsLast", m = l * c * u, g = d * h, y = [t.batchSize, m, g], b = !0, w = !1, x = [];
  if (o != null) {
    const X = Lc(o.shape, f);
    X != null && (o = me({
      inputs: { x: o },
      backend: s,
      attrs: { shape: X }
    }), x.push(o));
  }
  if (r != null) {
    const X = Lc(r.shape, f);
    X != null && (r = me({ inputs: { x: r }, backend: s, attrs: { shape: X } }), x.push(r));
  }
  const v = me({
    inputs: { x: e },
    backend: s,
    attrs: { shape: [1, m, Z(e.shape) / m] }
  });
  x.push(v);
  const $ = new _V(y, t), C = [
    n.shape,
    [t.padInfo.top, t.padInfo.left],
    [t.strideHeight, t.strideWidth],
    [t.dilationHeight, t.dilationWidth],
    [t.inChannels],
    [t.filterWidth * t.inChannels],
    [t.outWidth]
  ], S = s.runWebGLProgram($, [n], "float32", C), E = me({ inputs: { x: S }, backend: s, attrs: { shape: y } });
  x.push(S), x.push(E);
  const D = r != null, O = o != null, V = i === "leakyrelu", W = i ? ei(i, !0) : null, U = new hI(f ? E.shape : v.shape, f ? v.shape : E.shape, f ? [t.batchSize, g, t.outChannels] : [t.batchSize, t.outChannels, g], b, w, D, W, O, V), j = f ? [E, v] : [v, E];
  if (r && j.push(r), O && j.push(o), V) {
    const X = s.makeTensorInfo([], "float32", Fr(a, "float32"));
    j.push(X), x.push(X);
  }
  const q = s.runWebGLProgram(U, j, "float32"), Y = me({ inputs: { x: q }, backend: s, attrs: { shape: t.outShape } });
  x.push(q);
  for (const X of x)
    s.disposeIntermediateTensorInfo(X);
  return Y;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OV(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o } = e, { strides: a, pad: i, dataFormat: l, dilations: c, dimRoundingMode: u } = s, h = lr(l), d = jt(r.shape, o.shape, a, c, i, u, !1, h);
  let p;
  if (d.filterHeight === 1 && d.filterWidth === 1 && d.dilationHeight === 1 && d.dilationWidth === 1 && d.strideHeight === 1 && d.strideWidth === 1 && (d.padInfo.type === "SAME" || d.padInfo.type === "VALID"))
    p = wI({ x: r, filter: o, convInfo: d, backend: t });
  else if (d.strideWidth <= 2 && h === "channelsLast" && K().getBool("WEBGL_EXP_CONV")) {
    const m = new xI(d), g = [
      [d.padInfo.top, d.padInfo.left],
      [d.strideHeight, d.strideWidth],
      [d.dilationHeight, d.dilationWidth],
      [d.inHeight, d.inWidth]
    ];
    p = t.runWebGLProgram(m, [r, o], "float32", g);
  } else if (K().getBool("WEBGL_CONV_IM2COL"))
    p = vI({ x: r, filter: o, convInfo: d, backend: t });
  else {
    const m = new bI(d);
    p = t.runWebGLProgram(m, [r, o], "float32");
  }
  const f = me({ inputs: { x: p }, backend: t, attrs: { shape: d.outShape } });
  return t.disposeIntermediateTensorInfo(p), f;
}
const LV = {
  kernelName: eu,
  backendName: "webgl",
  kernelFunc: OV
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PV {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideHeight, s = e.strideWidth, r = e.padInfo.top, o = e.padInfo.left, a = e.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${a}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class zV {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterHeight, s = e.filterWidth, r = e.strideHeight, o = e.strideWidth, a = e.dataFormat === "channelsLast", i = t - 1 - e.padInfo.top, l = s - 1 - e.padInfo.left, c = a ? 1 : 2, u = a ? 2 : 3, h = a ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class MV {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideDepth, s = e.strideHeight, r = e.strideWidth, o = e.padInfo.front, a = e.padInfo.top, i = e.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${o};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${a};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class BV {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterDepth, s = e.filterHeight, r = e.filterWidth, o = e.strideDepth, a = e.strideHeight, i = e.strideWidth, l = t - 1 - e.padInfo.front, c = s - 1 - e.padInfo.top, u = r - 1 - e.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${o}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VV(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: o } = e, { strides: a, pad: i, dataFormat: l, dimRoundingMode: c, filterShape: u } = s, h = lr(l), d = jt(r.shape, u, a, 1, i, c, !1, h), p = new PV(d);
  return t.runWebGLProgram(p, [r, o], "float32");
}
const WV = {
  kernelName: Ep,
  backendName: "webgl",
  kernelFunc: VV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UV(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: o } = e, { inputShape: a, strides: i, pad: l, dataFormat: c, dimRoundingMode: u } = s, h = lr(c), d = jt(a, o.shape, i, 1, l, u, !1, h), p = new zV(d);
  return t.runWebGLProgram(p, [r, o], "float32");
}
const GV = {
  kernelName: tu,
  backendName: "webgl",
  kernelFunc: UV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HV(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o } = e, { strides: a, pad: i, dilations: l } = s, c = Lr(r.shape, o.shape, a, l, i), u = new FV(c);
  return t.runWebGLProgram(u, [r, o], "float32");
}
const jV = {
  kernelName: nu,
  backendName: "webgl",
  kernelFunc: HV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qV(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: o } = e, { strides: a, pad: i, filterShape: l } = s, c = Lr(r.shape, l, a, 1, i), u = new MV(c);
  return t.runWebGLProgram(u, [r, o], "float32");
}
const KV = {
  kernelName: Dp,
  backendName: "webgl",
  kernelFunc: qV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XV(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: o } = e, { pad: a, strides: i, inputShape: l } = s, c = Lr(l, o.shape, i, 1, a), u = new BV(c);
  return t.runWebGLProgram(u, [r, o], "float32");
}
const YV = {
  kernelName: Ap,
  backendName: "webgl",
  kernelFunc: XV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZV = Ta + `
  return cos(x);
`, JV = qe({ opSnippet: ZV }), QV = {
  kernelName: yi,
  backendName: "webgl",
  kernelFunc: JV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eW = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, tW = qe({ opSnippet: eW }), nW = {
  kernelName: bi,
  backendName: "webgl",
  kernelFunc: tW
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sW {
  constructor(e, t, s, r, o) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [a, i, l, c] = e, [u] = t, [h, d] = s;
    this.outputShape = [u, h, d, c];
    const p = r === "bilinear" ? 1 : 0, [f, m] = [`${i - 1}.0`, `${l - 1}.0`], [g, y, b] = h > 1 ? [
      `${(i - 1) / (h - 1)}`,
      "(y2-y1) * height_ratio",
      `y1*${f} + float(y)*(height_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (y1+y2) * ${f}`
    ], [w, x, v] = d > 1 ? [
      `${(l - 1) / (d - 1)}`,
      "(x2-x1) * width_ratio",
      `x1*${m} + float(x)*(width_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (x1+x2) * ${m}`
    ];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${y};
        float width_scale = ${x};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${o}));
          return;
        }
        float in_x = ${v};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${o}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rW = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, boxes: o, boxInd: a } = e, { cropSize: i, method: l, extrapolationValue: c } = s, u = new sW(r.shape, o.shape, i, l, c);
  return t.runWebGLProgram(u, [r, o, a], "float32");
}, oW = {
  kernelName: Fp,
  backendName: "webgl",
  kernelFunc: rW
};
var ni;
(function(n) {
  n.Prod = "*", n.Sum = "+";
})(ni || (ni = {}));
class wy {
  constructor(e, t, s, r) {
    this.op = e, this.outputShape = t, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const o = this.outputShape.length, a = this.op === ni.Prod ? "1.0" : "0.0", i = s ? a : `getX(${vy(o, "coords", this.op)})`, l = this.outputShape[this.outputShape.length - 1];
    let c = "", u = "";
    s ? (c = r ? `end != ${l - 1}` : "end != 0", u = r ? "end + 1" : "end - 1") : (c = r ? `end + pow2 < ${l}` : "end >= pow2", u = r ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${ut(o)} coords = getOutputCoords();
        int end = ${Iy(o, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${Iy(o, "coords", this.op)} = idx;
          val ${this.op}= getX(${vy(o, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function vy(n, e, t) {
  if (n === 1)
    return `${e}`;
  if (n === 2)
    return `${e}.x, ${e}.y`;
  if (n === 3)
    return `${e}.x, ${e}.y, ${e}.z`;
  if (n === 4)
    return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
  throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`);
}
function Iy(n, e, t) {
  if (n === 1)
    return `${e}`;
  if (n === 2)
    return `${e}.y`;
  if (n === 3)
    return `${e}.z`;
  if (n === 4)
    return `${e}.w`;
  throw new Error(`Cumulative ${t} for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function II(n, e, t, s, r, o) {
  const a = e.shape.length, i = wt([s], a);
  let l = e;
  i != null && (l = dn({ inputs: { x: e }, backend: t, attrs: { perm: i } }));
  const c = Nt(1, a)[0];
  if (c !== a - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length - 1} but got axis=${s}`);
  const u = l.shape[c];
  let h = Ln({ inputs: { x: l }, backend: t });
  for (let d = 0; d <= Math.ceil(Math.log2(u)) - 1; d++) {
    const p = new wy(n, l.shape, !1, o), f = [[d]], m = h;
    h = t.runWebGLProgram(p, [h], h.dtype, f), t.disposeIntermediateTensorInfo(m);
  }
  if (r) {
    const d = new wy(n, l.shape, r, o), p = h;
    h = t.runWebGLProgram(d, [h], h.dtype), t.disposeIntermediateTensorInfo(p);
  }
  if (i != null) {
    const d = Pr(i), p = dn({ inputs: { x: h }, backend: t, attrs: { perm: d } });
    return t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(l), p;
  }
  return h;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, exclusive: a, reverse: i } = s;
  return II(ni.Prod, r, t, o, a, i);
}
const iW = {
  kernelName: Rp,
  backendName: "webgl",
  kernelFunc: aW
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, exclusive: a, reverse: i } = s;
  return II(ni.Sum, r, t, o, a, i);
}
const cW = {
  kernelName: su,
  backendName: "webgl",
  kernelFunc: lW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, weights: o } = e, { size: a, binaryOutput: i } = s;
  if (r.shape.length === 1) {
    const l = t.readSync(r.dataId), c = t.readSync(o.dataId), u = nI(l, c, o.dtype, o.shape, a);
    return t.makeTensorInfo([a], o.dtype, u);
  } else if (r.shape.length === 2) {
    const l = t.bufferSync(r), c = t.bufferSync(o), u = $B(l, c, a, i);
    return t.makeTensorInfo(u.shape, o.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`);
}
const hW = {
  kernelName: _p,
  backendName: "webgl",
  kernelFunc: uW
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class dW {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = s, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockSize: o, dataFormat: a } = s, i = r.shape[0], l = a === "NHWC" ? r.shape[1] : r.shape[2], c = a === "NHWC" ? r.shape[2] : r.shape[3], u = a === "NHWC" ? r.shape[3] : r.shape[1], h = l * o, d = c * o, p = u / (o * o), f = a === "NHWC" ? [i, h, d, p] : [i, p, h, d], m = new dW(f, o, a);
  return t.runWebGLProgram(m, [r], r.dtype);
}
const fW = {
  kernelName: Op,
  backendName: "webgl",
  kernelFunc: pW
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $I {
  constructor(e, t = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = e.outShape, this.enableShapeUniforms = mn(this.outputShape.length);
    const a = e.filterHeight, i = e.filterWidth, l = e.outChannels / e.inChannels;
    let c = "", u = "";
    s && (r ? c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : c = `
          float activation(float x) {
            ${s}
          }
        `, u = "result = activation(result);");
    const h = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${u}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CI {
  constructor(e, t = !1, s = null, r = !1, o = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = e.outShape, this.enableShapeUniforms = mn(this.outputShape.length);
    const a = e.outChannels / e.inChannels, i = e.padInfo.left, l = e.strideWidth, c = e.dilationWidth, u = e.filterHeight, h = e.filterWidth, d = h;
    let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let y = 0; y < h; y++)
      p += `
          vec4 xTexelC${y * 2};
          int xTexelC${y * 2}Ready;
          vec4 xTexelC${y * 2 + 1};
          int xTexelC${y * 2 + 1}Ready;
          vec4 xC${y};`;
    p += `
    for (int r = 0; r < ${u}; r++) {
      `;
    for (let y = 0; y < h; y++)
      p += `
          xTexelC${y * 2} = vec4(0.0);
          xTexelC${y * 2}Ready = 0;
          xTexelC${y * 2 + 1} = vec4(0.0);
          xTexelC${y * 2 + 1}Ready = 0;
          xC${y} = vec4(0.0);`;
    p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let y = 0; y < (d + 1) / 2; y++) {
      const b = y * 2;
      if (p += `
          xC = xCCorner + ${b * c};
          `, l === 1) {
        if (b < h && (i % 2 === 1 ? (p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, c === 1 && b > 0 ? p += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < h)) {
          const w = i % 2 === 0 ? xp(c) : c;
          c % 2 === 0 && i % 2 === 1 || c % 2 !== 0 && i % 2 !== 1 ? (p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, c > 1 ? p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : p += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : w === 1 ? p += `
                    xC${b + 1} = xTexelC${b};
                    ` : p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else
        b < h && (i % 2 === 1 ? (p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < h && (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < h && (p += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < h && (p += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < h && (p += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    p += `
    }
  `, p += `
      }
    `;
    let f = "", m = "";
    s && (r ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : o ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : f = `vec4 activation(vec4 x) {
          ${s}
        }`, m = "result = activation(result);");
    const g = t ? "result += getBiasAtOutCoords();" : "";
    t && this.variableNames.push("bias"), r && this.variableNames.push("preluActivationWeights"), o && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${a};
        int q = d2 - d1 * ${a};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o } = e, { strides: a, pad: i, dilations: l, dimRoundingMode: c } = s;
  let u = l;
  u == null && (u = [1, 1]), N(Qt(a, u), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  const h = jt(
    r.shape,
    o.shape,
    a,
    u,
    i,
    c,
    !0
    /* depthwise */
  );
  let d;
  K().getBool("WEBGL_PACK_DEPTHWISECONV") && h.strideWidth <= 2 && h.outChannels / h.inChannels === 1 ? d = new CI(h) : d = new $I(h);
  const p = [
    [h.padInfo.top, h.padInfo.left],
    [h.strideHeight, h.strideWidth],
    [h.dilationHeight, h.dilationWidth],
    [h.inHeight, h.inWidth]
  ];
  return t.runWebGLProgram(d, [r, o], "float32", p);
}
const gW = {
  kernelName: ru,
  backendName: "webgl",
  kernelFunc: mW
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class yW {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    const t = e.strideHeight, s = e.strideWidth, r = e.padInfo.top, o = e.padInfo.left, a = e.outChannels / e.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${o};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class bW {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    const t = e.filterHeight, s = e.filterWidth, r = e.strideHeight, o = e.strideWidth, a = t - 1 - e.padInfo.top, i = s - 1 - e.padInfo.left, l = e.outChannels / e.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, dy: o } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: c, filterShape: u } = s, h = jt(
    r.shape,
    u,
    a,
    i,
    l,
    c,
    !0
    /* depthwise */
  ), d = new yW(h);
  return t.runWebGLProgram(d, [r, o], "float32");
}
const wW = {
  kernelName: Lp,
  backendName: "webgl",
  kernelFunc: xW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, filter: o } = e, { strides: a, dilations: i, pad: l, dimRoundingMode: c, inputShape: u } = s, h = jt(
    u,
    o.shape,
    a,
    i,
    l,
    c,
    !0
    /* depthwise */
  ), d = new bW(h);
  return t.runWebGLProgram(d, [r, o], "float32");
}
const IW = {
  kernelName: Pp,
  backendName: "webgl",
  kernelFunc: vW
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $W {
  constructor(e) {
    this.variableNames = ["X"], this.outputShape = [e, e], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CW(n) {
  const { inputs: e, backend: t } = n, { x: s } = e, r = [...s.shape, ...s.shape], o = Z(s.shape), a = me({ inputs: { x: s }, backend: t, attrs: { shape: [o] } }), i = new $W(o), l = t.runWebGLProgram(i, [a], a.dtype), c = me({ inputs: { x: l }, backend: t, attrs: { shape: r } });
  return t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(l), c;
}
const SW = {
  kernelName: zp,
  backendName: "webgl",
  kernelFunc: CW
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class NW {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    const { inHeight: t, inWidth: s, padInfo: r, strideHeight: o, strideWidth: a, filterHeight: i, filterWidth: l, dilationHeight: c, dilationWidth: u } = e, { top: h, left: d } = r;
    this.userCode = `
      const ivec2 strides = ivec2(${o}, ${a});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o } = e, { strides: a, pad: i, dilations: l } = s, c = rl(r.shape, o.shape, a, i, "NHWC", l);
  let u;
  const h = new NW(c);
  u = t.runWebGLProgram(h, [r, o], "float32");
  const d = me({ inputs: { x: u }, backend: t, attrs: { shape: c.outShape } });
  return t.disposeIntermediateTensorInfo(u), d;
}
const TW = {
  kernelName: ou,
  backendName: "webgl",
  kernelFunc: kW
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EW(n) {
  const { inputs: e, backend: t, attrs: s } = n, { equation: r } = s, o = e, { allDims: a, summedDims: i, idDims: l } = Gm(r, o.length);
  jm(a.length, l, o);
  const { path: c, steps: u } = qm(i, l), h = u.length;
  let d = null, p = a.length;
  const f = [];
  for (let m = 0; m < h; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: y, expandDims: b } = Hm(p, l[g]);
      let w;
      Km(y) ? w = o[g] : (w = dn({ inputs: { x: o[g] }, backend: t, attrs: { perm: y } }), f.push(w));
      const x = w.shape.slice();
      for (let v = 0; v < b.length; ++v)
        x.splice(b[v], 0, 1);
      He(w.shape, x) || (w = me({ inputs: { x: w }, backend: t, attrs: { shape: x } }), f.push(w)), d === null ? d = w : (d = Lg({ inputs: { a: w, b: d }, backend: t }), f.push(d));
    }
    m < h - 1 && (c[m] >= 0 && (d = Oh({
      inputs: { x: d },
      backend: t,
      attrs: {
        axis: c[m] - (a.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const m of f)
    m !== d && t.disposeIntermediateTensorInfo(m);
  return d;
}
const DW = {
  kernelName: Mp,
  backendName: "webgl",
  kernelFunc: EW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AW = "return (x >= 0.0) ? x : (exp(x) - 1.0);", RW = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, FW = qe({ opSnippet: AW, packedOpSnippet: RW }), _W = {
  kernelName: wi,
  backendName: "webgl",
  kernelFunc: FW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OW = "return (b >= 1.0) ? a : a * (b + 1.0);", LW = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, PW = (n) => {
  const { inputs: e, backend: t } = n, { dy: s, y: r } = e, o = K().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Dl(LW, s.shape, r.shape) : new ua(OW, s.shape, r.shape);
  return t.runWebGLProgram(o, [s, r], s.dtype);
}, zW = {
  kernelName: Bp,
  backendName: "webgl",
  kernelFunc: PW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MW = `
  return vec4(equal(a, b));
`, BW = "return float(a == b);", VW = tn({
  opSnippet: BW,
  packedOpSnippet: MW,
  dtype: "bool",
  cpuKernelImpl: kB
}), WW = {
  kernelName: au,
  backendName: "webgl",
  kernelFunc: VW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UW = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${Pm};
  float a1 = ${zm};
  float a2 = ${Mm};
  float a3 = ${Bm};
  float a4 = ${Vm};
  float a5 = ${Wm};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, GW = qe({ opSnippet: UW }), HW = {
  kernelName: vi,
  backendName: "webgl",
  kernelFunc: GW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jW = Ta + `
  return exp(x);
`, qW = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, SI = qe({
  opSnippet: jW,
  packedOpSnippet: qW,
  cpuKernelImpl: TB,
  dtype: "float32"
}), KW = {
  kernelName: Ii,
  backendName: "webgl",
  kernelFunc: SI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mp(n) {
  const { inputs: e, attrs: t, backend: s } = n, { dim: r } = t, { input: o } = e, a = o.shape.length, i = o.shape.slice();
  let l = r;
  return r < 0 && (N(-(a + 1) <= r, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), l = a + r + 1), i.splice(l, 0, 1), me({ inputs: { x: o }, backend: s, attrs: { shape: i } });
}
const XW = {
  kernelName: iu,
  backendName: "webgl",
  kernelFunc: mp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $y = "return exp(x) - 1.0;", YW = qe({ opSnippet: $y, packedOpSnippet: $y, cpuKernelImpl: EB }), ZW = {
  kernelName: $i,
  backendName: "webgl",
  kernelFunc: YW
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Cy {
  constructor(e, t, s) {
    this.variableNames = ["real", "imag"];
    const r = t[1];
    this.outputShape = t;
    const o = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, a = s ? `${r}.0` : "1.0";
    let i;
    if (e === "real")
      i = "return real * expR - imag * expI;";
    else if (e === "imag")
      i = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);
    this.userCode = `
      const float exponentMultiplier = ${o};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${r});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${r}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${a};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NI(n, e, t) {
  const s = t.texData.get(n.dataId), r = Z(n.shape), o = n.shape[n.shape.length - 1], a = r / o, i = me({ inputs: { x: n }, backend: t, attrs: { shape: [a, o] } }), l = i.shape, c = new Cy("real", l, e), u = new Cy("imag", l, e), h = [
    {
      dataId: s.complexTensorInfos.real.dataId,
      dtype: s.complexTensorInfos.real.dtype,
      shape: l
    },
    {
      dataId: s.complexTensorInfos.imag.dataId,
      dtype: s.complexTensorInfos.imag.dtype,
      shape: l
    }
  ], d = t.runWebGLProgram(c, h, "float32"), p = t.runWebGLProgram(u, h, "float32"), f = Wr({ inputs: { real: d, imag: p }, backend: t });
  t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(p);
  const m = me({ inputs: { x: f }, backend: t, attrs: { shape: n.shape } });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(f), m;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JW(n) {
  const { inputs: e, backend: t } = n, { input: s } = e;
  return NI(s, !1, t);
}
const QW = {
  kernelName: Vp,
  backendName: "webgl",
  kernelFunc: JW
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eU {
  constructor(e, t) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rl(n) {
  const { backend: e, attrs: t } = n, { shape: s, value: r } = t;
  let { dtype: o } = t;
  if (o = o || ai(r), o === "string") {
    const a = Wt(o, Z(s));
    return a.fill(r), e.makeTensorInfo(s, o, a);
  } else {
    const a = new eU(s, r), i = [[r]];
    return e.runWebGLProgram(a, [], o, i);
  }
}
const tU = {
  kernelName: Wp,
  backendName: "webgl",
  kernelFunc: Rl
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nU {
  constructor(e) {
    this.variableNames = ["Image"], this.outputShape = [];
    const t = e[2];
    this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sU = {
  kernelName: Up,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, backend: e }) => {
    const { image: t } = n, s = e, r = new nU(t.shape);
    return s.runWebGLProgram(r, [t], t.dtype);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sy = "return floor(x);", rU = qe({ opSnippet: Sy, packedOpSnippet: Sy, cpuKernelImpl: DB }), oU = {
  kernelName: Ci,
  backendName: "webgl",
  kernelFunc: rU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aU = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, iU = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, lU = tn({ opSnippet: aU, packedOpSnippet: iU, dtype: "int32" }), cU = {
  kernelName: Si,
  backendName: "webgl",
  kernelFunc: lU
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class uU {
  constructor(e) {
    this.variableNames = ["A"];
    const t = fn(), [s, r] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hU {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0;
    const t = fn(), [s, r] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${s}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dU = {
  kernelName: $d,
  backendName: "webgl",
  kernelFunc: pU
};
let Ao, id = K().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function pU(n) {
  const { inputs: e, backend: t, attrs: s } = n;
  let { pixels: r } = e;
  const { numChannels: o } = s, a = typeof HTMLVideoElement < "u" && r instanceof HTMLVideoElement, i = typeof HTMLImageElement < "u" && r instanceof HTMLImageElement, [l, c] = a ? [
    r.videoWidth,
    r.videoHeight
  ] : [r.width, r.height], u = [c, l], h = [c, l, o];
  if (i || a) {
    const m = K().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (Ao == null || m !== id) && (id = m, Ao = document.createElement("canvas").getContext("2d", { willReadFrequently: id })), Ao.canvas.width = l, Ao.canvas.height = c, Ao.drawImage(r, 0, 0, l, c), r = Ao.canvas;
  }
  const d = t.makeTensorInfo(u, "int32");
  t.texData.get(d.dataId).usage = Un.PIXELS, t.gpgpu.uploadPixelDataToTexture(t.getTexture(d.dataId), r);
  const p = K().getBool("WEBGL_PACK") ? new hU(h) : new uU(h), f = t.runWebGLProgram(p, [d], "int32");
  return t.disposeData(d.dataId), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fU(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o, bias: a, preluActivationWeights: i } = e, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s, m = lr(u), g = jt(r.shape, o.shape, l, h, c, d, !1, m);
  let y;
  const b = [], w = a != null, x = i != null, v = p === "leakyrelu", $ = () => {
    const S = [r, o], E = (D, O) => {
      if (O === "NCHW" && D.shape.length === 1 && D.shape[0] !== 1) {
        const V = me({
          inputs: { x: D },
          backend: t,
          attrs: { shape: [D.shape[0], 1, 1] }
        });
        return b.push(V), V;
      }
      return D;
    };
    if (w && S.push(E(a, u)), x && S.push(E(i, u)), v) {
      const D = t.makeTensorInfo([], "float32", Fr(f, "float32"));
      S.push(D), b.push(D);
    }
    return S;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    y = wI({
      x: r,
      filter: o,
      convInfo: g,
      backend: t,
      bias: a,
      activation: p,
      preluActivationWeights: i,
      leakyreluAlpha: f
    });
  else if (g.strideWidth <= 2 && m === "channelsLast" && K().getBool("WEBGL_EXP_CONV")) {
    const S = p ? ei(p, !0) : null, E = new xI(g, w, S, x, v), D = [
      [g.padInfo.top, g.padInfo.left],
      [g.strideHeight, g.strideWidth],
      [g.dilationHeight, g.dilationWidth],
      [g.inHeight, g.inWidth]
    ], O = $();
    y = t.runWebGLProgram(E, O, "float32", D);
  } else if (K().getBool("WEBGL_CONV_IM2COL"))
    y = vI({
      x: r,
      filter: o,
      convInfo: g,
      backend: t,
      bias: a,
      activation: p,
      preluActivationWeights: i,
      leakyreluAlpha: f
    });
  else {
    const S = p ? ei(p, !1) : null, E = new bI(g, w, S, x, v), D = $();
    y = t.runWebGLProgram(E, D, "float32");
  }
  const C = me({ inputs: { x: y }, backend: t, attrs: { shape: g.outShape } });
  return b.push(y), b.forEach((S) => t.disposeIntermediateTensorInfo(S)), C;
}
const mU = {
  kernelName: ic,
  backendName: "webgl",
  kernelFunc: fU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gU(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, filter: o, bias: a, preluActivationWeights: i } = e, { strides: l, pad: c, dilations: u, dimRoundingMode: h, activation: d, leakyreluAlpha: p } = s, f = [];
  let m = u;
  m == null && (m = [1, 1]), N(Qt(l, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);
  const g = jt(
    r.shape,
    o.shape,
    l,
    m,
    c,
    h,
    !0
    /* depthwise */
  ), y = K().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, b = d ? ei(d, y) : null, w = [r, o], x = a != null, v = i != null, $ = d === "leakyrelu";
  if (x && w.push(a), v && w.push(i), $) {
    const D = t.makeTensorInfo([], "float32", Fr(p, "float32"));
    w.push(D), f.push(D);
  }
  let C;
  y ? C = new CI(g, x, b, v, $) : C = new $I(g, x, b, v, $);
  const S = [
    [g.padInfo.top, g.padInfo.left],
    [g.strideHeight, g.strideWidth],
    [g.dilationHeight, g.dilationWidth],
    [g.inHeight, g.inWidth]
  ], E = t.runWebGLProgram(C, w, "float32", S);
  return f.forEach((D) => t.disposeIntermediateTensorInfo(D)), E;
}
const yU = {
  kernelName: lc,
  backendName: "webgl",
  kernelFunc: gU
};
class bU {
  constructor(e, t, s, r) {
    this.sliceDim = e, this.strides = t, this.paramsShape = r, this.variableNames = ["x", "indices"], this.outputShape = s;
    const o = ut(s.length);
    let a = `
    int index;`;
    for (let i = 0; i < this.sliceDim; i++)
      a += `
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;
    this.userCode = `
         void main() {
          ${o} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${a}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xU(n) {
  const { inputs: e, backend: t } = n, { params: s, indices: r } = e, o = r.shape, a = o[o.length - 1], i = Z(s.shape), [l, c, u, h] = Rf(s, r), d = me({ inputs: { x: r }, backend: t, attrs: { shape: [c, a] } }), p = me({
    inputs: { x: s },
    backend: t,
    attrs: { shape: [Z(s.shape) / u, u] }
  });
  if (t.shouldExecuteOnCPU([s, r]) || s.dtype === "string") {
    const y = t.readSync(r.dataId), b = t.bufferSync(s), w = AB(y, b, s.dtype, c, a, u, h, s.shape, i);
    return t.makeTensorInfo(l, s.dtype, w.values);
  }
  const f = new bU(a, h, [c, u], s.shape), m = t.runWebGLProgram(f, [p, d], p.dtype), g = me({ inputs: { x: m }, backend: t, attrs: { shape: l } });
  return t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(m), g;
}
const wU = {
  kernelName: Gp,
  backendName: "webgl",
  kernelFunc: xU
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vU {
  constructor(e, t) {
    this.variableNames = ["A", "indices"], this.outputShape = t, this.rank = t.length;
    const s = ut(this.rank), r = IU(e);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `;
  }
}
function IU(n, e) {
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let r = 0; r < n.length; r++)
    r === 2 ? s.push("index") : s.push(`${t[r]}`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kI(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, indices: o } = e, { axis: a, batchDims: i } = s, l = ze(a, r.shape)[0];
  if (K().get("DEBUG")) {
    const b = t.readSync(o.dataId), w = r.shape[l];
    for (let x = 0; x < b.length; ++x) {
      const v = b[x];
      N(v <= w - 1 && v >= 0, () => `GatherV2: the index value ${v} is not in [0, ${w - 1}]`);
    }
  }
  const c = Ym(r, o, l, i), u = Z(o.shape), h = [], d = me({
    inputs: { x: r },
    backend: t,
    attrs: {
      shape: [
        c.batchSize,
        c.outerSize,
        c.dimSize,
        c.sliceSize
      ]
    }
  }), p = me({
    inputs: { x: o },
    backend: t,
    attrs: { shape: [c.batchSize, u / c.batchSize] }
  });
  h.push(d), h.push(p);
  const f = [
    c.batchSize,
    c.outerSize,
    u / c.batchSize,
    c.sliceSize
  ];
  if (t.shouldExecuteOnCPU([r, o]) || r.dtype === "string") {
    const b = t.bufferSync(p), w = t.bufferSync(d), x = RB(w, b, f);
    return h.forEach((v) => t.disposeIntermediateTensorInfo(v)), t.makeTensorInfo(c.outputShape, x.dtype, x.values);
  }
  const m = new vU(d.shape, f), g = t.runWebGLProgram(m, [d, p], d.dtype);
  h.push(g);
  const y = me({ inputs: { x: g }, backend: t, attrs: { shape: c.outputShape } });
  return h.forEach((b) => t.disposeIntermediateTensorInfo(b)), y;
}
const $U = {
  kernelName: cu,
  backendName: "webgl",
  kernelFunc: kI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CU = "return float(a > b);", SU = `
  return vec4(greaterThan(a, b));
`, NU = tn({
  opSnippet: CU,
  packedOpSnippet: SU,
  cpuKernelImpl: FB,
  dtype: "bool"
}), kU = {
  kernelName: uu,
  backendName: "webgl",
  kernelFunc: NU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TU = "return float(a >= b);", EU = `
  return vec4(greaterThanEqual(a, b));
`, DU = tn({
  opSnippet: TU,
  packedOpSnippet: EU,
  dtype: "bool",
  cpuKernelImpl: _B
}), AU = {
  kernelName: Ni,
  backendName: "webgl",
  kernelFunc: DU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RU(n) {
  const { inputs: e, backend: t } = n, { input: s } = e;
  return NI(s, !0, t);
}
const FU = {
  kernelName: Hp,
  backendName: "webgl",
  kernelFunc: RU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _U = "return float(!isnan(x) && !isinf(x));", OU = qe({ opSnippet: _U, dtype: "bool" }), LU = {
  kernelName: Ti,
  backendName: "webgl",
  kernelFunc: OU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PU = "return float(isinf(x));", zU = qe({ opSnippet: PU, dtype: "bool" }), MU = {
  kernelName: Ei,
  backendName: "webgl",
  kernelFunc: zU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BU = "return float(isnan(x));", VU = qe({ opSnippet: BU, dtype: "bool" }), WU = {
  kernelName: Di,
  backendName: "webgl",
  kernelFunc: VU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UU = "return float(a < b);", GU = `
  return vec4(lessThan(a, b));
`, HU = tn({
  opSnippet: UU,
  packedOpSnippet: GU,
  cpuKernelImpl: OB,
  dtype: "bool"
}), jU = {
  kernelName: du,
  backendName: "webgl",
  kernelFunc: HU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qU = "return float(a <= b);", KU = `
  return vec4(lessThanEqual(a, b));
`, XU = tn({
  opSnippet: qU,
  packedOpSnippet: KU,
  cpuKernelImpl: LB,
  dtype: "bool"
}), YU = {
  kernelName: pu,
  backendName: "webgl",
  kernelFunc: XU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZU(n) {
  const { backend: e, attrs: t } = n, { start: s, stop: r, num: o } = t, a = PB(s, r, o);
  return e.makeTensorInfo([a.length], "float32", a);
}
const JU = {
  kernelName: qp,
  backendName: "webgl",
  kernelFunc: ZU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QU = Ta + `
  return x < 0.0 ? 0./0. : log(x);
`, eG = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, tG = qe({ opSnippet: QU, packedOpSnippet: eG, cpuKernelImpl: zB }), nG = {
  kernelName: Ai,
  backendName: "webgl",
  kernelFunc: tG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sG = Ta + `
  return log(1.0 + x);
`, rG = qe({ opSnippet: sG }), oG = {
  kernelName: Ri,
  backendName: "webgl",
  kernelFunc: rG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aG = "return float(a >= 1.0 && b >= 1.0);", iG = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, lG = tn({
  opSnippet: aG,
  packedOpSnippet: iG,
  dtype: "bool"
}), cG = {
  kernelName: fu,
  backendName: "webgl",
  kernelFunc: lG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uG = "return float(!(x >= 1.0));", hG = qe({ opSnippet: uG }), dG = {
  kernelName: mu,
  backendName: "webgl",
  kernelFunc: hG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pG = "return float(a >= 1.0 || b >= 1.0);", fG = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, mG = tn({ opSnippet: pG, packedOpSnippet: fG, dtype: "bool" }), gG = {
  kernelName: gu,
  backendName: "webgl",
  kernelFunc: mG
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class yG {
  constructor(e, t, s, r, o) {
    this.variableNames = ["x"], this.outputShape = [];
    const a = t, i = e[3] - 1;
    this.outputShape = e;
    let l;
    const c = `float(${s}) + float(${r}) * sum`;
    o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${a}; j <= ${a}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bG {
  constructor(e, t, s, r, o) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
    const a = t, i = e[3] - 1;
    this.outputShape = e;
    let l;
    const c = `float(${s}) + float(${r}) * sum`;
    o === 0.5 ? l = `inversesqrt(${c})` : o === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${o}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${a};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${a}; j <= ${a}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xG = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { depthRadius: o, bias: a, alpha: i, beta: l } = s, c = K().getBool("WEBGL_PACK_NORMALIZATION") ? new bG(r.shape, o, a, i, l) : new yG(r.shape, o, a, i, l);
  return t.runWebGLProgram(c, [r], r.dtype);
}, wG = {
  kernelName: yu,
  backendName: "webgl",
  kernelFunc: xG
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vG {
  constructor(e, t, s, r, o) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = s, this.alpha = r, this.beta = o, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${o})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${o});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IG = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, y: o, dy: a } = e, { depthRadius: i, bias: l, alpha: c, beta: u } = s, h = new vG(r.shape, i, l, c, u);
  return t.runWebGLProgram(h, [r, o, a], r.dtype);
}, $G = {
  kernelName: Kp,
  backendName: "webgl",
  kernelFunc: IG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CG(n, e, t, s) {
  const r = Z(e), a = Z(n.shape) / r, i = me({ inputs: { x: n }, attrs: { shape: [a, r] }, backend: s }), l = Co(i, n.dtype, "max", s), c = me({ inputs: { x: l }, attrs: { shape: t }, backend: s });
  return s.disposeIntermediateTensorInfo(i), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TI(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reductionIndices: o, keepDims: a } = s, i = r.shape.length, l = ze(o, r.shape);
  let c = l;
  const u = wt(c, i), h = u != null, d = t.shouldExecuteOnCPU([r]);
  let p = r;
  if (h) {
    if (d) {
      const w = t.texData.get(p.dataId).values, x = new Array(i);
      for (let C = 0; C < x.length; C++)
        x[C] = r.shape[u[C]];
      const v = _g(w, r.shape, r.dtype, u, x);
      p = t.makeTensorInfo(x, r.dtype);
      const $ = t.texData.get(p.dataId);
      $.values = v;
    } else
      p = _h(r, u, t);
    c = Nt(c.length, i);
  }
  en("max", c, i);
  const [f, m] = qt(p.shape, c);
  let g = f;
  a && (g = St(f, l));
  let y;
  if (d) {
    const w = t.texData.get(p.dataId).values, x = MB(w, Z(m), g, r.dtype);
    y = t.makeTensorInfo(g, r.dtype);
    const v = t.texData.get(y.dataId);
    v.values = x;
  } else
    y = CG(p, m, g, t);
  return h && t.disposeIntermediateTensorInfo(p), y;
}
const SG = {
  kernelName: bu,
  backendName: "webgl",
  kernelFunc: TI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NG = Og + `
  return max(a, b);
`, kG = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + El + `
  return result;
`, TG = tn({
  opSnippet: NG,
  packedOpSnippet: kG,
  cpuKernelImpl: BB
}), EG = {
  kernelName: Fi,
  backendName: "webgl",
  kernelFunc: TG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DG(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e;
  kl(r, "maxPool");
  const { filterSize: o, strides: a, pad: i, dimRoundingMode: l } = s, c = 1;
  N(Qt(a, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  const u = ps(r.shape, o, a, c, i, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && He(u.inShape, u.outShape))
    return Ln({ inputs: { x: r }, backend: t });
  const h = new ti(u, "max", !1);
  return t.runWebGLProgram(h, [r], r.dtype);
}
const AG = {
  kernelName: xu,
  backendName: "webgl",
  kernelFunc: DG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RG(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { filterSize: o, strides: a, pad: i, dataFormat: l, dimRoundingMode: c } = s, u = [1, 1, 1], h = ir(r.shape, o, a, u, i, c, l), d = new Pg(h, "max", !1);
  return t.runWebGLProgram(d, [r], r.dtype);
}
const FG = {
  kernelName: wu,
  backendName: "webgl",
  kernelFunc: RG
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _G {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    const t = e.strideHeight, s = e.strideWidth, r = e.dilationHeight, o = e.effectiveFilterHeight, a = e.effectiveFilterWidth, i = o - 1 - e.padInfo.top, l = a - 1 - e.padInfo.left, c = o * a - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class OG {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    const t = e.strideDepth, s = e.strideHeight, r = e.strideWidth, o = e.dilationDepth, a = e.dilationHeight, i = e.dilationWidth, l = e.effectiveFilterDepth, c = e.effectiveFilterHeight, u = e.effectiveFilterWidth, h = l - 1 - e.padInfo.front, d = c - 1 - e.padInfo.top, p = u - 1 - e.padInfo.left, f = l * c * u - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${d}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LG(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o } = e, a = o, { filterSize: i, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = ir(a.shape, i, l, h, c, u), p = new Pg(
    d,
    "max",
    !0
    /* get positions */
  ), f = t.runWebGLProgram(p, [a], a.dtype), m = new OG(d), g = t.runWebGLProgram(m, [r, f], a.dtype);
  return t.disposeIntermediateTensorInfo(f), g;
}
const PG = {
  kernelName: Yp,
  backendName: "webgl",
  kernelFunc: LG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zG(n) {
  const { inputs: e, backend: t, attrs: s } = n, { dy: r, input: o, output: a } = e, i = o;
  kl([o, a], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = ps(i.shape, l, c, 1, u, h), p = !0, f = new ti(d, "max", p), m = t.runWebGLProgram(f, [i], i.dtype), g = new _G(d), y = t.runWebGLProgram(g, [r, m], i.dtype);
  return t.disposeIntermediateTensorInfo(m), y;
}
const MG = {
  kernelName: Xp,
  backendName: "webgl",
  kernelFunc: zG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BG(n, e, t, s) {
  let r = new ti(t, "max", !1);
  const o = s.runWebGLProgram(r, [n], "float32");
  r = new ti(t, "max", !0, !0, e);
  const a = s.runWebGLProgram(r, [n], "float32");
  return [o, a];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VG = {
  kernelName: Zp,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
    const { x: s } = n, { filterSize: r, strides: o, pad: a, includeBatchInIndex: i } = e, l = t;
    N(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
    const c = [1, 1];
    N(Qt(o, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);
    const u = ps(s.shape, r, o, c, a), [h, d] = BG(s, i, u, l);
    return [h, d];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WG(n, e, t, s) {
  const r = Z(e), a = Z(n.shape) / r, i = me({ inputs: { x: n }, attrs: { shape: [a, r] }, backend: s }), l = Co(i, "float32", "mean", s), c = me({ inputs: { x: l }, attrs: { shape: t }, backend: s });
  return s.disposeIntermediateTensorInfo(i), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UG = {
  kernelName: vu,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
    const { x: s } = n, { keepDims: r, axis: o } = e, a = t, i = s.shape.length, l = ze(o, s.shape);
    let c = l;
    const u = wt(c, i), h = u != null, d = a.shouldExecuteOnCPU([s]), p = [];
    let f = s;
    if (h) {
      if (d) {
        const x = a.texData.get(f.dataId).values, v = new Array(i);
        for (let S = 0; S < v.length; S++)
          v[S] = s.shape[u[S]];
        const $ = _g(x, s.shape, s.dtype, u, v);
        f = a.makeTensorInfo(v, s.dtype);
        const C = a.texData.get(f.dataId);
        C.values = $;
      } else
        f = _h(s, u, a);
      p.push(f), c = Nt(c.length, i);
    }
    en("sum", c, i);
    const [m, g] = qt(f.shape, c);
    let y = m;
    r && (y = St(m, l));
    const b = WG(f, g, y, a);
    for (const w of p)
      a.disposeIntermediateTensorInfo(w);
    return b;
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GG(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s, i = r.shape.length, l = ze(o, r.shape);
  let c = l;
  const u = wt(c, i);
  let h = r;
  u != null && (h = dn({ inputs: { x: r }, backend: t, attrs: { perm: u } }), c = Nt(c.length, r.shape.length)), en("min", c, i);
  const [d, p] = qt(h.shape, c), f = Z(p), m = me({ inputs: { x: h }, backend: t, attrs: { shape: [-1, f] } }), g = Co(m, m.dtype, "min", t);
  let y;
  if (a) {
    const b = St(d, l);
    y = me({ inputs: { x: g }, backend: t, attrs: { shape: b } });
  } else
    y = me({ inputs: { x: g }, backend: t, attrs: { shape: d } });
  return t.disposeIntermediateTensorInfo(m), t.disposeIntermediateTensorInfo(g), u != null && t.disposeIntermediateTensorInfo(h), y;
}
const HG = {
  kernelName: Iu,
  backendName: "webgl",
  kernelFunc: GG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jG = Og + `
  return min(a, b);
`, qG = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + El + `
  return result;
`, KG = tn({
  opSnippet: jG,
  packedOpSnippet: qG,
  cpuKernelImpl: VB
}), XG = {
  kernelName: _i,
  backendName: "webgl",
  kernelFunc: KG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class YG {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.outputShape = t.map(
      (u, h) => u[0] + e[h] + u[1]
      /* afterPad */
    );
    const r = e.length, o = ut(r), a = t.map((u) => u[0]).join(","), i = t.map((u, h) => u[0] + e[h]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r), c = s === "reflect" ? 0 : 1;
    if (r === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${o} start = ${o}(${a});
      ${o} end = ${o}(${i});

      void main() {
        ${o} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${o} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ZG {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t.map(
      (f, m) => f[0] + e[m] + f[1]
      /* afterPad */
    );
    const r = e.length, o = ut(r), a = t.map((f) => f[0]).join(","), i = t.map((f, m) => f[0] + e[m]).join(","), l = hn("rc", r), c = hn("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = s === "reflect" ? 0 : 1;
    let p = "";
    if (r === 1) {
      const f = `
        ${o} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
      p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    } else {
      const f = `
        ${o} source = rc;
        ${o} lt = ${o}(lessThan(source, start));
        ${o} gte = ${o}(greaterThanEqual(source, end));
        ${o} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
      p = `
        ${o} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[r - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
        rc = outputLoc;
        ${l[r - 2]} += 1;
        if(${l[r - 2]} < ${this.outputShape[r - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${h});
          ${l[r - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${h});
          }
        }
      `;
    }
    this.userCode = `
      const ${o} start = ${o}(${a});
      const ${o} end = ${o}(${i});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JG = ({ inputs: n, backend: e, attrs: t }) => {
  const { x: s } = n, { paddings: r, mode: o } = t, a = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new ZG(s.shape, r, o) : new YG(s.shape, r, o);
  return e.runWebGLProgram(a, [s], s.dtype);
}, QG = {
  kernelName: $u,
  backendName: "webgl",
  kernelFunc: JG
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eH = `if (b == 0.0) return NAN;
  return mod(a, b);`, tH = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + El + `
  return result;
`, nH = tn({
  opSnippet: eH,
  packedOpSnippet: tH
}), sH = {
  kernelName: Oi,
  backendName: "webgl",
  kernelFunc: nH
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rH {
  constructor(e, t, s) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e, s], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t - 1}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oH = `
if (a == b) {
  return 1.0;
};
return a / b;`, aH = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, EI = tn({ opSnippet: oH, packedOpSnippet: aH, checkOutOfBounds: !0 }), iH = {
  kernelName: xi,
  backendName: "webgl",
  kernelFunc: EI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ny = "return a - b;", DI = tn({
  opSnippet: Ny,
  packedOpSnippet: Ny,
  supportsComplex: !0,
  cpuKernelImpl: a8
}), lH = {
  kernelName: Zi,
  backendName: "webgl",
  kernelFunc: DI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AI(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { dim: o } = s, a = ze([o], r.shape), i = TI({
    inputs: { x: r },
    backend: t,
    attrs: { reductionIndices: a, keepDims: !1 }
  }), l = St(i.shape, a), c = me({ inputs: { x: i }, backend: t, attrs: { shape: l } }), u = DI({ inputs: { a: r, b: c }, backend: t }), h = SI({ inputs: { x: u }, backend: t }), d = Oh({ inputs: { x: h }, backend: t, attrs: { axis: a, keepDims: !1 } }), p = me({ inputs: { x: d }, backend: t, attrs: { shape: l } }), f = EI({ inputs: { a: h, b: p }, backend: t });
  return t.disposeIntermediateTensorInfo(i), t.disposeIntermediateTensorInfo(c), t.disposeIntermediateTensorInfo(u), t.disposeIntermediateTensorInfo(h), t.disposeIntermediateTensorInfo(d), t.disposeIntermediateTensorInfo(p), f;
}
const cH = {
  kernelName: Vu,
  backendName: "webgl",
  kernelFunc: AI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uH(n) {
  const { inputs: e, backend: t, attrs: s } = n, { logits: r } = e, { numSamples: o, seed: a, normalized: i } = s, l = i ? r : AI({ inputs: { logits: r }, backend: t, attrs: { dim: r.shape.length - 1 } }), c = l.shape[0], u = l.shape[1], h = new rH(c, u, o), d = [[a]], p = t.runWebGLProgram(h, [l], "int32", d);
  return i || t.disposeIntermediateTensorInfo(l), p;
}
const hH = {
  kernelName: Jp,
  backendName: "webgl",
  kernelFunc: uH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dH = ms + `
  return -x;
`, pH = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function fH(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (t.shouldExecuteOnCPU([s])) {
    const o = t.texData.get(s.dataId), [a, i] = UB(o.values, s.shape, s.dtype);
    return t.makeTensorInfo(i, s.dtype, a);
  }
  let r;
  return K().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? r = new to(s.shape, pH) : r = new Js(s.shape, dH), t.runWebGLProgram(r, [s], s.dtype);
}
const mH = {
  kernelName: Cu,
  backendName: "webgl",
  kernelFunc: fH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gH = Im;
function yH(n) {
  Vn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: o } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l } = s, c = t.readSync(r.dataId), u = t.readSync(o.dataId), { selectedIndices: h } = gH(c, u, a, i, l);
  return t.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const bH = {
  kernelName: Qp,
  backendName: "webgl",
  kernelFunc: yH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xH = $m;
function wH(n) {
  Vn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: o } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, padToMaxOutputSize: c } = s, u = t.readSync(r.dataId), h = t.readSync(o.dataId), { selectedIndices: d, validOutputs: p } = xH(u, h, a, i, l, c);
  return [
    t.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    t.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const vH = {
  kernelName: ef,
  backendName: "webgl",
  kernelFunc: wH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IH = Cm;
function $H(n) {
  Vn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: e, backend: t, attrs: s } = n, { boxes: r, scores: o } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: l, softNmsSigma: c } = s, u = t.readSync(r.dataId), h = t.readSync(o.dataId), d = a, p = i, f = l, m = c, { selectedIndices: g, selectedScores: y } = IH(u, h, d, p, f, m);
  return [
    t.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    t.makeTensorInfo([y.length], "float32", new Float32Array(y))
  ];
}
const CH = {
  kernelName: tf,
  backendName: "webgl",
  kernelFunc: $H
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SH {
  constructor(e, t, s, r) {
    this.variableNames = ["indices"], this.outputShape = [e, t], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${s}),
                      float(index == coords.y)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NH = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r } = e, { dtype: o, depth: a, onValue: i, offValue: l } = s, c = Z(r.shape), u = new SH(c, a, i, l), h = me({ inputs: { x: r }, backend: t, attrs: { shape: [c] } }), d = t.runWebGLProgram(u, [h], o);
  t.disposeIntermediateTensorInfo(h);
  const p = [...r.shape, a], f = me({ inputs: { x: d }, backend: t, attrs: { shape: p } });
  return t.disposeIntermediateTensorInfo(d), f;
}, kH = {
  kernelName: ku,
  backendName: "webgl",
  kernelFunc: NH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pc(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "complex64") {
    const r = Al({ inputs: { input: s }, backend: t }), o = Pc({ inputs: { x: r }, backend: t }), a = Lh({ inputs: { input: s }, backend: t }), i = Pc({ inputs: { x: a }, backend: t }), l = Wr({ inputs: { real: o, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return Rl({
      attrs: {
        shape: s.shape,
        dtype: s.dtype,
        value: s.dtype === "string" ? "" : 0
      },
      backend: t
    });
}
const TH = {
  kernelName: Gu,
  backendName: "webgl",
  kernelFunc: Pc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RI(n) {
  const { inputs: e, backend: t } = n, { x: s } = e;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    const r = Al({ inputs: { input: s }, backend: t }), o = RI({ inputs: { x: r }, backend: t }), a = Lh({ inputs: { input: s }, backend: t }), i = Pc({ inputs: { x: a }, backend: t }), l = Wr({ inputs: { real: o, imag: i }, backend: t });
    return t.disposeIntermediateTensorInfo(r), t.disposeIntermediateTensorInfo(o), t.disposeIntermediateTensorInfo(a), t.disposeIntermediateTensorInfo(i), l;
  } else
    return Rl({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: t });
}
const EH = {
  kernelName: Nu,
  backendName: "webgl",
  kernelFunc: RI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DH(n) {
  const { inputs: e, backend: t, attrs: s } = n, { axis: r } = s;
  if (e.length === 1)
    return mp({ inputs: { input: e[0] }, backend: t, attrs: { dim: r } });
  const o = e[0].shape, a = e[0].dtype;
  e.forEach((u) => {
    Pn(o, u.shape, "All tensors passed to stack must have matching shapes"), N(a === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const i = [], l = e.map((u) => {
    const h = mp({ inputs: { input: u }, backend: t, attrs: { dim: r } });
    return i.push(h), h;
  }), c = yI({ inputs: l, backend: t, attrs: { axis: r } });
  return i.forEach((u) => t.disposeIntermediateTensorInfo(u)), c;
}
const AH = {
  kernelName: Tu,
  backendName: "webgl",
  kernelFunc: DH
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RH {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map(
      (c, u) => c[0] + e[u] + c[1]
      /* afterPad */
    );
    const r = e.length, o = ut(r), a = t.map((c) => c[0]).join(","), i = t.map((c, u) => c[0] + e[u]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r);
    if (r === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${o} start = ${o}(${a});
      ${o} end = ${o}(${i});

      void main() {
        ${o} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${o} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FH {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t.map(
      (m, g) => m[0] + e[g] + m[1]
      /* afterPad */
    );
    const r = e.length, o = ut(r), a = t.map((m) => m[0]).join(","), i = t.map((m, g) => m[0] + e[g]).join(","), l = hn("rc", r), c = hn("source", r), u = `${l[r - 1]} < ${this.outputShape[r - 1]}`, h = r === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = [
      `${o} rc = outputLoc;`,
      `${l[r - 1]} += 1;
       if(${u}) {
      `,
      r === 1 ? "" : `}
       rc = outputLoc;
       ${l[r - 2]} += 1;
       if(${l[r - 2]} < ${this.outputShape[r - 2]}) {`,
      r === 1 ? "" : `  ${l[r - 1]} += 1;
         if(${u}) {`
    ], p = r === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let f = "";
    for (let m = 0, g = r === 1 ? 2 : 4; m < g; m++)
      f += `
        ${d[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${o} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    f += r === 1 ? "} " : "}}", this.userCode = `
      const ${o} start = ${o}(${a});
      const ${o} end = ${o}(${i});

      void main() {
        ${o} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FI = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { paddings: o, constantValue: a } = s;
  if (Z(r.shape) === 0) {
    const c = o.map(
      (u, h) => u[0] + r.shape[h] + u[1]
      /* afterPad */
    );
    return Rl({
      backend: t,
      attrs: { shape: c, value: a, dtype: r.dtype }
    });
  }
  const i = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new FH(r.shape, o, a) : new RH(r.shape, o, a), l = [[a]];
  return t.runWebGLProgram(i, [r], r.dtype, l);
}, _H = {
  kernelName: Eu,
  backendName: "webgl",
  kernelFunc: FI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OH = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, LH = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + El + `
  return result;
`, PH = tn({ opSnippet: OH, packedOpSnippet: LH }), zH = {
  kernelName: Pi,
  backendName: "webgl",
  kernelFunc: PH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MH(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { axis: o, keepDims: a } = s, i = r.shape.length, l = [], c = ze(o, r.shape);
  let u = c;
  const h = wt(u, i);
  let d = r;
  h != null && (d = dn({ inputs: { x: r }, backend: t, attrs: { perm: h } }), u = Nt(u.length, i), l.push(d)), en("prod", u, i);
  let p;
  if (t.shouldExecuteOnCPU([d])) {
    const f = t.texData.get(d.dataId).values, { outVals: m, outShape: g, outDtype: y } = HB(d.shape, d.dtype, f, u);
    p = t.makeTensorInfo(g, y, m);
  } else {
    const [f, m] = qt(d.shape, u), g = Z(m), y = me({ inputs: { x: d }, backend: t, attrs: { shape: [-1, g] } }), b = Nf(r.dtype), w = Co(y, b, "prod", t);
    p = me({ inputs: { x: w }, backend: t, attrs: { shape: f } }), l.push(y), l.push(w);
  }
  if (a) {
    l.push(p);
    const f = St(p.shape, c);
    p = me({ inputs: { x: p }, backend: t, attrs: { shape: f } });
  }
  return l.forEach((f) => t.disposeIntermediateTensorInfo(f)), p;
}
const BH = {
  kernelName: Au,
  backendName: "webgl",
  kernelFunc: MH
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VH(n) {
  const { inputs: e, backend: t, attrs: s } = n, { paramsNestedSplits: r, paramsDenseValues: o, indices: a } = e, { outputRaggedRank: i } = s, l = r.map((y) => t.readSync(y.dataId)), c = r.map((y) => y.shape), u = t.readSync(o.dataId), h = t.readSync(a.dataId), [d, p, f] = jB(l, c, u, o.shape, o.dtype, h, a.shape, i), m = d.map((y) => t.makeTensorInfo([y.length], "int32", y)), g = t.makeTensorInfo(f, o.dtype, p);
  return m.concat([g]);
}
const WH = {
  kernelName: nf,
  backendName: "webgl",
  kernelFunc: VH
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UH(n) {
  const { inputs: e, backend: t, attrs: s } = n, { shape: r, values: o, defaultValue: a, rowPartitionTensors: i } = e, { rowPartitionTypes: l } = s, c = t.readSync(r.dataId), u = t.readSync(o.dataId), h = t.readSync(a.dataId), d = i.map((g) => t.readSync(g.dataId)), p = i.map((g) => g.shape), [f, m] = qB(c, r.shape, u, o.shape, o.dtype, h, a.shape, d, p, l);
  return t.makeTensorInfo(f, o.dtype, m);
}
const GH = {
  kernelName: sf,
  backendName: "webgl",
  kernelFunc: UH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _I = (n) => {
  const { backend: e, attrs: t } = n, { start: s, stop: r, step: o, dtype: a } = t, i = KB(s, r, o, a);
  return e.makeTensorInfo([i.length], a, i);
}, HH = {
  kernelName: rf,
  backendName: "webgl",
  kernelFunc: _I
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jH = "return 1.0 / x;", qH = qe({ opSnippet: jH }), KH = {
  kernelName: zi,
  backendName: "webgl",
  kernelFunc: qH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XH = ms + `
  return (x < 0.0) ? 0.0 : x;
`, YH = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, ZH = qe({ opSnippet: XH, packedOpSnippet: YH }), JH = {
  kernelName: Mi,
  backendName: "webgl",
  kernelFunc: ZH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QH = ms + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, ej = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, tj = qe({ opSnippet: QH, packedOpSnippet: ej }), nj = {
  kernelName: Bi,
  backendName: "webgl",
  kernelFunc: tj
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sj {
  constructor(e, t, s, r, o) {
    this.variableNames = ["A"], this.outputShape = [];
    const [a, i, l, c] = e;
    this.outputShape = [a, t, s, c];
    const u = [
      r && t > 1 ? i - 1 : i,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && t > 1 ? t - 1 : t,
      r && s > 1 ? s - 1 : s
    ];
    let d;
    o ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rj {
  constructor(e, t, s, r, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [a, i, l, c] = e;
    this.outputShape = [a, t, s, c];
    const u = [
      r && t > 1 ? i - 1 : i,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && t > 1 ? t - 1 : t,
      r && s > 1 ? s - 1 : s
    ];
    let d;
    o ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: o, halfPixelCenters: a, size: i } = s, [l, c] = i, u = K().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new rj(r.shape, l, c, o, a) : new sj(r.shape, l, c, o, a);
  return t.runWebGLProgram(u, [r], "float32");
}
const aj = {
  kernelName: _u,
  backendName: "webgl",
  kernelFunc: oj
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ij {
  constructor(e, t, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    const [, r, o] = t, [, a, i] = e, l = [
      s && a > 1 ? r - 1 : r,
      s && i > 1 ? o - 1 : o
    ], c = [
      s && a > 1 ? a - 1 : a,
      s && i > 1 ? i - 1 : i
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${o - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: o } = e, { alignCorners: a } = s, i = new ij(o.shape, r.shape, a);
  return t.runWebGLProgram(i, [o], o.dtype);
}
const cj = {
  kernelName: lf,
  backendName: "webgl",
  kernelFunc: lj
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class uj {
  constructor(e, t, s, r, o) {
    this.variableNames = ["A"], this.outputShape = [];
    const [a, i, l, c] = e;
    this.outputShape = [a, t, s, c];
    const u = [
      r && t > 1 ? i - 1 : i,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && t > 1 ? t - 1 : t,
      r && s > 1 ? s - 1 : s
    ], d = r ? "0.5" : "0.0";
    let p;
    o ? p = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hj {
  constructor(e, t, s, r, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [a, i, l, c] = e;
    this.outputShape = [a, t, s, c];
    const u = [
      r && t > 1 ? i - 1 : i,
      r && s > 1 ? l - 1 : l
    ], h = [
      r && t > 1 ? t - 1 : t,
      r && s > 1 ? s - 1 : s
    ], d = r ? "0.5" : "0.0";
    let p;
    o ? p = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r } = e, { alignCorners: o, halfPixelCenters: a, size: i } = s, [l, c] = i, u = K().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new hj(r.shape, l, c, o, a) : new uj(r.shape, l, c, o, a);
  return t.runWebGLProgram(u, [r], r.dtype);
}
const pj = {
  kernelName: Fu,
  backendName: "webgl",
  kernelFunc: dj
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class fj {
  constructor(e, t, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t;
    const [, r, o] = t, [, a, i] = e, l = [
      s && a > 1 ? r - 1 : r,
      s && i > 1 ? o - 1 : o
    ], c = [
      s && a > 1 ? a - 1 : a,
      s && i > 1 ? i - 1 : i
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { images: r, dy: o } = e, { alignCorners: a } = s, i = new fj(o.shape, r.shape, a);
  return t.runWebGLProgram(i, [o], o.dtype);
}
const gj = {
  kernelName: af,
  backendName: "webgl",
  kernelFunc: mj
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class yj {
  constructor(e, t) {
    this.variableNames = ["x"];
    const s = e.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    if (this.outputShape = e, s === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;
      return;
    }
    const r = (i) => t.indexOf(i) !== -1 && e[i] !== 1 ? `${e[i]} - coords[${i}] - 1` : `coords[${i}]`, o = e.map((i, l) => r(l)).join(","), a = ut(s);
    this.userCode = `
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${o}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bj {
  constructor(e, t) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0;
    const s = e.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    this.outputShape = e;
    const r = hn("rc", s), o = `${r[s - 1]} + 1 < ${this.outputShape[s - 1]}`, a = `${r[s - 2]} + 1 < ${this.outputShape[s - 2]}`, i = ut(s);
    s === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${o}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(r.slice())};
          if(${o}){
            result.g = ${c(r.slice())};
          }
          if(${a}) {
            result.b = ${u(r.slice())};
            if(${o}) {
              result.a = ${h(r.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function l(f) {
      return d(f);
    }
    function c(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", d(f);
    }
    function u(f) {
      return f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function h(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function d(f) {
      const m = e.map((b, w) => p(w, f)), g = m.join(","), y = m.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${y}))`;
    }
    function p(f, m) {
      return t.indexOf(f) !== -1 && e[f] !== 1 ? `${e[f]} - ${m[f]} - 1` : `${m[f]}`;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { dims: o } = s, a = r.shape.length, i = ze(o, r.shape);
  if (a === 0)
    return Ln({ inputs: { x: r }, backend: t });
  const l = K().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new bj(r.shape, i) : new yj(r.shape, i);
  return t.runWebGLProgram(l, [r], r.dtype);
}
const wj = {
  kernelName: Ou,
  backendName: "webgl",
  kernelFunc: xj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vj {
  constructor(e, t) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const s = e[1], r = e[2];
    this.outputShape = e;
    let o = "";
    typeof t == "number" ? o = `float outputValue = ${t.toFixed(2)};` : o = `
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${o}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ij = {
  kernelName: Cf,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: e, backend: t }) => {
    const { image: s } = n, { radians: r, fillValue: o, center: a } = e, i = t, l = new vj(s.shape, o), [c, u] = _m(a, s.shape[1], s.shape[2]), h = [[c, u, Math.sin(r), Math.cos(r)]];
    return i.runWebGLProgram(l, [s], s.dtype, h);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $j = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, Cj = qe({ opSnippet: $j }), Sj = {
  kernelName: Vi,
  backendName: "webgl",
  kernelFunc: Cj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Nj = "return inversesqrt(x);", kj = qe({ opSnippet: Nj, cpuKernelImpl: XB }), Tj = {
  kernelName: Wi,
  backendName: "webgl",
  kernelFunc: kj
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OI {
  constructor(e, t, s, r, o, a, i = !0) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a;
    const l = ut(o.length), c = ut(a.length);
    let u = "";
    s === 1 ? u = "i" : s === 2 && (u = "i, j");
    const h = `getIndices(${u})`;
    let d = "";
    r === 1 ? d = "i" : r === 2 && (d = "i, coords[1]");
    const p = `getUpdates(${d})`, f = t > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${o});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${f};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${p};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ej(n) {
  const { inputs: e, backend: t, attrs: s } = n, { indices: r, updates: o } = e, { shape: a } = s, { sliceRank: i, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = sl(o, r, a), d = [h / c, c];
  if (h === 0)
    return t.makeTensorInfo(a, r.dtype);
  const p = me({ inputs: { x: r }, backend: t, attrs: { shape: [l, i] } }), f = me({ inputs: { x: o }, backend: t, attrs: { shape: [l, c] } }), m = t.makeTensorInfo([], "float32", new Float32Array([0])), g = new OI(l, i, p.shape.length, f.shape.length, u, d), y = t.runWebGLProgram(g, [f, p, m], f.dtype), b = me({ inputs: { x: y }, backend: t, attrs: { shape: a } });
  return t.disposeIntermediateTensorInfo(p), t.disposeIntermediateTensorInfo(f), t.disposeIntermediateTensorInfo(y), t.disposeIntermediateTensorInfo(m), b;
}
const Dj = {
  kernelName: cf,
  backendName: "webgl",
  kernelFunc: Ej
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Aj {
  constructor(e, t, s, r) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [e, s];
    const o = "while (left < right) {", a = `for (int i = 0; i < ${Math.ceil(Math.log2(t + 1))}; ++i) { if (left >= right) break;`, i = K().getNumber("WEBGL_VERSION") === 2 ? o : a, l = r === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rj(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sortedSequence: r, values: o } = e, { side: a } = s, i = new Aj(r.shape[0], r.shape[1], o.shape[1], a), l = [[r.shape[1]]];
  return t.runWebGLProgram(i, [r, o], "int32", l);
}
const Fj = {
  kernelName: uf,
  backendName: "webgl",
  kernelFunc: Rj
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _j {
  constructor(e, t, s) {
    this.variableNames = ["c", "a", "b"], this.outputShape = t;
    let r, o;
    if (s > 4)
      throw Error(`Where for rank ${s} is not yet supported`);
    if (s === 1)
      o = "resRC", r = "resRC";
    else {
      const i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], l = [], c = [];
      for (let u = 0; u < t.length; u++)
        c.push(`${i[u]}`), u < e && l.push(`${i[u]}`);
      r = l.join(), o = c.join();
    }
    const a = ut(s);
    this.userCode = `
      void main() {
        ${a} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${o}));
        } else {
          setOutput(getB(${o}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Oj(n) {
  const { inputs: e, backend: t } = n, { condition: s, t: r, e: o } = e, a = new _j(s.shape.length, r.shape, r.shape.length);
  return t.runWebGLProgram(a, [s, r, o], Rn(r.dtype, o.dtype));
}
const Lj = {
  kernelName: Lu,
  backendName: "webgl",
  kernelFunc: Oj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pj = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${bh};
  float scale = ${xh};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, zj = qe({ opSnippet: Pj }), Mj = {
  kernelName: Ui,
  backendName: "webgl",
  kernelFunc: zj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Bj = Ta + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, Vj = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Wj = qe({
  opSnippet: Bj,
  packedOpSnippet: Vj,
  cpuKernelImpl: ZB
}), Uj = {
  kernelName: qi,
  backendName: "webgl",
  kernelFunc: Wj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gj = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, Hj = qe({ opSnippet: Gj }), jj = {
  kernelName: ji,
  backendName: "webgl",
  kernelFunc: Hj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qj = Ta + `
  return sin(x);
`, Kj = qe({ opSnippet: qj }), Xj = {
  kernelName: Gi,
  backendName: "webgl",
  kernelFunc: Kj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Yj = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, Zj = qe({ opSnippet: Yj }), Jj = {
  kernelName: Hi,
  backendName: "webgl",
  kernelFunc: Zj
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Qj = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, eq = qe({ opSnippet: Qj }), tq = {
  kernelName: Ki,
  backendName: "webgl",
  kernelFunc: eq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nq = (n) => {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { blockShape: o, paddings: a } = s;
  N(r.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const i = o.reduce((y, b) => y * b), l = [[0, 0]];
  l.push(...a);
  for (let y = 1 + o.length; y < r.shape.length; ++y)
    l.push([0, 0]);
  const c = [], u = FI({
    inputs: { x: r },
    backend: t,
    attrs: { paddings: l, constantValue: 0 }
  }), h = pl(u.shape, o, i, !1), d = fl(h.length, o.length, !1), p = ml(u.shape, o, i, !1), f = me({ inputs: { x: u }, backend: t, attrs: { shape: h } }), m = dn({
    inputs: { x: f },
    backend: t,
    attrs: { perm: d }
  }), g = me({ inputs: { x: m }, backend: t, attrs: { shape: p } });
  return c.push(u), c.push(f), c.push(m), c.forEach((y) => t.disposeIntermediateTensorInfo(y)), g;
}, sq = {
  kernelName: Mu,
  backendName: "webgl",
  kernelFunc: nq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rq(n) {
  const { inputs: e, backend: t } = n, { indices: s, values: r, denseShape: o, defaultValue: a } = e;
  if (o.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${o.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${r.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  const i = t.readSync(s.dataId), l = t.readSync(r.dataId), c = t.readSync(o.dataId), u = t.readSync(a.dataId)[0], [h, d, p, f, m] = QB(i, s.shape, s.dtype, l, r.dtype, c, u);
  return [
    t.makeTensorInfo(d, s.dtype, h),
    t.makeTensorInfo([d[0]], r.dtype, p),
    t.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    t.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const oq = {
  kernelName: hf,
  backendName: "webgl",
  kernelFunc: rq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aq(n) {
  const { inputs: e, backend: t } = n, { inputIndices: s, inputShape: r, newShape: o } = e;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${o.shape}`);
  const a = Array.from(t.readSync(r.dataId)), i = t.readSync(s.dataId), l = Array.from(t.readSync(o.dataId)), [c, u, h] = e8(i, s.shape, s.dtype, a, l);
  return [
    t.makeTensorInfo(u, s.dtype, c),
    t.makeTensorInfo([h.length], o.dtype, new Int32Array(h))
  ];
}
const iq = {
  kernelName: df,
  backendName: "webgl",
  kernelFunc: aq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lq(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: o } = e;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${o.shape}`);
  const a = t.readSync(s.dataId), i = t.readSync(r.dataId), l = t.readSync(o.dataId), [c, u] = rI(a, s.shape, s.dtype, i, l, !0);
  return t.makeTensorInfo(u, s.dtype, c);
}
const cq = {
  kernelName: pf,
  backendName: "webgl",
  kernelFunc: lq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uq(n) {
  const { inputs: e, backend: t } = n, { data: s, indices: r, segmentIds: o } = e;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (r.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${r.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${o.shape}`);
  const a = t.readSync(s.dataId), i = t.readSync(r.dataId), l = t.readSync(o.dataId), [c, u] = rI(a, s.shape, s.dtype, i, l);
  return t.makeTensorInfo(u, s.dtype, c);
}
const hq = {
  kernelName: ff,
  backendName: "webgl",
  kernelFunc: uq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { sparseIndices: r, sparseValues: o, defaultValue: a } = e, { outputShape: i } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = sl(o, r, i), p = !1;
  if (o.dtype === "string") {
    const y = t.bufferSync(r), b = t.bufferSync(o), w = vr(t.readSync(a.dataId)[0]), x = YB(y, b, i, d, u, c, l, h, w, p);
    return t.makeTensorInfo(i, x.dtype, x.values);
  }
  const f = new OI(c, l, r.shape.length, o.shape.length, h, [d, 1], p), m = t.runWebGLProgram(f, [o, r, a], o.dtype), g = me({ inputs: { x: m }, backend: t, attrs: { shape: i } });
  return t.disposeIntermediateTensorInfo(m), g;
}
const pq = {
  kernelName: mf,
  backendName: "webgl",
  kernelFunc: dq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { numOrSizeSplits: o, axis: a } = s, i = ze(a, r.shape)[0], l = Xm(r, o, i), c = r.shape.length, u = new Array(c).fill(0), h = r.shape.slice();
  return l.map((d) => {
    const p = [...h];
    p[i] = d;
    const f = Ea({ inputs: { x: r }, backend: t, attrs: { begin: u, size: p } });
    return u[i] += d, f;
  });
}
const mq = {
  kernelName: Bu,
  backendName: "webgl",
  kernelFunc: fq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ky = "return sqrt(x);", gq = qe({ opSnippet: ky, packedOpSnippet: ky, cpuKernelImpl: t8 }), yq = {
  kernelName: Xi,
  backendName: "webgl",
  kernelFunc: gq
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bq = "return x * x;", xq = qe({ opSnippet: bq }), wq = {
  kernelName: gf,
  backendName: "webgl",
  kernelFunc: xq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ty = "return (a - b) * (a - b);", vq = tn({ opSnippet: Ty, packedOpSnippet: Ty }), Iq = {
  kernelName: Yi,
  backendName: "webgl",
  kernelFunc: vq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $q({ inputs: n, attrs: e, backend: t }) {
  const { x: s } = n, r = ms + `
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `, o = new Js(s.shape, r);
  return t.runWebGLProgram(o, [s], s.dtype);
}
const Cq = {
  kernelName: tl,
  backendName: "webgl",
  kernelFunc: $q
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Sq {
  constructor(e, t, s) {
    this.variableNames = ["x"], this.outputShape = s;
    const r = s.length, o = ut(s.length), a = ut(s.length);
    let i = "";
    if (r === 1)
      i = "coords * strides + begin";
    else {
      let l = 0;
      i = s.map((c, u) => (l++, s.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${l - 1}] * strides[${u}] + begin[${u}]`)).join(",");
    }
    this.userCode = `
      ${o} begin = ${o}(${e});
      ${o} strides = ${o}(${t});

      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { begin: o, end: a, strides: i, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: y, begin: b, end: w, strides: x } = Pf(r.shape, o, a, i, l, c, u, h, d);
  let v;
  if (m)
    v = me({ inputs: { x: r }, backend: t, attrs: { shape: f } });
  else if (g || y) {
    N(r.shape.length >= 1, () => `Input must have rank at least 1, got: ${r.shape.length}`);
    const C = _f(b, w, x), S = Ea({ inputs: { x: r }, backend: t, attrs: { begin: b, size: C } });
    v = me({ inputs: { x: S }, backend: t, attrs: { shape: f } }), t.disposeIntermediateTensorInfo(S);
  } else if (t.shouldExecuteOnCPU([r])) {
    const S = t.readSync(r.dataId), E = Le(r.shape, r.dtype, S), D = n8(p, E, x, b);
    v = t.makeTensorInfo(f, r.dtype, D.values);
  } else {
    const S = new Sq(b, x, p);
    v = t.runWebGLProgram(S, [r], r.dtype);
  }
  const $ = me({ inputs: { x: v }, backend: t, attrs: { shape: f } });
  return t.disposeIntermediateTensorInfo(v), $;
}
const kq = {
  kernelName: yf,
  backendName: "webgl",
  kernelFunc: Nq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { separator: r, nGramWidths: o, leftPad: a, rightPad: i, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = e, d = t.readSync(u.dataId), p = t.readSync(h.dataId), [f, m] = s8(d, p, r, o, a, i, l, c);
  return [
    t.makeTensorInfo([f.length], "string", f),
    t.makeTensorInfo(h.shape, "int32", m)
  ];
}
const Eq = {
  kernelName: bf,
  backendName: "webgl",
  kernelFunc: Tq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { skipEmpty: r } = s, { input: o, delimiter: a } = e;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${o.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  const i = t.readSync(o.dataId), l = t.readSync(a.dataId)[0], [c, u, h] = r8(i, l, r), d = u.length;
  return [
    t.makeTensorInfo([d, 2], "int32", c),
    t.makeTensorInfo([d], "string", u),
    t.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const Aq = {
  kernelName: xf,
  backendName: "webgl",
  kernelFunc: Dq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { numBuckets: r } = s, { input: o } = e;
  if (o.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r <= 0)
    throw new Error("Number of buckets must be at least 1");
  const a = t.readSync(o.dataId), i = o8(a, r);
  return t.makeTensorInfo(o.shape, "int32", i);
}
const Fq = {
  kernelName: wf,
  backendName: "webgl",
  kernelFunc: Rq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _q = "return tan(x);", Oq = qe({ opSnippet: _q }), Lq = {
  kernelName: Ji,
  backendName: "webgl",
  kernelFunc: Oq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Pq = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, zq = qe({ opSnippet: Pq }), Mq = {
  kernelName: Qi,
  backendName: "webgl",
  kernelFunc: zq
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Bq {
  constructor(e, t) {
    this.variableNames = ["A"];
    const s = new Array(e.length);
    for (let a = 0; a < s.length; a++)
      s[a] = e[a] * t[a];
    this.outputShape = s, this.rank = s.length;
    const r = ut(this.rank), o = Vq(e);
    this.userCode = `
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${o}));
      }
    `;
  }
}
function Vq(n) {
  const e = n.length;
  if (e > 5)
    throw Error(`Tile for rank ${e} is not yet supported`);
  if (e === 1)
    return `imod(resRC, ${n[0]})`;
  const t = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], s = [];
  for (let r = 0; r < n.length; r++)
    s.push(`imod(${t[r]}, ${n[r]})`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LI(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { reps: o } = s;
  if (r.dtype === "string" || r.shape.length > 5) {
    const l = t.readSync(r.dataId), c = r.dtype === "string" ? l.map((d) => vr(d)) : l, u = Le(r.shape, r.dtype, c), h = i8(u, o);
    return t.makeTensorInfo(h.shape, h.dtype, h.values);
  }
  const a = new Bq(r.shape, o);
  return t.runWebGLProgram(a, [r], r.dtype);
}
const Wq = {
  kernelName: el,
  backendName: "webgl",
  kernelFunc: LI
};
class Uq {
  /**
   * @param shape desired output shape (can be larger than input shape, output
   *                                    will be padded with -Infinity)
   */
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "negativeInf", type: "float" },
      { name: "dir", type: "int" },
      { name: "inc", type: "int" }
    ], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class Gq {
  /**
   * @param shape desired output shape (must be half of the input size)
   */
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "k", type: "int" }
    ], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qr(n, e) {
  e !== null && n.disposeIntermediateTensorInfo(e);
}
function Ey(n) {
  let e = 1;
  for (; e < n; )
    e *= 2;
  return e;
}
function Hq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r } = e, { k: o, sorted: a } = s, i = K().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = K().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), c = r.shape, u = c[c.length - 1];
  if (t.shouldExecuteOnCPU([r]) || u < i || o > l) {
    const D = t.readSync(r.dataId), [O, V] = l8(D, c, r.dtype, o, a);
    return [
      t.makeTensorInfo(O.shape, O.dtype, O.values),
      t.makeTensorInfo(V.shape, V.dtype, V.values)
    ];
  }
  if (o === 0)
    return c[c.length - 1] = 0, [
      t.makeTensorInfo(c, r.dtype, []),
      t.makeTensorInfo(c, "int32", [])
    ];
  if (u === 1)
    return [
      r,
      Rl({ attrs: { shape: c, dtype: "int32", value: 0 }, backend: t })
    ];
  const h = t.texData.get(r.dataId), d = h !== null && h.isPacked, p = d ? t.unpackTensor(r) : r, m = Z(c) / u, g = me({ inputs: { x: p }, attrs: { shape: [m, u] }, backend: t });
  d && qr(t, p);
  const y = Ey(o), b = Ey(u);
  let w = null;
  const x = () => w === null ? [g, g] : [g, w], v = (D, O, V) => {
    const W = x(), U = new Uq(V), q = [[u], [w === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [D], [O]], Y = w;
    w = t.runWebGLProgram(U, W, "int32", q), qr(t, Y);
  };
  for (let D = 1; D < y; D *= 2) {
    const O = D * 2;
    for (let V = D; V >= 1; V /= 2)
      v(O, V, [m, b]);
  }
  for (let D = b; D > y; D /= 2) {
    const O = x(), V = new Gq([m, D / 2]), U = [[u], [w === null ? 1 : 0], [y]], j = w;
    w = t.runWebGLProgram(V, O, "int32", U), qr(t, j);
    const q = y / 2, Y = q * 2;
    for (let X = q; X >= 1; X /= 2)
      v(Y, X, w.shape);
  }
  let $ = w;
  w = Ea({ inputs: { x: w }, backend: t, attrs: { begin: 0, size: [m, o] } }), qr(t, $);
  let C = kI({ inputs: { x: g, indices: w }, backend: t, attrs: { axis: 1, batchDims: 1 } });
  qr(t, g);
  const S = c.slice(0, -1);
  S.push(o), $ = w, w = me({ inputs: { x: w }, attrs: { shape: S }, backend: t }), qr(t, $);
  const E = C;
  return C = me({ inputs: { x: C }, attrs: { shape: S }, backend: t }), qr(t, E), [C, w];
}
const jq = {
  kernelName: vf,
  backendName: "webgl",
  kernelFunc: Hq
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qq {
  constructor(e, t, s, r, o, a) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = a;
    const i = s === "nearest" ? 1 : 2;
    let l;
    switch (r) {
      case "constant":
        l = 1;
        break;
      case "reflect":
        l = 2;
        break;
      case "wrap":
        l = 3;
        break;
      case "nearest":
        l = 4;
        break;
      default:
        l = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${o});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${o});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { image: r, transforms: o } = e, { interpolation: a, fillMode: i, fillValue: l, outputShape: c } = s, [u, h, d, p] = r.shape, [f, m] = c ?? [h, d], g = [
    u,
    f,
    m,
    p
  ], y = new qq(h, d, a, i, l, g);
  return t.runWebGLProgram(y, [r, o], "float32");
}
const Xq = {
  kernelName: If,
  backendName: "webgl",
  kernelFunc: Kq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yq(n) {
  const { inputs: e, attrs: t, backend: s } = n, { axis: r } = t, { x: o } = e;
  kl(o, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const a = s.readSync(o.dataId), { outputValues: i, outputShape: l, indices: c } = c8(a, r, o.shape, o.dtype);
  return [
    s.makeTensorInfo(l, o.dtype, i),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const Zq = {
  kernelName: $f,
  backendName: "webgl",
  kernelFunc: Yq
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Jq(n) {
  const { inputs: e, backend: t, attrs: s } = n, { value: r } = e;
  let { axis: o } = s;
  o < 0 && (o += r.shape.length);
  const a = r, i = a.shape.length, l = r.shape[o], c = new Array(i - 1);
  let u = 0;
  for (let m = 0; m < i; m++)
    m !== o && (c[u++] = a.shape[m]);
  const h = [], d = new Array(i).fill(0), p = a.shape.slice();
  p[o] = 1;
  const f = new Array(l);
  for (let m = 0; m < f.length; m++) {
    d[o] = m;
    const g = Ea({ inputs: { x: a }, backend: t, attrs: { begin: d, size: p } }), y = me({ inputs: { x: g }, backend: t, attrs: { shape: c } });
    f[m] = y, h.push(g);
  }
  return h.forEach((m) => t.disposeIntermediateTensorInfo(m)), f;
}
const Qq = {
  kernelName: Wu,
  backendName: "webgl",
  kernelFunc: Jq
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eK {
  constructor(e, t) {
    this.variableNames = ["x", "segmentIds"];
    const s = e.windowSize, r = e.batchSize, o = e.inSize, a = e.numSegments, i = a * Math.ceil(o / s);
    this.outputShape = [r, i];
    const l = "0.0", c = "sumValue", u = Math.floor(s / 4) * 4, h = s % 4, d = `
        sumValue += dot(values, segFilter);
    `;
    let p = "";
    o % s > 0 && (p = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return initializationValue;
        }
      `);
    let f = "";
    o % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${o}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tK(n) {
  const { inputs: e, backend: t, attrs: s } = n, { x: r, segmentIds: o } = e, { numSegments: a } = s, i = r.shape.length, l = [];
  let c = 0;
  const u = wt([c], i);
  let h = r;
  u != null && (h = dn({ inputs: { x: r }, backend: t, attrs: { perm: u } }), l.push(h), c = Nt(1, i)[0]);
  const d = Cx(h.shape, c, a), p = Z([h.shape[c]]), f = me({ inputs: { x: h }, backend: t, attrs: { shape: [-1, p] } });
  l.push(f);
  const m = Nf(r.dtype), g = (x, v, $, C, S) => {
    const E = x.shape[0], D = x.shape[1], O = $x(D, S), V = { windowSize: O, inSize: D, batchSize: E, numSegments: S }, W = new eK(V, v), U = t.compileAndRun(W, [x, $], C);
    if (l.push(U), U.shape[1] === S)
      return U;
    const j = _I({
      backend: t,
      attrs: { start: 0, stop: S, step: 1, dtype: "float32" }
    }), q = LI({
      inputs: { x: j },
      backend: t,
      attrs: { reps: [D / O] }
    });
    return l.push(j), l.push(q), g(U, v, q, C, S);
  }, y = g(f, "unsortedSegmentSum", o, m, a), b = me({ inputs: { x: y }, backend: t, attrs: { shape: d } });
  let w = b;
  if (u != null) {
    l.push(b);
    const x = Pr(u);
    w = dn({ inputs: { x: w }, backend: t, attrs: { perm: x } });
  }
  return l.forEach((x) => t.disposeIntermediateTensorInfo(x)), w;
}
const nK = {
  kernelName: Uu,
  backendName: "webgl",
  kernelFunc: tK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sK = [
  e7,
  n7,
  o7,
  l7,
  u7,
  p7,
  m7,
  y7,
  v7,
  $7,
  N7,
  E7,
  R7,
  L7,
  M7,
  V7,
  U7,
  q7,
  X7,
  Z7,
  tV,
  lV,
  uV,
  dV,
  bV,
  wV,
  CV,
  P8,
  kV,
  RV,
  LV,
  WV,
  GV,
  jV,
  KV,
  YV,
  QV,
  nW,
  oW,
  iW,
  cW,
  hW,
  fW,
  gW,
  wW,
  IW,
  SW,
  TW,
  DW,
  _W,
  zW,
  WW,
  HW,
  KW,
  XW,
  ZW,
  QW,
  tU,
  sU,
  oU,
  cU,
  dU,
  mU,
  yU,
  wU,
  $U,
  kU,
  AU,
  L8,
  FU,
  DV,
  LU,
  MU,
  WU,
  M8,
  jU,
  YU,
  JU,
  nG,
  oG,
  cG,
  dG,
  gG,
  wG,
  $G,
  SG,
  EG,
  AG,
  FG,
  PG,
  MG,
  VG,
  UG,
  HG,
  XG,
  QG,
  sH,
  hH,
  W8,
  mH,
  bH,
  vH,
  CH,
  fV,
  kH,
  EH,
  AH,
  _H,
  zH,
  V8,
  BH,
  WH,
  GH,
  HH,
  mV,
  iH,
  KH,
  JH,
  nj,
  G8,
  aj,
  cj,
  pj,
  gj,
  wj,
  Ij,
  Sj,
  Tj,
  Dj,
  Fj,
  Lj,
  Mj,
  Uj,
  jj,
  Xj,
  Jj,
  aV,
  cH,
  tq,
  sq,
  oq,
  iq,
  cq,
  hq,
  pq,
  mq,
  yq,
  wq,
  Iq,
  Cq,
  kq,
  Eq,
  Aq,
  Fq,
  lH,
  Z8,
  Lq,
  Mq,
  Wq,
  jq,
  Xq,
  J8,
  Zq,
  Qq,
  nK,
  TH
];
for (const n of sK)
  Qy(n);
var rK = { exports: {} };
(function(n, e) {
  (function(t, s) {
    s(n);
  })(ss, function(t) {
    function s(d, p, f) {
      return p in d ? Object.defineProperty(d, p, {
        value: f,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : d[p] = f, d;
    }
    var r = Object.assign || function(d) {
      for (var p = 1; p < arguments.length; p++) {
        var f = arguments[p];
        for (var m in f)
          Object.prototype.hasOwnProperty.call(f, m) && (d[m] = f[m]);
      }
      return d;
    };
    function o(d) {
      if (Array.isArray(d)) {
        for (var p = 0, f = Array(d.length); p < d.length; p++)
          f[p] = d[p];
        return f;
      } else
        return Array.from(d);
    }
    var a = { order: 2, precision: 2, period: null };
    function i(d, p) {
      var f = [], m = [];
      d.forEach(function(x, v) {
        x[1] !== null && (m.push(x), f.push(p[v]));
      });
      var g = m.reduce(function(x, v) {
        return x + v[1];
      }, 0), y = g / m.length, b = m.reduce(function(x, v) {
        var $ = v[1] - y;
        return x + $ * $;
      }, 0), w = m.reduce(function(x, v, $) {
        var C = f[$], S = v[1] - C[1];
        return x + S * S;
      }, 0);
      return 1 - w / b;
    }
    function l(d, p) {
      for (var f = d, m = d.length - 1, g = [p], y = 0; y < m; y++) {
        for (var b = y, w = y + 1; w < m; w++)
          Math.abs(f[y][w]) > Math.abs(f[y][b]) && (b = w);
        for (var x = y; x < m + 1; x++) {
          var v = f[x][y];
          f[x][y] = f[x][b], f[x][b] = v;
        }
        for (var $ = y + 1; $ < m; $++)
          for (var C = m; C >= y; C--)
            f[C][$] -= f[C][y] * f[y][$] / f[y][y];
      }
      for (var S = m - 1; S >= 0; S--) {
        for (var E = 0, D = S + 1; D < m; D++)
          E += f[D][S] * g[D];
        g[S] = (f[m][S] - E) / f[S][S];
      }
      return g;
    }
    function c(d, p) {
      var f = Math.pow(10, p);
      return Math.round(d * f) / f;
    }
    var u = {
      linear: function(p, f) {
        for (var m = [0, 0, 0, 0, 0], g = 0, y = 0; y < p.length; y++)
          p[y][1] !== null && (g++, m[0] += p[y][0], m[1] += p[y][1], m[2] += p[y][0] * p[y][0], m[3] += p[y][0] * p[y][1], m[4] += p[y][1] * p[y][1]);
        var b = g * m[2] - m[0] * m[0], w = g * m[3] - m[0] * m[1], x = b === 0 ? 0 : c(w / b, f.precision), v = c(m[1] / g - x * m[0] / g, f.precision), $ = function(E) {
          return [c(E, f.precision), c(x * E + v, f.precision)];
        }, C = p.map(function(S) {
          return $(S[0]);
        });
        return {
          points: C,
          predict: $,
          equation: [x, v],
          r2: c(i(p, C), f.precision),
          string: v === 0 ? "y = " + x + "x" : "y = " + x + "x + " + v
        };
      },
      exponential: function(p, f) {
        for (var m = [0, 0, 0, 0, 0, 0], g = 0; g < p.length; g++)
          p[g][1] !== null && (m[0] += p[g][0], m[1] += p[g][1], m[2] += p[g][0] * p[g][0] * p[g][1], m[3] += p[g][1] * Math.log(p[g][1]), m[4] += p[g][0] * p[g][1] * Math.log(p[g][1]), m[5] += p[g][0] * p[g][1]);
        var y = m[1] * m[2] - m[5] * m[5], b = Math.exp((m[2] * m[3] - m[5] * m[4]) / y), w = (m[1] * m[4] - m[5] * m[3]) / y, x = c(b, f.precision), v = c(w, f.precision), $ = function(E) {
          return [c(E, f.precision), c(x * Math.exp(v * E), f.precision)];
        }, C = p.map(function(S) {
          return $(S[0]);
        });
        return {
          points: C,
          predict: $,
          equation: [x, v],
          string: "y = " + x + "e^(" + v + "x)",
          r2: c(i(p, C), f.precision)
        };
      },
      logarithmic: function(p, f) {
        for (var m = [0, 0, 0, 0], g = p.length, y = 0; y < g; y++)
          p[y][1] !== null && (m[0] += Math.log(p[y][0]), m[1] += p[y][1] * Math.log(p[y][0]), m[2] += p[y][1], m[3] += Math.pow(Math.log(p[y][0]), 2));
        var b = (g * m[1] - m[2] * m[0]) / (g * m[3] - m[0] * m[0]), w = c(b, f.precision), x = c((m[2] - w * m[0]) / g, f.precision), v = function(S) {
          return [c(S, f.precision), c(c(x + w * Math.log(S), f.precision), f.precision)];
        }, $ = p.map(function(C) {
          return v(C[0]);
        });
        return {
          points: $,
          predict: v,
          equation: [x, w],
          string: "y = " + x + " + " + w + " ln(x)",
          r2: c(i(p, $), f.precision)
        };
      },
      power: function(p, f) {
        for (var m = [0, 0, 0, 0, 0], g = p.length, y = 0; y < g; y++)
          p[y][1] !== null && (m[0] += Math.log(p[y][0]), m[1] += Math.log(p[y][1]) * Math.log(p[y][0]), m[2] += Math.log(p[y][1]), m[3] += Math.pow(Math.log(p[y][0]), 2));
        var b = (g * m[1] - m[0] * m[2]) / (g * m[3] - Math.pow(m[0], 2)), w = (m[2] - b * m[0]) / g, x = c(Math.exp(w), f.precision), v = c(b, f.precision), $ = function(E) {
          return [c(E, f.precision), c(c(x * Math.pow(E, v), f.precision), f.precision)];
        }, C = p.map(function(S) {
          return $(S[0]);
        });
        return {
          points: C,
          predict: $,
          equation: [x, v],
          string: "y = " + x + "x^" + v,
          r2: c(i(p, C), f.precision)
        };
      },
      polynomial: function(p, f) {
        for (var m = [], g = [], y = 0, b = 0, w = p.length, x = f.order + 1, v = 0; v < x; v++) {
          for (var $ = 0; $ < w; $++)
            p[$][1] !== null && (y += Math.pow(p[$][0], v) * p[$][1]);
          m.push(y), y = 0;
          for (var C = [], S = 0; S < x; S++) {
            for (var E = 0; E < w; E++)
              p[E][1] !== null && (b += Math.pow(p[E][0], v + S));
            C.push(b), b = 0;
          }
          g.push(C);
        }
        g.push(m);
        for (var D = l(g, x).map(function(j) {
          return c(j, f.precision);
        }), O = function(q) {
          return [c(q, f.precision), c(D.reduce(function(Y, X, Q) {
            return Y + X * Math.pow(q, Q);
          }, 0), f.precision)];
        }, V = p.map(function(j) {
          return O(j[0]);
        }), W = "y = ", U = D.length - 1; U >= 0; U--)
          U > 1 ? W += D[U] + "x^" + U + " + " : U === 1 ? W += D[U] + "x + " : W += D[U];
        return {
          string: W,
          points: V,
          predict: O,
          equation: [].concat(o(D)).reverse(),
          r2: c(i(p, V), f.precision)
        };
      }
    };
    function h() {
      var d = function(f, m) {
        return r({
          _round: c
        }, f, s({}, m, function(g, y) {
          return u[m](g, r({}, a, y));
        }));
      };
      return Object.keys(u).reduce(d, {});
    }
    t.exports = h();
  });
})(rK);
window.requestAnimationFrame = window.requestAnimationFrame || // @ts-ignore
window.webkitRequestAnimationFrame || // @ts-ignore
window.mozRequestAnimationFrame || // @ts-ignore
window.oRequestAnimationFrame || // @ts-ignore
window.msRequestAnimationFrame || /**
 * @callback
 * @param {FrameRequestCallback} callback
 */
((n) => window.setTimeout(n, 1e3 / 60));
window.cancelAnimationFrame = window.cancelAnimationFrame || // @ts-ignore
window.webkitCancelRequestAnimationFrame || // @ts-ignore
window.mozCancelRequestAnimationFrame || // @ts-ignore
window.oCancelRequestAnimationFrame || // @ts-ignore
window.msCancelRequestAnimationFrame || window.clearTimeout;
function Kl(n) {
  throw new Error('Could not dynamically require "' + n + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var PI = { exports: {} };
/*!
    localForage -- Offline Storage, Improved
    Version 1.7.3
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
(function(n, e) {
  (function(t) {
    n.exports = t();
  })(function() {
    return function t(s, r, o) {
      function a(c, u) {
        if (!r[c]) {
          if (!s[c]) {
            var h = typeof Kl == "function" && Kl;
            if (!u && h) return h(c, !0);
            if (i) return i(c, !0);
            var d = new Error("Cannot find module '" + c + "'");
            throw d.code = "MODULE_NOT_FOUND", d;
          }
          var p = r[c] = { exports: {} };
          s[c][0].call(p.exports, function(f) {
            var m = s[c][1][f];
            return a(m || f);
          }, p, p.exports, t, s, r, o);
        }
        return r[c].exports;
      }
      for (var i = typeof Kl == "function" && Kl, l = 0; l < o.length; l++) a(o[l]);
      return a;
    }({ 1: [function(t, s, r) {
      (function(o) {
        var a = o.MutationObserver || o.WebKitMutationObserver, i;
        if (a) {
          var l = 0, c = new a(f), u = o.document.createTextNode("");
          c.observe(u, {
            characterData: !0
          }), i = function() {
            u.data = l = ++l % 2;
          };
        } else if (!o.setImmediate && typeof o.MessageChannel < "u") {
          var h = new o.MessageChannel();
          h.port1.onmessage = f, i = function() {
            h.port2.postMessage(0);
          };
        } else "document" in o && "onreadystatechange" in o.document.createElement("script") ? i = function() {
          var g = o.document.createElement("script");
          g.onreadystatechange = function() {
            f(), g.onreadystatechange = null, g.parentNode.removeChild(g), g = null;
          }, o.document.documentElement.appendChild(g);
        } : i = function() {
          setTimeout(f, 0);
        };
        var d, p = [];
        function f() {
          d = !0;
          for (var g, y, b = p.length; b; ) {
            for (y = p, p = [], g = -1; ++g < b; )
              y[g]();
            b = p.length;
          }
          d = !1;
        }
        s.exports = m;
        function m(g) {
          p.push(g) === 1 && !d && i();
        }
      }).call(this, typeof ss < "u" ? ss : typeof self < "u" ? self : typeof window < "u" ? window : {});
    }, {}], 2: [function(t, s, r) {
      var o = t(1);
      function a() {
      }
      var i = {}, l = ["REJECTED"], c = ["FULFILLED"], u = ["PENDING"];
      s.exports = h;
      function h(v) {
        if (typeof v != "function")
          throw new TypeError("resolver must be a function");
        this.state = u, this.queue = [], this.outcome = void 0, v !== a && m(this, v);
      }
      h.prototype.catch = function(v) {
        return this.then(null, v);
      }, h.prototype.then = function(v, $) {
        if (typeof v != "function" && this.state === c || typeof $ != "function" && this.state === l)
          return this;
        var C = new this.constructor(a);
        if (this.state !== u) {
          var S = this.state === c ? v : $;
          p(C, S, this.outcome);
        } else
          this.queue.push(new d(C, v, $));
        return C;
      };
      function d(v, $, C) {
        this.promise = v, typeof $ == "function" && (this.onFulfilled = $, this.callFulfilled = this.otherCallFulfilled), typeof C == "function" && (this.onRejected = C, this.callRejected = this.otherCallRejected);
      }
      d.prototype.callFulfilled = function(v) {
        i.resolve(this.promise, v);
      }, d.prototype.otherCallFulfilled = function(v) {
        p(this.promise, this.onFulfilled, v);
      }, d.prototype.callRejected = function(v) {
        i.reject(this.promise, v);
      }, d.prototype.otherCallRejected = function(v) {
        p(this.promise, this.onRejected, v);
      };
      function p(v, $, C) {
        o(function() {
          var S;
          try {
            S = $(C);
          } catch (E) {
            return i.reject(v, E);
          }
          S === v ? i.reject(v, new TypeError("Cannot resolve promise with itself")) : i.resolve(v, S);
        });
      }
      i.resolve = function(v, $) {
        var C = g(f, $);
        if (C.status === "error")
          return i.reject(v, C.value);
        var S = C.value;
        if (S)
          m(v, S);
        else {
          v.state = c, v.outcome = $;
          for (var E = -1, D = v.queue.length; ++E < D; )
            v.queue[E].callFulfilled($);
        }
        return v;
      }, i.reject = function(v, $) {
        v.state = l, v.outcome = $;
        for (var C = -1, S = v.queue.length; ++C < S; )
          v.queue[C].callRejected($);
        return v;
      };
      function f(v) {
        var $ = v && v.then;
        if (v && (typeof v == "object" || typeof v == "function") && typeof $ == "function")
          return function() {
            $.apply(v, arguments);
          };
      }
      function m(v, $) {
        var C = !1;
        function S(V) {
          C || (C = !0, i.reject(v, V));
        }
        function E(V) {
          C || (C = !0, i.resolve(v, V));
        }
        function D() {
          $(E, S);
        }
        var O = g(D);
        O.status === "error" && S(O.value);
      }
      function g(v, $) {
        var C = {};
        try {
          C.value = v($), C.status = "success";
        } catch (S) {
          C.status = "error", C.value = S;
        }
        return C;
      }
      h.resolve = y;
      function y(v) {
        return v instanceof this ? v : i.resolve(new this(a), v);
      }
      h.reject = b;
      function b(v) {
        var $ = new this(a);
        return i.reject($, v);
      }
      h.all = w;
      function w(v) {
        var $ = this;
        if (Object.prototype.toString.call(v) !== "[object Array]")
          return this.reject(new TypeError("must be an array"));
        var C = v.length, S = !1;
        if (!C)
          return this.resolve([]);
        for (var E = new Array(C), D = 0, O = -1, V = new this(a); ++O < C; )
          W(v[O], O);
        return V;
        function W(U, j) {
          $.resolve(U).then(q, function(Y) {
            S || (S = !0, i.reject(V, Y));
          });
          function q(Y) {
            E[j] = Y, ++D === C && !S && (S = !0, i.resolve(V, E));
          }
        }
      }
      h.race = x;
      function x(v) {
        var $ = this;
        if (Object.prototype.toString.call(v) !== "[object Array]")
          return this.reject(new TypeError("must be an array"));
        var C = v.length, S = !1;
        if (!C)
          return this.resolve([]);
        for (var E = -1, D = new this(a); ++E < C; )
          O(v[E]);
        return D;
        function O(V) {
          $.resolve(V).then(function(W) {
            S || (S = !0, i.resolve(D, W));
          }, function(W) {
            S || (S = !0, i.reject(D, W));
          });
        }
      }
    }, { 1: 1 }], 3: [function(t, s, r) {
      (function(o) {
        typeof o.Promise != "function" && (o.Promise = t(2));
      }).call(this, typeof ss < "u" ? ss : typeof self < "u" ? self : typeof window < "u" ? window : {});
    }, { 2: 2 }], 4: [function(t, s, r) {
      var o = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(T) {
        return typeof T;
      } : function(T) {
        return T && typeof Symbol == "function" && T.constructor === Symbol && T !== Symbol.prototype ? "symbol" : typeof T;
      };
      function a(T, L) {
        if (!(T instanceof L))
          throw new TypeError("Cannot call a class as a function");
      }
      function i() {
        try {
          if (typeof indexedDB < "u")
            return indexedDB;
          if (typeof webkitIndexedDB < "u")
            return webkitIndexedDB;
          if (typeof mozIndexedDB < "u")
            return mozIndexedDB;
          if (typeof OIndexedDB < "u")
            return OIndexedDB;
          if (typeof msIndexedDB < "u")
            return msIndexedDB;
        } catch {
          return;
        }
      }
      var l = i();
      function c() {
        try {
          if (!l)
            return !1;
          var T = typeof openDatabase < "u" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform), L = typeof fetch == "function" && fetch.toString().indexOf("[native code") !== -1;
          return (!T || L) && typeof indexedDB < "u" && // some outdated implementations of IDB that appear on Samsung
          // and HTC Android devices <4.4 are missing IDBKeyRange
          // See: https://github.com/mozilla/localForage/issues/128
          // See: https://github.com/mozilla/localForage/issues/272
          typeof IDBKeyRange < "u";
        } catch {
          return !1;
        }
      }
      function u(T, L) {
        T = T || [], L = L || {};
        try {
          return new Blob(T, L);
        } catch (M) {
          if (M.name !== "TypeError")
            throw M;
          for (var A = typeof BlobBuilder < "u" ? BlobBuilder : typeof MSBlobBuilder < "u" ? MSBlobBuilder : typeof MozBlobBuilder < "u" ? MozBlobBuilder : WebKitBlobBuilder, B = new A(), G = 0; G < T.length; G += 1)
            B.append(T[G]);
          return B.getBlob(L.type);
        }
      }
      typeof Promise > "u" && t(3);
      var h = Promise;
      function d(T, L) {
        L && T.then(function(A) {
          L(null, A);
        }, function(A) {
          L(A);
        });
      }
      function p(T, L, A) {
        typeof L == "function" && T.then(L), typeof A == "function" && T.catch(A);
      }
      function f(T) {
        return typeof T != "string" && (console.warn(T + " used as a key, but it is not a string."), T = String(T)), T;
      }
      function m() {
        if (arguments.length && typeof arguments[arguments.length - 1] == "function")
          return arguments[arguments.length - 1];
      }
      var g = "local-forage-detect-blob-support", y = void 0, b = {}, w = Object.prototype.toString, x = "readonly", v = "readwrite";
      function $(T) {
        for (var L = T.length, A = new ArrayBuffer(L), B = new Uint8Array(A), G = 0; G < L; G++)
          B[G] = T.charCodeAt(G);
        return A;
      }
      function C(T) {
        return new h(function(L) {
          var A = T.transaction(g, v), B = u([""]);
          A.objectStore(g).put(B, "key"), A.onabort = function(G) {
            G.preventDefault(), G.stopPropagation(), L(!1);
          }, A.oncomplete = function() {
            var G = navigator.userAgent.match(/Chrome\/(\d+)/), M = navigator.userAgent.match(/Edge\//);
            L(M || !G || parseInt(G[1], 10) >= 43);
          };
        }).catch(function() {
          return !1;
        });
      }
      function S(T) {
        return typeof y == "boolean" ? h.resolve(y) : C(T).then(function(L) {
          return y = L, y;
        });
      }
      function E(T) {
        var L = b[T.name], A = {};
        A.promise = new h(function(B, G) {
          A.resolve = B, A.reject = G;
        }), L.deferredOperations.push(A), L.dbReady ? L.dbReady = L.dbReady.then(function() {
          return A.promise;
        }) : L.dbReady = A.promise;
      }
      function D(T) {
        var L = b[T.name], A = L.deferredOperations.pop();
        if (A)
          return A.resolve(), A.promise;
      }
      function O(T, L) {
        var A = b[T.name], B = A.deferredOperations.pop();
        if (B)
          return B.reject(L), B.promise;
      }
      function V(T, L) {
        return new h(function(A, B) {
          if (b[T.name] = b[T.name] || ie(), T.db)
            if (L)
              E(T), T.db.close();
            else
              return A(T.db);
          var G = [T.name];
          L && G.push(T.version);
          var M = l.open.apply(l, G);
          L && (M.onupgradeneeded = function(te) {
            var ae = M.result;
            try {
              ae.createObjectStore(T.storeName), te.oldVersion <= 1 && ae.createObjectStore(g);
            } catch (le) {
              if (le.name === "ConstraintError")
                console.warn('The database "' + T.name + '" has been upgraded from version ' + te.oldVersion + " to version " + te.newVersion + ', but the storage "' + T.storeName + '" already exists.');
              else
                throw le;
            }
          }), M.onerror = function(te) {
            te.preventDefault(), B(M.error);
          }, M.onsuccess = function() {
            A(M.result), D(T);
          };
        });
      }
      function W(T) {
        return V(T, !1);
      }
      function U(T) {
        return V(T, !0);
      }
      function j(T, L) {
        if (!T.db)
          return !0;
        var A = !T.db.objectStoreNames.contains(T.storeName), B = T.version < T.db.version, G = T.version > T.db.version;
        if (B && (T.version !== L && console.warn('The database "' + T.name + `" can't be downgraded from version ` + T.db.version + " to version " + T.version + "."), T.version = T.db.version), G || A) {
          if (A) {
            var M = T.db.version + 1;
            M > T.version && (T.version = M);
          }
          return !0;
        }
        return !1;
      }
      function q(T) {
        return new h(function(L, A) {
          var B = new FileReader();
          B.onerror = A, B.onloadend = function(G) {
            var M = btoa(G.target.result || "");
            L({
              __local_forage_encoded_blob: !0,
              data: M,
              type: T.type
            });
          }, B.readAsBinaryString(T);
        });
      }
      function Y(T) {
        var L = $(atob(T.data));
        return u([L], { type: T.type });
      }
      function X(T) {
        return T && T.__local_forage_encoded_blob;
      }
      function Q(T) {
        var L = this, A = L._initReady().then(function() {
          var B = b[L._dbInfo.name];
          if (B && B.dbReady)
            return B.dbReady;
        });
        return p(A, T, T), A;
      }
      function se(T) {
        E(T);
        for (var L = b[T.name], A = L.forages, B = 0; B < A.length; B++) {
          var G = A[B];
          G._dbInfo.db && (G._dbInfo.db.close(), G._dbInfo.db = null);
        }
        return T.db = null, W(T).then(function(M) {
          return T.db = M, j(T) ? U(T) : M;
        }).then(function(M) {
          T.db = L.db = M;
          for (var te = 0; te < A.length; te++)
            A[te]._dbInfo.db = M;
        }).catch(function(M) {
          throw O(T, M), M;
        });
      }
      function ee(T, L, A, B) {
        B === void 0 && (B = 1);
        try {
          var G = T.db.transaction(T.storeName, L);
          A(null, G);
        } catch (M) {
          if (B > 0 && (!T.db || M.name === "InvalidStateError" || M.name === "NotFoundError"))
            return h.resolve().then(function() {
              if (!T.db || M.name === "NotFoundError" && !T.db.objectStoreNames.contains(T.storeName) && T.version <= T.db.version)
                return T.db && (T.version = T.db.version + 1), U(T);
            }).then(function() {
              return se(T).then(function() {
                ee(T, L, A, B - 1);
              });
            }).catch(A);
          A(M);
        }
      }
      function ie() {
        return {
          // Running localForages sharing a database.
          forages: [],
          // Shared database.
          db: null,
          // Database readiness (promise).
          dbReady: null,
          // Deferred operations on the database.
          deferredOperations: []
        };
      }
      function oe(T) {
        var L = this, A = {
          db: null
        };
        if (T)
          for (var B in T)
            A[B] = T[B];
        var G = b[A.name];
        G || (G = ie(), b[A.name] = G), G.forages.push(L), L._initReady || (L._initReady = L.ready, L.ready = Q);
        var M = [];
        function te() {
          return h.resolve();
        }
        for (var ae = 0; ae < G.forages.length; ae++) {
          var le = G.forages[ae];
          le !== L && M.push(le._initReady().catch(te));
        }
        var ue = G.forages.slice(0);
        return h.all(M).then(function() {
          return A.db = G.db, W(A);
        }).then(function(he) {
          return A.db = he, j(A, L._defaultConfig.version) ? U(A) : he;
        }).then(function(he) {
          A.db = G.db = he, L._dbInfo = A;
          for (var Ce = 0; Ce < ue.length; Ce++) {
            var Ve = ue[Ce];
            Ve !== L && (Ve._dbInfo.db = A.db, Ve._dbInfo.version = A.version);
          }
        });
      }
      function de(T, L) {
        var A = this;
        T = f(T);
        var B = new h(function(G, M) {
          A.ready().then(function() {
            ee(A._dbInfo, x, function(te, ae) {
              if (te)
                return M(te);
              try {
                var le = ae.objectStore(A._dbInfo.storeName), ue = le.get(T);
                ue.onsuccess = function() {
                  var he = ue.result;
                  he === void 0 && (he = null), X(he) && (he = Y(he)), G(he);
                }, ue.onerror = function() {
                  M(ue.error);
                };
              } catch (he) {
                M(he);
              }
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function ce(T, L) {
        var A = this, B = new h(function(G, M) {
          A.ready().then(function() {
            ee(A._dbInfo, x, function(te, ae) {
              if (te)
                return M(te);
              try {
                var le = ae.objectStore(A._dbInfo.storeName), ue = le.openCursor(), he = 1;
                ue.onsuccess = function() {
                  var Ce = ue.result;
                  if (Ce) {
                    var Ve = Ce.value;
                    X(Ve) && (Ve = Y(Ve));
                    var et = T(Ve, Ce.key, he++);
                    et !== void 0 ? G(et) : Ce.continue();
                  } else
                    G();
                }, ue.onerror = function() {
                  M(ue.error);
                };
              } catch (Ce) {
                M(Ce);
              }
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function ye(T, L, A) {
        var B = this;
        T = f(T);
        var G = new h(function(M, te) {
          var ae;
          B.ready().then(function() {
            return ae = B._dbInfo, w.call(L) === "[object Blob]" ? S(ae.db).then(function(le) {
              return le ? L : q(L);
            }) : L;
          }).then(function(le) {
            ee(B._dbInfo, v, function(ue, he) {
              if (ue)
                return te(ue);
              try {
                var Ce = he.objectStore(B._dbInfo.storeName);
                le === null && (le = void 0);
                var Ve = Ce.put(le, T);
                he.oncomplete = function() {
                  le === void 0 && (le = null), M(le);
                }, he.onabort = he.onerror = function() {
                  var et = Ve.error ? Ve.error : Ve.transaction.error;
                  te(et);
                };
              } catch (et) {
                te(et);
              }
            });
          }).catch(te);
        });
        return d(G, A), G;
      }
      function we(T, L) {
        var A = this;
        T = f(T);
        var B = new h(function(G, M) {
          A.ready().then(function() {
            ee(A._dbInfo, v, function(te, ae) {
              if (te)
                return M(te);
              try {
                var le = ae.objectStore(A._dbInfo.storeName), ue = le.delete(T);
                ae.oncomplete = function() {
                  G();
                }, ae.onerror = function() {
                  M(ue.error);
                }, ae.onabort = function() {
                  var he = ue.error ? ue.error : ue.transaction.error;
                  M(he);
                };
              } catch (he) {
                M(he);
              }
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function Se(T) {
        var L = this, A = new h(function(B, G) {
          L.ready().then(function() {
            ee(L._dbInfo, v, function(M, te) {
              if (M)
                return G(M);
              try {
                var ae = te.objectStore(L._dbInfo.storeName), le = ae.clear();
                te.oncomplete = function() {
                  B();
                }, te.onabort = te.onerror = function() {
                  var ue = le.error ? le.error : le.transaction.error;
                  G(ue);
                };
              } catch (ue) {
                G(ue);
              }
            });
          }).catch(G);
        });
        return d(A, T), A;
      }
      function Ne(T) {
        var L = this, A = new h(function(B, G) {
          L.ready().then(function() {
            ee(L._dbInfo, x, function(M, te) {
              if (M)
                return G(M);
              try {
                var ae = te.objectStore(L._dbInfo.storeName), le = ae.count();
                le.onsuccess = function() {
                  B(le.result);
                }, le.onerror = function() {
                  G(le.error);
                };
              } catch (ue) {
                G(ue);
              }
            });
          }).catch(G);
        });
        return d(A, T), A;
      }
      function Ae(T, L) {
        var A = this, B = new h(function(G, M) {
          if (T < 0) {
            G(null);
            return;
          }
          A.ready().then(function() {
            ee(A._dbInfo, x, function(te, ae) {
              if (te)
                return M(te);
              try {
                var le = ae.objectStore(A._dbInfo.storeName), ue = !1, he = le.openCursor();
                he.onsuccess = function() {
                  var Ce = he.result;
                  if (!Ce) {
                    G(null);
                    return;
                  }
                  T === 0 || ue ? G(Ce.key) : (ue = !0, Ce.advance(T));
                }, he.onerror = function() {
                  M(he.error);
                };
              } catch (Ce) {
                M(Ce);
              }
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function Oe(T) {
        var L = this, A = new h(function(B, G) {
          L.ready().then(function() {
            ee(L._dbInfo, x, function(M, te) {
              if (M)
                return G(M);
              try {
                var ae = te.objectStore(L._dbInfo.storeName), le = ae.openCursor(), ue = [];
                le.onsuccess = function() {
                  var he = le.result;
                  if (!he) {
                    B(ue);
                    return;
                  }
                  ue.push(he.key), he.continue();
                }, le.onerror = function() {
                  G(le.error);
                };
              } catch (he) {
                G(he);
              }
            });
          }).catch(G);
        });
        return d(A, T), A;
      }
      function Ke(T, L) {
        L = m.apply(this, arguments);
        var A = this.config();
        T = typeof T != "function" && T || {}, T.name || (T.name = T.name || A.name, T.storeName = T.storeName || A.storeName);
        var B = this, G;
        if (!T.name)
          G = h.reject("Invalid arguments");
        else {
          var M = T.name === A.name && B._dbInfo.db, te = M ? h.resolve(B._dbInfo.db) : W(T).then(function(ae) {
            var le = b[T.name], ue = le.forages;
            le.db = ae;
            for (var he = 0; he < ue.length; he++)
              ue[he]._dbInfo.db = ae;
            return ae;
          });
          T.storeName ? G = te.then(function(ae) {
            if (ae.objectStoreNames.contains(T.storeName)) {
              var le = ae.version + 1;
              E(T);
              var ue = b[T.name], he = ue.forages;
              ae.close();
              for (var Ce = 0; Ce < he.length; Ce++) {
                var Ve = he[Ce];
                Ve._dbInfo.db = null, Ve._dbInfo.version = le;
              }
              var et = new h(function(ot, zt) {
                var Et = l.open(T.name, le);
                Et.onerror = function(gn) {
                  var Ra = Et.result;
                  Ra.close(), zt(gn);
                }, Et.onupgradeneeded = function() {
                  var gn = Et.result;
                  gn.deleteObjectStore(T.storeName);
                }, Et.onsuccess = function() {
                  var gn = Et.result;
                  gn.close(), ot(gn);
                };
              });
              return et.then(function(ot) {
                ue.db = ot;
                for (var zt = 0; zt < he.length; zt++) {
                  var Et = he[zt];
                  Et._dbInfo.db = ot, D(Et._dbInfo);
                }
              }).catch(function(ot) {
                throw (O(T, ot) || h.resolve()).catch(function() {
                }), ot;
              });
            }
          }) : G = te.then(function(ae) {
            E(T);
            var le = b[T.name], ue = le.forages;
            ae.close();
            for (var he = 0; he < ue.length; he++) {
              var Ce = ue[he];
              Ce._dbInfo.db = null;
            }
            var Ve = new h(function(et, ot) {
              var zt = l.deleteDatabase(T.name);
              zt.onerror = zt.onblocked = function(Et) {
                var gn = zt.result;
                gn && gn.close(), ot(Et);
              }, zt.onsuccess = function() {
                var Et = zt.result;
                Et && Et.close(), et(Et);
              };
            });
            return Ve.then(function(et) {
              le.db = et;
              for (var ot = 0; ot < ue.length; ot++) {
                var zt = ue[ot];
                D(zt._dbInfo);
              }
            }).catch(function(et) {
              throw (O(T, et) || h.resolve()).catch(function() {
              }), et;
            });
          });
        }
        return d(G, L), G;
      }
      var Xe = {
        _driver: "asyncStorage",
        _initStorage: oe,
        _support: c(),
        iterate: ce,
        getItem: de,
        setItem: ye,
        removeItem: we,
        clear: Se,
        length: Ne,
        key: Ae,
        keys: Oe,
        dropInstance: Ke
      };
      function Qe() {
        return typeof openDatabase == "function";
      }
      var Ue = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", Ye = "~~local_forage_type~", st = /^~~local_forage_type~([^~]+)~/, rt = "__lfsc__:", Mn = rt.length, $t = "arbf", Xn = "blob", an = "si08", _s = "ui08", Sn = "uic8", Yn = "si16", gs = "si32", ys = "ur16", bs = "ui32", dr = "fl32", So = "fl64", No = Mn + $t.length, Fl = Object.prototype.toString;
      function Ur(T) {
        var L = T.length * 0.75, A = T.length, B, G = 0, M, te, ae, le;
        T[T.length - 1] === "=" && (L--, T[T.length - 2] === "=" && L--);
        var ue = new ArrayBuffer(L), he = new Uint8Array(ue);
        for (B = 0; B < A; B += 4)
          M = Ue.indexOf(T[B]), te = Ue.indexOf(T[B + 1]), ae = Ue.indexOf(T[B + 2]), le = Ue.indexOf(T[B + 3]), he[G++] = M << 2 | te >> 4, he[G++] = (te & 15) << 4 | ae >> 2, he[G++] = (ae & 3) << 6 | le & 63;
        return ue;
      }
      function Da(T) {
        var L = new Uint8Array(T), A = "", B;
        for (B = 0; B < L.length; B += 3)
          A += Ue[L[B] >> 2], A += Ue[(L[B] & 3) << 4 | L[B + 1] >> 4], A += Ue[(L[B + 1] & 15) << 2 | L[B + 2] >> 6], A += Ue[L[B + 2] & 63];
        return L.length % 3 === 2 ? A = A.substring(0, A.length - 1) + "=" : L.length % 3 === 1 && (A = A.substring(0, A.length - 2) + "=="), A;
      }
      function zh(T, L) {
        var A = "";
        if (T && (A = Fl.call(T)), T && (A === "[object ArrayBuffer]" || T.buffer && Fl.call(T.buffer) === "[object ArrayBuffer]")) {
          var B, G = rt;
          T instanceof ArrayBuffer ? (B = T, G += $t) : (B = T.buffer, A === "[object Int8Array]" ? G += an : A === "[object Uint8Array]" ? G += _s : A === "[object Uint8ClampedArray]" ? G += Sn : A === "[object Int16Array]" ? G += Yn : A === "[object Uint16Array]" ? G += ys : A === "[object Int32Array]" ? G += gs : A === "[object Uint32Array]" ? G += bs : A === "[object Float32Array]" ? G += dr : A === "[object Float64Array]" ? G += So : L(new Error("Failed to get type for BinaryArray"))), L(G + Da(B));
        } else if (A === "[object Blob]") {
          var M = new FileReader();
          M.onload = function() {
            var te = Ye + T.type + "~" + Da(this.result);
            L(rt + Xn + te);
          }, M.readAsArrayBuffer(T);
        } else
          try {
            L(JSON.stringify(T));
          } catch (te) {
            console.error("Couldn't convert value into a JSON string: ", T), L(null, te);
          }
      }
      function n$(T) {
        if (T.substring(0, Mn) !== rt)
          return JSON.parse(T);
        var L = T.substring(No), A = T.substring(Mn, No), B;
        if (A === Xn && st.test(L)) {
          var G = L.match(st);
          B = G[1], L = L.substring(G[0].length);
        }
        var M = Ur(L);
        switch (A) {
          case $t:
            return M;
          case Xn:
            return u([M], { type: B });
          case an:
            return new Int8Array(M);
          case _s:
            return new Uint8Array(M);
          case Sn:
            return new Uint8ClampedArray(M);
          case Yn:
            return new Int16Array(M);
          case ys:
            return new Uint16Array(M);
          case gs:
            return new Int32Array(M);
          case bs:
            return new Uint32Array(M);
          case dr:
            return new Float32Array(M);
          case So:
            return new Float64Array(M);
          default:
            throw new Error("Unkown type: " + A);
        }
      }
      var Mh = {
        serialize: zh,
        deserialize: n$,
        stringToBuffer: Ur,
        bufferToString: Da
      };
      function Wg(T, L, A, B) {
        T.executeSql("CREATE TABLE IF NOT EXISTS " + L.storeName + " (id INTEGER PRIMARY KEY, key unique, value)", [], A, B);
      }
      function s$(T) {
        var L = this, A = {
          db: null
        };
        if (T)
          for (var B in T)
            A[B] = typeof T[B] != "string" ? T[B].toString() : T[B];
        var G = new h(function(M, te) {
          try {
            A.db = openDatabase(A.name, String(A.version), A.description, A.size);
          } catch (ae) {
            return te(ae);
          }
          A.db.transaction(function(ae) {
            Wg(ae, A, function() {
              L._dbInfo = A, M();
            }, function(le, ue) {
              te(ue);
            });
          }, te);
        });
        return A.serializer = Mh, G;
      }
      function pr(T, L, A, B, G, M) {
        T.executeSql(A, B, G, function(te, ae) {
          ae.code === ae.SYNTAX_ERR ? te.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?", [L.storeName], function(le, ue) {
            ue.rows.length ? M(le, ae) : Wg(le, L, function() {
              le.executeSql(A, B, G, M);
            }, M);
          }, M) : M(te, ae);
        }, M);
      }
      function r$(T, L) {
        var A = this;
        T = f(T);
        var B = new h(function(G, M) {
          A.ready().then(function() {
            var te = A._dbInfo;
            te.db.transaction(function(ae) {
              pr(ae, te, "SELECT * FROM " + te.storeName + " WHERE key = ? LIMIT 1", [T], function(le, ue) {
                var he = ue.rows.length ? ue.rows.item(0).value : null;
                he && (he = te.serializer.deserialize(he)), G(he);
              }, function(le, ue) {
                M(ue);
              });
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function o$(T, L) {
        var A = this, B = new h(function(G, M) {
          A.ready().then(function() {
            var te = A._dbInfo;
            te.db.transaction(function(ae) {
              pr(ae, te, "SELECT * FROM " + te.storeName, [], function(le, ue) {
                for (var he = ue.rows, Ce = he.length, Ve = 0; Ve < Ce; Ve++) {
                  var et = he.item(Ve), ot = et.value;
                  if (ot && (ot = te.serializer.deserialize(ot)), ot = T(ot, et.key, Ve + 1), ot !== void 0) {
                    G(ot);
                    return;
                  }
                }
                G();
              }, function(le, ue) {
                M(ue);
              });
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function Ug(T, L, A, B) {
        var G = this;
        T = f(T);
        var M = new h(function(te, ae) {
          G.ready().then(function() {
            L === void 0 && (L = null);
            var le = L, ue = G._dbInfo;
            ue.serializer.serialize(L, function(he, Ce) {
              Ce ? ae(Ce) : ue.db.transaction(function(Ve) {
                pr(Ve, ue, "INSERT OR REPLACE INTO " + ue.storeName + " (key, value) VALUES (?, ?)", [T, he], function() {
                  te(le);
                }, function(et, ot) {
                  ae(ot);
                });
              }, function(Ve) {
                if (Ve.code === Ve.QUOTA_ERR) {
                  if (B > 0) {
                    te(Ug.apply(G, [T, le, A, B - 1]));
                    return;
                  }
                  ae(Ve);
                }
              });
            });
          }).catch(ae);
        });
        return d(M, A), M;
      }
      function a$(T, L, A) {
        return Ug.apply(this, [T, L, A, 1]);
      }
      function i$(T, L) {
        var A = this;
        T = f(T);
        var B = new h(function(G, M) {
          A.ready().then(function() {
            var te = A._dbInfo;
            te.db.transaction(function(ae) {
              pr(ae, te, "DELETE FROM " + te.storeName + " WHERE key = ?", [T], function() {
                G();
              }, function(le, ue) {
                M(ue);
              });
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function l$(T) {
        var L = this, A = new h(function(B, G) {
          L.ready().then(function() {
            var M = L._dbInfo;
            M.db.transaction(function(te) {
              pr(te, M, "DELETE FROM " + M.storeName, [], function() {
                B();
              }, function(ae, le) {
                G(le);
              });
            });
          }).catch(G);
        });
        return d(A, T), A;
      }
      function c$(T) {
        var L = this, A = new h(function(B, G) {
          L.ready().then(function() {
            var M = L._dbInfo;
            M.db.transaction(function(te) {
              pr(te, M, "SELECT COUNT(key) as c FROM " + M.storeName, [], function(ae, le) {
                var ue = le.rows.item(0).c;
                B(ue);
              }, function(ae, le) {
                G(le);
              });
            });
          }).catch(G);
        });
        return d(A, T), A;
      }
      function u$(T, L) {
        var A = this, B = new h(function(G, M) {
          A.ready().then(function() {
            var te = A._dbInfo;
            te.db.transaction(function(ae) {
              pr(ae, te, "SELECT key FROM " + te.storeName + " WHERE id = ? LIMIT 1", [T + 1], function(le, ue) {
                var he = ue.rows.length ? ue.rows.item(0).key : null;
                G(he);
              }, function(le, ue) {
                M(ue);
              });
            });
          }).catch(M);
        });
        return d(B, L), B;
      }
      function h$(T) {
        var L = this, A = new h(function(B, G) {
          L.ready().then(function() {
            var M = L._dbInfo;
            M.db.transaction(function(te) {
              pr(te, M, "SELECT key FROM " + M.storeName, [], function(ae, le) {
                for (var ue = [], he = 0; he < le.rows.length; he++)
                  ue.push(le.rows.item(he).key);
                B(ue);
              }, function(ae, le) {
                G(le);
              });
            });
          }).catch(G);
        });
        return d(A, T), A;
      }
      function d$(T) {
        return new h(function(L, A) {
          T.transaction(function(B) {
            B.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function(G, M) {
              for (var te = [], ae = 0; ae < M.rows.length; ae++)
                te.push(M.rows.item(ae).name);
              L({
                db: T,
                storeNames: te
              });
            }, function(G, M) {
              A(M);
            });
          }, function(B) {
            A(B);
          });
        });
      }
      function p$(T, L) {
        L = m.apply(this, arguments);
        var A = this.config();
        T = typeof T != "function" && T || {}, T.name || (T.name = T.name || A.name, T.storeName = T.storeName || A.storeName);
        var B = this, G;
        return T.name ? G = new h(function(M) {
          var te;
          T.name === A.name ? te = B._dbInfo.db : te = openDatabase(T.name, "", "", 0), T.storeName ? M({
            db: te,
            storeNames: [T.storeName]
          }) : M(d$(te));
        }).then(function(M) {
          return new h(function(te, ae) {
            M.db.transaction(function(le) {
              function ue(et) {
                return new h(function(ot, zt) {
                  le.executeSql("DROP TABLE IF EXISTS " + et, [], function() {
                    ot();
                  }, function(Et, gn) {
                    zt(gn);
                  });
                });
              }
              for (var he = [], Ce = 0, Ve = M.storeNames.length; Ce < Ve; Ce++)
                he.push(ue(M.storeNames[Ce]));
              h.all(he).then(function() {
                te();
              }).catch(function(et) {
                ae(et);
              });
            }, function(le) {
              ae(le);
            });
          });
        }) : G = h.reject("Invalid arguments"), d(G, L), G;
      }
      var f$ = {
        _driver: "webSQLStorage",
        _initStorage: s$,
        _support: Qe(),
        iterate: o$,
        getItem: r$,
        setItem: a$,
        removeItem: i$,
        clear: l$,
        length: c$,
        key: u$,
        keys: h$,
        dropInstance: p$
      };
      function m$() {
        try {
          return typeof localStorage < "u" && "setItem" in localStorage && // in IE8 typeof localStorage.setItem === 'object'
          !!localStorage.setItem;
        } catch {
          return !1;
        }
      }
      function Gg(T, L) {
        var A = T.name + "/";
        return T.storeName !== L.storeName && (A += T.storeName + "/"), A;
      }
      function g$() {
        var T = "_localforage_support_test";
        try {
          return localStorage.setItem(T, !0), localStorage.removeItem(T), !1;
        } catch {
          return !0;
        }
      }
      function y$() {
        return !g$() || localStorage.length > 0;
      }
      function b$(T) {
        var L = this, A = {};
        if (T)
          for (var B in T)
            A[B] = T[B];
        return A.keyPrefix = Gg(T, L._defaultConfig), y$() ? (L._dbInfo = A, A.serializer = Mh, h.resolve()) : h.reject();
      }
      function x$(T) {
        var L = this, A = L.ready().then(function() {
          for (var B = L._dbInfo.keyPrefix, G = localStorage.length - 1; G >= 0; G--) {
            var M = localStorage.key(G);
            M.indexOf(B) === 0 && localStorage.removeItem(M);
          }
        });
        return d(A, T), A;
      }
      function w$(T, L) {
        var A = this;
        T = f(T);
        var B = A.ready().then(function() {
          var G = A._dbInfo, M = localStorage.getItem(G.keyPrefix + T);
          return M && (M = G.serializer.deserialize(M)), M;
        });
        return d(B, L), B;
      }
      function v$(T, L) {
        var A = this, B = A.ready().then(function() {
          for (var G = A._dbInfo, M = G.keyPrefix, te = M.length, ae = localStorage.length, le = 1, ue = 0; ue < ae; ue++) {
            var he = localStorage.key(ue);
            if (he.indexOf(M) === 0) {
              var Ce = localStorage.getItem(he);
              if (Ce && (Ce = G.serializer.deserialize(Ce)), Ce = T(Ce, he.substring(te), le++), Ce !== void 0)
                return Ce;
            }
          }
        });
        return d(B, L), B;
      }
      function I$(T, L) {
        var A = this, B = A.ready().then(function() {
          var G = A._dbInfo, M;
          try {
            M = localStorage.key(T);
          } catch {
            M = null;
          }
          return M && (M = M.substring(G.keyPrefix.length)), M;
        });
        return d(B, L), B;
      }
      function $$(T) {
        var L = this, A = L.ready().then(function() {
          for (var B = L._dbInfo, G = localStorage.length, M = [], te = 0; te < G; te++) {
            var ae = localStorage.key(te);
            ae.indexOf(B.keyPrefix) === 0 && M.push(ae.substring(B.keyPrefix.length));
          }
          return M;
        });
        return d(A, T), A;
      }
      function C$(T) {
        var L = this, A = L.keys().then(function(B) {
          return B.length;
        });
        return d(A, T), A;
      }
      function S$(T, L) {
        var A = this;
        T = f(T);
        var B = A.ready().then(function() {
          var G = A._dbInfo;
          localStorage.removeItem(G.keyPrefix + T);
        });
        return d(B, L), B;
      }
      function N$(T, L, A) {
        var B = this;
        T = f(T);
        var G = B.ready().then(function() {
          L === void 0 && (L = null);
          var M = L;
          return new h(function(te, ae) {
            var le = B._dbInfo;
            le.serializer.serialize(L, function(ue, he) {
              if (he)
                ae(he);
              else
                try {
                  localStorage.setItem(le.keyPrefix + T, ue), te(M);
                } catch (Ce) {
                  (Ce.name === "QuotaExceededError" || Ce.name === "NS_ERROR_DOM_QUOTA_REACHED") && ae(Ce), ae(Ce);
                }
            });
          });
        });
        return d(G, A), G;
      }
      function k$(T, L) {
        if (L = m.apply(this, arguments), T = typeof T != "function" && T || {}, !T.name) {
          var A = this.config();
          T.name = T.name || A.name, T.storeName = T.storeName || A.storeName;
        }
        var B = this, G;
        return T.name ? G = new h(function(M) {
          T.storeName ? M(Gg(T, B._defaultConfig)) : M(T.name + "/");
        }).then(function(M) {
          for (var te = localStorage.length - 1; te >= 0; te--) {
            var ae = localStorage.key(te);
            ae.indexOf(M) === 0 && localStorage.removeItem(ae);
          }
        }) : G = h.reject("Invalid arguments"), d(G, L), G;
      }
      var T$ = {
        _driver: "localStorageWrapper",
        _initStorage: b$,
        _support: m$(),
        iterate: v$,
        getItem: w$,
        setItem: N$,
        removeItem: S$,
        clear: x$,
        length: C$,
        key: I$,
        keys: $$,
        dropInstance: k$
      }, E$ = function(L, A) {
        return L === A || typeof L == "number" && typeof A == "number" && isNaN(L) && isNaN(A);
      }, D$ = function(L, A) {
        for (var B = L.length, G = 0; G < B; ) {
          if (E$(L[G], A))
            return !0;
          G++;
        }
        return !1;
      }, Hg = Array.isArray || function(T) {
        return Object.prototype.toString.call(T) === "[object Array]";
      }, Aa = {}, jg = {}, ko = {
        INDEXEDDB: Xe,
        WEBSQL: f$,
        LOCALSTORAGE: T$
      }, A$ = [ko.INDEXEDDB._driver, ko.WEBSQL._driver, ko.LOCALSTORAGE._driver], _l = ["dropInstance"], Bh = ["clear", "getItem", "iterate", "key", "keys", "length", "removeItem", "setItem"].concat(_l), R$ = {
        description: "",
        driver: A$.slice(),
        name: "localforage",
        // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
        // we can use without a prompt.
        size: 4980736,
        storeName: "keyvaluepairs",
        version: 1
      };
      function F$(T, L) {
        T[L] = function() {
          var A = arguments;
          return T.ready().then(function() {
            return T[L].apply(T, A);
          });
        };
      }
      function Vh() {
        for (var T = 1; T < arguments.length; T++) {
          var L = arguments[T];
          if (L)
            for (var A in L)
              L.hasOwnProperty(A) && (Hg(L[A]) ? arguments[0][A] = L[A].slice() : arguments[0][A] = L[A]);
        }
        return arguments[0];
      }
      var _$ = function() {
        function T(L) {
          a(this, T);
          for (var A in ko)
            if (ko.hasOwnProperty(A)) {
              var B = ko[A], G = B._driver;
              this[A] = G, Aa[G] || this.defineDriver(B);
            }
          this._defaultConfig = Vh({}, R$), this._config = Vh({}, this._defaultConfig, L), this._driverSet = null, this._initDriver = null, this._ready = !1, this._dbInfo = null, this._wrapLibraryMethodsWithReady(), this.setDriver(this._config.driver).catch(function() {
          });
        }
        return T.prototype.config = function(A) {
          if ((typeof A > "u" ? "undefined" : o(A)) === "object") {
            if (this._ready)
              return new Error("Can't call config() after localforage has been used.");
            for (var B in A) {
              if (B === "storeName" && (A[B] = A[B].replace(/\W/g, "_")), B === "version" && typeof A[B] != "number")
                return new Error("Database version must be a number.");
              this._config[B] = A[B];
            }
            return "driver" in A && A.driver ? this.setDriver(this._config.driver) : !0;
          } else return typeof A == "string" ? this._config[A] : this._config;
        }, T.prototype.defineDriver = function(A, B, G) {
          var M = new h(function(te, ae) {
            try {
              var le = A._driver, ue = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");
              if (!A._driver) {
                ae(ue);
                return;
              }
              for (var he = Bh.concat("_initStorage"), Ce = 0, Ve = he.length; Ce < Ve; Ce++) {
                var et = he[Ce], ot = !D$(_l, et);
                if ((ot || A[et]) && typeof A[et] != "function") {
                  ae(ue);
                  return;
                }
              }
              var zt = function() {
                for (var Ra = function(P$) {
                  return function() {
                    var z$ = new Error("Method " + P$ + " is not implemented by the current driver"), qg = h.reject(z$);
                    return d(qg, arguments[arguments.length - 1]), qg;
                  };
                }, Wh = 0, L$ = _l.length; Wh < L$; Wh++) {
                  var Uh = _l[Wh];
                  A[Uh] || (A[Uh] = Ra(Uh));
                }
              };
              zt();
              var Et = function(Ra) {
                Aa[le] && console.info("Redefining LocalForage driver: " + le), Aa[le] = A, jg[le] = Ra, te();
              };
              "_support" in A ? A._support && typeof A._support == "function" ? A._support().then(Et, ae) : Et(!!A._support) : Et(!0);
            } catch (gn) {
              ae(gn);
            }
          });
          return p(M, B, G), M;
        }, T.prototype.driver = function() {
          return this._driver || null;
        }, T.prototype.getDriver = function(A, B, G) {
          var M = Aa[A] ? h.resolve(Aa[A]) : h.reject(new Error("Driver not found."));
          return p(M, B, G), M;
        }, T.prototype.getSerializer = function(A) {
          var B = h.resolve(Mh);
          return p(B, A), B;
        }, T.prototype.ready = function(A) {
          var B = this, G = B._driverSet.then(function() {
            return B._ready === null && (B._ready = B._initDriver()), B._ready;
          });
          return p(G, A, A), G;
        }, T.prototype.setDriver = function(A, B, G) {
          var M = this;
          Hg(A) || (A = [A]);
          var te = this._getSupportedDrivers(A);
          function ae() {
            M._config.driver = M.driver();
          }
          function le(Ce) {
            return M._extend(Ce), ae(), M._ready = M._initStorage(M._config), M._ready;
          }
          function ue(Ce) {
            return function() {
              var Ve = 0;
              function et() {
                for (; Ve < Ce.length; ) {
                  var ot = Ce[Ve];
                  return Ve++, M._dbInfo = null, M._ready = null, M.getDriver(ot).then(le).catch(et);
                }
                ae();
                var zt = new Error("No available storage method found.");
                return M._driverSet = h.reject(zt), M._driverSet;
              }
              return et();
            };
          }
          var he = this._driverSet !== null ? this._driverSet.catch(function() {
            return h.resolve();
          }) : h.resolve();
          return this._driverSet = he.then(function() {
            var Ce = te[0];
            return M._dbInfo = null, M._ready = null, M.getDriver(Ce).then(function(Ve) {
              M._driver = Ve._driver, ae(), M._wrapLibraryMethodsWithReady(), M._initDriver = ue(te);
            });
          }).catch(function() {
            ae();
            var Ce = new Error("No available storage method found.");
            return M._driverSet = h.reject(Ce), M._driverSet;
          }), p(this._driverSet, B, G), this._driverSet;
        }, T.prototype.supports = function(A) {
          return !!jg[A];
        }, T.prototype._extend = function(A) {
          Vh(this, A);
        }, T.prototype._getSupportedDrivers = function(A) {
          for (var B = [], G = 0, M = A.length; G < M; G++) {
            var te = A[G];
            this.supports(te) && B.push(te);
          }
          return B;
        }, T.prototype._wrapLibraryMethodsWithReady = function() {
          for (var A = 0, B = Bh.length; A < B; A++)
            F$(this, Bh[A]);
        }, T.prototype.createInstance = function(A) {
          return new T(A);
        }, T;
      }(), O$ = new _$();
      s.exports = O$;
    }, { 3: 3 }] }, {}, [4])(4);
  });
})(PI);
var oK = PI.exports;
const si = /* @__PURE__ */ t1(oK);
/**
    * @license
    * Copyright 2021 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */
var gp = function() {
  return (gp = Object.assign || function(n) {
    for (var e, t = 1, s = arguments.length; t < s; t++) for (var r in e = arguments[t]) Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);
    return n;
  }).apply(this, arguments);
};
function nr(n, e, t, s) {
  return new (t || (t = Promise))(function(r, o) {
    function a(c) {
      try {
        l(s.next(c));
      } catch (u) {
        o(u);
      }
    }
    function i(c) {
      try {
        l(s.throw(c));
      } catch (u) {
        o(u);
      }
    }
    function l(c) {
      var u;
      c.done ? r(c.value) : (u = c.value, u instanceof t ? u : new t(function(h) {
        h(u);
      })).then(a, i);
    }
    l((s = s.apply(n, [])).next());
  });
}
function sr(n, e) {
  var t, s, r, o, a = { label: 0, sent: function() {
    if (1 & r[0]) throw r[1];
    return r[1];
  }, trys: [], ops: [] };
  return o = { next: i(0), throw: i(1), return: i(2) }, typeof Symbol == "function" && (o[Symbol.iterator] = function() {
    return this;
  }), o;
  function i(l) {
    return function(c) {
      return function(u) {
        if (t) throw new TypeError("Generator is already executing.");
        for (; a; ) try {
          if (t = 1, s && (r = 2 & u[0] ? s.return : u[0] ? s.throw || ((r = s.return) && r.call(s), 0) : s.next) && !(r = r.call(s, u[1])).done) return r;
          switch (s = 0, r && (u = [2 & u[0], r.value]), u[0]) {
            case 0:
            case 1:
              r = u;
              break;
            case 4:
              return a.label++, { value: u[1], done: !1 };
            case 5:
              a.label++, s = u[1], u = [0];
              continue;
            case 7:
              u = a.ops.pop(), a.trys.pop();
              continue;
            default:
              if (r = a.trys, !((r = r.length > 0 && r[r.length - 1]) || u[0] !== 6 && u[0] !== 2)) {
                a = 0;
                continue;
              }
              if (u[0] === 3 && (!r || u[1] > r[0] && u[1] < r[3])) {
                a.label = u[1];
                break;
              }
              if (u[0] === 6 && a.label < r[1]) {
                a.label = r[1], r = u;
                break;
              }
              if (r && a.label < r[2]) {
                a.label = r[2], a.ops.push(u);
                break;
              }
              r[2] && a.ops.pop(), a.trys.pop();
              continue;
          }
          u = e.call(n, a);
        } catch (h) {
          u = [6, h], s = 0;
        } finally {
          t = r = 0;
        }
        if (5 & u[0]) throw u[1];
        return { value: u[0] ? u[1] : void 0, done: !0 };
      }([l, c]);
    };
  }
}
function Oo(n, e, t, s) {
  return new (t || (t = Promise))(function(r, o) {
    function a(c) {
      try {
        l(s.next(c));
      } catch (u) {
        o(u);
      }
    }
    function i(c) {
      try {
        l(s.throw(c));
      } catch (u) {
        o(u);
      }
    }
    function l(c) {
      var u;
      c.done ? r(c.value) : (u = c.value, u instanceof t ? u : new t(function(h) {
        h(u);
      })).then(a, i);
    }
    l((s = s.apply(n, [])).next());
  });
}
function Lo(n, e) {
  var t, s, r, o, a = { label: 0, sent: function() {
    if (1 & r[0]) throw r[1];
    return r[1];
  }, trys: [], ops: [] };
  return o = { next: i(0), throw: i(1), return: i(2) }, typeof Symbol == "function" && (o[Symbol.iterator] = function() {
    return this;
  }), o;
  function i(l) {
    return function(c) {
      return function(u) {
        if (t) throw new TypeError("Generator is already executing.");
        for (; a; ) try {
          if (t = 1, s && (r = 2 & u[0] ? s.return : u[0] ? s.throw || ((r = s.return) && r.call(s), 0) : s.next) && !(r = r.call(s, u[1])).done) return r;
          switch (s = 0, r && (u = [2 & u[0], r.value]), u[0]) {
            case 0:
            case 1:
              r = u;
              break;
            case 4:
              return a.label++, { value: u[1], done: !1 };
            case 5:
              a.label++, s = u[1], u = [0];
              continue;
            case 7:
              u = a.ops.pop(), a.trys.pop();
              continue;
            default:
              if (!(r = (r = a.trys).length > 0 && r[r.length - 1]) && (u[0] === 6 || u[0] === 2)) {
                a = 0;
                continue;
              }
              if (u[0] === 3 && (!r || u[1] > r[0] && u[1] < r[3])) {
                a.label = u[1];
                break;
              }
              if (u[0] === 6 && a.label < r[1]) {
                a.label = r[1], r = u;
                break;
              }
              if (r && a.label < r[2]) {
                a.label = r[2], a.ops.push(u);
                break;
              }
              r[2] && a.ops.pop(), a.trys.pop();
              continue;
          }
          u = e.call(n, a);
        } catch (h) {
          u = [6, h], s = 0;
        } finally {
          t = r = 0;
        }
        if (5 & u[0]) throw u[1];
        return { value: u[0] ? u[1] : void 0, done: !0 };
      }([l, c]);
    };
  }
}
var zI = function(n) {
  return { startEndTensor: n, startPoint: Ee(n, [0, 0], [-1, 2]), endPoint: Ee(n, [0, 2], [-1, 2]) };
}, aK = { strides: [8, 16], anchors: [2, 6] };
function Dy(n, e) {
  var t, s, r;
  if (n.topLeft instanceof Je && n.bottomRight instanceof Je) {
    var o = H(function() {
      return [ft([Ee(ge(e - 1, n.topLeft), 0, 1), Ee(n.topLeft, 1, 1)]), ft([ge(e - 1, Ee(n.bottomRight, 0, 1)), Ee(n.bottomRight, 1, 1)])];
    });
    t = o[0], s = o[1], n.landmarks != null && (r = H(function() {
      var p = ge(Ct([e - 1, 0]), n.landmarks), f = Ct([1, -1]);
      return F(p, f);
    }));
  } else {
    var a = n.topLeft, i = a[0], l = a[1], c = n.bottomRight, u = c[0], h = c[1];
    t = [e - 1 - i, l], s = [e - 1 - u, h], n.landmarks != null && (r = n.landmarks.map(function(p) {
      return [e - 1 - p[0], p[1]];
    }));
  }
  var d = { topLeft: t, bottomRight: s };
  return r != null && (d.landmarks = r), n.probability != null && (d.probability = n.probability instanceof Je ? n.probability.clone() : n.probability), d;
}
function Ay(n, e) {
  return H(function() {
    var t;
    return t = n.hasOwnProperty("box") ? n.box : n, An(function(s, r) {
      var o = F(s.startPoint, r), a = F(s.endPoint, r), i = Zu([o, a], 1);
      return zI(i);
    }(t, e).startEndTensor);
  });
}
var iK = function() {
  function n(e, t, s, r, o, a) {
    this.blazeFaceModel = e, this.width = t, this.height = s, this.maxFaces = r, this.anchorsData = function(i, l, c) {
      for (var u = [], h = 0; h < c.strides.length; h++) for (var d = c.strides[h], p = Math.floor((l + d - 1) / d), f = Math.floor((i + d - 1) / d), m = c.anchors[h], g = 0; g < p; g++) for (var y = d * (g + 0.5), b = 0; b < f; b++) for (var w = d * (b + 0.5), x = 0; x < m; x++) u.push([w, y]);
      return u;
    }(t, s, aK), this.anchors = er(this.anchorsData), this.inputSizeData = [t, s], this.inputSize = Ct([t, s]), this.iouThreshold = o, this.scoreThreshold = a;
  }
  return n.prototype.getBoundingBoxes = function(e, t, s) {
    return s === void 0 && (s = !0), Oo(this, void 0, void 0, function() {
      var r, o, a, i, l, c, u, h, d, p, f, m, g, y, b = this;
      return Lo(this, function(w) {
        switch (w.label) {
          case 0:
            return r = H(function() {
              var x = $s.resizeBilinear(e, [b.width, b.height]), v = F(ge(be(x, 255), 0.5), 2), $ = b.blazeFaceModel.predict(v), C = An($), S = function(D, O, V) {
                var W = Ee(D, [0, 1], [-1, 2]), U = ne(W, O), j = Ee(D, [0, 3], [-1, 2]), q = be(j, V), Y = be(U, V), X = be(q, 2), Q = ge(Y, X), se = ne(Y, X), ee = F(Q, V), ie = F(se, V);
                return Zu([ee, ie], 1);
              }(C, b.anchors, b.inputSize), E = Ee(C, [0, 0], [-1, 1]);
              return [C, S, An(Cs(E))];
            }), o = r[0], a = r[1], i = r[2], l = console.warn, console.warn = function() {
            }, c = $s.nonMaxSuppression(a, i, this.maxFaces, this.iouThreshold, this.scoreThreshold), console.warn = l, [4, c.array()];
          case 1:
            return u = w.sent(), c.dispose(), h = u.map(function(x) {
              return Ee(a, [x, 0], [1, -1]);
            }), t ? [3, 3] : [4, Promise.all(h.map(function(x) {
              return Oo(b, void 0, void 0, function() {
                var v;
                return Lo(this, function($) {
                  switch ($.label) {
                    case 0:
                      return [4, x.array()];
                    case 1:
                      return v = $.sent(), x.dispose(), [2, v];
                  }
                });
              });
            }))];
          case 2:
            h = w.sent(), w.label = 3;
          case 3:
            for (d = e.shape[1], p = e.shape[2], f = t ? be([p, d], this.inputSize) : [p / this.inputSizeData[0], d / this.inputSizeData[1]], m = [], g = function(x) {
              var v = h[x], $ = H(function() {
                var C = zI(v instanceof Je ? v : er(v));
                if (!s) return C;
                var S, E = u[x];
                return S = t ? Ee(b.anchors, [E, 0], [1, 2]) : b.anchorsData[E], { box: C, landmarks: P(An(Ee(o, [E, 5], [1, -1])), [6, -1]), probability: Ee(i, [E], [1]), anchor: S };
              });
              m.push($);
            }, y = 0; y < h.length; y++) g(y);
            return a.dispose(), i.dispose(), o.dispose(), [2, { boxes: m, scaleFactor: f }];
        }
      });
    });
  }, n.prototype.estimateFaces = function(e, t, s, r) {
    return t === void 0 && (t = !1), s === void 0 && (s = !1), r === void 0 && (r = !0), Oo(this, void 0, void 0, function() {
      var o, a, i, l, c, u, h = this;
      return Lo(this, function(d) {
        switch (d.label) {
          case 0:
            return o = function(p) {
              return p instanceof Je ? [p.shape[0], p.shape[1]] : [p.height, p.width];
            }(e), a = o[1], i = H(function() {
              return e instanceof Je || (e = M1(e)), xn(fe(e, "float32"), 0);
            }), [4, this.getBoundingBoxes(i, t, r)];
          case 1:
            return l = d.sent(), c = l.boxes, u = l.scaleFactor, i.dispose(), t ? [2, c.map(function(p) {
              var f = Ay(p, u), m = { topLeft: Ee(f, [0], [2]), bottomRight: Ee(f, [2], [2]) };
              if (r) {
                var g = p, y = g.landmarks, b = g.probability, w = g.anchor, x = F(ne(y, w), u);
                m.landmarks = x, m.probability = b;
              }
              return s && (m = Dy(m, a)), m;
            })] : [2, Promise.all(c.map(function(p) {
              return Oo(h, void 0, void 0, function() {
                var f, m, g, y, b, w, x, v, $, C, S, E = this;
                return Lo(this, function(D) {
                  switch (D.label) {
                    case 0:
                      return f = Ay(p, u), r ? [3, 2] : [4, f.array()];
                    case 1:
                      return b = D.sent(), m = { topLeft: b.slice(0, 2), bottomRight: b.slice(2) }, [3, 4];
                    case 2:
                      return [4, Promise.all([p.landmarks, f, p.probability].map(function(O) {
                        return Oo(E, void 0, void 0, function() {
                          return Lo(this, function(V) {
                            return [2, O.array()];
                          });
                        });
                      }))];
                    case 3:
                      g = D.sent(), y = g[0], b = g[1], w = g[2], x = p.anchor, $ = (v = u)[0], C = v[1], S = y.map(function(O) {
                        return [(O[0] + x[0]) * $, (O[1] + x[1]) * C];
                      }), m = { topLeft: b.slice(0, 2), bottomRight: b.slice(2), landmarks: S, probability: w }, function(O) {
                        O.startEndTensor.dispose(), O.startPoint.dispose(), O.endPoint.dispose();
                      }(p.box), p.landmarks.dispose(), p.probability.dispose(), D.label = 4;
                    case 4:
                      return f.dispose(), s && (m = Dy(m, a)), [2, m];
                  }
                });
              });
            }))];
        }
      });
    });
  }, n;
}();
function lK(n) {
  var e = n === void 0 ? {} : n, t = e.maxFaces, s = t === void 0 ? 10 : t, r = e.inputWidth, o = r === void 0 ? 128 : r, a = e.inputHeight, i = a === void 0 ? 128 : a, l = e.iouThreshold, c = l === void 0 ? 0.3 : l, u = e.scoreThreshold, h = u === void 0 ? 0.75 : u, d = e.modelUrl;
  return Oo(this, void 0, void 0, function() {
    var p;
    return Lo(this, function(f) {
      switch (f.label) {
        case 0:
          return d == null ? [3, 2] : [4, ra(d)];
        case 1:
          return p = f.sent(), [3, 4];
        case 2:
          return [4, ra("https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1", { fromTFHub: !0 })];
        case 3:
          p = f.sent(), f.label = 4;
        case 4:
          return [2, new iK(p, o, i, s, c, h)];
      }
    });
  });
}
var rr = { silhouette: [10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 397, 365, 379, 378, 400, 377, 152, 148, 176, 149, 150, 136, 172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109], lipsUpperOuter: [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291], lipsLowerOuter: [146, 91, 181, 84, 17, 314, 405, 321, 375, 291], lipsUpperInner: [78, 191, 80, 81, 82, 13, 312, 311, 310, 415, 308], lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308], rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173], rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133], rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190], rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243], rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189], rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244], rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245], rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193], rightEyebrowLower: [35, 124, 46, 53, 52, 65], rightEyeIris: [473, 474, 475, 476, 477], leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398], leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362], leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414], leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463], leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413], leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464], leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465], leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417], leftEyebrowLower: [265, 353, 276, 283, 282, 295], leftEyeIris: [468, 469, 470, 471, 472], midwayBetweenEyes: [168], noseTip: [1], noseBottom: [2], noseRightCorner: [98], noseLeftCorner: [327], rightCheek: [205], leftCheek: [425] };
function zc(n) {
  return [Math.abs(n.endPoint[0] - n.startPoint[0]), Math.abs(n.endPoint[1] - n.startPoint[1])];
}
function Mc(n) {
  return [n.startPoint[0] + (n.endPoint[0] - n.startPoint[0]) / 2, n.startPoint[1] + (n.endPoint[1] - n.startPoint[1]) / 2];
}
function ld(n, e) {
  e === void 0 && (e = 1.5);
  var t = Mc(n), s = zc(n), r = [e * s[0] / 2, e * s[1] / 2];
  return { startPoint: [t[0] - r[0], t[1] - r[1]], endPoint: [t[0] + r[0], t[1] + r[1]], landmarks: n.landmarks };
}
function cd(n) {
  var e = Mc(n), t = zc(n), s = Math.max.apply(Math, t) / 2;
  return { startPoint: [e[0] - s, e[1] - s], endPoint: [e[0] + s, e[1] + s], landmarks: n.landmarks };
}
var cK = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
function uK(n, e) {
  var t, s = Math.PI / 2 - Math.atan2(-(e[1] - n[1]), e[0] - n[0]);
  return (t = s) - 2 * Math.PI * Math.floor((t + Math.PI) / (2 * Math.PI));
}
function Ry(n, e) {
  return [[1, 0, n], [0, 1, e], [0, 0, 1]];
}
function Xr(n, e) {
  for (var t = 0, s = 0; s < n.length; s++) t += n[s] * e[s];
  return t;
}
function hK(n, e) {
  for (var t = [], s = 0; s < n.length; s++) t.push(n[s][e]);
  return t;
}
function Fy(n, e) {
  for (var t = [], s = n.length, r = 0; r < s; r++) {
    t.push([]);
    for (var o = 0; o < s; o++) t[r].push(Xr(n[r], hK(e, o)));
  }
  return t;
}
function _y(n, e) {
  var t = Math.cos(n), s = Math.sin(n), r = [[t, -s, 0], [s, t, 0], [0, 0, 1]], o = Fy(Ry(e[0], e[1]), r);
  return Fy(o, Ry(-e[0], -e[1]));
}
var Oy = [13, rr.midwayBetweenEyes[0]], Ly = [3, 2], ud = rr.leftEyeLower0, hd = [ud[0], ud[ud.length - 1]], dd = rr.rightEyeLower0, pd = [dd[0], dd[dd.length - 1]], Py = [{ key: "EyeUpper0", indices: [9, 10, 11, 12, 13, 14, 15] }, { key: "EyeUpper1", indices: [25, 26, 27, 28, 29, 30, 31] }, { key: "EyeUpper2", indices: [41, 42, 43, 44, 45, 46, 47] }, { key: "EyeLower0", indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] }, { key: "EyeLower1", indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] }, { key: "EyeLower2", indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] }, { key: "EyeLower3", indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] }, { key: "EyebrowUpper", indices: [63, 64, 65, 66, 67, 68, 69, 70] }, { key: "EyebrowLower", indices: [48, 49, 50, 51, 52, 53] }];
function Xl(n, e, t, s) {
  for (var r = 0; r < Py.length; r++) {
    var o = Py[r], a = o.key, i = o.indices, l = rr["" + t + a];
    if (s == null || s.includes(a)) for (var c = 0; c < i.length; c++) {
      var u = i[c];
      n[l[c]] = [e[u][0], e[u][1], (e[u][2] + n[l[c]][2]) / 2];
    }
  }
}
var dK = function() {
  function n(e, t, s, r, o, a, i) {
    this.regionsOfInterest = [], this.runsWithoutFaceDetector = 0, this.boundingBoxDetector = e, this.meshDetector = t, this.irisModel = i, this.meshWidth = s, this.meshHeight = r, this.maxContinuousChecks = o, this.maxFaces = a;
  }
  return n.prototype.transformRawCoords = function(e, t, s, r) {
    var o, a, i, l, c = this, u = zc({ startPoint: t.startPoint, endPoint: t.endPoint }), h = [u[0] / this.meshWidth, u[1] / this.meshHeight], d = e.map(function(b) {
      return [h[0] * (b[0] - c.meshWidth / 2), h[1] * (b[1] - c.meshHeight / 2), b[2]];
    }), p = _y(s, [0, 0]), f = d.map(function(b) {
      return function(w, x) {
        return [Xr(w, x[0]), Xr(w, x[1])];
      }(b, p).concat([b[2]]);
    }), m = (a = [[(o = r)[0][0], o[1][0]], [o[0][1], o[1][1]]], i = [o[0][2], o[1][2]], l = [-Xr(a[0], i), -Xr(a[1], i)], [a[0].concat(l[0]), a[1].concat(l[1]), [0, 0, 1]]), g = Mc({ startPoint: t.startPoint, endPoint: t.endPoint }).concat([1]), y = [Xr(g, m[0]), Xr(g, m[1])];
    return f.map(function(b) {
      return [b[0] + y[0], b[1] + y[1], b[2]];
    });
  }, n.prototype.getLeftToRightEyeDepthDifference = function(e) {
    return e[hd[0]][2] - e[pd[0]][2];
  }, n.prototype.getEyeBox = function(e, t, s, r, o) {
    o === void 0 && (o = !1);
    var a = cd(ld(this.calculateLandmarksBoundingBox([e[s], e[r]]), 2.3)), i = zc(a), l = $s.cropAndResize(t, [[a.startPoint[1] / this.meshHeight, a.startPoint[0] / this.meshWidth, a.endPoint[1] / this.meshHeight, a.endPoint[0] / this.meshWidth]], [0], [64, 64]);
    return o && (l = $s.flipLeftRight(l)), { box: a, boxSize: i, crop: l };
  }, n.prototype.getEyeCoords = function(e, t, s, r) {
    r === void 0 && (r = !1);
    for (var o = [], a = 0; a < 76; a++) {
      var i = e[3 * a], l = e[3 * a + 1], c = e[3 * a + 2];
      o.push([(r ? 1 - i / 64 : i / 64) * s[0] + t.startPoint[0], l / 64 * s[1] + t.startPoint[1], c]);
    }
    return { rawCoords: o, iris: o.slice(71) };
  }, n.prototype.getAdjustedIrisCoords = function(e, t, s) {
    var r = e[rr[s + "EyeUpper0"][3]][2], o = e[rr[s + "EyeLower0"][4]][2], a = (r + o) / 2;
    return t.map(function(i, l) {
      var c = a;
      return l === 2 ? c = r : l === 4 && (c = o), [i[0], i[1], c];
    });
  }, n.prototype.predict = function(e, t) {
    return nr(this, void 0, void 0, function() {
      var s, r, o, a, i = this;
      return sr(this, function(l) {
        switch (l.label) {
          case 0:
            return this.shouldUpdateRegionsOfInterest() ? [4, this.boundingBoxDetector.getBoundingBoxes(e, !1, !0)] : [3, 2];
          case 1:
            return s = l.sent(), r = s.boxes, o = s.scaleFactor, r.length === 0 ? (this.regionsOfInterest = [], [2, null]) : (a = r.map(function(c) {
              var u, h, d = { startPoint: An(c.box.startPoint).arraySync(), endPoint: An(c.box.endPoint).arraySync() }, p = cd(ld((h = o, { startPoint: [(u = d).startPoint[0] * h[0], u.startPoint[1] * h[1]], endPoint: [u.endPoint[0] * h[0], u.endPoint[1] * h[1]] })));
              return gp({}, p, { landmarks: c.landmarks.arraySync() });
            }), r.forEach(function(c) {
              c != null && c.startPoint != null && (c.startEndTensor.dispose(), c.startPoint.dispose(), c.endPoint.dispose());
            }), this.updateRegionsOfInterest(a), this.runsWithoutFaceDetector = 0, [3, 3]);
          case 2:
            this.runsWithoutFaceDetector++, l.label = 3;
          case 3:
            return [2, H(function() {
              return i.regionsOfInterest.map(function(c, u) {
                var h, d = c.landmarks.length >= 468, p = Oy[0], f = Oy[1];
                d === !1 && (p = Ly[0], f = Ly[1]), h = uK(c.landmarks[p], c.landmarks[f]);
                var m = Mc({ startPoint: c.startPoint, endPoint: c.endPoint }), g = [m[0] / e.shape[2], m[1] / e.shape[1]], y = e, b = cK;
                h !== 0 && (y = $s.rotateWithOffset(e, h, 0, g), b = _y(-h, m));
                var w = { startPoint: c.startPoint, endPoint: c.endPoint }, x = be(function(Xe, Qe, Ue) {
                  var Ye = Qe.shape[1], st = Qe.shape[2], rt = [[Xe.startPoint[1] / Ye, Xe.startPoint[0] / st, Xe.endPoint[1] / Ye, Xe.endPoint[0] / st]];
                  return $s.cropAndResize(Qe, rt, [0], Ue, "bilinear", 0);
                }(w, y, [i.meshHeight, i.meshWidth]), 255), v = i.meshDetector.predict(x), $ = v[1], C = v[2], S = P(C, [-1, 3]).arraySync();
                if (t) {
                  var E = i.getEyeBox(S, x, hd[0], hd[1], !0), D = E.box, O = E.boxSize, V = E.crop, W = i.getEyeBox(S, x, pd[0], pd[1]), U = W.box, j = W.boxSize, q = W.crop, Y = i.irisModel.predict(ft([V, q])).dataSync(), X = Y.slice(0, 228), Q = i.getEyeCoords(X, D, O, !0), se = Q.rawCoords, ee = Q.iris, ie = Y.slice(228), oe = i.getEyeCoords(ie, U, j), de = oe.rawCoords, ce = oe.iris, ye = i.getLeftToRightEyeDepthDifference(S);
                  Math.abs(ye) < 30 ? (Xl(S, se, "left"), Xl(S, de, "right")) : ye < 1 ? Xl(S, se, "left", ["EyeUpper0", "EyeLower0"]) : Xl(S, de, "right", ["EyeUpper0", "EyeLower0"]);
                  var we = i.getAdjustedIrisCoords(S, ee, "left"), Se = i.getAdjustedIrisCoords(S, ce, "right");
                  S = S.concat(we).concat(Se);
                }
                var Ne = i.transformRawCoords(S, c, h, b), Ae = er(Ne), Oe = ld(i.calculateLandmarksBoundingBox(Ne)), Ke = cd(Oe);
                return i.regionsOfInterest[u] = gp({}, Ke, { landmarks: Ae.arraySync() }), { coords: er(S, [S.length, 3]), scaledCoords: Ae, box: Oe, flag: An($) };
              });
            })];
        }
      });
    });
  }, n.prototype.updateRegionsOfInterest = function(e) {
    for (var t = 0; t < e.length; t++) {
      var s = e[t], r = this.regionsOfInterest[t], o = 0;
      if (r && r.startPoint) {
        var a = s.startPoint, i = a[0], l = a[1], c = s.endPoint, u = c[0], h = c[1], d = r.startPoint, p = d[0], f = d[1], m = r.endPoint, g = m[0], y = m[1], b = Math.max(i, p), w = Math.max(l, f), x = (Math.min(u, g) - b) * (Math.min(h, y) - w);
        o = x / ((u - i) * (h - l) + (g - p) * (y - l) - x);
      }
      o < 0.25 && (this.regionsOfInterest[t] = s);
    }
    this.regionsOfInterest = this.regionsOfInterest.slice(0, e.length);
  }, n.prototype.clearRegionOfInterest = function(e) {
    this.regionsOfInterest[e] != null && (this.regionsOfInterest = this.regionsOfInterest.slice(0, e).concat(this.regionsOfInterest.slice(e + 1)));
  }, n.prototype.shouldUpdateRegionsOfInterest = function() {
    var e = this.regionsOfInterest.length, t = e === 0;
    return this.maxFaces === 1 || t ? t : e !== this.maxFaces && this.runsWithoutFaceDetector >= this.maxContinuousChecks;
  }, n.prototype.calculateLandmarksBoundingBox = function(e) {
    var t = e.map(function(r) {
      return r[0];
    }), s = e.map(function(r) {
      return r[1];
    });
    return { startPoint: [Math.min.apply(Math, t), Math.min.apply(Math, s)], endPoint: [Math.max.apply(Math, t), Math.max.apply(Math, s)] };
  }, n;
}(), pK = [[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433], [0.499976992607117, 0.719385027885437], [0.499976992607117, 0.737019002437592], [0.499967992305756, 0.781370997428894], [0.499816000461578, 0.562981009483337], [0.473773002624512, 0.573909997940063], [0.104906998574734, 0.254140973091125], [0.365929991006851, 0.409575998783112], [0.338757991790771, 0.41302502155304], [0.311120003461838, 0.409460008144379], [0.274657994508743, 0.389131009578705], [0.393361985683441, 0.403706014156342], [0.345234006643295, 0.344011008739471], [0.370094001293182, 0.346076011657715], [0.319321990013123, 0.347265005111694], [0.297903001308441, 0.353591024875641], [0.24779200553894, 0.410809993743896], [0.396889001131058, 0.842755019664764], [0.280097991228104, 0.375599980354309], [0.106310002505779, 0.399955987930298], [0.2099249958992, 0.391353011131287], [0.355807989835739, 0.534406006336212], [0.471751004457474, 0.65040397644043], [0.474155008792877, 0.680191993713379], [0.439785003662109, 0.657229006290436], [0.414617002010345, 0.66654098033905], [0.450374007225037, 0.680860996246338], [0.428770989179611, 0.682690978050232], [0.374971002340317, 0.727805018424988], [0.486716985702515, 0.547628998756409], [0.485300987958908, 0.527395009994507], [0.257764995098114, 0.314490020275116], [0.401223003864288, 0.455172002315521], [0.429818987846375, 0.548614978790283], [0.421351999044418, 0.533740997314453], [0.276895999908447, 0.532056987285614], [0.483370006084442, 0.499586999416351], [0.33721199631691, 0.282882988452911], [0.296391993761063, 0.293242990970612], [0.169294998049736, 0.193813979625702], [0.447580009698868, 0.302609980106354], [0.392390012741089, 0.353887975215912], [0.354490011930466, 0.696784019470215], [0.067304998636246, 0.730105042457581], [0.442739009857178, 0.572826027870178], [0.457098007202148, 0.584792017936707], [0.381974011659622, 0.694710969924927], [0.392388999462128, 0.694203019142151], [0.277076005935669, 0.271932005882263], [0.422551989555359, 0.563233017921448], [0.385919004678726, 0.281364023685455], [0.383103013038635, 0.255840003490448], [0.331431001424789, 0.119714021682739], [0.229923993349075, 0.232002973556519], [0.364500999450684, 0.189113974571228], [0.229622006416321, 0.299540996551514], [0.173287004232407, 0.278747975826263], [0.472878992557526, 0.666198015213013], [0.446828007698059, 0.668527007102966], [0.422762006521225, 0.673889994621277], [0.445307999849319, 0.580065965652466], [0.388103008270264, 0.693961024284363], [0.403039008378983, 0.706539988517761], [0.403629004955292, 0.693953037261963], [0.460041999816895, 0.557139039039612], [0.431158006191254, 0.692366003990173], [0.452181994915009, 0.692366003990173], [0.475387006998062, 0.692366003990173], [0.465828001499176, 0.779190003871918], [0.472328990697861, 0.736225962638855], [0.473087012767792, 0.717857003211975], [0.473122000694275, 0.704625964164734], [0.473033010959625, 0.695277988910675], [0.427942007780075, 0.695277988910675], [0.426479011774063, 0.703539967536926], [0.423162013292313, 0.711845993995667], [0.4183090031147, 0.720062971115112], [0.390094995498657, 0.639572978019714], [0.013953999616206, 0.560034036636353], [0.499913990497589, 0.58014702796936], [0.413199990987778, 0.69539999961853], [0.409626007080078, 0.701822996139526], [0.468080013990402, 0.601534962654114], [0.422728985548019, 0.585985004901886], [0.463079988956451, 0.593783974647522], [0.37211999297142, 0.47341400384903], [0.334562003612518, 0.496073007583618], [0.411671012639999, 0.546965003013611], [0.242175996303558, 0.14767599105835], [0.290776997804642, 0.201445996761322], [0.327338010072708, 0.256527006626129], [0.399509996175766, 0.748921036720276], [0.441727995872498, 0.261676013469696], [0.429764986038208, 0.187834024429321], [0.412198007106781, 0.108901023864746], [0.288955003023148, 0.398952007293701], [0.218936994671822, 0.435410976409912], [0.41278201341629, 0.398970007896423], [0.257135003805161, 0.355440020561218], [0.427684992551804, 0.437960982322693], [0.448339998722076, 0.536936044692993], [0.178560003638268, 0.45755398273468], [0.247308000922203, 0.457193970680237], [0.286267012357712, 0.467674970626831], [0.332827985286713, 0.460712015628815], [0.368755996227264, 0.447206974029541], [0.398963987827301, 0.432654976844788], [0.476410001516342, 0.405806005001068], [0.189241006970406, 0.523923993110657], [0.228962004184723, 0.348950982093811], [0.490725994110107, 0.562400996685028], [0.404670000076294, 0.485132992267609], [0.019469000399113, 0.401564002037048], [0.426243007183075, 0.420431017875671], [0.396993011236191, 0.548797011375427], [0.266469985246658, 0.376977026462555], [0.439121007919312, 0.51895797252655], [0.032313998788595, 0.644356966018677], [0.419054001569748, 0.387154996395111], [0.462783008813858, 0.505746960639954], [0.238978996872902, 0.779744982719421], [0.198220998048782, 0.831938028335571], [0.107550002634525, 0.540755033493042], [0.183610007166862, 0.740257024765015], [0.134409993886948, 0.333683013916016], [0.385764002799988, 0.883153975009918], [0.490967005491257, 0.579378008842468], [0.382384985685349, 0.508572995662689], [0.174399003386497, 0.397670984268188], [0.318785011768341, 0.39623498916626], [0.343364000320435, 0.400596976280212], [0.396100014448166, 0.710216999053955], [0.187885001301765, 0.588537991046906], [0.430987000465393, 0.944064974784851], [0.318993002176285, 0.898285031318665], [0.266247987747192, 0.869701027870178], [0.500023007392883, 0.190576016902924], [0.499976992607117, 0.954452991485596], [0.366169989109039, 0.398822009563446], [0.393207013607025, 0.39553701877594], [0.410373002290726, 0.391080021858215], [0.194993004202843, 0.342101991176605], [0.388664990663528, 0.362284004688263], [0.365961998701096, 0.355970978736877], [0.343364000320435, 0.355356991291046], [0.318785011768341, 0.35834002494812], [0.301414996385574, 0.363156020641327], [0.058132998645306, 0.319076001644135], [0.301414996385574, 0.387449026107788], [0.499987989664078, 0.618434011936188], [0.415838003158569, 0.624195992946625], [0.445681989192963, 0.566076993942261], [0.465844005346298, 0.620640993118286], [0.49992299079895, 0.351523995399475], [0.288718998432159, 0.819945991039276], [0.335278987884521, 0.852819979190826], [0.440512001514435, 0.902418971061707], [0.128294005990028, 0.791940987110138], [0.408771991729736, 0.373893976211548], [0.455606997013092, 0.451801002025604], [0.499877005815506, 0.908990025520325], [0.375436991453171, 0.924192011356354], [0.11421000212431, 0.615022003650665], [0.448662012815475, 0.695277988910675], [0.4480200111866, 0.704632043838501], [0.447111994028091, 0.715808033943176], [0.444831997156143, 0.730794012546539], [0.430011987686157, 0.766808986663818], [0.406787008047104, 0.685672998428345], [0.400738000869751, 0.681069016456604], [0.392399996519089, 0.677703022956848], [0.367855995893478, 0.663918972015381], [0.247923001646996, 0.601333022117615], [0.452769994735718, 0.420849978923798], [0.43639200925827, 0.359887003898621], [0.416164010763168, 0.368713974952698], [0.413385987281799, 0.692366003990173], [0.228018000721931, 0.683571994304657], [0.468268007040024, 0.352671027183533], [0.411361992359161, 0.804327011108398], [0.499989002943039, 0.469825029373169], [0.479153990745544, 0.442654013633728], [0.499974012374878, 0.439637005329132], [0.432112008333206, 0.493588984012604], [0.499886006116867, 0.866917014122009], [0.49991300702095, 0.821729004383087], [0.456548988819122, 0.819200992584229], [0.344549000263214, 0.745438992977142], [0.37890899181366, 0.574010014533997], [0.374292999505997, 0.780184984207153], [0.319687992334366, 0.570737957954407], [0.357154995203018, 0.604269981384277], [0.295284003019333, 0.621580958366394], [0.447750002145767, 0.862477004528046], [0.410986006259918, 0.508723020553589], [0.31395098567009, 0.775308012962341], [0.354128003120422, 0.812552988529205], [0.324548006057739, 0.703992962837219], [0.189096003770828, 0.646299958229065], [0.279776990413666, 0.71465802192688], [0.1338230073452, 0.682700991630554], [0.336768001317978, 0.644733011722565], [0.429883986711502, 0.466521978378296], [0.455527991056442, 0.548622965812683], [0.437114000320435, 0.558896005153656], [0.467287987470627, 0.529924988746643], [0.414712011814117, 0.335219979286194], [0.37704598903656, 0.322777986526489], [0.344107985496521, 0.320150971412659], [0.312875986099243, 0.32233202457428], [0.283526003360748, 0.333190023899078], [0.241245999932289, 0.382785975933075], [0.102986000478268, 0.468762993812561], [0.267612010240555, 0.424560010433197], [0.297879010438919, 0.433175981044769], [0.333433985710144, 0.433878004550934], [0.366427004337311, 0.426115989685059], [0.396012008190155, 0.416696012020111], [0.420121014118195, 0.41022801399231], [0.007561000064015, 0.480777025222778], [0.432949006557465, 0.569517970085144], [0.458638995885849, 0.479089021682739], [0.473466008901596, 0.545744001865387], [0.476087987422943, 0.563830018043518], [0.468472003936768, 0.555056989192963], [0.433990985155106, 0.582361996173859], [0.483518004417419, 0.562983989715576], [0.482482999563217, 0.57784903049469], [0.42645001411438, 0.389798998832703], [0.438998997211456, 0.39649498462677], [0.450067013502121, 0.400434017181396], [0.289712011814117, 0.368252992630005], [0.276670008897781, 0.363372981548309], [0.517862021923065, 0.471948027610779], [0.710287988185883, 0.380764007568359], [0.526226997375488, 0.573909997940063], [0.895093023777008, 0.254140973091125], [0.634069979190826, 0.409575998783112], [0.661242008209229, 0.41302502155304], [0.688880026340485, 0.409460008144379], [0.725341975688934, 0.389131009578705], [0.606630027294159, 0.40370500087738], [0.654766023159027, 0.344011008739471], [0.629905998706818, 0.346076011657715], [0.680678009986877, 0.347265005111694], [0.702096998691559, 0.353591024875641], [0.75221198797226, 0.410804986953735], [0.602918028831482, 0.842862963676453], [0.719901978969574, 0.375599980354309], [0.893692970275879, 0.399959981441498], [0.790081977844238, 0.391354024410248], [0.643998026847839, 0.534487962722778], [0.528249025344849, 0.65040397644043], [0.525849997997284, 0.680191040039062], [0.560214996337891, 0.657229006290436], [0.585384011268616, 0.66654098033905], [0.549625992774963, 0.680860996246338], [0.57122802734375, 0.682691991329193], [0.624852001667023, 0.72809898853302], [0.513050019741058, 0.547281980514526], [0.51509702205658, 0.527251958847046], [0.742246985435486, 0.314507007598877], [0.598631024360657, 0.454979002475739], [0.570338010787964, 0.548575043678284], [0.578631997108459, 0.533622980117798], [0.723087012767792, 0.532054007053375], [0.516445994377136, 0.499638974666595], [0.662801027297974, 0.282917976379395], [0.70362401008606, 0.293271005153656], [0.830704987049103, 0.193813979625702], [0.552385985851288, 0.302568018436432], [0.607609987258911, 0.353887975215912], [0.645429015159607, 0.696707010269165], [0.932694971561432, 0.730105042457581], [0.557260990142822, 0.572826027870178], [0.542901992797852, 0.584792017936707], [0.6180260181427, 0.694710969924927], [0.607590973377228, 0.694203019142151], [0.722943007946014, 0.271963000297546], [0.577413976192474, 0.563166975975037], [0.614082992076874, 0.281386971473694], [0.616907000541687, 0.255886018276215], [0.668509006500244, 0.119913995265961], [0.770092010498047, 0.232020974159241], [0.635536015033722, 0.189248979091644], [0.77039098739624, 0.299556016921997], [0.826722025871277, 0.278755009174347], [0.527121007442474, 0.666198015213013], [0.553171992301941, 0.668527007102966], [0.577238023281097, 0.673889994621277], [0.554691970348358, 0.580065965652466], [0.611896991729736, 0.693961024284363], [0.59696102142334, 0.706539988517761], [0.596370995044708, 0.693953037261963], [0.539958000183105, 0.557139039039612], [0.568841993808746, 0.692366003990173], [0.547818005084991, 0.692366003990173], [0.52461302280426, 0.692366003990173], [0.534089982509613, 0.779141008853912], [0.527670979499817, 0.736225962638855], [0.526912987232208, 0.717857003211975], [0.526877999305725, 0.704625964164734], [0.526966989040375, 0.695277988910675], [0.572058022022247, 0.695277988910675], [0.573521018028259, 0.703539967536926], [0.57683801651001, 0.711845993995667], [0.581691026687622, 0.720062971115112], [0.609944999217987, 0.639909982681274], [0.986046016216278, 0.560034036636353], [0.5867999792099, 0.69539999961853], [0.590372025966644, 0.701822996139526], [0.531915009021759, 0.601536989212036], [0.577268004417419, 0.585934996604919], [0.536915004253387, 0.593786001205444], [0.627542972564697, 0.473352015018463], [0.665585994720459, 0.495950996875763], [0.588353991508484, 0.546862006187439], [0.757824003696442, 0.14767599105835], [0.709249973297119, 0.201507985591888], [0.672684013843536, 0.256581008434296], [0.600408971309662, 0.74900496006012], [0.55826598405838, 0.261672019958496], [0.570303976535797, 0.187870979309082], [0.588165998458862, 0.109044015407562], [0.711045026779175, 0.398952007293701], [0.781069993972778, 0.435405015945435], [0.587247014045715, 0.398931980133057], [0.742869973182678, 0.355445981025696], [0.572156012058258, 0.437651991844177], [0.55186802148819, 0.536570012569427], [0.821442008018494, 0.457556009292603], [0.752701997756958, 0.457181990146637], [0.71375697851181, 0.467626988887787], [0.66711300611496, 0.460672974586487], [0.631101012229919, 0.447153985500336], [0.6008620262146, 0.432473003864288], [0.523481011390686, 0.405627012252808], [0.810747981071472, 0.523926019668579], [0.771045982837677, 0.348959028720856], [0.509127020835876, 0.562718033790588], [0.595292985439301, 0.485023975372314], [0.980530977249146, 0.401564002037048], [0.573499977588654, 0.420000016689301], [0.602994978427887, 0.548687994480133], [0.733529984951019, 0.376977026462555], [0.560611009597778, 0.519016981124878], [0.967685997486115, 0.644356966018677], [0.580985009670258, 0.387160003185272], [0.537728011608124, 0.505385041236877], [0.760966002941132, 0.779752969741821], [0.801778972148895, 0.831938028335571], [0.892440974712372, 0.54076099395752], [0.816350996494293, 0.740260004997253], [0.865594983100891, 0.333687007427216], [0.614073991775513, 0.883246004581451], [0.508952975273132, 0.579437971115112], [0.617941975593567, 0.508316040039062], [0.825608015060425, 0.397674977779388], [0.681214988231659, 0.39623498916626], [0.656635999679565, 0.400596976280212], [0.603900015354156, 0.710216999053955], [0.81208598613739, 0.588539004325867], [0.56801301240921, 0.944564998149872], [0.681007981300354, 0.898285031318665], [0.733752012252808, 0.869701027870178], [0.633830010890961, 0.398822009563446], [0.606792986392975, 0.39553701877594], [0.589659988880157, 0.391062021255493], [0.805015981197357, 0.342108011245728], [0.611334979534149, 0.362284004688263], [0.634037971496582, 0.355970978736877], [0.656635999679565, 0.355356991291046], [0.681214988231659, 0.35834002494812], [0.698584973812103, 0.363156020641327], [0.941866993904114, 0.319076001644135], [0.698584973812103, 0.387449026107788], [0.584177017211914, 0.624107003211975], [0.554318010807037, 0.566076993942261], [0.534153997898102, 0.62064003944397], [0.711217999458313, 0.819975018501282], [0.664629995822906, 0.852871000766754], [0.559099972248077, 0.902631998062134], [0.871706008911133, 0.791940987110138], [0.591234028339386, 0.373893976211548], [0.544341027736664, 0.451583981513977], [0.624562978744507, 0.924192011356354], [0.88577002286911, 0.615028977394104], [0.551338016986847, 0.695277988910675], [0.551980018615723, 0.704632043838501], [0.552887976169586, 0.715808033943176], [0.555167973041534, 0.730794012546539], [0.569944024085999, 0.767035007476807], [0.593203008174896, 0.685675978660583], [0.599261999130249, 0.681069016456604], [0.607599973678589, 0.677703022956848], [0.631937980651855, 0.663500010967255], [0.752032995223999, 0.601315021514893], [0.547226011753082, 0.420395016670227], [0.563543975353241, 0.359827995300293], [0.583841025829315, 0.368713974952698], [0.586614012718201, 0.692366003990173], [0.771915018558502, 0.683578014373779], [0.531597018241882, 0.352482974529266], [0.588370978832245, 0.804440975189209], [0.52079701423645, 0.442565023899078], [0.567984998226166, 0.493479013442993], [0.543282985687256, 0.819254994392395], [0.655317008495331, 0.745514988899231], [0.621008992195129, 0.574018001556396], [0.625559985637665, 0.78031200170517], [0.680198013782501, 0.570719003677368], [0.64276397228241, 0.604337990283966], [0.704662978649139, 0.621529996395111], [0.552012026309967, 0.862591981887817], [0.589071989059448, 0.508637011051178], [0.685944974422455, 0.775357007980347], [0.645735025405884, 0.812640011310577], [0.675342977046967, 0.703978002071381], [0.810858011245728, 0.646304965019226], [0.72012197971344, 0.714666962623596], [0.866151988506317, 0.682704985141754], [0.663187026977539, 0.644596993923187], [0.570082008838654, 0.466325998306274], [0.544561982154846, 0.548375964164734], [0.562758982181549, 0.558784961700439], [0.531987011432648, 0.530140042304993], [0.585271000862122, 0.335177004337311], [0.622952997684479, 0.32277899980545], [0.655896008014679, 0.320163011550903], [0.687132000923157, 0.322345972061157], [0.716481983661652, 0.333200991153717], [0.758756995201111, 0.382786989212036], [0.897013008594513, 0.468769013881683], [0.732392013072968, 0.424547016620636], [0.70211398601532, 0.433162987232208], [0.66652500629425, 0.433866024017334], [0.633504986763, 0.426087975502014], [0.603875994682312, 0.416586995124817], [0.579657971858978, 0.409945011138916], [0.992439985275269, 0.480777025222778], [0.567192018032074, 0.569419980049133], [0.54136598110199, 0.478899002075195], [0.526564002037048, 0.546118021011353], [0.523913025856018, 0.563830018043518], [0.531529009342194, 0.555056989192963], [0.566035985946655, 0.582329034805298], [0.51631098985672, 0.563053965568542], [0.5174720287323, 0.577877044677734], [0.573594987392426, 0.389806985855103], [0.560697972774506, 0.395331978797913], [0.549755990505219, 0.399751007556915], [0.710287988185883, 0.368252992630005], [0.723330020904541, 0.363372981548309]];
function fK(n) {
  return nr(this, void 0, void 0, function() {
    var e, t, s, r, o, a, i, l, c, u, h, d, p, f, m, g;
    return sr(this, function(y) {
      switch (y.label) {
        case 0:
          return e = n.maxContinuousChecks, t = e === void 0 ? 5 : e, s = n.detectionConfidence, r = s === void 0 ? 0.9 : s, o = n.maxFaces, a = o === void 0 ? 10 : o, i = n.iouThreshold, l = i === void 0 ? 0.3 : i, c = n.scoreThreshold, u = c === void 0 ? 0.75 : c, h = n.shouldLoadIrisModel, d = h === void 0 || h, p = n.modelUrl, f = n.detectorModelUrl, m = n.irisModelUrl, d ? [4, Promise.all([zy(f, a, l, u), My(p), mK(m)])] : [3, 2];
        case 1:
          return g = y.sent(), [3, 4];
        case 2:
          return [4, Promise.all([zy(f, a, l, u), My(p)])];
        case 3:
          g = y.sent(), y.label = 4;
        case 4:
          return [2, new gK(g[0], g[1], t, r, a, d ? g[2] : null)];
      }
    });
  });
}
function zy(n, e, t, s) {
  return nr(this, void 0, void 0, function() {
    return sr(this, function(r) {
      return [2, lK({ modelUrl: n, maxFaces: e, iouThreshold: t, scoreThreshold: s })];
    });
  });
}
function My(n) {
  return nr(this, void 0, void 0, function() {
    return sr(this, function(e) {
      return n != null ? [2, ra(n)] : [2, ra("https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1", { fromTFHub: !0 })];
    });
  });
}
function mK(n) {
  return nr(this, void 0, void 0, function() {
    return sr(this, function(e) {
      return n != null ? [2, ra(n)] : [2, ra("https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2", { fromTFHub: !0 })];
    });
  });
}
function By(n, e) {
  if (n.mesh instanceof Je) {
    var t = H(function() {
      var i = Ct([e - 1, 0, 0]), l = Ct([1, -1, 1]);
      return H(function() {
        return [ft([ge(e - 1, Ee(n.boundingBox.topLeft, 0, 1)), Ee(n.boundingBox.topLeft, 1, 1)]), ft([ge(e - 1, Ee(n.boundingBox.bottomRight, 0, 1)), Ee(n.boundingBox.bottomRight, 1, 1)]), F(ge(i, n.mesh), l), F(ge(i, n.scaledMesh), l)];
      });
    }), s = t[0], r = t[1], o = t[2], a = t[3];
    return Object.assign({}, n, { boundingBox: { topLeft: s, bottomRight: r }, mesh: o, scaledMesh: a });
  }
  return Object.assign({}, n, { boundingBox: { topLeft: [e - 1 - n.boundingBox.topLeft[0], n.boundingBox.topLeft[1]], bottomRight: [e - 1 - n.boundingBox.bottomRight[0], n.boundingBox.bottomRight[1]] }, mesh: n.mesh.map(function(i) {
    var l = i.slice(0);
    return l[0] = e - 1 - i[0], l;
  }), scaledMesh: n.scaledMesh.map(function(i) {
    var l = i.slice(0);
    return l[0] = e - 1 - i[0], l;
  }) });
}
var ri, gK = function() {
  function n(e, t, s, r, o, a) {
    this.kind = "MediaPipeFaceMesh", this.pipeline = new dK(e, t, 192, 192, s, o, a), this.detectionConfidence = r;
  }
  return n.getAnnotations = function() {
    return rr;
  }, n.getUVCoords = function() {
    return pK;
  }, n.prototype.estimateFaces = function(e) {
    return nr(this, void 0, void 0, function() {
      var t, s, r, o, a, i, l, c, u, h, d, p, f = this;
      return sr(this, function(m) {
        switch (m.label) {
          case 0:
            if (t = e.returnTensors, s = t !== void 0 && t, r = e.flipHorizontal, o = r !== void 0 && r, a = e.predictIrises, i = a === void 0 || a, l = e.input, i && this.pipeline.irisModel == null) throw new Error("The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).");
            return c = function(g) {
              return g instanceof Je ? [g.shape[0], g.shape[1]] : [g.height, g.width];
            }(l), u = c[1], h = H(function() {
              return l instanceof Je || (l = M1(l)), xn(fe(l, "float32"), 0);
            }), NS() !== "webgl" ? [3, 2] : (p = K().get("WEBGL_PACK_DEPTHWISECONV"), K().set("WEBGL_PACK_DEPTHWISECONV", !0), [4, this.pipeline.predict(h, i)]);
          case 1:
            return d = m.sent(), K().set("WEBGL_PACK_DEPTHWISECONV", p), [3, 4];
          case 2:
            return [4, this.pipeline.predict(h, i)];
          case 3:
            d = m.sent(), m.label = 4;
          case 4:
            return h.dispose(), d != null && d.length > 0 ? [2, Promise.all(d.map(function(g, y) {
              return nr(f, void 0, void 0, function() {
                var b, w, x, v, $, C, S, E, D, O, V, W, U, j, q = this;
                return sr(this, function(Y) {
                  switch (Y.label) {
                    case 0:
                      return b = g.coords, w = g.scaledCoords, x = g.box, v = g.flag, $ = [v], s || ($ = $.concat([b, w])), [4, Promise.all($.map(function(X) {
                        return nr(q, void 0, void 0, function() {
                          return sr(this, function(Q) {
                            return [2, X.array()];
                          });
                        });
                      }))];
                    case 1:
                      if (C = Y.sent(), S = C[0], v.dispose(), S < this.detectionConfidence && this.pipeline.clearRegionOfInterest(y), s) return E = { kind: "MediaPipePredictionTensors", faceInViewConfidence: S, mesh: b, scaledMesh: w, boundingBox: { topLeft: Ct(x.startPoint), bottomRight: Ct(x.endPoint) } }, o ? [2, By(E, u)] : [2, E];
                      for (j in D = C.slice(1), O = D[0], V = D[1], w.dispose(), b.dispose(), W = { kind: "MediaPipePredictionValues", faceInViewConfidence: S, boundingBox: { topLeft: x.startPoint, bottomRight: x.endPoint }, mesh: O, scaledMesh: V }, o && (W = By(W, u)), U = {}, rr) (i || j.includes("Iris") === !1) && (U[j] = rr[j].map(function(X) {
                        return W.scaledMesh[X];
                      }));
                      return W.annotations = U, [2, W];
                  }
                });
              });
            }))] : [2, []];
        }
      });
    });
  }, n;
}();
function yK(n, e) {
  return n === void 0 && (n = ri.mediapipeFacemesh), e === void 0 && (e = {}), nr(this, void 0, void 0, function() {
    return sr(this, function(t) {
      if (n === ri.mediapipeFacemesh) return [2, fK(e)];
      throw new Error(n + " is not a valid package name.");
    });
  });
}
(function(n) {
  n.mediapipeFacemesh = "mediapipe-facemesh";
})(ri || (ri = {}));
class MI {
  /**
   * Constructor of TFFaceMesh object
   * @constructor
   * */
  constructor() {
    /** @type {Promise<import('@tensorflow-models/face-landmarks-detection').FaceLandmarksDetector>} */
    Re(this, "model");
    /** @type {boolean} */
    Re(this, "predictionReady");
    /**
     * The TFFaceMesh object name
     * @type {string}
     */
    Re(this, "name", "TFFaceMesh");
    /**
     * Global variable for face landmark positions array
     * @type {import('@tensorflow-models/face-landmarks-detection').FaceLandmarksPrediction['scaledMesh'] | null}
     **/
    Re(this, "positionsArray", null);
    /**
     * Isolates the two patches that correspond to the user's eyes
     * @param  {HTMLVideoElement} video - the video element itself
     * @param  {HTMLCanvasElement} imageCanvas - canvas corresponding to the webcam stream
     * @param  {number} width - of imageCanvas
     * @param  {number} height - of imageCanvas
     * @return {Promise<TwoEyes | undefined>} the two eye-patches, first left, then right eye
     */
    Re(this, "getEyePatches", async (e, t, s, r) => {
      if (t.width === 0) return;
      const o = t.getContext("2d");
      if (!o) return;
      const i = await (await this.model).estimateFaces({
        input: e,
        returnTensors: !1,
        flipHorizontal: !1,
        predictIrises: !1
      });
      if (i.length === 0) return;
      this.positionsArray = i[0].scaledMesh;
      const l = i[0];
      if (l.kind === "MediaPipePredictionTensors" || !l.annotations) return;
      const [c, u] = [
        // left
        {
          eyeTopArc: l.annotations.leftEyeUpper0,
          eyeBottomArc: l.annotations.leftEyeLower0
        },
        // right
        {
          eyeTopArc: l.annotations.rightEyeUpper0,
          eyeBottomArc: l.annotations.rightEyeLower0
        }
      ].map(({ eyeTopArc: $, eyeBottomArc: C }) => {
        const S = {
          x: Math.round(Math.min(...$.map((D) => D[0]))),
          y: Math.round(Math.min(...$.map((D) => D[1])))
        }, E = {
          x: Math.round(Math.max(...C.map((D) => D[0]))),
          y: Math.round(Math.max(...C.map((D) => D[1])))
        };
        return {
          origin: S,
          width: E.x - S.x,
          height: E.y - S.y
        };
      }), h = c.origin.x, d = c.origin.y, p = c.width, f = c.height, m = u.origin.x, g = u.origin.y, y = u.width, b = u.height;
      if (p === 0 || y === 0) {
        console.log("an eye patch had zero width");
        return;
      }
      if (f === 0 || b === 0) {
        console.log("an eye patch had zero height");
        return;
      }
      const w = {}, x = o.getImageData(h, d, p, f);
      w.left = {
        patch: x,
        imagex: h,
        imagey: d,
        width: p,
        height: f
      };
      const v = o.getImageData(m, g, y, b);
      return w.right = {
        patch: v,
        imagex: m,
        imagey: g,
        width: y,
        height: b
      }, this.predictionReady = !0, w;
    });
    /**
     * Returns the positions array corresponding to the last call to getEyePatches.
     * Requires that getEyePatches() was called previously, else returns null.
     */
    Re(this, "getPositions", () => this.positionsArray);
    /**
     * Reset the tracker to default values
     */
    Re(this, "reset", () => {
      console.log("Unimplemented; Tracking.js has no obvious reset function");
    });
    /**
     * Draw TF_FaceMesh_Overlay
     * @param {CanvasRenderingContext2D} ctx
     * @param {number[][]} keypoints
     */
    Re(this, "drawFaceOverlay", (e, t) => {
      if (t) {
        e.fillStyle = "#32EEDB", e.strokeStyle = "#32EEDB", e.lineWidth = 0.5;
        for (let s = 0; s < t.length; s++) {
          const r = t[s][0], o = t[s][1];
          e.beginPath(), e.arc(r, o, 1, 0, 2 * Math.PI), e.closePath(), e.fill();
        }
      }
    });
    this.model = yK(
      ri.mediapipeFacemesh,
      { maxFaces: 1 }
    ), this.predictionReady = !1;
  }
}
const De = {
  moveTickSize: 50,
  videoContainerId: "webgazerVideoContainer",
  videoElementId: "webgazerVideoFeed",
  videoElementCanvasId: "webgazerVideoCanvas",
  faceOverlayId: "webgazerFaceOverlay",
  faceFeedbackBoxId: "webgazerFaceFeedbackBox",
  gazeDotId: "webgazerGazeDot",
  videoViewerWidth: 320,
  videoViewerHeight: 240,
  faceFeedbackBoxRatio: 0.66,
  // View options
  showVideo: !0,
  mirrorVideo: !0,
  showFaceOverlay: !0,
  showFaceFeedbackBox: !0,
  showGazeDot: !0,
  /** @type {CamConstraints} */
  camConstraints: { video: { width: { min: 320, ideal: 640, max: 1920 }, height: { min: 240, ideal: 480, max: 1080 }, facingMode: "user" } },
  dataTimestep: 50,
  showVideoPreview: !0,
  applyKalmanFilter: !0,
  saveDataAcrossSessions: !0,
  // Whether or not to store accuracy eigenValues, used by the calibration example file
  storingPoints: !1,
  trackEye: "both"
}, BI = (n, e, t) => {
  if (n.length !== e.length || n[0].length !== e[0].length)
    throw new Error("Matrix dimensions must agree.");
  const s = n.length, r = n[0].length, o = (
    /** @type {number[][]} */
    new Array(s)
  );
  for (let a = 0; a < s; a++) {
    o[a] = new Array(r);
    for (let i = 0; i < r; i++)
      o[a][i] = t(n[a][i], e[a][i]);
  }
  return o;
}, Po = (n) => {
  const e = n.length, t = n[0].length, s = (
    /** @type {number[][]} */
    new Array(t)
  );
  for (let r = 0; r < t; r++) {
    s[r] = new Array(e);
    for (let o = 0; o < e; o++)
      s[r][o] = n[o][r];
  }
  return s;
}, bK = (n, e, t, s) => {
  const r = (
    /** @type {number[][]} */
    new Array(e.length)
  ), o = s - t + 1;
  for (let a = 0, i = e.length; a < i; a++) {
    r[a] = new Array(o);
    for (let l = t; l <= s; l++)
      r[a][l - t] = n[e[a]][l];
  }
  return r;
}, xK = (n, e, t, s, r) => {
  const o = r - s + 1, a = (
    /** @type {number[][]} */
    new Array(t - e + 1)
  );
  for (let i = e; i <= t; i++) {
    const l = i - e;
    a[l] = new Array(o);
    for (let c = s; c <= r; c++)
      a[l][c - s] = n[i][c];
  }
  return a;
}, Nn = (n, e) => {
  e.length !== n[0].length && console.log("Matrix inner dimensions must agree:");
  const t = (
    /** @type {number[][]} */
    new Array(n.length)
  ), s = new Array(n[0].length);
  for (let r = 0; r < e[0].length; r++) {
    for (let o = 0; o < n[0].length; o++)
      s[o] = e[o][r];
    for (let o = 0; o < n.length; o++) {
      r === 0 && (t[o] = new Array(e[0].length));
      const a = n[o];
      let i = 0;
      for (let l = 0; l < n[0].length; l++)
        i += a[l] * s[l];
      t[o][r] = i;
    }
  }
  return t;
}, fd = (n, e) => {
  const t = n.length, s = n[0].length, r = new Array(t);
  for (let o = 0; o < t; o++) {
    r[o] = new Array(s);
    for (let a = 0; a < s; a++)
      r[o][a] = n[o][a] * e;
  }
  return r;
}, md = (n, e) => BI(n, e, (t, s) => t + s), Vy = (n, e) => BI(n, e, (t, s) => t - s), wK = (n) => VI(n, Bc(n.length, n[0].length)), Bc = (n, e = n) => {
  const t = (
    /** @type {number[][]} **/
    new Array(n)
  );
  for (let s = 0; s < n; s++) {
    t[s] = new Array(e);
    for (let r = 0; r < e; r++)
      t[s][r] = s === r ? 1 : 0;
  }
  return t;
}, VI = (n, e) => n.length === n[0].length ? vK(n, e) : IK(n, e), vK = (n, e) => {
  const t = (
    /** @type {number[][]} */
    new Array(n.length)
  );
  for (let u = 0; u < n.length; u++) {
    t[u] = new Array(n[0].length);
    for (let h = 0; h < n[0].length; h++)
      t[u][h] = n[u][h];
  }
  const s = n.length, r = n[0].length, o = (
    /** @type {number[]} **/
    new Array(s)
  );
  for (let u = 0; u < s; u++)
    o[u] = u;
  let a = [];
  const i = (
    /** @type {number[]} **/
    new Array(s)
  );
  for (let u = 0; u < r; u++) {
    for (let d = 0; d < s; d++)
      i[d] = t[d][u];
    for (let d = 0; d < s; d++) {
      a = t[d];
      const p = Math.min(d, u);
      let f = 0;
      for (let m = 0; m < p; m++)
        f += a[m] * i[m];
      a[u] = i[d] -= f;
    }
    let h = u;
    for (let d = u + 1; d < s; d++)
      Math.abs(i[d]) > Math.abs(i[h]) && (h = d);
    if (h !== u) {
      for (let p = 0; p < r; p++) {
        const f = t[h][p];
        t[h][p] = t[u][p], t[u][p] = f;
      }
      const d = o[h];
      o[h] = o[u], o[u] = d;
    }
    if (u < s && t[u][u] !== 0)
      for (let d = u + 1; d < s; d++)
        t[d][u] /= t[u][u];
  }
  e.length !== s && console.log("Matrix row dimensions must agree.");
  for (let u = 0; u < r; u++)
    t[u][u] === 0 && console.log("Matrix is singular.");
  const l = e[0].length, c = bK(e, o, 0, l - 1);
  for (let u = 0; u < r; u++)
    for (let h = u + 1; h < r; h++)
      for (let d = 0; d < l; d++)
        c[h][d] -= c[u][d] * t[h][u];
  for (let u = r - 1; u >= 0; u--) {
    for (let h = 0; h < l; h++)
      c[u][h] /= t[u][u];
    for (let h = 0; h < u; h++)
      for (let d = 0; d < l; d++)
        c[h][d] -= c[u][d] * t[h][u];
  }
  return c;
}, IK = (n, e) => {
  const t = (
    /** @type {number[][]} */
    new Array(n.length)
  );
  for (let c = 0; c < n.length; c++) {
    t[c] = new Array(n[0].length);
    for (let u = 0; u < n[0].length; u++)
      t[c][u] = n[c][u];
  }
  const s = n.length, r = n[0].length, o = (
    /** @type {number[]} **/
    new Array(r)
  );
  let a;
  for (let c = 0; c < r; c++) {
    a = 0;
    for (let u = c; u < s; u++)
      a = Math.hypot(a, t[u][c]);
    if (a !== 0) {
      t[c][c] < 0 && (a = -a);
      for (let u = c; u < s; u++)
        t[u][c] /= a;
      t[c][c] += 1;
      for (let u = c + 1; u < r; u++) {
        let h = 0;
        for (let d = c; d < s; d++)
          h += t[d][c] * t[d][u];
        h = -h / t[c][c];
        for (let d = c; d < s; d++)
          t[d][u] += h * t[d][c];
      }
    }
    o[c] = -a;
  }
  e.length !== s && console.log("Matrix row dimensions must agree.");
  for (let c = 0; c < r; c++)
    o[c] === 0 && console.log("Matrix is rank deficient");
  const i = e[0].length, l = (
    /** @type {number[][]} **/
    new Array(e.length)
  );
  for (let c = 0; c < e.length; c++)
    l[c] = new Array(e[0].length);
  for (let c = 0; c < e.length; c++)
    for (let u = 0; u < e[0].length; u++)
      l[c][u] = e[c][u];
  for (let c = 0; c < r; c++)
    for (let u = 0; u < i; u++) {
      let h = 0;
      for (let d = c; d < s; d++)
        h += t[d][c] * l[d][u];
      h = -h / t[c][c];
      for (let d = c; d < s; d++)
        l[d][u] += h * t[d][c];
    }
  for (let c = r - 1; c >= 0; c--) {
    for (let u = 0; u < i; u++)
      l[c][u] /= o[c];
    for (let u = 0; u < c; u++)
      for (let h = 0; h < i; h++)
        l[u][h] -= l[c][h] * t[u][c];
  }
  return xK(l, 0, r - 1, 0, i - 1);
}, $K = 10, CK = 6;
class Os {
  // operates like an array but 'wraps' data around to keep the array at a fixed windowSize
  /**
   * DataWindow class - Operates like an array, but 'wraps' data around to keep the array at a fixed windowSize
   * @param {number} windowSize - defines the maximum size of the window
   * @param {Array<T>} data - optional data to seed the DataWindow with
  **/
  constructor(e, t = []) {
    /**
     * [push description]
     * @param  {T} entry - item to be inserted. It either grows the DataWindow or replaces the oldest item
     * @return {DataWindow} this
     */
    Re(this, "push", (e) => this.data.length < this.windowSize ? (this.data.push(e), this.length = this.data.length, this) : (this.data[this.index] = e, this.index = (this.index + 1) % this.windowSize, this));
    /**
     * Get the element at the ind position by wrapping around the DataWindow
     * @param  {number} ind index of desired entry
     * @return {T}
     */
    Re(this, "get", (e) => this.data[this.getTrueIndex(e)]);
    /**
     * Gets the true this.data array index given an index for a desired element
     * @param {number} ind - index of desired entry
     * @return {number} index of desired entry in this.data
     */
    Re(this, "getTrueIndex", (e) => this.data.length < this.windowSize ? e : (e + this.index) % this.windowSize);
    /**
     * Append all the contents of data
     * @param {T[]} data - to be inserted
     */
    Re(this, "addAll", (e) => {
      for (let t = 0; t < e.length; t++)
        this.push(e[t]);
    });
    this.windowSize = e, this.index = 0, this.data = t.slice(t.length - e, t.length), this.length = this.data.length;
  }
}
const ha = (n) => {
  const e = (t) => {
    const s = kK(t, $K, CK), r = SK(s.data, s.width, s.height), o = (
      /** @type {number[]} */
      []
    );
    return NK(r, 5, o), o;
  };
  if (De.trackEye === "left")
    return e(n.left);
  if (De.trackEye === "right")
    return e(n.right);
  {
    let t = (
      /** @type {number[]} */
      []
    );
    return t = t.concat(e(n.left), e(n.right)), t;
  }
}, SK = (n, e, t) => {
  const s = new Uint8ClampedArray(n.length >> 2);
  let r = 0, o = 0;
  for (let a = 0; a < t; a++)
    for (let i = 0; i < e; i++) {
      const l = n[o] * 0.299 + n[o + 1] * 0.587 + n[o + 2] * 0.114;
      s[r++] = l, o += 4;
    }
  return s;
}, NK = (n, e, t) => {
  const s = n.length;
  t || (t = Array.from(n));
  const r = (
    /** @type {number[]} */
    Array(256).fill(0)
  );
  for (let i = 0; i < s; i += e)
    ++r[n[i]];
  const o = 255 * e / s;
  let a = 0;
  for (let i = 0; i < 256; ++i) {
    let l = r[i];
    a = l += a, r[i] = l * o;
  }
  for (let i = 0; i < s; ++i)
    t[i] = r[n[i]];
  return t;
}, kK = (n, e, t) => {
  const s = document.createElement("canvas");
  s.width = n.width, s.height = n.height;
  let r = s.getContext("2d");
  if (!r) return n.patch;
  r.putImageData(n.patch, 0, 0);
  const o = document.createElement("canvas");
  return o.width = e, o.height = t, r = s.getContext("2d"), r ? (r.drawImage(s, 0, 0, s.width, s.height, 0, 0, e, t), r.getImageData(0, 0, e, t)) : n.patch;
}, TK = (n) => {
  n.x < 0 && (n.x = 0), n.y < 0 && (n.y = 0);
  const e = Math.max(document.documentElement.clientWidth, window.innerWidth || 0), t = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
  return n.x > e && (n.x = e), n.y > t && (n.y = t), n;
};
class EK {
  /**
   * Kalman Filter constructor
   * Kalman filters work by reducing the amount of noise in a models.
   * https://blog.cordiner.net/2011/05/03/object-tracking-using-a-kalman-filter-matlab/
   * @constructor
   * @param {number[][]} F - transition matrix
   * @param {number[][]} Q - process noise matrix
   * @param {number[][]} H - maps between measurement vector and noise matrix
   * @param {number[][]} R - defines measurement error of the device
   * @param {number[][]} pInitial - the initial state
   * @param {number[][]} xInitial - the initial state of the device
   */
  constructor(e, t, s, r, o, a) {
    /** @type {number[][]} */
    Re(this, "F");
    /** @type {number[][]} */
    Re(this, "Q");
    /** @type {number[][]} */
    Re(this, "H");
    /** @type {number[][]} */
    Re(this, "R");
    /** @type {number[][]} */
    Re(this, "P");
    /** @type {number[][]} */
    Re(this, "X");
    /**
     * Get Kalman next filtered value and update the internal state
     * @param {number[]} z - the new measurement
     * @return {number[]}
     */
    Re(this, "update", (e) => {
      const t = Nn(this.F, this.X), s = md(Nn(Nn(this.F, this.P), Po(this.F)), this.Q), r = Po([e]), o = Vy(r, Nn(this.H, t)), a = md(Nn(Nn(this.H, s), Po(this.H)), this.R), i = Nn(s, Nn(Po(this.H), wK(a)));
      for (let l = 0; l < o.length; l++)
        o[l];
      return this.X = md(t, Nn(i, o)), this.P = Nn(Vy(Bc(i.length), Nn(i, this.H)), s), Po(Nn(this.H, this.X))[0];
    });
    this.F = e, this.Q = s, this.H = t, this.R = r, this.P = o, this.X = a;
  }
}
const Vc = (n, e, t) => {
  const s = e[0].length, r = (
    /** @type {number[]} */
    new Array(s)
  ), o = Po(e);
  let a = [], i = !0;
  const l = [];
  do {
    const c = Nn(o, e);
    for (let h = 0; h < s; h++)
      c[h][h] = c[h][h] + t;
    const u = Nn(o, n);
    for (let h = 0; h < s; h++)
      r[h] = u[h][0];
    try {
      const h = r.length !== 0 ? r.length / r.length : 0;
      r.length * h !== r.length && console.log("Array length must be a multiple of m"), a = VI(c, u);
      for (let d = 0; d < s; d++)
        l[d] = a[d];
      i = !0;
    } catch (h) {
      t *= 10, console.log(h), i = !1;
    }
  } while (!i);
  return l;
}, Yl = 700, La = 10;
class zg {
  /**
   * Constructor of RidgeReg object,
   * this object allow to perform ridge regression
   * @constructor
   */
  constructor() {
    /**
     * The RidgeReg object name
     * @type {string}
     */
    Re(this, "name", "ridge");
    Re(this, "ridgeParameter", Math.pow(10, -5));
    Re(this, "trailTime", 1e3);
    Re(this, "trailDataWindow", this.trailTime / De.moveTickSize);
    /** @type {DataWindow<number[]>} */
    Re(this, "screenXClicksArray", new Os(Yl));
    /** @type {DataWindow<number[]>} */
    Re(this, "screenYClicksArray", new Os(Yl));
    /** @type {DataWindow<number[]>} */
    Re(this, "eyeFeaturesClicks", new Os(Yl));
    // sets to one second worth of cursor trail
    /** @type {DataWindow<number[]>} */
    Re(this, "screenXTrailArray", new Os(La));
    /** @type {DataWindow<number[]>} */
    Re(this, "screenYTrailArray", new Os(La));
    /** @type {DataWindow<number[]>} */
    Re(this, "eyeFeaturesTrail", new Os(La));
    /** @type {DataWindow<number>} */
    Re(this, "trailTimes", new Os(La));
    /** @type {DataWindow<DataSet>} */
    Re(this, "dataClicks", new Os(Yl));
    /** @type {DataWindow<DataSet>} */
    Re(this, "dataTrail", new Os(La));
    /** @type {KalmanFilter} */
    Re(this, "kalman");
    // This is not being used anywhere...?
    // getCurrentFixationIndex = () => {
    //   const recentX = this.screenXTrailArray.get(0)
    //   const recentY = this.screenYTrailArray.get(0)
    //   let i
    //   for (i = this.screenXTrailArray.length - 1; i >= 0; i--) {
    //     const currX = this.screenXTrailArray.get(i)
    //     const currY = this.screenYTrailArray.get(i)
    //     const euclideanDistance = Math.sqrt(Math.pow((currX - recentX), 2) + Math.pow((currY - recentY), 2))
    //     if (euclideanDistance > 72) {
    //       return i + 1
    //     }
    //   }
    //   return i
    // }
    /**
     * Add given data to current data set then,
     * replace current data member with given data
     * @param {DataSet[]} data - The data to set
     */
    Re(this, "setData", (e) => {
      for (let t = 0; t < e.length; t++) {
        const s = new Uint8ClampedArray(e[t].eyes.left.patch.data), r = new Uint8ClampedArray(e[t].eyes.right.patch.data);
        e[t].eyes.left.patch = new ImageData(s, e[t].eyes.left.width, e[t].eyes.left.height), e[t].eyes.right.patch = new ImageData(r, e[t].eyes.right.width, e[t].eyes.right.height), this.addData(e[t]);
      }
    });
    /**
     * Data to be added
     * @param {DataSet} data
     * @returns {void}
     */
    Re(this, "addData", (e) => {
      const { eyes: t, screenPos: s, type: r } = e;
      t && (r === "click" ? (this.screenXClicksArray.push([s[0]]), this.screenYClicksArray.push([s[1]]), this.eyeFeaturesClicks.push(ha(t)), this.dataClicks.push({ eyes: t, screenPos: s, type: r })) : r === "move" && (this.screenXTrailArray.push([s[0]]), this.screenYTrailArray.push([s[1]]), this.eyeFeaturesTrail.push(ha(t)), this.trailTimes.push(performance.now()), this.dataTrail.push({ eyes: t, screenPos: s, type: r })));
    });
    /**
     * Return the data
     * @returns {DataSet[]}
     */
    Re(this, "getData", () => this.dataClicks.data);
    const e = [
      [1, 0, 1, 0],
      [0, 1, 0, 1],
      [0, 0, 1, 0],
      [0, 0, 0, 1]
    ];
    let t = [
      [1 / 4, 0, 1 / 2, 0],
      [0, 1 / 4, 0, 1 / 2],
      [1 / 2, 0, 1, 0],
      [0, 1 / 2, 0, 1]
    ];
    const s = 1 / 10;
    t = fd(t, s);
    const r = [
      [1, 0, 0, 0],
      [0, 1, 0, 0]
    ], a = fd(Bc(2), 47), i = fd(Bc(4), 1e-4), l = [[500], [500], [0], [0]];
    this.kalman = new EK(e, r, t, a, i, l);
  }
}
class WI extends zg {
  constructor() {
    super(...arguments);
    /**
     * Try to predict coordinates from pupil data
     * after apply linear regression on data set
     * @param {import('./facemesh.mjs').TwoEyes | undefined} eyesObj - The current user eyes object
     * @returns {{ x: number; y: number } | undefined}
     */
    Re(this, "predict", (t) => {
      if (!t || this.eyeFeaturesClicks.length === 0) return;
      const s = performance.now() - this.trailTime, r = [], o = [], a = [];
      for (let m = 0; m < this.trailDataWindow; m++)
        this.trailTimes.get(m) > s && (r.push(this.screenXTrailArray.get(m)), o.push(this.screenYTrailArray.get(m)), a.push(this.eyeFeaturesTrail.get(m)));
      const i = this.screenXClicksArray.data.concat(r), l = this.screenYClicksArray.data.concat(o), c = this.eyeFeaturesClicks.data.concat(a), u = Vc(i, c, this.ridgeParameter), h = Vc(l, c, this.ridgeParameter), d = ha(t);
      let p = 0;
      for (let m = 0; m < d.length; m++)
        p += d[m] * u[m];
      let f = 0;
      for (let m = 0; m < d.length; m++)
        f += d[m] * h[m];
      if (p = Math.floor(p), f = Math.floor(f), De.applyKalmanFilter) {
        let m = [p, f];
        return m = this.kalman.update(m), {
          x: m[0],
          y: m[1]
        };
      } else
        return {
          x: p,
          y: f
        };
    });
  }
}
class DK extends zg {
  constructor() {
    super(...arguments);
    /**
     * The RidgeWeightedReg object name
     * @type {string}
     */
    Re(this, "name", "ridgeWeighted");
    /**
     * Try to predict coordinates from pupil data
     * after apply linear regression on data set
     * @param {import('./facemesh.mjs').TwoEyes | undefined} eyesObj - The current user eyes object
     * @returns {import('./worker_scripts/util').Point | undefined}
     */
    Re(this, "predict", (t) => {
      if (!t || this.eyeFeaturesClicks.length === 0) return;
      const s = performance.now() - this.trailTime, r = [], o = [], a = [];
      for (let w = 0; w < this.trailDataWindow; w++)
        this.trailTimes.get(w) > s && (r.push(this.screenXTrailArray.get(w)), o.push(this.screenYTrailArray.get(w)), a.push(this.eyeFeaturesTrail.get(w)));
      const i = this.eyeFeaturesClicks.data.length, l = Array(i), c = Array(i), u = Array(i);
      for (let w = 0; w < i; w++) {
        const x = Math.sqrt(1 / (i - w)), v = this.eyeFeaturesClicks.getTrueIndex(w);
        for (let $ = 0; $ < this.eyeFeaturesClicks.data[v].length; $++) {
          const C = this.eyeFeaturesClicks.data[v][$] * x;
          l[v] !== void 0 ? l[v].push(C) : l[v] = [C];
        }
        c[w] = this.screenXClicksArray.get(w).slice(0, this.screenXClicksArray.get(w).length), u[w] = this.screenYClicksArray.get(w).slice(0, this.screenYClicksArray.get(w).length), c[w][0] = c[w][0] * x, u[w][0] = u[w][0] * x;
      }
      const h = c.concat(r), d = u.concat(o), p = l.concat(a), f = Vc(h, p, this.ridgeParameter), m = Vc(d, p, this.ridgeParameter), g = ha(t);
      let y = 0;
      for (let w = 0; w < g.length; w++)
        y += g[w] * f[w];
      let b = 0;
      for (let w = 0; w < g.length; w++)
        b += g[w] * m[w];
      if (y = Math.floor(y), b = Math.floor(b), De.applyKalmanFilter) {
        let w = [y, b];
        return w = this.kalman.update(w), {
          x: w[0],
          y: w[1]
        };
      } else
        return {
          x: y,
          y: b
        };
    });
  }
}
class AK extends zg {
  /**
   * Constructor of RidgeRegThreaded object,
   * it retrieve data window, and prepare a worker,
   * this object allow to perform threaded ridge regression
   * @constructor
   */
  constructor() {
    super();
    /**
     * The RidgeWeightedReg object name
     * @type {string}
     */
    Re(this, "name", "ridgeThreaded");
    /** @type {Weights} */
    Re(this, "weights", { X: [0], Y: [0] });
    /** @type {Worker} */
    Re(this, "worker");
    /**
     * Data to be added
     * @param {import('./util_regression.mjs').DataSet} data
     * @returns
     */
    Re(this, "addData", (t) => {
      const { eyes: s, screenPos: r, type: o } = t;
      s && (o === "click" && this.dataClicks.push(t), this.worker.postMessage(
        /** @type {import('./ridgeWorker.worker.mjs').EyeData} */
        { eyes: ha(s), screenPos: r, type: o }
      ));
    });
    /**
     * Return the data
     * @returns {import('./util_regression.mjs').DataSet[]}
     */
    Re(this, "getData", () => this.dataClicks.data);
    /**
    * Try to predict coordinates from pupil data
    * after apply linear regression on data set
    * @param {import('./facemesh.mjs').TwoEyes | undefined} eyesObj - The current user eyes object
    * @returns {import('./worker_scripts/util').Point | undefined}
    */
    Re(this, "predict", (t) => {
      if (!t) return;
      const s = this.weights.X, r = this.weights.Y, o = ha(t);
      let a = 0, i = 0;
      for (let l = 0; l < o.length; l++)
        a += o[l] * s[l], i += o[l] * r[l];
      if (a = Math.floor(a), i = Math.floor(i), De.applyKalmanFilter) {
        let l = [a, i];
        return l = this.kalman.update(l), {
          x: l[0],
          y: l[1]
        };
      } else
        return {
          x: a,
          y: i
        };
    });
    this.worker || (this.worker = new Worker("ridgeWorker.worker.mjs", { type: "module" }), this.worker.onerror = (t) => console.log(t.message), this.worker.onmessage = /** @type {(evt: MessageEvent<Weights>) => void} */
    (t) => {
      this.weights.X = t.data.X, this.weights.Y = t.data.Y;
    }, console.log("initialized worker"));
  }
}
let Wc, Dt, Ze, Zt, Bt, nn, Mt, yp;
const UI = new Array(50), GI = new Array(50);
let HI = performance.now(), yn, Zl, Ar = !1;
const jI = () => {
};
let Mg = jI;
const Ph = ["click", "move"];
let Wy = performance.now(), Bg = new MI(), Jt = [new WI()];
const rc = {
  TFFacemesh: function() {
    return new MI();
  }
}, qo = {
  ridge: function() {
    return new WI();
  },
  ridgeWeighted: function() {
    return new DK();
  },
  ridgeThreaded: function() {
    return new AK();
  }
}, qI = "webgazerGlobalData", KI = "webgazerGlobalSettings";
let oc = {}, da = [];
const Uy = {
  data: [],
  settings: {}
}, nX = () => {
  zK(), Jt = [];
}, RK = () => {
  const n = Ze.videoWidth, e = Ze.videoHeight, t = parseInt(Ze.style.width), s = parseInt(Ze.style.height), r = Math.min(n, e), o = Math.max(n, e), a = n === o ? t / n : s / e, i = r * De.faceFeedbackBoxRatio * a, l = (s - i) / 2, c = (t - i) / 2;
  return [l, c, i, i];
};
function FK() {
  if (nn != null && yn) {
    const n = Ze.videoWidth, e = Ze.videoHeight, s = Math.min(n, e) * De.faceFeedbackBoxRatio, r = (e - s) / 2, o = (n - s) / 2, a = o + s, i = r + s, l = yn.left.imagex, c = yn.left.imagey, u = yn.right.imagex, h = yn.right.imagey;
    let d = !1, p = !1;
    l > o && l + yn.left.width < a && u > o && u + yn.right.width < a && (d = !0), c > r && c + yn.left.height < i && h > r && h + yn.right.height < i && (p = !0), d && p ? nn.style.border = "solid green" : nn.style.border = "solid red";
  } else
    nn.style.border = "solid black";
}
function _K(n, e, t) {
  const s = (
    /** @type {HTMLCanvasElement | null} */
    document.getElementById("plotting_canvas")
  );
  if (!s) return;
  const r = s.getContext("2d");
  r && (r.fillStyle = n, r.beginPath(), r.arc(e, t, 5, 0, Math.PI * 2, !0), r.fill());
}
function OK(n, e, t) {
  if (n)
    try {
      return Bg.getEyePatches(Ze, n, e, t);
    } catch (s) {
      console.log("can't get pupil features ", s);
    }
}
function LK(n, e, t) {
  n.width !== e && (n.width = e), n.height !== t && (n.height = t);
  const s = n.getContext("2d");
  s && s.drawImage(Ze, 0, 0, n.width, n.height);
}
async function XI(n) {
  const e = [];
  if (yn = await OK(Zt, Zt.width, Zt.height), Jt.length === 0) {
    console.log("regression not set, call setRegression()");
    return;
  }
  for (const t in Jt)
    e.push(Jt[t].predict(yn));
  if (n !== void 0) {
    const t = e[n];
    return t && {
      x: t.x,
      y: t.y,
      eyeFeatures: yn
    };
  } else
    return e[0] && {
      x: e[0].x,
      y: e[0].y,
      eyeFeatures: yn,
      all: e
    };
}
const Jl = (
  /** @type {DataWindow<PredictionResult>} */
  new Os(4)
);
let Ql = 0;
const Vg = async () => {
  if (!Ar) {
    LK(Zt, Zt.width, Zt.height);
    const n = performance.now() - HI;
    if (De.showFaceOverlay) {
      const e = t$(), t = Bt.getContext("2d");
      if (!t) return;
      t.clearRect(0, 0, Ze.videoWidth, Ze.videoHeight);
      const s = e.getPositions();
      e.drawFaceOverlay(
        t,
        /** @type {import('@tensorflow-models/face-landmarks-detection/dist/mediapipe-facemesh/util').Coords3D} */
        s
      );
    }
    if (De.showFaceFeedbackBox && FK(), Zl = await XI(), Mg(Zl, n), Zl) {
      Jl.push(Zl);
      let e = 0, t = 0;
      const s = Jl.length;
      Jl.data.map((o, a) => Jl.get(a)).forEach((o) => {
        e += o.x, t += o.y;
      });
      const r = TK({ x: e / s, y: t / s });
      De.storingPoints && (_K("blue", r.x, r.y), KK(r.x, r.y, Ql), Ql++, Ql === 50 && (Ql = 0)), De.showGazeDot && (Mt.style.display = "block"), Mt.style.transform = "translate3d(" + r.x + "px," + r.y + "px,0)";
    } else
      Mt.style.display = "none";
    requestAnimationFrame(Vg);
  }
}, YI = (n, e, t = Ph[0]) => {
  if (!Ar) {
    if (Jt.length === 0) {
      console.log("regression not set, call setRegression()");
      return;
    }
    for (const s in Jt)
      yn && Jt[s].addData({ eyes: yn, screenPos: [n, e], type: t });
  }
}, ZI = async (n) => {
  YI(n.clientX, n.clientY, Ph[0]), De.saveDataAcrossSessions && await BK();
}, JI = (n) => {
  if (Ar)
    return;
  const e = performance.now();
  e < Wy + De.moveTickSize || (Wy = e, YI(n.clientX, n.clientY, Ph[1]));
}, PK = () => {
  document.addEventListener("click", ZI, !0), document.addEventListener("mousemove", JI, !0);
}, zK = () => {
  document.removeEventListener("click", ZI, !0), document.removeEventListener("mousemove", JI, !0);
}, MK = async () => {
  oc = await si.getItem(KI), oc = oc || Uy;
  let n = await si.getItem(qI);
  n = n || Uy, da = n;
  for (const e in Jt)
    Jt[e].setData(n);
  console.log("loaded stored data into regression model");
}, BK = async () => {
  const n = Jt[0].getData() || da;
  si.setItem(KI, oc), si.setItem(qI, n);
}, sX = () => {
  si.clear(), Jt = Jt.map((n) => qo[n.name]());
}, Gy = async (n) => {
  const e = "0px", t = "0px";
  Dt = document.createElement("div"), Dt.id = De.videoContainerId, Dt.style.position = "fixed", Dt.style.top = e, Dt.style.left = t, Dt.style.width = De.videoViewerWidth + "px", Dt.style.height = De.videoViewerHeight + "px", Uc(Dt), Ze = document.createElement("video"), Ze.setAttribute("playsinline", ""), Ze.id = De.videoElementId, Ze.srcObject = n, Ze.autoplay = !0, Ze.style.position = "absolute", Ze.style.width = De.videoViewerWidth + "px", Ze.style.height = De.videoViewerHeight + "px", Uc(Ze), Wc = n, Zt = document.createElement("canvas"), Zt.id = De.videoElementCanvasId, Zt.style.display = "none", Bt = document.createElement("canvas"), Bt.id = De.faceOverlayId, Bt.style.display = De.showFaceOverlay ? "block" : "none", Bt.style.position = "absolute", De.mirrorVideo && (Ze.style.setProperty("-moz-transform", "scale(-1, 1)"), Ze.style.setProperty("-webkit-transform", "scale(-1, 1)"), Ze.style.setProperty("-o-transform", "scale(-1, 1)"), Ze.style.setProperty("transform", "scale(-1, 1)"), Ze.style.setProperty("filter", "FlipH"), Bt.style.setProperty("-moz-transform", "scale(-1, 1)"), Bt.style.setProperty("-webkit-transform", "scale(-1, 1)"), Bt.style.setProperty("-o-transform", "scale(-1, 1)"), Bt.style.setProperty("transform", "scale(-1, 1)"), Bt.style.setProperty("filter", "FlipH")), nn = document.createElement("canvas"), nn.id = De.faceFeedbackBoxId, nn.style.display = De.showFaceFeedbackBox ? "block" : "none", nn.style.border = "solid", nn.style.position = "absolute", Mt = document.createElement("div"), Mt.id = De.gazeDotId, Mt.style.display = De.showGazeDot ? "block" : "none", Mt.style.position = "fixed", Mt.style.zIndex = "99999", Mt.style.left = "-5px", Mt.style.top = "-5px", Mt.style.background = "red", Mt.style.borderRadius = "100%", Mt.style.opacity = "0.7", Mt.style.width = "10px", Mt.style.height = "10px", Dt.appendChild(Ze), document.body.appendChild(Dt);
  const s = (
    /** @type {Promise<void>} */
    new Promise((r) => {
      function o(a) {
        QI(Ze.videoWidth, Ze.videoHeight), e$(De.videoViewerWidth, De.videoViewerHeight), Dt.appendChild(Zt), Dt.appendChild(Bt), Dt.appendChild(nn), document.body.appendChild(Mt), a.target.removeEventListener(a.type, o), r();
      }
      Ze.addEventListener("loadeddata", o);
    })
  );
  PK(), Ar = !1, HI = performance.now(), await s, await Vg();
}, VK = () => {
  navigator.mediaDevices === void 0 && Object.assign(navigator.mediaDevices, {}), navigator.mediaDevices.getUserMedia === void 0 && (navigator.mediaDevices.getUserMedia = async function(n) {
    const e = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    return e ? new Promise(function(t, s) {
      e.call(navigator, n, t, s);
    }) : Promise.reject(new Error("Unfortunately, your browser does not support access to the webcam through the getUserMedia API. Try to use the latest version of Google Chrome, Mozilla Firefox, Opera, or Microsoft Edge instead."));
  });
}, rX = (n) => {
  if (window.location.protocol !== "https:" && window.location.hostname !== "localhost" && /** @type {any} */
  window.chrome && alert("WebGazer works only over https. If you are doing local development, you need to run a local server."), De.saveDataAcrossSessions && MK(), n = n || (() => console.log("No stream")), yp) {
    Gy(yp);
    return;
  }
  return VK(), new Promise((e, t) => {
    navigator.mediaDevices.getUserMedia(De.camConstraints).then(Gy).then(() => e(void 0)).catch((s) => {
      n(), t(s);
    });
  });
}, oX = () => Zt ? Zt.width > 0 : !1, WK = () => {
  Ar = !0;
}, UK = async () => {
  Ar && (Ar = !1, await Vg());
}, aX = () => {
  Ar = !0, GK(), Dt.remove(), Mt.remove();
}, GK = () => {
  Wc.getTracks()[0].stop(), Dt.removeChild(Bt), Dt.removeChild(nn);
}, iX = () => (navigator.mediaDevices.getUserMedia || // @ts-ignore
navigator.getUserMedia || // @ts-ignore
navigator.webkitGetUserMedia || // @ts-ignore
navigator.mozGetUserMedia) !== void 0, lX = (n) => {
  De.showVideoPreview = n, HK(n && De.showVideo), jK(n && De.showFaceOverlay), qK(n && De.showFaceFeedbackBox);
}, Uc = (n) => {
  navigator.vendor && navigator.vendor.indexOf("Apple") > -1 || navigator.userAgent && navigator.userAgent.search("Firefox") > -1 ? (n.style.opacity = De.showVideo ? "1" : "0", n.style.display = "block") : n.style.display = De.showVideo ? "block" : "none";
}, HK = (n) => {
  De.showVideo = n, Ze && Uc(Ze), Dt && Uc(Dt);
}, jK = (n) => {
  De.showFaceOverlay = n, Bt && (Bt.style.display = n ? "block" : "none");
}, qK = (n) => {
  De.showFaceFeedbackBox = n, nn && (nn.style.display = n ? "block" : "none");
}, cX = (n) => {
  De.showGazeDot = n, Mt && (Mt.style.display = n ? "block" : "none");
}, uX = (n) => {
  De.saveDataAcrossSessions = n;
}, hX = (n) => {
  De.applyKalmanFilter = n;
}, dX = async (n) => {
  let e, t;
  if (De.camConstraints = n, Wc) {
    WK(), e = Wc.getVideoTracks()[0];
    try {
      await e.applyConstraints(De.camConstraints.video), t = e.getSettings(), QI(t.width || 0, t.height || 0);
    } catch (s) {
      console.log(s);
      return;
    }
    e$(De.videoViewerWidth, De.videoViewerHeight), t$().reset(), await UK();
  }
};
function QI(n, e) {
  Zt && (Zt.width = n, Zt.height = e), Bt && (Bt.width = n, Bt.height = e);
}
const pX = (n) => {
  yp = n;
}, e$ = (n, e) => {
  De.videoViewerWidth = n, De.videoViewerHeight = e, Ze.style.width = n + "px", Ze.style.height = e + "px", Dt.style.width = n + "px", Dt.style.height = e + "px", Bt.style.width = n + "px", Bt.style.height = e + "px";
  const t = RK();
  nn.style.top = t[0] + "px", nn.style.left = t[1] + "px", nn.style.width = t[2] + "px", nn.style.height = t[3] + "px";
}, KK = function(n, e, t) {
  UI[t] = n, GI[t] = e;
}, fX = (n) => {
  if (rc[n] === void 0) {
    console.log("Invalid tracker selection"), console.log("Options are: ");
    for (const e in rc)
      console.log(e);
  } else
    Bg = rc[n]();
}, mX = (n) => {
  if (qo[n] === void 0) {
    console.log("Invalid regression selection"), console.log("Options are: ");
    for (const e in qo)
      console.log(e);
  } else
    da = Jt[0].getData(), Jt = [qo[n]()], Jt[0].setData(da);
}, gX = (n, e) => {
  rc[n] = function() {
    return new e();
  };
}, yX = (n, e) => {
  qo[n] = function() {
    return new e();
  };
}, bX = (n) => {
  const e = qo[n]();
  da = Jt[0].getData(), e.setData(da), Jt.push(e);
}, xX = (n) => {
  Mg = n;
}, wX = () => {
  Mg = jI;
}, vX = (n) => (Zt = n, Zt), t$ = () => Bg, IX = () => Jt, $X = (n) => XI(n), CX = () => [...Ph], SX = () => Zt, NX = function() {
  return [De.videoViewerWidth / Ze.videoWidth, De.videoViewerHeight / Ze.videoHeight];
}, kX = () => [UI, GI];
export {
  bX as addRegression,
  yX as addRegressionModule,
  gX as addTrackerModule,
  hX as applyKalmanFilter,
  rX as begin,
  nX as clearAll,
  sX as clearData,
  wX as clearGazeListener,
  iX as detectCompatibility,
  aX as end,
  $X as getCurrentPrediction,
  CX as getEventTypes,
  IX as getRegression,
  kX as getStoredPoints,
  t$ as getTracker,
  SX as getVideoElementCanvas,
  NX as getVideoPreviewToCameraResolutionRatio,
  Uc as hideVideoElement,
  oX as isReady,
  De as params,
  WK as pause,
  UK as resume,
  uX as saveDataAcrossSessions,
  dX as setCameraConstraints,
  xX as setGazeListener,
  mX as setRegression,
  pX as setStaticVideo,
  fX as setTracker,
  vX as setVideoElementCanvas,
  e$ as setVideoViewerSize,
  qK as showFaceFeedbackBox,
  jK as showFaceOverlay,
  cX as showPredictionPoints,
  HK as showVideo,
  lX as showVideoPreview,
  GK as stopVideo,
  KK as storePoints
};
//# sourceMappingURL=webgazer.js.map
